{"bIdx":35059,"bType":"axiom","type":"","name":"df-sat","params":"setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9, setvar s10","body":["|- wceq(csat, cmpo(s0, s1, universe, universe, cres(crdg(cmpt(s2, universe, cun(cv(s2), copab(s3, s4, wrex(s5, cv(s2), wo(wrex(s6, cv(s2), wa(wceq(cv(s3), co(cfv(c1st, cv(s5)), cgna, cfv(c1st, cv(s6)))), wceq(cv(s4), cdif(co(cv(s0), cmap, com), cin(cfv(c2nd, cv(s5)), cfv(c2nd, cv(s6))))))), wrex(s7, com, wa(wceq(cv(s3), cgol(cv(s7), cfv(c1st, cv(s5)))), wceq(cv(s4), crab(s8, co(cv(s0), cmap, com), wral(s9, cv(s0), wcel(cun(csn(cop(cv(s7), cv(s9))), cres(cv(s8), cdif(com, csn(cv(s7))))), cfv(c2nd, cv(s5))))))))))))), copab(s3, s4, wrex(s7, com, wrex(s10, com, wa(wceq(cv(s3), co(cv(s7), cgoe, cv(s10))), wceq(cv(s4), crab(s8, co(cv(s0), cmap, com), wbr(cfv(cv(s8), cv(s7)), cv(s1), cfv(cv(s8), cv(s10)))))))))), csuc(com))))","-| diffss(s1, s8)","-| diffss(s2, s8)","-| diffss(s7, s8)","-| diffss(s10, s8)","-| diffss(s0, s8)","-| diffss(s5, s8)","-| diffss(s6, s8)","-| diffss(s3, s8)","-| diffss(s4, s8)","-| diffss(s8, s9)","-| diffss(s1, s2)","-| diffss(s1, s7)","-| diffss(s1, s10)","-| diffss(s0, s1)","-| diffss(s1, s5)","-| diffss(s1, s6)","-| diffss(s1, s3)","-| diffss(s1, s4)","-| diffss(s1, s9)","-| diffss(s2, s7)","-| diffss(s10, s2)","-| diffss(s0, s2)","-| diffss(s2, s5)","-| diffss(s2, s6)","-| diffss(s2, s3)","-| diffss(s2, s4)","-| diffss(s2, s9)","-| diffss(s10, s7)","-| diffss(s0, s7)","-| diffss(s5, s7)","-| diffss(s6, s7)","-| diffss(s3, s7)","-| diffss(s4, s7)","-| diffss(s7, s9)","-| diffss(s0, s10)","-| diffss(s10, s5)","-| diffss(s10, s6)","-| diffss(s10, s3)","-| diffss(s10, s4)","-| diffss(s10, s9)","-| diffss(s0, s5)","-| diffss(s0, s6)","-| diffss(s0, s3)","-| diffss(s0, s4)","-| diffss(s0, s9)","-| diffss(s5, s6)","-| diffss(s3, s5)","-| diffss(s4, s5)","-| diffss(s5, s9)","-| diffss(s3, s6)","-| diffss(s4, s6)","-| diffss(s6, s9)","-| diffss(s3, s4)","-| diffss(s3, s9)","-| diffss(s4, s9)"],"bodyPretty":["‚ä¢ Sat =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(rec((s2 ‚àà ùïå ‚Ü¶(s2 ‚ãÉ { < s3, s4 > | ‚àÉ(s5 ‚àà s2,(‚àÉ(s6 ‚àà s2,(s3 =((1st ` s5)[|g](1st ` s6))‚àß s4 =((s0[‚Ü¶]_om)\\((2nd ` s5)‚ãÇ(2nd ` s6)))))‚à® ‚àÉ(s7 ‚àà _om,(s3 = ‚àÄ(s7,(1st ` s5))‚àß s4 = { s8 ‚àà(s0[‚Ü¶]_om)| ‚àÄ(s9 ‚àà s0,({ < s7, s9 > } ‚ãÉ(s8 |`(_om \\ { s7 })))‚àà(2nd ` s5))}))))})), { < s3, s4 > | ‚àÉ(s7 ‚àà _om, ‚àÉ(s10 ‚àà _om,(s3 =(s7[e.g]s10)‚àß s4 = { s8 ‚àà(s0[‚Ü¶]_om)|(s8 ` s7)[s1](s8 ` s10)})))})|` suc(_om)))","‚ä£ d(s1, s8)","‚ä£ d(s2, s8)","‚ä£ d(s7, s8)","‚ä£ d(s10, s8)","‚ä£ d(s0, s8)","‚ä£ d(s5, s8)","‚ä£ d(s6, s8)","‚ä£ d(s3, s8)","‚ä£ d(s4, s8)","‚ä£ d(s8, s9)","‚ä£ d(s1, s2)","‚ä£ d(s1, s7)","‚ä£ d(s1, s10)","‚ä£ d(s0, s1)","‚ä£ d(s1, s5)","‚ä£ d(s1, s6)","‚ä£ d(s1, s3)","‚ä£ d(s1, s4)","‚ä£ d(s1, s9)","‚ä£ d(s2, s7)","‚ä£ d(s10, s2)","‚ä£ d(s0, s2)","‚ä£ d(s2, s5)","‚ä£ d(s2, s6)","‚ä£ d(s2, s3)","‚ä£ d(s2, s4)","‚ä£ d(s2, s9)","‚ä£ d(s10, s7)","‚ä£ d(s0, s7)","‚ä£ d(s5, s7)","‚ä£ d(s6, s7)","‚ä£ d(s3, s7)","‚ä£ d(s4, s7)","‚ä£ d(s7, s9)","‚ä£ d(s0, s10)","‚ä£ d(s10, s5)","‚ä£ d(s10, s6)","‚ä£ d(s10, s3)","‚ä£ d(s10, s4)","‚ä£ d(s10, s9)","‚ä£ d(s0, s5)","‚ä£ d(s0, s6)","‚ä£ d(s0, s3)","‚ä£ d(s0, s4)","‚ä£ d(s0, s9)","‚ä£ d(s5, s6)","‚ä£ d(s3, s5)","‚ä£ d(s4, s5)","‚ä£ d(s5, s9)","‚ä£ d(s3, s6)","‚ä£ d(s4, s6)","‚ä£ d(s6, s9)","‚ä£ d(s3, s4)","‚ä£ d(s3, s9)","‚ä£ d(s4, s9)"],"proof":[],"comment":"Define the satisfaction predicate. This recursive construction builds up a function over wff codes and simultaneously defines the set of assignments to all variables from ` M ` that makes the coded wff true in the model ` M ` , where ` e. ` is interpreted as the binary relation ` E ` on ` M ` . The interpretation of the statement ` S e. ( ( ( M Sat E ) `` n ) `` U ) ` is that for the model ` <. M , E >. ` , ` S : _om --> M ` is a valuation of the variables (v_0 ` = ( S `` (/) ) ` , v_1 ` = ( S `` 1o ) ` , etc.) and ` U ` is a code for a wff using ` e. , -/\\ , A. ` that is true under the assignment ` S ` . The function is defined by finite recursion; ` ( ( M Sat E ) `` n ) ` only operates on wffs of depth at most ` n e. _om ` , and ` ( ( M Sat E ) `` _om ) = U_ n e. _om ( ( M Sat E ) `` n ) ` operates on all wffs. The coding scheme for the wffs is defined so that <HTML><ul> <li>v<sub>i</sub> ` e. ` v<sub>j</sub> is coded as ` <. (/) , <. i , j >. >. ` ,</li> <li> ` ( ph -/\\ ps ) ` is coded as ` <. 1o , <. ph , ps >. >. ` , and</li> <li> ` A. ` v<sub>i</sub> ` ph ` is coded as ` <. 2o , <. i , ph >. >. ` .</li></ul></HTML> (Contributed by Mario Carneiro, 14-Jul-2013.)","parent":[],"children":[""]}