{"bIdx":48316,"bType":"thm","type":"","name":"alimp-surprise","params":"setvar s0, wff w0, wff w1","body":["|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))","-| wn(wex(s0, w0))"],"bodyPretty":["⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))","⊣ ¬ ∃(s0, w0)"],"proof":[{"stmt":{"origin":"pm3.2i(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))","pretty":"pm3.2i(∀(s0,(w0 → w1)), ∀(s0,(w0 → ¬ w1)))"},"body":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wal(s0, wi(w0, w1))\n-| wal(s0, wi(w0, wn(w1)))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ∀(s0,(w0 → w1))\n⊣ ∀(s0,(w0 → ¬ w1))"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wal(s0, wi(w0, w1))\n-| wal(s0, wi(w0, wn(w1)))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ∀(s0,(w0 → w1))\n⊣ ∀(s0,(w0 → ¬ w1))"}},{"stmt":{"origin":"mpgbir(s0, wal(s0, wi(w0, w1)), wo(wn(w0), w1))","pretty":"mpgbir(s0, ∀(s0,(w0 → w1)), (¬ w0 ∨ w1))"},"body":{"origin":"|- wal(s0, wi(w0, w1))\n-| wb(wal(s0, wi(w0, w1)), wal(s0, wo(wn(w0), w1)))\n-| wo(wn(w0), w1)","pretty":"⊢ ∀(s0,(w0 → w1))\n⊣ (∀(s0,(w0 → w1))↔ ∀(s0,(¬ w0 ∨ w1)))\n⊣ (¬ w0 ∨ w1)"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wal(s0, wi(w0, wn(w1)))\n-| wb(wal(s0, wi(w0, w1)), wal(s0, wo(wn(w0), w1)))\n-| wo(wn(w0), w1)","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ∀(s0,(w0 → ¬ w1))\n⊣ (∀(s0,(w0 → w1))↔ ∀(s0,(¬ w0 ∨ w1)))\n⊣ (¬ w0 ∨ w1)"}},{"stmt":{"origin":"albii(s0, wi(w0, w1), wo(wn(w0), w1))","pretty":"albii(s0, (w0 → w1), (¬ w0 ∨ w1))"},"body":{"origin":"|- wb(wal(s0, wi(w0, w1)), wal(s0, wo(wn(w0), w1)))\n-| wb(wi(w0, w1), wo(wn(w0), w1))","pretty":"⊢ (∀(s0,(w0 → w1))↔ ∀(s0,(¬ w0 ∨ w1)))\n⊣ ((w0 → w1)↔(¬ w0 ∨ w1))"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wal(s0, wi(w0, wn(w1)))\n-| wo(wn(w0), w1)\n-| wb(wi(w0, w1), wo(wn(w0), w1))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ∀(s0,(w0 → ¬ w1))\n⊣ (¬ w0 ∨ w1)\n⊣ ((w0 → w1)↔(¬ w0 ∨ w1))"}},{"stmt":{"origin":"imor(w0, w1)","pretty":"imor(w0, w1)"},"body":{"origin":"|- wb(wi(w0, w1), wo(wn(w0), w1))","pretty":"⊢ ((w0 → w1)↔(¬ w0 ∨ w1))"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wal(s0, wi(w0, wn(w1)))\n-| wo(wn(w0), w1)","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ∀(s0,(w0 → ¬ w1))\n⊣ (¬ w0 ∨ w1)"}},{"stmt":{"origin":"orci(wn(w0), w1)","pretty":"orci(¬ w0, w1)"},"body":{"origin":"|- wo(wn(w0), w1)\n-| wn(w0)","pretty":"⊢ (¬ w0 ∨ w1)\n⊣ ¬ w0"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wal(s0, wi(w0, wn(w1)))\n-| wn(w0)","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ∀(s0,(w0 → ¬ w1))\n⊣ ¬ w0"}},{"stmt":{"origin":"mpgbir(s0, wal(s0, wi(w0, wn(w1))), wo(wn(w0), wn(w1)))","pretty":"mpgbir(s0, ∀(s0,(w0 → ¬ w1)), (¬ w0 ∨ ¬ w1))"},"body":{"origin":"|- wal(s0, wi(w0, wn(w1)))\n-| wb(wal(s0, wi(w0, wn(w1))), wal(s0, wo(wn(w0), wn(w1))))\n-| wo(wn(w0), wn(w1))","pretty":"⊢ ∀(s0,(w0 → ¬ w1))\n⊣ (∀(s0,(w0 → ¬ w1))↔ ∀(s0,(¬ w0 ∨ ¬ w1)))\n⊣ (¬ w0 ∨ ¬ w1)"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wn(w0)\n-| wb(wal(s0, wi(w0, wn(w1))), wal(s0, wo(wn(w0), wn(w1))))\n-| wo(wn(w0), wn(w1))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ¬ w0\n⊣ (∀(s0,(w0 → ¬ w1))↔ ∀(s0,(¬ w0 ∨ ¬ w1)))\n⊣ (¬ w0 ∨ ¬ w1)"}},{"stmt":{"origin":"albii(s0, wi(w0, wn(w1)), wo(wn(w0), wn(w1)))","pretty":"albii(s0, (w0 → ¬ w1), (¬ w0 ∨ ¬ w1))"},"body":{"origin":"|- wb(wal(s0, wi(w0, wn(w1))), wal(s0, wo(wn(w0), wn(w1))))\n-| wb(wi(w0, wn(w1)), wo(wn(w0), wn(w1)))","pretty":"⊢ (∀(s0,(w0 → ¬ w1))↔ ∀(s0,(¬ w0 ∨ ¬ w1)))\n⊣ ((w0 → ¬ w1)↔(¬ w0 ∨ ¬ w1))"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wn(w0)\n-| wo(wn(w0), wn(w1))\n-| wb(wi(w0, wn(w1)), wo(wn(w0), wn(w1)))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ¬ w0\n⊣ (¬ w0 ∨ ¬ w1)\n⊣ ((w0 → ¬ w1)↔(¬ w0 ∨ ¬ w1))"}},{"stmt":{"origin":"imor(w0, wn(w1))","pretty":"imor(w0, ¬ w1)"},"body":{"origin":"|- wb(wi(w0, wn(w1)), wo(wn(w0), wn(w1)))","pretty":"⊢ ((w0 → ¬ w1)↔(¬ w0 ∨ ¬ w1))"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wn(w0)\n-| wo(wn(w0), wn(w1))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ¬ w0\n⊣ (¬ w0 ∨ ¬ w1)"}},{"stmt":{"origin":"orci(wn(w0), wn(w1))","pretty":"orci(¬ w0, ¬ w1)"},"body":{"origin":"|- wo(wn(w0), wn(w1))\n-| wn(w0)","pretty":"⊢ (¬ w0 ∨ ¬ w1)\n⊣ ¬ w0"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wn(w0)","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ¬ w0"}},{"stmt":{"origin":"nexr(s0, w0)","pretty":"nexr(s0, w0)"},"body":{"origin":"|- wn(w0)\n-| wn(wex(s0, w0))","pretty":"⊢ ¬ w0\n⊣ ¬ ∃(s0, w0)"},"cumulated":{"origin":"|- wa(wal(s0, wi(w0, w1)), wal(s0, wi(w0, wn(w1))))\n-| wn(wex(s0, w0))","pretty":"⊢ (∀(s0,(w0 → w1))∧ ∀(s0,(w0 → ¬ w1)))\n⊣ ¬ ∃(s0, w0)"}}],"comment":"Demonstrate that when using \"for all\" and material implication the consequent can be both always true and always false if there is no case where the antecedent is true. Those inexperienced with formal notations of classical logic can be surprised with what \"for all\" and material implication do together when the implication's antecedent is never true. This can happen, for example, when the antecedent is set membership but the set is the empty set (e.g., ` x e. M ` and ` M = (/) ` ). This is perhaps best explained using an example. The sentence \"All Martians are green\" would typically be represented formally using the expression ` A. x ( ph -> ps ) ` . In this expression ` ph ` is true iff ` x ` is a Martian and ` ps ` is true iff ` x ` is green. Similarly, \"All Martians are not green\" would typically be represented as ` A. x ( ph -> -. ps ) ` . However, if there are no Martians ( ` -. E. x ph ` ), then both of those expressions are _true_. That is surprising to the inexperienced, because the two expressions seem to be the opposite of each other. The reason this occurs is because in classical logic the implication ` ( ph -> ps ) ` is equivalent to ` -. ph \\/ ps ` (as proven in ~ imor ). When ` ph ` is always false, ` -. ph ` is always true, and an _or_ with true is always true. Here are a few technical notes. In this notation, ` ph ` and ` ps ` are predicates that return a true or false value and may depend on ` x ` . We only say _may_ because it actually doesn't matter for our proof. In Metamath this simply means that we do not require that ` ph ` , ` ps ` , and ` x ` be distinct (so ` x ` can be part of ` ph ` or ` ps ` ). In natural language the term \"implies\" often presumes that the antecedent _can_ occur in at one least circumstance _and_ that there is some sort of causality. However, exactly what causality means is complex and situation-dependent. Modern logic typically uses material implication instead; this has a rigorous definition, but it is important for new users of formal notation to precisely understand it. There are ways to solve this, e.g., expressly stating that the antecedent exists (see ~ alimp-no-surprise ) or using the allsome quantifier ( ~ df-alsi ) . For other \"surprises\" for new users of classical logic, see ~ empty-surprise and ~ eximp-surprise . (Contributed by David A. Wheeler, 17-Oct-2018.)","parent":["pm3.2i","mpgbir","albii","imor","orci","nexr"],"children":["empty-surprise"]}