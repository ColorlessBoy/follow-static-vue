{"bIdx":43984,"bType":"thm","type":"","name":"addcomgi","params":"class c0, class c1","body":["|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))"],"bodyPretty":["⊢ (c0[+]c1)=(c1[+]c0)"],"proof":[{"stmt":{"origin":"pm2.61i(wceq(co(c0, caddc, c1), co(c1, caddc, c0)), wa(wcel(c0, cc), wcel(c1, cc)))","pretty":"pm2.61i((c0[+]c1)=(c1[+]c0), (c0 ∈ ℂ ∧ c1 ∈ ℂ))"},"body":{"origin":"|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))\n-| wi(wa(wcel(c0, cc), wcel(c1, cc)), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))\n-| wi(wn(wa(wcel(c0, cc), wcel(c1, cc))), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))","pretty":"⊢ (c0[+]c1)=(c1[+]c0)\n⊣ ((c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))\n⊣ (¬(c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))"},"cumulated":{"origin":"|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))\n-| wi(wa(wcel(c0, cc), wcel(c1, cc)), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))\n-| wi(wn(wa(wcel(c0, cc), wcel(c1, cc))), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))","pretty":"⊢ (c0[+]c1)=(c1[+]c0)\n⊣ ((c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))\n⊣ (¬(c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))"}},{"stmt":{"origin":"addcom(c0, c1)","pretty":"addcom(c0, c1)"},"body":{"origin":"|- wi(wa(wcel(c0, cc), wcel(c1, cc)), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))","pretty":"⊢ ((c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))"},"cumulated":{"origin":"|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))\n-| wi(wn(wa(wcel(c0, cc), wcel(c1, cc))), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))","pretty":"⊢ (c0[+]c1)=(c1[+]c0)\n⊣ (¬(c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))"}},{"stmt":{"origin":"ndmovcom(c0, cc, c1, caddc)","pretty":"ndmovcom(c0, cc, c1, caddc)"},"body":{"origin":"|- wi(wn(wa(wcel(c0, cc), wcel(c1, cc))), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))\n-| wceq(cdm(caddc), cxp(cc, cc))","pretty":"⊢ (¬(c0 ∈ ℂ ∧ c1 ∈ ℂ)→(c0[+]c1)=(c1[+]c0))\n⊣ dom(+)=(ℂ × ℂ)"},"cumulated":{"origin":"|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))\n-| wceq(cdm(caddc), cxp(cc, cc))","pretty":"⊢ (c0[+]c1)=(c1[+]c0)\n⊣ dom(+)=(ℂ × ℂ)"}},{"stmt":{"origin":"fdmi(caddc, cxp(cc, cc), cc)","pretty":"fdmi(caddc, (ℂ × ℂ), cc)"},"body":{"origin":"|- wceq(cdm(caddc), cxp(cc, cc))\n-| wf(caddc, cxp(cc, cc), cc)","pretty":"⊢ dom(+)=(ℂ × ℂ)\n⊣ (+ :(ℂ × ℂ)→ ℂ)"},"cumulated":{"origin":"|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))\n-| wf(caddc, cxp(cc, cc), cc)","pretty":"⊢ (c0[+]c1)=(c1[+]c0)\n⊣ (+ :(ℂ × ℂ)→ ℂ)"}},{"stmt":{"origin":"ax-addf()","pretty":"ax-addf()"},"body":{"origin":"|- wf(caddc, cxp(cc, cc), cc)","pretty":"⊢ (+ :(ℂ × ℂ)→ ℂ)"},"cumulated":{"origin":"|- wceq(co(c0, caddc, c1), co(c1, caddc, c0))","pretty":"⊢ (c0[+]c1)=(c1[+]c0)"}}],"comment":"Generalization of commutative law for addition. Simplifies proofs dealing with vectors. However, it is dependent on our particular definition of ordered pair. (Contributed by Andrew Salmon, 28-Jan-2012.) (Revised by Mario Carneiro, 6-May-2015.)","parent":["pm2.61i","addcom","ndmovcom","fdmi","ax-addf"],"children":["addrcom"]}