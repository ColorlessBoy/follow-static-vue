{"bIdx":38780,"bType":"axiom","type":"","name":"df-ssr","params":"setvar s0, setvar s1","body":["|- wceq(cssr, copab(s0, s1, wss(cv(s0), cv(s1))))","-| diffss(s0, s1)"],"bodyPretty":["⊢ _S = { < s0, s1 > | s0 ⊆ s1 }","⊣ d(s0, s1)"],"proof":[],"comment":"Define the subsets class or the class of subset relations. Similar to definitions of epsilon relation ( ~ df-eprel ) and identity relation ( ~ df-id ) classes. Subset relation class and Scott Fenton's subset class ~ df-sset are the same: ` _S = SSet ` (compare ~ dfssr2 with ~ df-sset ), the only reason we do not use ~ dfssr2 as the base definition of the subsets class is the way we defined the epsilon relation and the identity relation classes. The binary relation on the class of subsets and the subclass relationship ( ~ df-ss ) are the same, that is, ` ( A _S B <-> A C_ B ) ` when ` B ` is a set, see ~ brssr . Yet in general we use the subclass relation ` A C_ B ` both for classes and for sets, see the comment of ~ df-ss . The only exception (aside from directly investigating the class ` _S ` e.g. in ~ relssr or in ~ extssr ) is when we have a specific purpose with its usage, like in case of ~ df-refs versus ~ df-cnvrefs , where we need ` _S ` to define the class of reflexive sets in order to be able to define the class of converse reflexive sets with the help of the converse of ` _S ` . The subsets class ` _S ` has another place in set.mm as well: if we define extensional relation based on the common property in ~ extid , ~ extep and ~ extssr , then \"extrelssr\" \" |- ExtRel _S \" is a theorem along with \"extrelep\" \" |- ExtRel _E \" and \"extrelid\" \" |- ExtRel _I \". (Contributed by Peter Mazsa, 25-Jul-2019.)","parent":[],"children":["dfssr2","relssr","brssr"]}