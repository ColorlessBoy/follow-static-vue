{"bIdx":2677,"bType":"thm","type":"","name":"dvelim","params":"setvar s0, setvar s1, setvar s2, wff w0, wff w1","body":["|- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))","-| wi(w1, wal(s0, w1))","-| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))","-| diffsw(s2, w0)"],"bodyPretty":["⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))","⊣ (w1 → ∀(s0, w1))","⊣ (s2 = s1 →(w1 ↔ w0))","⊣ d(s2, w0)"],"proof":[{"stmt":{"origin":"dvelimh(s0, s1, s2, w0, w1)","pretty":"dvelimh(s0, s1, s2, w0, w1)"},"body":{"origin":"|- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))\n-| wi(w1, wal(s0, w1))\n-| wi(w0, wal(s2, w0))\n-| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))","pretty":"⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n⊣ (w1 → ∀(s0, w1))\n⊣ (w0 → ∀(s2, w0))\n⊣ (s2 = s1 →(w1 ↔ w0))"},"cumulated":{"origin":"|- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))\n-| wi(w1, wal(s0, w1))\n-| wi(w0, wal(s2, w0))\n-| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))","pretty":"⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n⊣ (w1 → ∀(s0, w1))\n⊣ (w0 → ∀(s2, w0))\n⊣ (s2 = s1 →(w1 ↔ w0))"}},{"stmt":{"origin":"ax-5(s2, w0)","pretty":"ax-5(s2, w0)"},"body":{"origin":"|- wi(w0, wal(s2, w0))\n-| diffsw(s2, w0)","pretty":"⊢ (w0 → ∀(s2, w0))\n⊣ d(s2, w0)"},"cumulated":{"origin":"|- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))\n-| wi(w1, wal(s0, w1))\n-| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))\n-| diffsw(s2, w0)","pretty":"⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n⊣ (w1 → ∀(s0, w1))\n⊣ (s2 = s1 →(w1 ↔ w0))\n⊣ d(s2, w0)"}}],"comment":"This theorem can be used to eliminate a distinct variable restriction on ` x ` and ` z ` and replace it with the \"distinctor\" ` -. A. x x = y ` as an antecedent. ` ph ` normally has ` z ` free and can be read ` ph ( z ) ` , and ` ps ` substitutes ` y ` for ` z ` and can be read ` ph ( y ) ` . We do not require that ` x ` and ` y ` be distinct: if they are not, the distinctor will become false (in multiple-element domains of discourse) and \"protect\" the consequent. To obtain a closed-theorem form of this inference, prefix the hypotheses with ` A. x A. z ` , conjoin them, and apply ~ dvelimdf . Other variants of this theorem are ~ dvelimh (with no distinct variable restrictions) and ~ dvelimhw (that avoids ~ ax-13 ). (Contributed by NM, 23-Nov-1994.)","parent":["dvelimh","ax-5"],"children":["dvelimv","axc14","eujustALT"]}