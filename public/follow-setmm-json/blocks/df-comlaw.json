{"bIdx":47408,"bType":"axiom","type":"","name":"df-comlaw","params":"setvar s0, setvar s1, setvar s2, setvar s3","body":["|- wceq(ccomlaw, copab(s0, s1, wral(s2, cv(s1), wral(s3, cv(s1), wceq(co(cv(s2), cv(s0), cv(s3)), co(cv(s3), cv(s0), cv(s2)))))))","-| diffss(s0, s1)","-| diffss(s1, s2)","-| diffss(s1, s3)","-| diffss(s0, s2)","-| diffss(s0, s3)","-| diffss(s2, s3)"],"bodyPretty":["⊢ comLaw = { < s0, s1 > | ∀(s2 ∈ s1, ∀(s3 ∈ s1,(s2[s0]s3)=(s3[s0]s2)))}","⊣ d(s0, s1)","⊣ d(s1, s2)","⊣ d(s1, s3)","⊣ d(s0, s2)","⊣ d(s0, s3)","⊣ d(s2, s3)"],"proof":[],"comment":"The commutative law for binary operations, see definitions of laws A2. and M2. in section 1.1 of [Hall] p. 1, or definition 8 in [BourbakiAlg1] p. 7: the value of a binary operation applied to two operands equals the value of a binary operation applied to the two operands in reversed order. By this definition, the commutative law is expressed as binary relation: a binary operation is related to a set by ` comLaw ` if the commutative law holds for this binary operation regarding this set. Note that the binary operation needs neither to be closed nor to be a function. (Contributed by AV, 7-Jan-2020.)","parent":[],"children":["iscomlaw"]}