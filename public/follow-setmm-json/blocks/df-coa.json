{"bIdx":18502,"bType":"axiom","type":"","name":"df-coa","params":"setvar s0, setvar s1, setvar s2, setvar s3","body":["|- wceq(ccoa, cmpt(s0, ccat, cmpo(s1, s2, cfv(carw, cv(s0)), crab(s3, cfv(carw, cv(s0)), wceq(cfv(ccoda, cv(s3)), cfv(cdoma, cv(s1)))), cotp(cfv(cdoma, cv(s2)), cfv(ccoda, cv(s1)), co(cfv(c2nd, cv(s1)), co(cop(cfv(cdoma, cv(s2)), cfv(cdoma, cv(s1))), cfv(cco, cv(s0)), cfv(ccoda, cv(s1))), cfv(c2nd, cv(s2)))))))","-| diffss(s0, s2)","-| diffss(s0, s1)","-| diffss(s0, s3)","-| diffss(s1, s2)","-| diffss(s2, s3)","-| diffss(s1, s3)"],"bodyPretty":["⊢ compA =(s0 ∈ Cat ↦(s1 ∈(Arrow ` s0), s2 ∈ { s3 ∈(Arrow ` s0)|(codA ` s3)=(domA ` s1)} ↦ <(domA ` s2),(codA ` s1),((2nd ` s1)[(<(domA ` s2),(domA ` s1)>[(comp ` s0)](codA ` s1))](2nd ` s2))>))","⊣ d(s0, s2)","⊣ d(s0, s1)","⊣ d(s0, s3)","⊣ d(s1, s2)","⊣ d(s2, s3)","⊣ d(s1, s3)"],"proof":[],"comment":"Definition of the composition of arrows. Since arrows are tagged with domain and codomain, this does not need to be a quinary operation like the regular composition in a category ` comp ` . Instead, it is a partial binary operation on arrows, which is defined when the domain of the first arrow matches the codomain of the second. (Contributed by Mario Carneiro, 11-Jan-2017.)","parent":[],"children":["coafval"]}