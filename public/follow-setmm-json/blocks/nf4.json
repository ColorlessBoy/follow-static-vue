{"bIdx":2074,"bType":"thm","type":"","name":"nf4","params":"setvar s0, wff w0","body":["|- wb(wnf(s0, w0), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))"],"bodyPretty":["⊢ (F/(s0, w0)↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))"],"proof":[{"stmt":{"origin":"bitri(wnf(s0, w0), wi(wn(wal(s0, w0)), wal(s0, wn(w0))), wo(wal(s0, w0), wal(s0, wn(w0))))","pretty":"bitri(F/(s0, w0), (¬ ∀(s0, w0)→ ∀(s0, ¬ w0)), (∀(s0, w0)∨ ∀(s0, ¬ w0)))"},"body":{"origin":"|- wb(wnf(s0, w0), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))\n-| wb(wnf(s0, w0), wo(wal(s0, w0), wal(s0, wn(w0))))\n-| wb(wo(wal(s0, w0), wal(s0, wn(w0))), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))","pretty":"⊢ (F/(s0, w0)↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))\n⊣ (F/(s0, w0)↔(∀(s0, w0)∨ ∀(s0, ¬ w0)))\n⊣ ((∀(s0, w0)∨ ∀(s0, ¬ w0))↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))"},"cumulated":{"origin":"|- wb(wnf(s0, w0), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))\n-| wb(wnf(s0, w0), wo(wal(s0, w0), wal(s0, wn(w0))))\n-| wb(wo(wal(s0, w0), wal(s0, wn(w0))), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))","pretty":"⊢ (F/(s0, w0)↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))\n⊣ (F/(s0, w0)↔(∀(s0, w0)∨ ∀(s0, ¬ w0)))\n⊣ ((∀(s0, w0)∨ ∀(s0, ¬ w0))↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))"}},{"stmt":{"origin":"nf3(s0, w0)","pretty":"nf3(s0, w0)"},"body":{"origin":"|- wb(wnf(s0, w0), wo(wal(s0, w0), wal(s0, wn(w0))))","pretty":"⊢ (F/(s0, w0)↔(∀(s0, w0)∨ ∀(s0, ¬ w0)))"},"cumulated":{"origin":"|- wb(wnf(s0, w0), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))\n-| wb(wo(wal(s0, w0), wal(s0, wn(w0))), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))","pretty":"⊢ (F/(s0, w0)↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))\n⊣ ((∀(s0, w0)∨ ∀(s0, ¬ w0))↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))"}},{"stmt":{"origin":"df-or(wal(s0, w0), wal(s0, wn(w0)))","pretty":"df-or(∀(s0, w0), ∀(s0, ¬ w0))"},"body":{"origin":"|- wb(wo(wal(s0, w0), wal(s0, wn(w0))), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))","pretty":"⊢ ((∀(s0, w0)∨ ∀(s0, ¬ w0))↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))"},"cumulated":{"origin":"|- wb(wnf(s0, w0), wi(wn(wal(s0, w0)), wal(s0, wn(w0))))","pretty":"⊢ (F/(s0, w0)↔(¬ ∀(s0, w0)→ ∀(s0, ¬ w0)))"}}],"comment":"Alternate definition of non-freeness. This definition uses only primitive symbols ( ` -> , -. , A. ` ). (Contributed by BJ, 16-Sep-2021.)","parent":["bitri","nf3","df-or"],"children":[]}