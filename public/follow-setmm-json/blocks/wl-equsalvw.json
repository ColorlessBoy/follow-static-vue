{"bIdx":37601,"bType":"thm","type":"","name":"wl-equsalvw","params":"setvar s0, setvar s1, wff w0, wff w1","body":["|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)","-| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))","-| diffss(s0, s1)","-| diffsw(s0, w1)"],"bodyPretty":["⊢ (∀(s0,(s0 = s1 → w0))↔ w1)","⊣ (s0 = s1 →(w0 ↔ w1))","⊣ d(s0, s1)","⊣ d(s0, w1)"],"proof":[{"stmt":{"origin":"3bitr4i(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1, wal(s0, wi(wceq(cv(s0), cv(s1)), w1)), wi(wex(s0, wceq(cv(s0), cv(s1))), w1))","pretty":"3bitr4i(∀(s0,(s0 = s1 → w0)), w1, ∀(s0,(s0 = s1 → w1)), (∃(s0, s0 = s1)→ w1))"},"body":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w1)), wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w1)))\n-| wb(w1, wi(wex(s0, wceq(cv(s0), cv(s1))), w1))","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ (∀(s0,(s0 = s1 → w1))↔(∃(s0, s0 = s1)→ w1))\n⊣ (∀(s0,(s0 = s1 → w0))↔ ∀(s0,(s0 = s1 → w1)))\n⊣ (w1 ↔(∃(s0, s0 = s1)→ w1))"},"cumulated":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w1)), wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w1)))\n-| wb(w1, wi(wex(s0, wceq(cv(s0), cv(s1))), w1))","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ (∀(s0,(s0 = s1 → w1))↔(∃(s0, s0 = s1)→ w1))\n⊣ (∀(s0,(s0 = s1 → w0))↔ ∀(s0,(s0 = s1 → w1)))\n⊣ (w1 ↔(∃(s0, s0 = s1)→ w1))"}},{"stmt":{"origin":"19.23v(s0, wceq(cv(s0), cv(s1)), w1)","pretty":"19.23v(s0, s0 = s1, w1)"},"body":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w1)), wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| diffsw(s0, w1)","pretty":"⊢ (∀(s0,(s0 = s1 → w1))↔(∃(s0, s0 = s1)→ w1))\n⊣ d(s0, w1)"},"cumulated":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w1)))\n-| wb(w1, wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| diffsw(s0, w1)","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ (∀(s0,(s0 = s1 → w0))↔ ∀(s0,(s0 = s1 → w1)))\n⊣ (w1 ↔(∃(s0, s0 = s1)→ w1))\n⊣ d(s0, w1)"}},{"stmt":{"origin":"albii(s0, wi(wceq(cv(s0), cv(s1)), w0), wi(wceq(cv(s0), cv(s1)), w1))","pretty":"albii(s0, (s0 = s1 → w0), (s0 = s1 → w1))"},"body":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w1)))\n-| wb(wi(wceq(cv(s0), cv(s1)), w0), wi(wceq(cv(s0), cv(s1)), w1))","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ ∀(s0,(s0 = s1 → w1)))\n⊣ ((s0 = s1 → w0)↔(s0 = s1 → w1))"},"cumulated":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| wb(w1, wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| diffsw(s0, w1)\n-| wb(wi(wceq(cv(s0), cv(s1)), w0), wi(wceq(cv(s0), cv(s1)), w1))","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ (w1 ↔(∃(s0, s0 = s1)→ w1))\n⊣ d(s0, w1)\n⊣ ((s0 = s1 → w0)↔(s0 = s1 → w1))"}},{"stmt":{"origin":"pm5.74i(wceq(cv(s0), cv(s1)), w0, w1)","pretty":"pm5.74i(s0 = s1, w0, w1)"},"body":{"origin":"|- wb(wi(wceq(cv(s0), cv(s1)), w0), wi(wceq(cv(s0), cv(s1)), w1))\n-| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))","pretty":"⊢ ((s0 = s1 → w0)↔(s0 = s1 → w1))\n⊣ (s0 = s1 →(w0 ↔ w1))"},"cumulated":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| wb(w1, wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| diffsw(s0, w1)\n-| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ (w1 ↔(∃(s0, s0 = s1)→ w1))\n⊣ d(s0, w1)\n⊣ (s0 = s1 →(w0 ↔ w1))"}},{"stmt":{"origin":"a1bi(w1, wex(s0, wceq(cv(s0), cv(s1))))","pretty":"a1bi(w1, ∃(s0, s0 = s1))"},"body":{"origin":"|- wb(w1, wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n-| wex(s0, wceq(cv(s0), cv(s1)))","pretty":"⊢ (w1 ↔(∃(s0, s0 = s1)→ w1))\n⊣ ∃(s0, s0 = s1)"},"cumulated":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| diffsw(s0, w1)\n-| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n-| wex(s0, wceq(cv(s0), cv(s1)))","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ d(s0, w1)\n⊣ (s0 = s1 →(w0 ↔ w1))\n⊣ ∃(s0, s0 = s1)"}},{"stmt":{"origin":"ax6ev(s0, s1)","pretty":"ax6ev(s0, s1)"},"body":{"origin":"|- wex(s0, wceq(cv(s0), cv(s1)))\n-| diffss(s0, s1)","pretty":"⊢ ∃(s0, s0 = s1)\n⊣ d(s0, s1)"},"cumulated":{"origin":"|- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n-| diffsw(s0, w1)\n-| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n-| diffss(s0, s1)","pretty":"⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n⊣ d(s0, w1)\n⊣ (s0 = s1 →(w0 ↔ w1))\n⊣ d(s0, s1)"}}],"comment":"Version of ~ equsalv with a disjoint variable condition, and of ~ equsal with two disjoint variable conditions, which requires fewer axioms. See also the dual form ~ equsexvw . This theorem lays the foundation to a transformation of expressions called substitution of set variables in a wff. Only in this particular context we additionally assume ` ph ` and ` y ` disjoint, stated here as ` ph ( x ) ` . Similarly the disjointness of ` ps ` and ` x ` is expressed by ` ps ( y ) ` . Both ` ph ` and ` ps ` may still depend on other set variables, but that is irrelevant here. We want to transform ` ph ( x ) ` into ` ps ( y ) ` such that ` ps ` depends on ` y ` the same way as ` ph ` depends on ` x ` . This dependency is expressed in our hypothesis (called implicit substitution): ` ( x = y -> ( ph <-> ps ) ) ` . For primitive enough ` ph ` a sort of textual substitution of ` x ` by ` y ` is sufficient for such transformation. But note: ` ph ` must not contain wff variables, and the substitution is no proper textual substitution either. We still need grammar information to not accidently replace the x in a token 'x.' denoting multiplication, but only catch set variables ` x ` . Our current stage of development allows only equations and quantifiers make up such primitives. Thanks to ~ equequ1 and ~ cbvalvw we can then prove in a mechanical way that in fact the implicit substitution holds for each instance. If ` ph ` contains wff variables we cannot use textual transformation any longer, since we don't know how to replace ` y ` for ` x ` in placeholders of unknown structure. Our theorem now states, that the generic expression ` A. x ( x = y -> ph ) ` formally behaves as if such a substitution was possible and made. (Contributed by BJ, 31-May-2019.)","parent":["3bitr4i","19.23v","albii","pm5.74i","a1bi","ax6ev"],"children":[]}