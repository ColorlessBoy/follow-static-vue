{"bIdx":7598,"bType":"thm","type":"","name":"funoprab","params":"setvar s0, setvar s1, setvar s2, wff w0","body":["|- wfun(coprab(s0, s1, s2, w0))","-| wmo(s2, w0)","-| diffss(s0, s1)","-| diffss(s0, s2)","-| diffss(s1, s2)"],"bodyPretty":["⊢ Fun({ < < s0, s1 >, s2 > | w0 })","⊣ ∃*(s2, w0)","⊣ d(s0, s1)","⊣ d(s0, s2)","⊣ d(s1, s2)"],"proof":[{"stmt":{"origin":"ax-mp(wfun(coprab(s0, s1, s2, w0)), wal(s0, wal(s1, wmo(s2, w0))))","pretty":"ax-mp(Fun({ < < s0, s1 >, s2 > | w0 }), ∀(s0, ∀(s1, ∃*(s2, w0))))"},"body":{"origin":"|- wfun(coprab(s0, s1, s2, w0))\n-| wal(s0, wal(s1, wmo(s2, w0)))\n-| wi(wal(s0, wal(s1, wmo(s2, w0))), wfun(coprab(s0, s1, s2, w0)))","pretty":"⊢ Fun({ < < s0, s1 >, s2 > | w0 })\n⊣ ∀(s0, ∀(s1, ∃*(s2, w0)))\n⊣ (∀(s0, ∀(s1, ∃*(s2, w0)))→ Fun({ < < s0, s1 >, s2 > | w0 }))"},"cumulated":{"origin":"|- wfun(coprab(s0, s1, s2, w0))\n-| wal(s0, wal(s1, wmo(s2, w0)))\n-| wi(wal(s0, wal(s1, wmo(s2, w0))), wfun(coprab(s0, s1, s2, w0)))","pretty":"⊢ Fun({ < < s0, s1 >, s2 > | w0 })\n⊣ ∀(s0, ∀(s1, ∃*(s2, w0)))\n⊣ (∀(s0, ∀(s1, ∃*(s2, w0)))→ Fun({ < < s0, s1 >, s2 > | w0 }))"}},{"stmt":{"origin":"gen2(s0, s1, wmo(s2, w0))","pretty":"gen2(s0, s1, ∃*(s2, w0))"},"body":{"origin":"|- wal(s0, wal(s1, wmo(s2, w0)))\n-| wmo(s2, w0)","pretty":"⊢ ∀(s0, ∀(s1, ∃*(s2, w0)))\n⊣ ∃*(s2, w0)"},"cumulated":{"origin":"|- wfun(coprab(s0, s1, s2, w0))\n-| wi(wal(s0, wal(s1, wmo(s2, w0))), wfun(coprab(s0, s1, s2, w0)))\n-| wmo(s2, w0)","pretty":"⊢ Fun({ < < s0, s1 >, s2 > | w0 })\n⊣ (∀(s0, ∀(s1, ∃*(s2, w0)))→ Fun({ < < s0, s1 >, s2 > | w0 }))\n⊣ ∃*(s2, w0)"}},{"stmt":{"origin":"funoprabg(s0, s1, s2, w0)","pretty":"funoprabg(s0, s1, s2, w0)"},"body":{"origin":"|- wi(wal(s0, wal(s1, wmo(s2, w0))), wfun(coprab(s0, s1, s2, w0)))\n-| diffss(s0, s1)\n-| diffss(s0, s2)\n-| diffss(s1, s2)","pretty":"⊢ (∀(s0, ∀(s1, ∃*(s2, w0)))→ Fun({ < < s0, s1 >, s2 > | w0 }))\n⊣ d(s0, s1)\n⊣ d(s0, s2)\n⊣ d(s1, s2)"},"cumulated":{"origin":"|- wfun(coprab(s0, s1, s2, w0))\n-| wmo(s2, w0)\n-| diffss(s0, s1)\n-| diffss(s0, s2)\n-| diffss(s1, s2)","pretty":"⊢ Fun({ < < s0, s1 >, s2 > | w0 })\n⊣ ∃*(s2, w0)\n⊣ d(s0, s1)\n⊣ d(s0, s2)\n⊣ d(s1, s2)"}}],"comment":"\"At most one\" is a sufficient condition for an operation class abstraction to be a function. (Contributed by NM, 17-Mar-1995.)","parent":["ax-mp","gen2","funoprabg"],"children":["mpt2fun","ovidig","ovigg","oprabex","axaddf","axmulf","funtransport","funray","funline"]}