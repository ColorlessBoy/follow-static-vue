{"bIdx":36942,"bType":"thm","type":"","name":"bj-issetiv","params":"setvar s0, class c0, class c1","body":["|- wex(s0, wceq(cv(s0), c0))","-| wcel(c0, c1)","-| diffsc(s0, c0)","-| diffsc(s0, c1)"],"bodyPretty":["⊢ ∃(s0, s0 = c0)","⊣ c0 ∈ c1","⊣ d(s0, c0)","⊣ d(s0, c1)"],"proof":[{"stmt":{"origin":"ax-mp(wex(s0, wceq(cv(s0), c0)), wcel(c0, c1))","pretty":"ax-mp(∃(s0, s0 = c0), c0 ∈ c1)"},"body":{"origin":"|- wex(s0, wceq(cv(s0), c0))\n-| wcel(c0, c1)\n-| wi(wcel(c0, c1), wex(s0, wceq(cv(s0), c0)))","pretty":"⊢ ∃(s0, s0 = c0)\n⊣ c0 ∈ c1\n⊣ (c0 ∈ c1 → ∃(s0, s0 = c0))"},"cumulated":{"origin":"|- wex(s0, wceq(cv(s0), c0))\n-| wcel(c0, c1)\n-| wi(wcel(c0, c1), wex(s0, wceq(cv(s0), c0)))","pretty":"⊢ ∃(s0, s0 = c0)\n⊣ c0 ∈ c1\n⊣ (c0 ∈ c1 → ∃(s0, s0 = c0))"}},{"stmt":{"origin":"bj-elissetv(s0, c0, c1)","pretty":"bj-elissetv(s0, c0, c1)"},"body":{"origin":"|- wi(wcel(c0, c1), wex(s0, wceq(cv(s0), c0)))\n-| diffsc(s0, c0)\n-| diffsc(s0, c1)","pretty":"⊢ (c0 ∈ c1 → ∃(s0, s0 = c0))\n⊣ d(s0, c0)\n⊣ d(s0, c1)"},"cumulated":{"origin":"|- wex(s0, wceq(cv(s0), c0))\n-| wcel(c0, c1)\n-| diffsc(s0, c0)\n-| diffsc(s0, c1)","pretty":"⊢ ∃(s0, s0 = c0)\n⊣ c0 ∈ c1\n⊣ d(s0, c0)\n⊣ d(s0, c1)"}}],"comment":"Version of ~ bj-isseti with a disjoint variable condition on ` x , V ` . This proof uses only ~ df-ex , ~ ax-gen , ~ ax-4 and ~ df-clel on top of propositional calculus. Prefer its use over ~ bj-isseti when sufficient (in particular when ` V ` is substituted for ` _V ` ). (Contributed by BJ, 14-Sep-2019.) (Proof modification is discouraged.)","parent":["ax-mp","bj-elissetv"],"children":["bj-rexcom4bv","bj-vtoclf"]}