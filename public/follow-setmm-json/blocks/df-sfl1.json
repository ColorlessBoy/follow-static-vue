{"bIdx":35458,"bType":"axiom","type":"","name":"df-sfl1","params":"setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9","body":["|- wceq(csf1, cmpo(s0, s1, universe, universe, cmpt(s2, cfv(cpl1, cv(s0)), cfv(crdg(cmpo(s3, s4, universe, universe, csb(s5, cfv(cmpl, cv(s3)), csb(s7, crab(s6, cin(cfv(cmn1, cv(s3)), cfv(cir, cv(s5))), wa(wbr(cv(s6), cfv(cdsr, cv(s5)), ccom(cv(s2), cv(s4))), wbr(nat1, clt, co(cv(s3), cdg1, cv(s6))))), cif(cop(cv(s3), cv(s4)), csb(s8, cfv(cglb, cv(s7)), csb(s9, co(cv(s3), cpfl, cv(s8)), cop(cfv(c1st, cv(s9)), ccom(cv(s4), cfv(c2nd, cv(s9)))))), wo(wceq(ccom(cv(s2), cv(s4)), cfv(c0g, cv(s5))), wceq(cv(s7), emptycls)))))), cv(s1)), cfv(ccrd, co(nat1, cfz, co(cv(s0), cdg1, cv(s2))))))))","-| diffss(s4, s7)","-| diffss(s6, s7)","-| diffss(s7, s8)","-| diffss(s1, s7)","-| diffss(s5, s7)","-| diffss(s2, s7)","-| diffss(s0, s7)","-| diffss(s3, s7)","-| diffss(s7, s9)","-| diffss(s4, s6)","-| diffss(s4, s8)","-| diffss(s1, s4)","-| diffss(s4, s5)","-| diffss(s2, s4)","-| diffss(s0, s4)","-| diffss(s3, s4)","-| diffss(s4, s9)","-| diffss(s6, s8)","-| diffss(s1, s6)","-| diffss(s5, s6)","-| diffss(s2, s6)","-| diffss(s0, s6)","-| diffss(s3, s6)","-| diffss(s6, s9)","-| diffss(s1, s8)","-| diffss(s5, s8)","-| diffss(s2, s8)","-| diffss(s0, s8)","-| diffss(s3, s8)","-| diffss(s8, s9)","-| diffss(s1, s5)","-| diffss(s1, s2)","-| diffss(s0, s1)","-| diffss(s1, s3)","-| diffss(s1, s9)","-| diffss(s2, s5)","-| diffss(s0, s5)","-| diffss(s3, s5)","-| diffss(s5, s9)","-| diffss(s0, s2)","-| diffss(s2, s3)","-| diffss(s2, s9)","-| diffss(s0, s3)","-| diffss(s0, s9)","-| diffss(s3, s9)"],"bodyPretty":["‚ä¢ splitFld1 =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(s2 ‚àà(Poly1 ` s0)‚Ü¶(rec((s3 ‚àà ùïå, s4 ‚àà ùïå ‚Ü¶[(mPoly ` s3)/ s5][{ s6 ‚àà((Monic1p ` s3)‚ãÇ(Irred ` s5))|(s6[(||r ` s5)](s2 ‚àò s4)‚àß 1[<](s3[deg1]s6))} / s7]if(((s2 ‚àò s4)=(0 ` s5)‚à® s7 = ‚àÖ), < s3, s4 >,[(glb ` s7)/ s8][(s3[polyFld]s8)/ s9]<(1st ` s9),(s4 ‚àò(2nd ` s9))>)), s1)`(card `(1[...](s0[deg1]s2))))))","‚ä£ d(s4, s7)","‚ä£ d(s6, s7)","‚ä£ d(s7, s8)","‚ä£ d(s1, s7)","‚ä£ d(s5, s7)","‚ä£ d(s2, s7)","‚ä£ d(s0, s7)","‚ä£ d(s3, s7)","‚ä£ d(s7, s9)","‚ä£ d(s4, s6)","‚ä£ d(s4, s8)","‚ä£ d(s1, s4)","‚ä£ d(s4, s5)","‚ä£ d(s2, s4)","‚ä£ d(s0, s4)","‚ä£ d(s3, s4)","‚ä£ d(s4, s9)","‚ä£ d(s6, s8)","‚ä£ d(s1, s6)","‚ä£ d(s5, s6)","‚ä£ d(s2, s6)","‚ä£ d(s0, s6)","‚ä£ d(s3, s6)","‚ä£ d(s6, s9)","‚ä£ d(s1, s8)","‚ä£ d(s5, s8)","‚ä£ d(s2, s8)","‚ä£ d(s0, s8)","‚ä£ d(s3, s8)","‚ä£ d(s8, s9)","‚ä£ d(s1, s5)","‚ä£ d(s1, s2)","‚ä£ d(s0, s1)","‚ä£ d(s1, s3)","‚ä£ d(s1, s9)","‚ä£ d(s2, s5)","‚ä£ d(s0, s5)","‚ä£ d(s3, s5)","‚ä£ d(s5, s9)","‚ä£ d(s0, s2)","‚ä£ d(s2, s3)","‚ä£ d(s2, s9)","‚ä£ d(s0, s3)","‚ä£ d(s0, s9)","‚ä£ d(s3, s9)"],"proof":[],"comment":"Temporary construction for the splitting field of a polynomial. The inputs are a field ` r ` and a polynomial ` p ` that we want to split, along with a tuple ` j ` in the same format as the output. The output is a tuple ` <. S , F >. ` where ` S ` is the splitting field and ` F ` is an injective homomorphism from the original field ` r ` . The function works by repeatedly finding the smallest monic irreducible factor, and extending the field by that factor using the ` polyFld ` construction. We keep track of a total order in each of the splitting fields so that we can pick an element definably without needing global choice. (Contributed by Mario Carneiro, 2-Dec-2014.)","parent":[],"children":[""]}