{"bIdx":38701,"bType":"axiom","type":"","name":"df-coss","params":"setvar s0, setvar s1, setvar s2, class c0","body":["|- wceq(ccoss(c0), copab(s0, s1, wex(s2, wa(wbr(cv(s2), c0, cv(s0)), wbr(cv(s2), c0, cv(s1))))))","-| diffss(s0, s2)","-| diffss(s1, s2)","-| diffss(s0, s1)","-| diffsc(s2, c0)","-| diffsc(s0, c0)","-| diffsc(s1, c0)"],"bodyPretty":["⊢ , ~(c0)= { < s0, s1 > | ∃(s2,(s2[c0]s0 ∧ s2[c0]s1))}","⊣ d(s0, s2)","⊣ d(s1, s2)","⊣ d(s0, s1)","⊣ d(s2, c0)","⊣ d(s0, c0)","⊣ d(s1, c0)"],"proof":[],"comment":"Define the class of cosets by ` R ` : ` x ` and ` y ` are cosets by ` R ` iff there exists a set ` u ` such that both ` u R x ` and ` u R y ` hold, i.e., both ` x ` and ` y ` are are elements of the ` R ` -coset of ` u ` (see ~ dfcoss2 and the comment of ~ dfec2 ). ` R ` is usually a relation. This concept simplifies theorems relating partition and equivalence: the left side of these theorems relate to ` R ` , the right side relate to ` ,~ R ` (see e.g. ~~? pet ). Without the definition of ` ,~ R ` we should have to relate the right side of these theorems to a composition of a converse (cf. ~ dfcoss3 ) or to the range of a range Cartesian product of classes (cf. ~ dfcoss4 ), which would make the theorems complicated and confusing. Alternate definition is ~ dfcoss2 . Technically, we can define it via composition ( ~ dfcoss3 ) or as the range of a range Cartesian product ( ~ dfcoss4 ), but neither of these definitions reveal directly how the cosets by ` R ` relate to each other. We define functions ( ~ df-funsALTV , ~ df-funALTV ) and disjoints ( ~ dfdisjs , ~ dfdisjs2 , ~ df-disjALTV , ~ dfdisjALTV2 ) with the help of it as well. (Contributed by Peter Mazsa, 9-Jan-2018.)","parent":[],"children":["dfcoss2","dfcoss3","dfcoss4","relcoss","cossss","cosseq","1cossres","brcoss","cossssid2","cossid"]}