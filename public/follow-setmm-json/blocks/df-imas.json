{"bIdx":17860,"bType":"axiom","type":"","name":"df-imas","params":"setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9, setvar s10","body":["|- wceq(cimas, cmpo(s0, s1, universe, universe, csb(s2, cfv(cbs, cv(s1)), cun(cun(ctp(cop(cfv(cbs, cnx), crn(cv(s0))), cop(cfv(cplusg, cnx), ciun(s3, cv(s2), ciun(s4, cv(s2), csn(cop(cop(cfv(cv(s0), cv(s3)), cfv(cv(s0), cv(s4))), cfv(cv(s0), co(cv(s3), cfv(cplusg, cv(s1)), cv(s4)))))))), cop(cfv(cmulr, cnx), ciun(s3, cv(s2), ciun(s4, cv(s2), csn(cop(cop(cfv(cv(s0), cv(s3)), cfv(cv(s0), cv(s4))), cfv(cv(s0), co(cv(s3), cfv(cmulr, cv(s1)), cv(s4))))))))), ctp(cop(cfv(csca, cnx), cfv(csca, cv(s1))), cop(cfv(cvsca, cnx), ciun(s4, cv(s2), cmpo(s3, s5, cfv(cbs, cfv(csca, cv(s1))), csn(cfv(cv(s0), cv(s4))), cfv(cv(s0), co(cv(s3), cfv(cvsca, cv(s1)), cv(s4)))))), cop(cfv(cip, cnx), ciun(s3, cv(s2), ciun(s4, cv(s2), csn(cop(cop(cfv(cv(s0), cv(s3)), cfv(cv(s0), cv(s4))), co(cv(s3), cfv(cip, cv(s1)), cv(s4))))))))), ctp(cop(cfv(cts, cnx), co(cfv(ctopn, cv(s1)), cqtop, cv(s0))), cop(cfv(cple, cnx), ccom(ccom(cv(s0), cfv(cple, cv(s1))), ccnv(cv(s0)))), cop(cfv(cds, cnx), cmpo(s5, s6, crn(cv(s0)), crn(cv(s0)), cinf(ciun(s7, cn, crn(cmpt(s8, crab(s9, co(cxp(cv(s2), cv(s2)), cmap, co(nat1, cfz, cv(s7))), w3a(wceq(cfv(cv(s0), cfv(c1st, cfv(cv(s9), nat1))), cv(s5)), wceq(cfv(cv(s0), cfv(c2nd, cfv(cv(s9), cv(s7)))), cv(s6)), wral(s10, co(nat1, cfz, co(cv(s7), cmin, nat1)), wceq(cfv(cv(s0), cfv(c2nd, cfv(cv(s9), cv(s10)))), cfv(cv(s0), cfv(c1st, cfv(cv(s9), co(cv(s10), caddc, nat1)))))))), co(cxrs, cgsu, ccom(cfv(cds, cv(s1)), cv(s8)))))), cxr, clt))))))))","-| diffss(s0, s8)","-| diffss(s0, s9)","-| diffss(s0, s10)","-| diffss(s0, s7)","-| diffss(s0, s3)","-| diffss(s0, s4)","-| diffss(s0, s1)","-| diffss(s0, s2)","-| diffss(s0, s5)","-| diffss(s0, s6)","-| diffss(s8, s9)","-| diffss(s10, s8)","-| diffss(s7, s8)","-| diffss(s3, s8)","-| diffss(s4, s8)","-| diffss(s1, s8)","-| diffss(s2, s8)","-| diffss(s5, s8)","-| diffss(s6, s8)","-| diffss(s10, s9)","-| diffss(s7, s9)","-| diffss(s3, s9)","-| diffss(s4, s9)","-| diffss(s1, s9)","-| diffss(s2, s9)","-| diffss(s5, s9)","-| diffss(s6, s9)","-| diffss(s10, s7)","-| diffss(s10, s3)","-| diffss(s10, s4)","-| diffss(s1, s10)","-| diffss(s10, s2)","-| diffss(s10, s5)","-| diffss(s10, s6)","-| diffss(s3, s7)","-| diffss(s4, s7)","-| diffss(s1, s7)","-| diffss(s2, s7)","-| diffss(s5, s7)","-| diffss(s6, s7)","-| diffss(s3, s4)","-| diffss(s1, s3)","-| diffss(s2, s3)","-| diffss(s3, s5)","-| diffss(s3, s6)","-| diffss(s1, s4)","-| diffss(s2, s4)","-| diffss(s4, s5)","-| diffss(s4, s6)","-| diffss(s1, s2)","-| diffss(s1, s5)","-| diffss(s1, s6)","-| diffss(s2, s5)","-| diffss(s2, s6)","-| diffss(s5, s6)"],"bodyPretty":["‚ä¢ \"s =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶[(Base ` s1)/ s2](({ <(Base ` ndx), ran(s0)>, <(+ ` ndx), ‚ãÉ(s3 ‚àà s2, ‚ãÉ(s4 ‚àà s2, { < <(s0 ` s3),(s0 ` s4)>,(s0 `(s3[(+ ` s1)]s4))> }))>, <(√ó ` ndx), ‚ãÉ(s3 ‚àà s2, ‚ãÉ(s4 ‚àà s2, { < <(s0 ` s3),(s0 ` s4)>,(s0 `(s3[(√ó ` s1)]s4))> }))> } ‚ãÉ { <(Scalar ` ndx),(Scalar ` s1)>, <(√ó ` ndx), ‚ãÉ(s4 ‚àà s2,(s3 ‚àà(Base `(Scalar ` s1)), s5 ‚àà {(s0 ` s4)} ‚Ü¶(s0 `(s3[(√ó ` s1)]s4))))>, <(¬∑ ` ndx), ‚ãÉ(s3 ‚àà s2, ‚ãÉ(s4 ‚àà s2, { < <(s0 ` s3),(s0 ` s4)>,(s3[(¬∑ ` s1)]s4)> }))> })‚ãÉ { <(TopSet ` ndx),((TopOpen ` s1)[qTop]s0)>, <(le ` ndx),((s0 ‚àò(le ` s1))‚àò `' s0)>, <(dist ` ndx),(s5 ‚àà ran(s0), s6 ‚àà ran(s0)‚Ü¶ inf(‚ãÉ(s7 ‚àà ‚Ñï, ran((s8 ‚àà { s9 ‚àà((s2 √ó s2)[‚Ü¶](1[...]s7))|((s0 `(1st `(s9 ` 1)))= s5 ‚àß(s0 `(2nd `(s9 ` s7)))= s6 ‚àß ‚àÄ(s10 ‚àà(1[...](s7[-]1)),(s0 `(2nd `(s9 ` s10)))=(s0 `(1st `(s9 `(s10[+]1))))))} ‚Ü¶(‚Ñù*[gsum]((dist ` s1)‚àò s8))))), ‚Ñù*, <))> }))","‚ä£ d(s0, s8)","‚ä£ d(s0, s9)","‚ä£ d(s0, s10)","‚ä£ d(s0, s7)","‚ä£ d(s0, s3)","‚ä£ d(s0, s4)","‚ä£ d(s0, s1)","‚ä£ d(s0, s2)","‚ä£ d(s0, s5)","‚ä£ d(s0, s6)","‚ä£ d(s8, s9)","‚ä£ d(s10, s8)","‚ä£ d(s7, s8)","‚ä£ d(s3, s8)","‚ä£ d(s4, s8)","‚ä£ d(s1, s8)","‚ä£ d(s2, s8)","‚ä£ d(s5, s8)","‚ä£ d(s6, s8)","‚ä£ d(s10, s9)","‚ä£ d(s7, s9)","‚ä£ d(s3, s9)","‚ä£ d(s4, s9)","‚ä£ d(s1, s9)","‚ä£ d(s2, s9)","‚ä£ d(s5, s9)","‚ä£ d(s6, s9)","‚ä£ d(s10, s7)","‚ä£ d(s10, s3)","‚ä£ d(s10, s4)","‚ä£ d(s1, s10)","‚ä£ d(s10, s2)","‚ä£ d(s10, s5)","‚ä£ d(s10, s6)","‚ä£ d(s3, s7)","‚ä£ d(s4, s7)","‚ä£ d(s1, s7)","‚ä£ d(s2, s7)","‚ä£ d(s5, s7)","‚ä£ d(s6, s7)","‚ä£ d(s3, s4)","‚ä£ d(s1, s3)","‚ä£ d(s2, s3)","‚ä£ d(s3, s5)","‚ä£ d(s3, s6)","‚ä£ d(s1, s4)","‚ä£ d(s2, s4)","‚ä£ d(s4, s5)","‚ä£ d(s4, s6)","‚ä£ d(s1, s2)","‚ä£ d(s1, s5)","‚ä£ d(s1, s6)","‚ä£ d(s2, s5)","‚ä£ d(s2, s6)","‚ä£ d(s5, s6)"],"proof":[],"comment":"Define an image structure, which takes a structure and a function on the base set, and maps all the operations via the function. For this to work properly ` f ` must either be injective or satisfy the well-definedness condition ` f ( a ) = f ( c ) /\\ f ( b ) = f ( d ) -> ` ` f ( a + b ) = f ( c + d ) ` for each relevant operation. Note that although we call this an \"image\" by association to ~ df-ima , in order to keep the definition simple we consider only the case when the domain of ` F ` is equal to the base set of ` R ` . Other cases can be achieved by restricting ` F ` (with ~ df-res ) and/or ` R ` ( with ~ df-ress ) to their common domain. (Contributed by Mario Carneiro, 23-Feb-2015.) (Revised by AV, 6-Oct-2020.)","parent":[],"children":["imasval"]}