{"bIdx":2330,"bType":"thm","type":"","name":"aev2","params":"setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5","body":["|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s3, wceq(cv(s4), cv(s5)))))","-| diffss(s0, s1)"],"bodyPretty":["⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s3, s4 = s5)))","⊣ d(s0, s1)"],"proof":[{"stmt":{"origin":"sylg(s2, wal(s0, wceq(cv(s0), cv(s1))), wal(s3, wceq(cv(s4), cv(s5))), wal(hs0, wceq(cv(hs0), cv(hs1))))","pretty":"sylg(s2, ∀(s0, s0 = s1), ∀(s3, s4 = s5), ∀(hs0, hs0 = hs1))"},"body":{"origin":"|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s3, wceq(cv(s4), cv(s5)))))\n-| wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(hs0, wceq(cv(hs0), cv(hs1)))))\n-| wi(wal(hs0, wceq(cv(hs0), cv(hs1))), wal(s3, wceq(cv(s4), cv(s5))))","pretty":"⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s3, s4 = s5)))\n⊣ (∀(s0, s0 = s1)→ ∀(s2, ∀(hs0, hs0 = hs1)))\n⊣ (∀(hs0, hs0 = hs1)→ ∀(s3, s4 = s5))"},"cumulated":{"origin":"|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s3, wceq(cv(s4), cv(s5)))))\n-| wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(hs0, wceq(cv(hs0), cv(hs1)))))\n-| wi(wal(hs0, wceq(cv(hs0), cv(hs1))), wal(s3, wceq(cv(s4), cv(s5))))","pretty":"⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s3, s4 = s5)))\n⊣ (∀(s0, s0 = s1)→ ∀(s2, ∀(hs0, hs0 = hs1)))\n⊣ (∀(hs0, hs0 = hs1)→ ∀(s3, s4 = s5))"}},{"stmt":{"origin":"hbaevg(s0, s1, s2, hs0, hs1)","pretty":"hbaevg(s0, s1, s2, hs0, hs1)"},"body":{"origin":"|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(hs0, wceq(cv(hs0), cv(hs1)))))\n-| diffss(s0, s1)\n-| diffss(hs0, hs1)","pretty":"⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(hs0, hs0 = hs1)))\n⊣ d(s0, s1)\n⊣ d(hs0, hs1)"},"cumulated":{"origin":"|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s3, wceq(cv(s4), cv(s5)))))\n-| wi(wal(hs0, wceq(cv(hs0), cv(hs1))), wal(s3, wceq(cv(s4), cv(s5))))\n-| diffss(s0, s1)\n-| diffss(hs0, hs1)","pretty":"⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s3, s4 = s5)))\n⊣ (∀(hs0, hs0 = hs1)→ ∀(s3, s4 = s5))\n⊣ d(s0, s1)\n⊣ d(hs0, hs1)"}},{"stmt":{"origin":"aev(hs0, hs1, s3, s4, s5)","pretty":"aev(hs0, hs1, s3, s4, s5)"},"body":{"origin":"|- wi(wal(hs0, wceq(cv(hs0), cv(hs1))), wal(s3, wceq(cv(s4), cv(s5))))\n-| diffss(hs0, hs1)","pretty":"⊢ (∀(hs0, hs0 = hs1)→ ∀(s3, s4 = s5))\n⊣ d(hs0, hs1)"},"cumulated":{"origin":"|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s3, wceq(cv(s4), cv(s5)))))\n-| diffss(s0, s1)\n-| diffss(hs0, hs1)","pretty":"⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s3, s4 = s5)))\n⊣ d(s0, s1)\n⊣ d(hs0, hs1)"}},{"stmt":{"origin":"diff.hs0.s(hs1)","pretty":"diff.hs0.s(hs1)"},"body":{"origin":"|- diffss(hs0, hs1)","pretty":"⊢ d(hs0, hs1)"},"cumulated":{"origin":"|- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s3, wceq(cv(s4), cv(s5)))))\n-| diffss(s0, s1)","pretty":"⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s3, s4 = s5)))\n⊣ d(s0, s1)"}}],"comment":"A version of ~ aev with two universal quantifiers in the consequent, and a generalization of ~ hbaevg . One can prove similar statements with arbitrary numbers of universal quantifiers in the consequent (the series begins with ~ aeveq , ~ aev , ~ aev2 ). Using ~ aev and ~ alrimiv (as in ~ aev2ALT ), one can actually prove (with no more axioms) any scheme of the form ` ( A. x x = y -> ` PHI) , DV ` ( x , y ) ` where PHI involves only setvar variables and the connectors ` -> ` , ` <-> ` , ` /\\ ` , ` \\/ ` , ` T. ` , ` = ` , ` A. ` , ` E. ` , ` E* ` , ` E! ` , ` F/ ` . An example is given by ~ aevdemo . This list cannot be extended to ` -. ` or ` F. ` since the scheme ` A. x x = y ` is consistent with ~ ax-mp , ~ ax-gen , ~ ax-1 -- ~ ax-13 (as the one-element universe shows). (Contributed by BJ, 29-Mar-2021.)","parent":["sylg","hbaevg","aev","diff.hs0.s"],"children":[]}