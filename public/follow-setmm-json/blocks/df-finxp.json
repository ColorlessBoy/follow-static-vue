{"bIdx":37498,"bType":"axiom","type":"","name":"df-finxp","params":"setvar s0, setvar s1, setvar s2, class c0, class c1","body":["|- wceq(cfinxp(c0, c1), cab(s0, wa(wcel(c1, com), wceq(emptycls, cfv(crdg(cmpo(s1, s2, com, universe, cif(emptycls, cif(cop(cuni(cv(s1)), cfv(c1st, cv(s2))), cop(cv(s1), cv(s2)), wcel(cv(s2), cxp(universe, c0))), wa(wceq(cv(s1), c1o), wcel(cv(s2), c0)))), cop(c1, cv(s0))), c1)))))","-| diffss(s1, s2)","-| diffss(s0, s1)","-| diffss(s0, s2)","-| diffsc(s1, c0)","-| diffsc(s2, c0)","-| diffsc(s0, c0)","-| diffsc(s1, c1)","-| diffsc(s2, c1)","-| diffsc(s0, c1)"],"bodyPretty":["‚ä¢ (c0 ^^ c1)= { s0 |(c1 ‚àà _om ‚àß ‚àÖ =(rec((s1 ‚àà _om, s2 ‚àà ùïå ‚Ü¶ if((s1 = 1o ‚àß s2 ‚àà c0), ‚àÖ, if(s2 ‚àà(ùïå √ó c0), < ‚ãÉ s1,(1st ` s2)>, < s1, s2 >))), < c1, s0 >)` c1))}","‚ä£ d(s1, s2)","‚ä£ d(s0, s1)","‚ä£ d(s0, s2)","‚ä£ d(s1, c0)","‚ä£ d(s2, c0)","‚ä£ d(s0, c0)","‚ä£ d(s1, c1)","‚ä£ d(s2, c1)","‚ä£ d(s0, c1)"],"proof":[],"comment":"Define Cartesian exponentiation on a class. Note that this definition is limited to finite exponents, since it is defined using nested ordered pairs. If tuples of infinite length are needed, or if they might be needed in the future, use ~ df-ixp or ~ df-map instead. The main advantage of this definition is that it integrates better with functions and relations. For example if ` R ` is a subset of ` ( A ^^ 2o ) ` , then ~ df-br can be used on it, and ~ df-fv can also be used, and so on. It's also worth keeping in mind that ` ( ( U ^^ M ) X. ( U ^^ N ) ) ` is generally not equal to ` ( U ^^ ( M +o N ) ) ` . This definition is technical. Use ~ finxp1o and ~ finxpsuc for a more standard recursive experience. (Contributed by ML, 16-Oct-2020.)","parent":[],"children":["dffinxpf","finxpeq1","finxpeq2","csbfinxpg","finxp0","finxp1o","finxpnom"]}