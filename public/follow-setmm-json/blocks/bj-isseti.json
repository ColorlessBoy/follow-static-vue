{"bIdx":36943,"bType":"thm","type":"","name":"bj-isseti","params":"setvar s0, class c0, class c1","body":["|- wex(s0, wceq(cv(s0), c0))","-| wcel(c0, c1)","-| diffsc(s0, c0)"],"bodyPretty":["⊢ ∃(s0, s0 = c0)","⊣ c0 ∈ c1","⊣ d(s0, c0)"],"proof":[{"stmt":{"origin":"ax-mp(wex(s0, wceq(cv(s0), c0)), wcel(c0, c1))","pretty":"ax-mp(∃(s0, s0 = c0), c0 ∈ c1)"},"body":{"origin":"|- wex(s0, wceq(cv(s0), c0))\n-| wcel(c0, c1)\n-| wi(wcel(c0, c1), wex(s0, wceq(cv(s0), c0)))","pretty":"⊢ ∃(s0, s0 = c0)\n⊣ c0 ∈ c1\n⊣ (c0 ∈ c1 → ∃(s0, s0 = c0))"},"cumulated":{"origin":"|- wex(s0, wceq(cv(s0), c0))\n-| wcel(c0, c1)\n-| wi(wcel(c0, c1), wex(s0, wceq(cv(s0), c0)))","pretty":"⊢ ∃(s0, s0 = c0)\n⊣ c0 ∈ c1\n⊣ (c0 ∈ c1 → ∃(s0, s0 = c0))"}},{"stmt":{"origin":"bj-elisset(s0, c0, c1)","pretty":"bj-elisset(s0, c0, c1)"},"body":{"origin":"|- wi(wcel(c0, c1), wex(s0, wceq(cv(s0), c0)))\n-| diffsc(s0, c0)","pretty":"⊢ (c0 ∈ c1 → ∃(s0, s0 = c0))\n⊣ d(s0, c0)"},"cumulated":{"origin":"|- wex(s0, wceq(cv(s0), c0))\n-| wcel(c0, c1)\n-| diffsc(s0, c0)","pretty":"⊢ ∃(s0, s0 = c0)\n⊣ c0 ∈ c1\n⊣ d(s0, c0)"}}],"comment":"Remove from ~ isseti dependency on ~ ax-ext (and on ~ df-cleq and ~ df-v ). This proof uses only ~ df-clab and ~ df-clel on top of first-order logic. It only uses ~ ax-12 among the auxiliary logical axioms. The hypothesis uses ` V ` instead of ` _V ` for extra generality. This is indeed more general as long as ~ elex is not available. Use ~ bj-issetiv instead when sufficient (in particular when ` V ` is substituted for ` _V ` ). (Contributed by BJ, 13-Jun-2019.) (Proof modification is discouraged.)","parent":["ax-mp","bj-elisset"],"children":["bj-rexcom4b"]}