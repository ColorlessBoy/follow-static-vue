{"bIdx":8285,"bType":"axiom","type":"","name":"df-wrecs","params":"setvar s0, setvar s1, setvar s2, class c0, class c1, class c2","body":["|- wceq(cwrecs(c0, c1, c2), cuni(cab(s0, wex(s1, w3a(wfn(cv(s0), cv(s1)), wa(wss(cv(s1), c1), wral(s2, cv(s1), wss(cpred(c0, c1, cv(s2)), cv(s1)))), wral(s2, cv(s1), wceq(cfv(cv(s0), cv(s2)), cfv(c2, cres(cv(s0), cpred(c0, c1, cv(s2)))))))))))","-| diffss(s0, s1)","-| diffss(s0, s2)","-| diffss(s1, s2)","-| diffsc(s0, c0)","-| diffsc(s1, c0)","-| diffsc(s2, c0)","-| diffsc(s0, c1)","-| diffsc(s1, c1)","-| diffsc(s2, c1)","-| diffsc(s0, c2)","-| diffsc(s1, c2)","-| diffsc(s2, c2)"],"bodyPretty":["⊢ wrecs(c0, c1, c2)= ⋃ { s0 | ∃(s1,(s0[Fn]s1 ∧(s1 ⊆ c1 ∧ ∀(s2 ∈ s1, Pred(c0, c1, s2)⊆ s1))∧ ∀(s2 ∈ s1,(s0 ` s2)=(c2 `(s0 |` Pred(c0, c1, s2))))))}","⊣ d(s0, s1)","⊣ d(s0, s2)","⊣ d(s1, s2)","⊣ d(s0, c0)","⊣ d(s1, c0)","⊣ d(s2, c0)","⊣ d(s0, c1)","⊣ d(s1, c1)","⊣ d(s2, c1)","⊣ d(s0, c2)","⊣ d(s1, c2)","⊣ d(s2, c2)"],"proof":[],"comment":"Here we define the well-founded recursive function generator. This function takes the usual expressions from recursion theorems and forms a unified definition. Specifically, given a function ` F ` , a relationship ` R ` , and a base set ` A ` , this definition generates a function ` G = wrecs ( R , A , F ) ` that has property that, at any point ` x e. A ` , ` ( G `` x ) = ( F `` ( G |`` Pred ( R , A , x ) ) ) ` . See ~ wfr1 , ~ wfr2 , and ~ wfr3 . (Contributed by Scott Fenton, 7-Jun-2018.) (New usage is discouraged.)","parent":[],"children":["wrecseq123","nfwrecs","wfrrel","wfrdmss","wfrdmcl","wfrfun","wfrlem12","wfrlem16","wfrlem17","dfrecs3","csbwrecsg"]}