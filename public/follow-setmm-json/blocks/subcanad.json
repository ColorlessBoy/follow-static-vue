{"bIdx":11671,"bType":"thm","type":"","name":"subcanad","params":"class c0, class c1, class c2, wff w0","body":["|- wi(w0, wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))","-| wi(w0, wcel(c0, cc))","-| wi(w0, wcel(c1, cc))","-| wi(w0, wcel(c2, cc))"],"bodyPretty":["⊢ (w0 →((c0[-]c1)=(c0[-]c2)↔ c1 = c2))","⊣ (w0 → c0 ∈ ℂ)","⊣ (w0 → c1 ∈ ℂ)","⊣ (w0 → c2 ∈ ℂ)"],"proof":[{"stmt":{"origin":"syl3anc(w0, wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)), wcel(c0, cc), wcel(c1, cc), wcel(c2, cc))","pretty":"syl3anc(w0, ((c0[-]c1)=(c0[-]c2)↔ c1 = c2), c0 ∈ ℂ, c1 ∈ ℂ, c2 ∈ ℂ)"},"body":{"origin":"|- wi(w0, wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))\n-| wi(w0, wcel(c0, cc))\n-| wi(w0, wcel(c1, cc))\n-| wi(w0, wcel(c2, cc))\n-| wi(w3a(wcel(c0, cc), wcel(c1, cc), wcel(c2, cc)), wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))","pretty":"⊢ (w0 →((c0[-]c1)=(c0[-]c2)↔ c1 = c2))\n⊣ (w0 → c0 ∈ ℂ)\n⊣ (w0 → c1 ∈ ℂ)\n⊣ (w0 → c2 ∈ ℂ)\n⊣ ((c0 ∈ ℂ ∧ c1 ∈ ℂ ∧ c2 ∈ ℂ)→((c0[-]c1)=(c0[-]c2)↔ c1 = c2))"},"cumulated":{"origin":"|- wi(w0, wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))\n-| wi(w0, wcel(c0, cc))\n-| wi(w0, wcel(c1, cc))\n-| wi(w0, wcel(c2, cc))\n-| wi(w3a(wcel(c0, cc), wcel(c1, cc), wcel(c2, cc)), wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))","pretty":"⊢ (w0 →((c0[-]c1)=(c0[-]c2)↔ c1 = c2))\n⊣ (w0 → c0 ∈ ℂ)\n⊣ (w0 → c1 ∈ ℂ)\n⊣ (w0 → c2 ∈ ℂ)\n⊣ ((c0 ∈ ℂ ∧ c1 ∈ ℂ ∧ c2 ∈ ℂ)→((c0[-]c1)=(c0[-]c2)↔ c1 = c2))"}},{"stmt":{"origin":"subcan(c0, c1, c2)","pretty":"subcan(c0, c1, c2)"},"body":{"origin":"|- wi(w3a(wcel(c0, cc), wcel(c1, cc), wcel(c2, cc)), wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))","pretty":"⊢ ((c0 ∈ ℂ ∧ c1 ∈ ℂ ∧ c2 ∈ ℂ)→((c0[-]c1)=(c0[-]c2)↔ c1 = c2))"},"cumulated":{"origin":"|- wi(w0, wb(wceq(co(c0, cmin, c1), co(c0, cmin, c2)), wceq(c1, c2)))\n-| wi(w0, wcel(c0, cc))\n-| wi(w0, wcel(c1, cc))\n-| wi(w0, wcel(c2, cc))","pretty":"⊢ (w0 →((c0[-]c1)=(c0[-]c2)↔ c1 = c2))\n⊣ (w0 → c0 ∈ ℂ)\n⊣ (w0 → c1 ∈ ℂ)\n⊣ (w0 → c2 ∈ ℂ)"}}],"comment":"Cancellation law for subtraction. Deduction form of ~ subcan . Generalization of ~ subcand . (Contributed by David Moews, 28-Feb-2017.)","parent":["syl3anc","subcan"],"children":["subneintrd","4sqlem11","affineequiv2","basellem3"]}