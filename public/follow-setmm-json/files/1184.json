{"index":1184,"title":"An alternative axiom ~ ax-13","content":"","blocks":[{"name":"ax-wl-13v","content":"A version of ~ ax13v with a distinctor instead of a distinct variable expression. Had we additionally required ` x ` and ` y ` be distinct, too, this theorem would have been a direct consequence of ~ ax-5 . So essentially this theorem states, that a distinct variable condition between set variables can be replaced with a distinctor expression. (Contributed by Wolf Lammen, 23-Jul-2021.)","origin":"axiom ax-wl-13v(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n}","pretty":"axiom ax-wl-13v(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s1 = s2 → ∀(s0, s1 = s2)))\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n}","parent":[],"children":["wl-ax13lem1"]},{"name":"wl-ax13lem1","content":"A version of ~ ax-wl-13v with one distinct variable restriction dropped. For convenience, ` y ` is kept on the right side of equations. This proof bases on ideas from NM, 24-Dec-2015. (Contributed by Wolf Lammen, 23-Jul-2021.)","origin":"thm wl-ax13lem1(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s2), cv(s1)), wal(s0, wceq(cv(s2), cv(s1)))))\n  -| diffss(s0, s2)\n} = {\n  syl5(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s2), cv(s1)), wal(s0, wceq(cv(s2), cv(s1))), wex(hs0, wa(wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)))))\n  equvinva(s2, s1, hs0)\n  exlimdv(hs0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wa(wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0))), wal(s0, wceq(cv(s2), cv(s1))))\n  impd(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)), wal(s0, wceq(cv(s2), cv(s1))))\n  syl9(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)), wal(s0, wceq(cv(s2), cv(s1))), wal(s0, wceq(cv(s1), cv(hs0))))\n  ax-wl-13v(s0, s1, hs0)\n  alimdv(s0, wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(s1)))\n  equeucl(s2, hs0, s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wn(wal(s0, wceq(cv(s0), cv(s1)))))\n  diff.hs0.w(wal(s0, wceq(cv(s2), cv(s1))))\n  diff.wceq.s(s0, cv(s2), cv(hs0))\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm wl-ax13lem1(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s2 = s1 → ∀(s0, s2 = s1)))\n  ⊣ d(s0, s2)\n} = {\n  syl5(¬ ∀(s0, s0 = s1), s2 = s1, ∀(s0, s2 = s1), ∃(hs0,(s2 = hs0 ∧ s1 = hs0)))\n  equvinva(s2, s1, hs0)\n  exlimdv(hs0, ¬ ∀(s0, s0 = s1), (s2 = hs0 ∧ s1 = hs0), ∀(s0, s2 = s1))\n  impd(¬ ∀(s0, s0 = s1), s2 = hs0, s1 = hs0, ∀(s0, s2 = s1))\n  syl9(¬ ∀(s0, s0 = s1), s2 = hs0, s1 = hs0, ∀(s0, s2 = s1), ∀(s0, s1 = hs0))\n  ax-wl-13v(s0, s1, hs0)\n  alimdv(s0, s2 = hs0, s1 = hs0, s2 = s1)\n  equeucl(s2, hs0, s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(¬ ∀(s0, s0 = s1))\n  diff.hs0.w(∀(s0, s2 = s1))\n  diff.wceq.s(s0, s2, hs0)\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["syl5","equvinva","exlimdv","impd","syl9","ax-wl-13v","alimdv","equeucl","diffss.ex","diff.hs0.s","diff.hs0.w","diff.wceq.s","diff.cv.s"],"children":[]}]}