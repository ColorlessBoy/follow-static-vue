{"index":71,"title":"Aristotelian logic: Assertic syllogisms","content":"Model the Aristotelian assertic syllogisms using modern notation. This section shows that the Aristotelian assertic syllogisms can be proven with our axioms of logic, and also provides generally useful theorems. In antiquity Aristotelian logic and Stoic logic (see ~ mptnan ) were the leading logical systems. Aristotelian logic became the leading system in medieval Europe. This section models this system (including later refinements). Aristotle defined syllogisms very generally (\"a discourse in which certain (specific) things having been supposed, something different from the things supposed results of necessity because these things are so\") Aristotle, _Prior Analytics_ 24b18-20. However, in _Prior Analytics_ he limits himself to categorical syllogisms that consist of three categorical propositions with specific structures. The syllogisms are the valid subset of the possible combinations of these structures. The medieval schools used vowels to identify the types of terms (a=all, e=none, i=some, and o=some are not), and named the different syllogisms with Latin words that had the vowels in the intended order. \"There is a surprising amount of scholarly debate about how best to formalize Aristotle's syllogisms...\" according to _Aristotle's Modal Proofs: Prior Analytics A8-22 in Predicate Logic_, Adriane Rini, Springer, 2011, ISBN 978-94-007-0049-9, page 28. For example, Lukasiewicz believes it is important to note that \"Aristotle does not introduce singular terms or premisses into his system\". Lukasiewicz also believes that Aristotelian syllogisms are predicates (having a true/false value), not inference rules: \"The characteristic sign of an inference is the word 'therefore'... no syllogism is formulated by Aristotle primarily as an inference, but they are all implications.\" Jan Lukasiewicz, _Aristotle's Syllogistic from the Standpoint of Modern Formal Logic_, Second edition, Oxford, 1957, page 1-2. Lukasiewicz devised a specialized prefix notation for representing Aristotelian syllogisms instead of using standard predicate logic notation. We instead translate each Aristotelian syllogism into an inference rule, and each rule is defined using standard predicate logic notation and predicates. The predicates are represented by wff variables that may depend on the quantified variable ` x ` . Our translation is essentially identical to the one used in Rini page 18, Table 2 \"Non-Modal Syllogisms in Lower Predicate Calculus (LPC)\", which uses standard predicate logic with predicates. Rini states, \"the crucial point is that we capture the meaning Aristotle intends, and the method by which we represent that meaning is less important\". There are two differences: we make the existence criteria explicit, and we use ` ph ` , ` ps ` , and ` ch ` in the order they appear (a common Metamath convention). Patzig also uses standard predicate logic notation and predicates (though he interprets them as conditional propositions, not as inference rules); see Gunther Patzig, _Aristotle's Theory of the Syllogism_ second edition, 1963, English translation by Jonathan Barnes, 1968, page 38. Terms such as \"all\" and \"some\" are translated into predicate logic using the approach devised by Frege and Russell. \"Frege (and Russell) devised an ingenious procedure for regimenting binary quantifiers like \"every\" and \"some\" in terms of unary quantifiers like \"everything\" and \"something\": they formalized sentences of the form \"Some A is B\" and \"Every A is B\" as exists x (Ax and Bx) and all x (Ax implies Bx), respectively.\" \"Quantifiers and Quantification\", _Stanford Encyclopedia of Philosophy_, ~ http://plato.stanford.edu/entries/quantification/ . See _Principia Mathematica_ page 22 and *10 for more information (especially *10.3 and *10.26). Expressions of the form \"no ` ph ` is ` ps ` \" are consistently translated as ` A. x ( ph -> -. ps ) ` . These can also be expressed as ` -. E. x ( ph /\\ ps ) ` , per ~ alinexa . We translate \"all ` ph ` is ` ps ` \" to ` A. x ( ph -> ps ) ` , \"some ` ph ` is ` ps ` \" to ` E. x ( ph /\\ ps ) ` , and \"some ` ph ` is not ` ps ` \" to ` E. x ( ph /\\ -. ps ) ` . It is traditional to use the singular form \"is\", not the plural form \"are\", in the generic expressions. By convention the major premise is listed first. In traditional Aristotelian syllogisms the predicates have a restricted form (\"x is a ...\"); those predicates could be modeled in modern notation by more specific constructs such as ` x = A ` , ` x e. A ` , or ` x C_ A ` . Here we use wff variables instead of specialized restricted forms. This generalization makes the syllogisms more useful in more circumstances. In addition, these expressions make it clearer that the syllogisms of Aristotelian logic are the forerunners of predicate calculus. If we used restricted forms like ` x e. A ` instead, we would not only unnecessarily limit their use, but we would also need to use set and class axioms, making their relationship to predicate calculus less clear. Using such specific constructs would also be anti-historical; Aristotle and others who directly followed his work focused on relating wholes to their parts, an approach now called part-whole theory. The work of Cantor and Peano (over 2,000 years later) led to a sharper distinction between inclusion ( ` C_ ` ) and membership ( ` e. ` ); this distinction was not directly made in Aristotle's work. There are some widespread misconceptions about the existential assumptions made by Aristotle (aka \"existential import\"). Aristotle was not trying to develop something exactly corresponding to modern logic. Aristotle devised \"a companion-logic for science. He relegates fictions like fairy godmothers and mermaids and unicorns to the realms of poetry and literature. In his mind, they exist outside the ambit of science. This is why he leaves no room for such nonexistent entities in his logic. This is a thoughtful choice, not an inadvertent omission. Technically, Aristotelian science is a search for definitions, where a definition is \"a phrase signifying a thing's essence.\" (Topics, I.5.102a37, Pickard-Cambridge.)... Because non-existent entities cannot be anything, they do not, in Aristotle's mind, possess an essence... This is why he leaves no place for fictional entities like goat-stags (or unicorns).\" Source: Louis F. Groarke, \"Aristotle: Logic\", section 7. (Existential Assumptions), _Internet Encyclopedia of Philosophy_ (A Peer-Reviewed Academic Resource), ~ http://www.iep.utm.edu/aris-log/ . Thus, some syllogisms have \"extra\" existence hypotheses that do not directly appear in Aristotle's original materials (since they were always assumed); they are added where they are needed. This affects ~ barbari , ~ celaront , ~ cesaro , ~ camestros , ~ felapton , ~ darapti , ~ calemos , ~ fesapo , and ~ bamalip . These are only the _assertic_ syllogisms. Aristotle also defined modal syllogisms that deal with modal qualifiers such as \"necessarily\" and \"possibly\". Historically, Aristotelian modal syllogisms were not as widely used. For more about modal syllogisms in a modern context, see Rini as well as _Aristotle's Modal Syllogistic_ by Marko Malink, Harvard University Press, November 2013. We do not treat them further here. Aristotelian logic is essentially the forerunner of predicate calculus (as well as set theory since it discusses membership in groups), while Stoic logic is essentially the forerunner of propositional calculus. The following twenty-four syllogisms (from ~ barbara to ~ bamalip ) are all proven from { ~ ax-mp , ~ ax-1 , ~ ax-2 , ~ ax-3 , ~ ax-gen , ~ ax-4 }, which corresponds in the usual translation to modal logic (a universal (resp. existential) quantifier maps to necessity (resp. possibility)) to the weakest normal modal logic (K). Some proofs could be shortened by using additionally ~ spi (inference form of ~ sp , which corresponds to the axiom (T) of modal logic), as demonstrated by ~ dariiALT , ~ barbariALT , ~ festinoALT , ~ barocoALT , ~ daraptiALT .","blocks":[{"name":"barbara","content":"\"Barbara\", one of the fundamental syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , and all ` ch ` is ` ph ` , therefore all ` ch ` is ` ps ` . In Aristotelian notation, AAA-1: MaP and SaM therefore SaP. For example, given \"All men are mortal\" and \"Socrates is a man\", we can prove \"Socrates is mortal\". If H is the set of men, M is the set of mortal beings, and S is Socrates, these word phrases can be represented as ` A. x ( x e. H -> x e. M ) ` (all men are mortal) and ` A. x ( x = S -> x e. H ) ` (Socrates is a man) therefore ` A. x ( x = S -> x e. M ) ` (Socrates is mortal). Russell and Whitehead note that \"the syllogism in Barbara is derived from [[ ~ syl ]\" (quote after Theorem *2.06 of [WhiteheadRussell] p. 101). Most of the proof is in ~ alsyl . There are a legion of sources for Barbara, including ~ http://www.friesian.com/aristotl.htm , ~ http://plato.stanford.edu/entries/aristotle-logic/ , and ~ https://en.wikipedia.org/wiki/Syllogism . (Contributed by David A. Wheeler, 24-Aug-2016.)","origin":"thm barbara(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wal(s0, wi(w0, w2))\n} = {\n  mp2an(wal(s0, wi(w0, w1)), wal(s0, wi(w0, w2)), wal(s0, wi(w2, w1)))\n  alsyl(s0, w0, w2, w1)\n}","pretty":"thm barbara(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∀(s0,(w0 → w2))\n} = {\n  mp2an(∀(s0,(w0 → w1)), ∀(s0,(w0 → w2)), ∀(s0,(w2 → w1)))\n  alsyl(s0, w0, w2, w1)\n}","parent":["mp2an","alsyl"],"children":["celarent","barbari","barbariALT"]},{"name":"celarent","content":"\"Celarent\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , and all ` ch ` is ` ph ` , therefore no ` ch ` is ` ps ` . Instance of ~ barbara . In Aristotelian notation, EAE-1: MeP and SaM therefore SeP. For example, given the \"No reptiles have fur\" and \"All snakes are reptiles\", therefore \"No snakes have fur\". Example from ~ https://en.wikipedia.org/wiki/Syllogism . (Contributed by David A. Wheeler, 24-Aug-2016.)","origin":"thm celarent(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w2, wn(w1)))\n  -| wal(s0, wi(w0, w2))\n} = {\n  barbara(s0, w0, wn(w1), w2)\n}","pretty":"thm celarent(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w2 → ¬ w1))\n  ⊣ ∀(s0,(w0 → w2))\n} = {\n  barbara(s0, w0, ¬ w1, w2)\n}","parent":["barbara"],"children":["cesare","camestres"]},{"name":"darii","content":"\"Darii\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , and some ` ch ` is ` ph ` , therefore some ` ch ` is ` ps ` . In Aristotelian notation, AII-1: MaP and SiM therefore SiP. For example, given \"All rabbits have fur\" and \"Some pets are rabbits\", therefore \"Some pets have fur\". Example from ~ https://en.wikipedia.org/wiki/Syllogism . See ~ dariiALT for a shorter proof requiring more axioms. (Contributed by David A. Wheeler, 24-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm darii(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wex(s0, wa(w0, w2))\n} = {\n  mp2(wex(s0, wa(w0, w1)), wal(s0, wi(wa(w0, w2), wa(w0, w1))), wex(s0, wa(w0, w2)))\n  ax-mp(wal(s0, wi(wa(w0, w2), wa(w0, w1))), wal(s0, wi(w2, w1)))\n  alimi(s0, wi(w2, w1), wi(wa(w0, w2), wa(w0, w1)))\n  anim2d(wi(w2, w1), w0, w2, w1)\n  id(wi(w2, w1))\n  exim(s0, wa(w0, w2), wa(w0, w1))\n}","pretty":"thm darii(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∃(s0,(w0 ∧ w2))\n} = {\n  mp2(∃(s0,(w0 ∧ w1)), ∀(s0,((w0 ∧ w2)→(w0 ∧ w1))), ∃(s0,(w0 ∧ w2)))\n  ax-mp(∀(s0,((w0 ∧ w2)→(w0 ∧ w1))), ∀(s0,(w2 → w1)))\n  alimi(s0, (w2 → w1), ((w0 ∧ w2)→(w0 ∧ w1)))\n  anim2d((w2 → w1), w0, w2, w1)\n  id((w2 → w1))\n  exim(s0, (w0 ∧ w2), (w0 ∧ w1))\n}","parent":["mp2","ax-mp","alimi","anim2d","id","exim"],"children":["ferio","datisi","dimatis"]},{"name":"dariiALT","content":"Alternate proof of ~ darii , shorter but using more axioms. This shows how the use of ~ spi may shorten some proofs of the Aristotelian syllogisms, even though this adds axiom dependencies. Note that ~ spi is the inference associated with ~ sp , which corresponds to the axiom (T) of modal logic. (Contributed by David A. Wheeler, 27-Aug-2016.) Added precisions on axiom usage. (Revised by BJ, 27-Sep-2022.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm dariiALT(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wex(s0, wa(w0, w2))\n} = {\n  eximii(s0, wa(w0, w1), wa(w0, w2))\n  anim2i(w0, w2, w1)\n  spi(s0, wi(w2, w1))\n}","pretty":"thm dariiALT(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∃(s0,(w0 ∧ w2))\n} = {\n  eximii(s0, (w0 ∧ w1), (w0 ∧ w2))\n  anim2i(w0, w2, w1)\n  spi(s0, (w2 → w1))\n}","parent":["eximii","anim2i","spi"],"children":[]},{"name":"ferio","content":"\"Ferio\" (\"Ferioque\"), one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , and some ` ch ` is ` ph ` , therefore some ` ch ` is not ` ps ` . Instance of ~ darii . In Aristotelian notation, EIO-1: MeP and SiM therefore SoP. For example, given \"No homework is fun\" and \"Some reading is homework\", therefore \"Some reading is not fun\". This is essentially a logical axiom in Aristotelian logic. Example from ~ https://en.wikipedia.org/wiki/Syllogism . (Contributed by David A. Wheeler, 24-Aug-2016.)","origin":"thm ferio(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w2, wn(w1)))\n  -| wex(s0, wa(w0, w2))\n} = {\n  darii(s0, w0, wn(w1), w2)\n}","pretty":"thm ferio(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w2 → ¬ w1))\n  ⊣ ∃(s0,(w0 ∧ w2))\n} = {\n  darii(s0, w0, ¬ w1, w2)\n}","parent":["darii"],"children":[]},{"name":"barbarilem","content":"Lemma for ~ barbari and the other Aristotelian syllogisms with existential assumption. (Contributed by BJ, 16-Sep-2022.)","origin":"thm barbarilem(setvar s0, wff w0, wff w1) {\n  |- wex(s0, wa(w0, w1))\n  -| wex(s0, w0)\n  -| wal(s0, wi(w0, w1))\n} = {\n  mp2(wex(s0, wa(w0, w1)), wal(s0, wi(w0, w1)), wex(s0, w0))\n  exintr(s0, w0, w1)\n}","pretty":"thm barbarilem(setvar s0, wff w0, wff w1) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∃(s0, w0)\n  ⊣ ∀(s0,(w0 → w1))\n} = {\n  mp2(∃(s0,(w0 ∧ w1)), ∀(s0,(w0 → w1)), ∃(s0, w0))\n  exintr(s0, w0, w1)\n}","parent":["mp2","exintr"],"children":["barbari","cesaro","camestros","calemos"]},{"name":"barbari","content":"\"Barbari\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , all ` ch ` is ` ph ` , and some ` ch ` exist, therefore some ` ch ` is ` ps ` . In Aristotelian notation, AAI-1: MaP and SaM therefore SiP. For example, given \"All men are mortal\", \"All Greeks are men\", and \"Greeks exist\", therefore \"Some Greeks are mortal\". Note the existence hypothesis (to prove the \"some\" in the conclusion). Example from ~ https://en.wikipedia.org/wiki/Syllogism . (Contributed by David A. Wheeler, 27-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm barbari(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wal(s0, wi(w0, w2))\n  -| wex(s0, w0)\n} = {\n  barbarilem(s0, w0, w1)\n  barbara(s0, w0, w1, w2)\n}","pretty":"thm barbari(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∀(s0,(w0 → w2))\n  ⊣ ∃(s0, w0)\n} = {\n  barbarilem(s0, w0, w1)\n  barbara(s0, w0, w1, w2)\n}","parent":["barbarilem","barbara"],"children":["celaront","bamalip"]},{"name":"barbariALT","content":"Alternate proof of ~ barbari , shorter but using more axioms. See comment of ~ dariiALT . (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm barbariALT(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wal(s0, wi(w0, w2))\n  -| wex(s0, w0)\n} = {\n  eximii(s0, wa(w0, w1), w0)\n  ancli(w0, w1)\n  spi(s0, wi(w0, w1))\n  barbara(s0, w0, w1, w2)\n}","pretty":"thm barbariALT(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∀(s0,(w0 → w2))\n  ⊣ ∃(s0, w0)\n} = {\n  eximii(s0, (w0 ∧ w1), w0)\n  ancli(w0, w1)\n  spi(s0, (w0 → w1))\n  barbara(s0, w0, w1, w2)\n}","parent":["eximii","ancli","spi","barbara"],"children":[]},{"name":"celaront","content":"\"Celaront\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , all ` ch ` is ` ph ` , and some ` ch ` exist, therefore some ` ch ` is not ` ps ` . Instance of ~ barbari . In Aristotelian notation, EAO-1: MeP and SaM therefore SoP. For example, given \"No reptiles have fur\", \"All snakes are reptiles\", and \"Snakes exist\", prove \"Some snakes have no fur\". Note the existence hypothesis. Example from ~ https://en.wikipedia.org/wiki/Syllogism . (Contributed by David A. Wheeler, 27-Aug-2016.)","origin":"thm celaront(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w2, wn(w1)))\n  -| wal(s0, wi(w0, w2))\n  -| wex(s0, w0)\n} = {\n  barbari(s0, w0, wn(w1), w2)\n}","pretty":"thm celaront(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w2 → ¬ w1))\n  ⊣ ∀(s0,(w0 → w2))\n  ⊣ ∃(s0, w0)\n} = {\n  barbari(s0, w0, ¬ w1, w2)\n}","parent":["barbari"],"children":[]},{"name":"cesare","content":"\"Cesare\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , and all ` ch ` is ` ps ` , therefore no ` ch ` is ` ph ` . In Aristotelian notation, EAE-2: PeM and SaM therefore SeP. Related to ~ celarent . (Contributed by David A. Wheeler, 27-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm cesare(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wal(s0, wi(w0, w2))\n} = {\n  celarent(s0, w0, w1, w2)\n  ax-mp(wal(s0, wi(w2, wn(w1))), wal(s0, wi(w1, wn(w2))))\n  alimi(s0, wi(w1, wn(w2)), wi(w2, wn(w1)))\n  con2(w1, w2)\n}","pretty":"thm cesare(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∀(s0,(w0 → w2))\n} = {\n  celarent(s0, w0, w1, w2)\n  ax-mp(∀(s0,(w2 → ¬ w1)), ∀(s0,(w1 → ¬ w2)))\n  alimi(s0, (w1 → ¬ w2), (w2 → ¬ w1))\n  con2(w1, w2)\n}","parent":["celarent","ax-mp","alimi","con2"],"children":["cesaro"]},{"name":"cesareOLD","content":"Obsolete proof of ~ cesare as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm cesareOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wal(s0, wi(w0, w2))\n} = {\n  ax-gen(s0, wi(w0, wn(w1)))\n  nsyl3(w0, w1, w2)\n  spi(s0, wi(w1, wn(w2)))\n  spi(s0, wi(w0, w2))\n}","pretty":"thm cesareOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∀(s0,(w0 → w2))\n} = {\n  ax-gen(s0, (w0 → ¬ w1))\n  nsyl3(w0, w1, w2)\n  spi(s0, (w1 → ¬ w2))\n  spi(s0, (w0 → w2))\n}","parent":["ax-gen","nsyl3","spi"],"children":[]},{"name":"camestres","content":"\"Camestres\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , and no ` ch ` is ` ps ` , therefore no ` ch ` is ` ph ` . In Aristotelian notation, AEE-2: PaM and SeM therefore SeP. (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm camestres(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w0, wn(w2)))\n} = {\n  celarent(s0, w0, w1, wn(w2))\n  ax-mp(wal(s0, wi(wn(w2), wn(w1))), wal(s0, wi(w1, w2)))\n  alimi(s0, wi(w1, w2), wi(wn(w2), wn(w1)))\n  con3(w1, w2)\n}","pretty":"thm camestres(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w0 → ¬ w2))\n} = {\n  celarent(s0, w0, w1, ¬ w2)\n  ax-mp(∀(s0,(¬ w2 → ¬ w1)), ∀(s0,(w1 → w2)))\n  alimi(s0, (w1 → w2), (¬ w2 → ¬ w1))\n  con3(w1, w2)\n}","parent":["celarent","ax-mp","alimi","con3"],"children":["camestros","calemes"]},{"name":"camestresOLD","content":"Obsolete proof of ~ camestres as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm camestresOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w0, wn(w2)))\n} = {\n  ax-gen(s0, wi(w0, wn(w1)))\n  nsyl(w0, w1, w2)\n  spi(s0, wi(w0, wn(w2)))\n  spi(s0, wi(w1, w2))\n}","pretty":"thm camestresOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w0 → ¬ w2))\n} = {\n  ax-gen(s0, (w0 → ¬ w1))\n  nsyl(w0, w1, w2)\n  spi(s0, (w0 → ¬ w2))\n  spi(s0, (w1 → w2))\n}","parent":["ax-gen","nsyl","spi"],"children":[]},{"name":"festino","content":"\"Festino\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , and some ` ch ` is ` ps ` , therefore some ` ch ` is not ` ph ` . In Aristotelian notation, EIO-2: PeM and SiM therefore SoP. (Contributed by David A. Wheeler, 25-Nov-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm festino(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wex(s0, wa(w0, w2))\n} = {\n  mp2(wex(s0, wa(w0, wn(w1))), wal(s0, wi(wa(w0, w2), wa(w0, wn(w1)))), wex(s0, wa(w0, w2)))\n  ax-mp(wal(s0, wi(wa(w0, w2), wa(w0, wn(w1)))), wal(s0, wi(w1, wn(w2))))\n  alimi(s0, wi(w1, wn(w2)), wi(wa(w0, w2), wa(w0, wn(w1))))\n  anim2d(wi(w1, wn(w2)), w0, w2, wn(w1))\n  con2(w1, w2)\n  exim(s0, wa(w0, w2), wa(w0, wn(w1)))\n}","pretty":"thm festino(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∃(s0,(w0 ∧ w2))\n} = {\n  mp2(∃(s0,(w0 ∧ ¬ w1)), ∀(s0,((w0 ∧ w2)→(w0 ∧ ¬ w1))), ∃(s0,(w0 ∧ w2)))\n  ax-mp(∀(s0,((w0 ∧ w2)→(w0 ∧ ¬ w1))), ∀(s0,(w1 → ¬ w2)))\n  alimi(s0, (w1 → ¬ w2), ((w0 ∧ w2)→(w0 ∧ ¬ w1)))\n  anim2d((w1 → ¬ w2), w0, w2, ¬ w1)\n  con2(w1, w2)\n  exim(s0, (w0 ∧ w2), (w0 ∧ ¬ w1))\n}","parent":["mp2","ax-mp","alimi","anim2d","con2","exim"],"children":["fresison"]},{"name":"festinoALT","content":"Alternate proof of ~ festino , shorter but using more axioms. See comment of ~ dariiALT . (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm festinoALT(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wex(s0, wa(w0, w2))\n} = {\n  eximii(s0, wa(w0, wn(w1)), wa(w0, w2))\n  anim2i(w0, w2, wn(w1))\n  con2i(w2, w1)\n  spi(s0, wi(w1, wn(w2)))\n}","pretty":"thm festinoALT(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∃(s0,(w0 ∧ w2))\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), (w0 ∧ w2))\n  anim2i(w0, w2, ¬ w1)\n  con2i(w2, w1)\n  spi(s0, (w1 → ¬ w2))\n}","parent":["eximii","anim2i","con2i","spi"],"children":[]},{"name":"baroco","content":"\"Baroco\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , and some ` ch ` is not ` ps ` , therefore some ` ch ` is not ` ph ` . In Aristotelian notation, AOO-2: PaM and SoM therefore SoP. For example, \"All informative things are useful\", \"Some websites are not useful\", therefore \"Some websites are not informative\". (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm baroco(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wex(s0, wa(w0, wn(w2)))\n} = {\n  mp2(wex(s0, wa(w0, wn(w1))), wal(s0, wi(wa(w0, wn(w2)), wa(w0, wn(w1)))), wex(s0, wa(w0, wn(w2))))\n  ax-mp(wal(s0, wi(wa(w0, wn(w2)), wa(w0, wn(w1)))), wal(s0, wi(w1, w2)))\n  alimi(s0, wi(w1, w2), wi(wa(w0, wn(w2)), wa(w0, wn(w1))))\n  anim2d(wi(w1, w2), w0, wn(w2), wn(w1))\n  con3(w1, w2)\n  exim(s0, wa(w0, wn(w2)), wa(w0, wn(w1)))\n}","pretty":"thm baroco(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∃(s0,(w0 ∧ ¬ w2))\n} = {\n  mp2(∃(s0,(w0 ∧ ¬ w1)), ∀(s0,((w0 ∧ ¬ w2)→(w0 ∧ ¬ w1))), ∃(s0,(w0 ∧ ¬ w2)))\n  ax-mp(∀(s0,((w0 ∧ ¬ w2)→(w0 ∧ ¬ w1))), ∀(s0,(w1 → w2)))\n  alimi(s0, (w1 → w2), ((w0 ∧ ¬ w2)→(w0 ∧ ¬ w1)))\n  anim2d((w1 → w2), w0, ¬ w2, ¬ w1)\n  con3(w1, w2)\n  exim(s0, (w0 ∧ ¬ w2), (w0 ∧ ¬ w1))\n}","parent":["mp2","ax-mp","alimi","anim2d","con3","exim"],"children":[]},{"name":"barocoALT","content":"Alternate proof of ~ festino , shorter but using more axioms. See comment of ~ dariiALT . (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm barocoALT(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wex(s0, wa(w0, wn(w2)))\n} = {\n  eximii(s0, wa(w0, wn(w1)), wa(w0, wn(w2)))\n  anim2i(w0, wn(w2), wn(w1))\n  con3i(w2, w1)\n  spi(s0, wi(w1, w2))\n}","pretty":"thm barocoALT(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∃(s0,(w0 ∧ ¬ w2))\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), (w0 ∧ ¬ w2))\n  anim2i(w0, ¬ w2, ¬ w1)\n  con3i(w2, w1)\n  spi(s0, (w1 → w2))\n}","parent":["eximii","anim2i","con3i","spi"],"children":[]},{"name":"cesaro","content":"\"Cesaro\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , all ` ch ` is ` ps ` , and ` ch ` exist, therefore some ` ch ` is not ` ph ` . In Aristotelian notation, EAO-2: PeM and SaM therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm cesaro(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wal(s0, wi(w0, w2))\n  -| wex(s0, w0)\n} = {\n  barbarilem(s0, w0, wn(w1))\n  cesare(s0, w0, w1, w2)\n}","pretty":"thm cesaro(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∀(s0,(w0 → w2))\n  ⊣ ∃(s0, w0)\n} = {\n  barbarilem(s0, w0, ¬ w1)\n  cesare(s0, w0, w1, w2)\n}","parent":["barbarilem","cesare"],"children":[]},{"name":"cesaroOLD","content":"Obsolete proof of ~ cesaro as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm cesaroOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wal(s0, wi(w0, w2))\n  -| wex(s0, w0)\n} = {\n  eximii(s0, wa(w0, wn(w1)), w0)\n  ancli(w0, wn(w1))\n  nsyl3(w0, w1, w2)\n  spi(s0, wi(w1, wn(w2)))\n  spi(s0, wi(w0, w2))\n}","pretty":"thm cesaroOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∀(s0,(w0 → w2))\n  ⊣ ∃(s0, w0)\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), w0)\n  ancli(w0, ¬ w1)\n  nsyl3(w0, w1, w2)\n  spi(s0, (w1 → ¬ w2))\n  spi(s0, (w0 → w2))\n}","parent":["eximii","ancli","nsyl3","spi"],"children":[]},{"name":"camestros","content":"\"Camestros\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , no ` ch ` is ` ps ` , and ` ch ` exist, therefore some ` ch ` is not ` ph ` . In Aristotelian notation, AEO-2: PaM and SeM therefore SoP. For example, \"All horses have hooves\", \"No humans have hooves\", and humans exist, therefore \"Some humans are not horses\". (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm camestros(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w0, wn(w2)))\n  -| wex(s0, w0)\n} = {\n  barbarilem(s0, w0, wn(w1))\n  camestres(s0, w0, w1, w2)\n}","pretty":"thm camestros(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w0 → ¬ w2))\n  ⊣ ∃(s0, w0)\n} = {\n  barbarilem(s0, w0, ¬ w1)\n  camestres(s0, w0, w1, w2)\n}","parent":["barbarilem","camestres"],"children":[]},{"name":"camestrosOLD","content":"Obsolete proof of ~ camestros as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm camestrosOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w0, wn(w2)))\n  -| wex(s0, w0)\n} = {\n  eximii(s0, wa(w0, wn(w1)), w0)\n  ancli(w0, wn(w1))\n  nsyl(w0, w1, w2)\n  spi(s0, wi(w0, wn(w2)))\n  spi(s0, wi(w1, w2))\n}","pretty":"thm camestrosOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w0 → ¬ w2))\n  ⊣ ∃(s0, w0)\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), w0)\n  ancli(w0, ¬ w1)\n  nsyl(w0, w1, w2)\n  spi(s0, (w0 → ¬ w2))\n  spi(s0, (w1 → w2))\n}","parent":["eximii","ancli","nsyl","spi"],"children":[]},{"name":"datisi","content":"\"Datisi\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , and some ` ph ` is ` ch ` , therefore some ` ch ` is ` ps ` . In Aristotelian notation, AII-3: MaP and MiS therefore SiP. (Contributed by David A. Wheeler, 28-Aug-2016.) Shorten and reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm datisi(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wex(s0, wa(w2, w0))\n} = {\n  darii(s0, w0, w1, w2)\n  mpbi(wex(s0, wa(w0, w2)), wex(s0, wa(w2, w0)))\n  exancom(s0, w2, w0)\n}","pretty":"thm datisi(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∃(s0,(w2 ∧ w0))\n} = {\n  darii(s0, w0, w1, w2)\n  mpbi(∃(s0,(w0 ∧ w2)), ∃(s0,(w2 ∧ w0)))\n  exancom(s0, w2, w0)\n}","parent":["darii","mpbi","exancom"],"children":["disamis","ferison"]},{"name":"datisiOLD","content":"Obsolete proof of ~ datisi as of 16-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm datisiOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wex(s0, wa(w2, w0))\n} = {\n  eximii(s0, wa(w0, w1), wa(w2, w0))\n  jca(wa(w2, w0), w0, w1)\n  simpr(w2, w0)\n  adantr(w2, w0, w1)\n  spi(s0, wi(w2, w1))\n}","pretty":"thm datisiOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∃(s0,(w2 ∧ w0))\n} = {\n  eximii(s0, (w0 ∧ w1), (w2 ∧ w0))\n  jca((w2 ∧ w0), w0, w1)\n  simpr(w2, w0)\n  adantr(w2, w0, w1)\n  spi(s0, (w2 → w1))\n}","parent":["eximii","jca","simpr","adantr","spi"],"children":[]},{"name":"disamis","content":"\"Disamis\", one of the syllogisms of Aristotelian logic. Some ` ph ` is ` ps ` , and all ` ph ` is ` ch ` , therefore some ` ch ` is ` ps ` . In Aristotelian notation, IAI-3: MiP and MaS therefore SiP. (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm disamis(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wex(s0, wa(w2, w1))\n  -| wal(s0, wi(w2, w0))\n} = {\n  mpbi(wex(s0, wa(w0, w1)), wex(s0, wa(w1, w0)))\n  datisi(s0, w1, w0, w2)\n  exancom(s0, w1, w0)\n}","pretty":"thm disamis(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∃(s0,(w2 ∧ w1))\n  ⊣ ∀(s0,(w2 → w0))\n} = {\n  mpbi(∃(s0,(w0 ∧ w1)), ∃(s0,(w1 ∧ w0)))\n  datisi(s0, w1, w0, w2)\n  exancom(s0, w1, w0)\n}","parent":["mpbi","datisi","exancom"],"children":["bocardo"]},{"name":"disamisOLD","content":"Obsolete proof of ~ disamis as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm disamisOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wex(s0, wa(w2, w1))\n  -| wal(s0, wi(w2, w0))\n} = {\n  eximii(s0, wa(w0, w1), wa(w2, w1))\n  anim1i(w2, w1, w0)\n  spi(s0, wi(w2, w0))\n}","pretty":"thm disamisOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∃(s0,(w2 ∧ w1))\n  ⊣ ∀(s0,(w2 → w0))\n} = {\n  eximii(s0, (w0 ∧ w1), (w2 ∧ w1))\n  anim1i(w2, w1, w0)\n  spi(s0, (w2 → w0))\n}","parent":["eximii","anim1i","spi"],"children":[]},{"name":"ferison","content":"\"Ferison\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , and some ` ph ` is ` ch ` , therefore some ` ch ` is not ` ps ` . Instance of ~ datisi . In Aristotelian notation, EIO-3: MeP and MiS therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.)","origin":"thm ferison(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w2, wn(w1)))\n  -| wex(s0, wa(w2, w0))\n} = {\n  datisi(s0, w0, wn(w1), w2)\n}","pretty":"thm ferison(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w2 → ¬ w1))\n  ⊣ ∃(s0,(w2 ∧ w0))\n} = {\n  datisi(s0, w0, ¬ w1, w2)\n}","parent":["datisi"],"children":[]},{"name":"bocardo","content":"\"Bocardo\", one of the syllogisms of Aristotelian logic. Some ` ph ` is not ` ps ` , and all ` ph ` is ` ch ` , therefore some ` ch ` is not ` ps ` . Instance of ~ disamis . In Aristotelian notation, OAO-3: MoP and MaS therefore SoP. For example, \"Some cats have no tails\", \"All cats are mammals\", therefore \"Some mammals have no tails\". (Contributed by David A. Wheeler, 28-Aug-2016.)","origin":"thm bocardo(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wex(s0, wa(w2, wn(w1)))\n  -| wal(s0, wi(w2, w0))\n} = {\n  disamis(s0, w0, wn(w1), w2)\n}","pretty":"thm bocardo(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∃(s0,(w2 ∧ ¬ w1))\n  ⊣ ∀(s0,(w2 → w0))\n} = {\n  disamis(s0, w0, ¬ w1, w2)\n}","parent":["disamis"],"children":[]},{"name":"darapti","content":"\"Darapti\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , all ` ph ` is ` ch ` , and some ` ph ` exist, therefore some ` ch ` is ` ps ` . In Aristotelian notation, AAI-3: MaP and MaS therefore SiP. For example, \"All squares are rectangles\" and \"All squares are rhombuses\", therefore \"Some rhombuses are rectangles\". (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm darapti(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w2)\n} = {\n  mp2(wex(s0, wa(w0, w1)), wal(s0, wi(w2, wa(w0, w1))), wex(s0, w2))\n  ax-mp(wal(s0, wi(w2, wa(w0, w1))), wal(s0, wa(wi(w2, w0), wi(w2, w1))))\n  mp2an(wal(s0, wa(wi(w2, w0), wi(w2, w1))), wal(s0, wi(w2, w0)), wal(s0, wi(w2, w1)))\n  alanimi(s0, wi(w2, w0), wi(w2, w1), wa(wi(w2, w0), wi(w2, w1)))\n  id(wa(wi(w2, w0), wi(w2, w1)))\n  alimi(s0, wa(wi(w2, w0), wi(w2, w1)), wi(w2, wa(w0, w1)))\n  pm3.43(w2, w0, w1)\n  exim(s0, w2, wa(w0, w1))\n}","pretty":"thm darapti(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w2)\n} = {\n  mp2(∃(s0,(w0 ∧ w1)), ∀(s0,(w2 →(w0 ∧ w1))), ∃(s0, w2))\n  ax-mp(∀(s0,(w2 →(w0 ∧ w1))), ∀(s0,((w2 → w0)∧(w2 → w1))))\n  mp2an(∀(s0,((w2 → w0)∧(w2 → w1))), ∀(s0,(w2 → w0)), ∀(s0,(w2 → w1)))\n  alanimi(s0, (w2 → w0), (w2 → w1), ((w2 → w0)∧(w2 → w1)))\n  id(((w2 → w0)∧(w2 → w1)))\n  alimi(s0, ((w2 → w0)∧(w2 → w1)), (w2 →(w0 ∧ w1)))\n  pm3.43(w2, w0, w1)\n  exim(s0, w2, (w0 ∧ w1))\n}","parent":["mp2","ax-mp","mp2an","alanimi","id","alimi","pm3.43","exim"],"children":["felapton"]},{"name":"daraptiALT","content":"Alternate proof of ~ darapti , shorter but using more axioms. See comment of ~ dariiALT . (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm daraptiALT(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w2, w1))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w2)\n} = {\n  eximii(s0, wa(w0, w1), w2)\n  jca(w2, w0, w1)\n  spi(s0, wi(w2, w0))\n  spi(s0, wi(w2, w1))\n}","pretty":"thm daraptiALT(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w2 → w1))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w2)\n} = {\n  eximii(s0, (w0 ∧ w1), w2)\n  jca(w2, w0, w1)\n  spi(s0, (w2 → w0))\n  spi(s0, (w2 → w1))\n}","parent":["eximii","jca","spi"],"children":[]},{"name":"felapton","content":"\"Felapton\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , all ` ph ` is ` ch ` , and some ` ph ` exist, therefore some ` ch ` is not ` ps ` . Instance of ~ darapti . In Aristotelian notation, EAO-3: MeP and MaS therefore SoP. For example, \"No flowers are animals\" and \"All flowers are plants\", therefore \"Some plants are not animals\". (Contributed by David A. Wheeler, 28-Aug-2016.)","origin":"thm felapton(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w2, wn(w1)))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w2)\n} = {\n  darapti(s0, w0, wn(w1), w2)\n}","pretty":"thm felapton(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w2 → ¬ w1))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w2)\n} = {\n  darapti(s0, w0, ¬ w1, w2)\n}","parent":["darapti"],"children":["fesapo"]},{"name":"calemes","content":"\"Calemes\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , and no ` ps ` is ` ch ` , therefore no ` ch ` is ` ph ` . In Aristotelian notation, AEE-4: PaM and MeS therefore SeP. (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm calemes(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w2, wn(w0)))\n} = {\n  camestres(s0, w0, w1, w2)\n  ax-mp(wal(s0, wi(w0, wn(w2))), wal(s0, wi(w2, wn(w0))))\n  alimi(s0, wi(w2, wn(w0)), wi(w0, wn(w2)))\n  con2(w2, w0)\n}","pretty":"thm calemes(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w2 → ¬ w0))\n} = {\n  camestres(s0, w0, w1, w2)\n  ax-mp(∀(s0,(w0 → ¬ w2)), ∀(s0,(w2 → ¬ w0)))\n  alimi(s0, (w2 → ¬ w0), (w0 → ¬ w2))\n  con2(w2, w0)\n}","parent":["camestres","ax-mp","alimi","con2"],"children":["calemos"]},{"name":"calemesOLD","content":"Obsolete proof of ~ calemes as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm calemesOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wal(s0, wi(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w2, wn(w0)))\n} = {\n  ax-gen(s0, wi(w0, wn(w1)))\n  nsyl(w0, w1, w2)\n  con2i(w0, w2)\n  spi(s0, wi(w2, wn(w0)))\n  spi(s0, wi(w1, w2))\n}","pretty":"thm calemesOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∀(s0,(w0 → ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w2 → ¬ w0))\n} = {\n  ax-gen(s0, (w0 → ¬ w1))\n  nsyl(w0, w1, w2)\n  con2i(w0, w2)\n  spi(s0, (w2 → ¬ w0))\n  spi(s0, (w1 → w2))\n}","parent":["ax-gen","nsyl","con2i","spi"],"children":[]},{"name":"dimatis","content":"\"Dimatis\", one of the syllogisms of Aristotelian logic. Some ` ph ` is ` ps ` , and all ` ps ` is ` ch ` , therefore some ` ch ` is ` ph ` . In Aristotelian notation, IAI-4: PiM and MaS therefore SiP. For example, \"Some pets are rabbits\", \"All rabbits have fur\", therefore \"Some fur bearing animals are pets\". Like ~ darii with positions interchanged. (Contributed by David A. Wheeler, 28-Aug-2016.) Shorten and reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm dimatis(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wex(s0, wa(w1, w2))\n  -| wal(s0, wi(w2, w0))\n} = {\n  mpbi(wex(s0, wa(w0, w1)), wex(s0, wa(w1, w0)))\n  darii(s0, w1, w0, w2)\n  exancom(s0, w1, w0)\n}","pretty":"thm dimatis(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∃(s0,(w1 ∧ w2))\n  ⊣ ∀(s0,(w2 → w0))\n} = {\n  mpbi(∃(s0,(w0 ∧ w1)), ∃(s0,(w1 ∧ w0)))\n  darii(s0, w1, w0, w2)\n  exancom(s0, w1, w0)\n}","parent":["mpbi","darii","exancom"],"children":[]},{"name":"dimatisOLD","content":"Obsolete proof of ~ dimatis as of 16-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm dimatisOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wex(s0, wa(w1, w2))\n  -| wal(s0, wi(w2, w0))\n} = {\n  eximii(s0, wa(w0, w1), wa(w1, w2))\n  jca(wa(w1, w2), w0, w1)\n  adantl(w1, w2, w0)\n  spi(s0, wi(w2, w0))\n  simpl(w1, w2)\n}","pretty":"thm dimatisOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∃(s0,(w1 ∧ w2))\n  ⊣ ∀(s0,(w2 → w0))\n} = {\n  eximii(s0, (w0 ∧ w1), (w1 ∧ w2))\n  jca((w1 ∧ w2), w0, w1)\n  adantl(w1, w2, w0)\n  spi(s0, (w2 → w0))\n  simpl(w1, w2)\n}","parent":["eximii","jca","adantl","spi","simpl"],"children":[]},{"name":"fresison","content":"\"Fresison\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` (PeM), and some ` ps ` is ` ch ` (MiS), therefore some ` ch ` is not ` ph ` (SoP). In Aristotelian notation, EIO-4: PeM and MiS therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.) Shorten and reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm fresison(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wex(s0, wa(w2, w0))\n} = {\n  festino(s0, w0, w1, w2)\n  mpbi(wex(s0, wa(w0, w2)), wex(s0, wa(w2, w0)))\n  exancom(s0, w2, w0)\n}","pretty":"thm fresison(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∃(s0,(w2 ∧ w0))\n} = {\n  festino(s0, w0, w1, w2)\n  mpbi(∃(s0,(w0 ∧ w2)), ∃(s0,(w2 ∧ w0)))\n  exancom(s0, w2, w0)\n}","parent":["festino","mpbi","exancom"],"children":[]},{"name":"fresisonOLD","content":"Obsolete proof of ~ fresison as of 16-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm fresisonOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wex(s0, wa(w2, w0))\n} = {\n  eximii(s0, wa(w0, wn(w1)), wa(w2, w0))\n  jca(wa(w2, w0), w0, wn(w1))\n  simpr(w2, w0)\n  adantr(w2, w0, wn(w1))\n  con2i(w2, w1)\n  spi(s0, wi(w1, wn(w2)))\n}","pretty":"thm fresisonOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∃(s0,(w2 ∧ w0))\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), (w2 ∧ w0))\n  jca((w2 ∧ w0), w0, ¬ w1)\n  simpr(w2, w0)\n  adantr(w2, w0, ¬ w1)\n  con2i(w2, w1)\n  spi(s0, (w1 → ¬ w2))\n}","parent":["eximii","jca","simpr","adantr","con2i","spi"],"children":[]},{"name":"calemos","content":"\"Calemos\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` (PaM), no ` ps ` is ` ch ` (MeS), and ` ch ` exist, therefore some ` ch ` is not ` ph ` (SoP). In Aristotelian notation, AEO-4: PaM and MeS therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.) Shorten and reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm calemos(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w2, wn(w0)))\n  -| wex(s0, w0)\n} = {\n  barbarilem(s0, w0, wn(w1))\n  calemes(s0, w0, w1, w2)\n}","pretty":"thm calemos(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w2 → ¬ w0))\n  ⊣ ∃(s0, w0)\n} = {\n  barbarilem(s0, w0, ¬ w1)\n  calemes(s0, w0, w1, w2)\n}","parent":["barbarilem","calemes"],"children":[]},{"name":"calemosOLD","content":"Obsolete proof of ~ calemos as of 16-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm calemosOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w2, wn(w0)))\n  -| wex(s0, w0)\n} = {\n  eximii(s0, wa(w0, wn(w1)), w0)\n  ancli(w0, wn(w1))\n  nsyl(w0, w1, w2)\n  con2i(w0, w2)\n  spi(s0, wi(w2, wn(w0)))\n  spi(s0, wi(w1, w2))\n}","pretty":"thm calemosOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w2 → ¬ w0))\n  ⊣ ∃(s0, w0)\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), w0)\n  ancli(w0, ¬ w1)\n  nsyl(w0, w1, w2)\n  con2i(w0, w2)\n  spi(s0, (w2 → ¬ w0))\n  spi(s0, (w1 → w2))\n}","parent":["eximii","ancli","nsyl","con2i","spi"],"children":[]},{"name":"fesapo","content":"\"Fesapo\", one of the syllogisms of Aristotelian logic. No ` ph ` is ` ps ` , all ` ps ` is ` ch ` , and ` ps ` exist, therefore some ` ch ` is not ` ph ` . In Aristotelian notation, EAO-4: PeM and MaS therefore SoP. (Contributed by David A. Wheeler, 28-Aug-2016.) Reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm fesapo(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w2)\n} = {\n  felapton(s0, w0, w1, w2)\n  ax-mp(wal(s0, wi(w2, wn(w1))), wal(s0, wi(w1, wn(w2))))\n  alimi(s0, wi(w1, wn(w2)), wi(w2, wn(w1)))\n  con2(w1, w2)\n}","pretty":"thm fesapo(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w2)\n} = {\n  felapton(s0, w0, w1, w2)\n  ax-mp(∀(s0,(w2 → ¬ w1)), ∀(s0,(w1 → ¬ w2)))\n  alimi(s0, (w1 → ¬ w2), (w2 → ¬ w1))\n  con2(w1, w2)\n}","parent":["felapton","ax-mp","alimi","con2"],"children":[]},{"name":"fesapoOLD","content":"Obsolete proof of ~ fesapo as of 27-Sep-2022. (Contributed by David A. Wheeler, 27-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm fesapoOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, wn(w1)))\n  -| wal(s0, wi(w1, wn(w2)))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w2)\n} = {\n  eximii(s0, wa(w0, wn(w1)), w2)\n  jca(w2, w0, wn(w1))\n  spi(s0, wi(w2, w0))\n  con2i(w2, w1)\n  spi(s0, wi(w1, wn(w2)))\n}","pretty":"thm fesapoOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ ¬ w1))\n  ⊣ ∀(s0,(w1 → ¬ w2))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w2)\n} = {\n  eximii(s0, (w0 ∧ ¬ w1), w2)\n  jca(w2, w0, ¬ w1)\n  spi(s0, (w2 → w0))\n  con2i(w2, w1)\n  spi(s0, (w1 → ¬ w2))\n}","parent":["eximii","jca","spi","con2i"],"children":[]},{"name":"bamalip","content":"\"Bamalip\", one of the syllogisms of Aristotelian logic. All ` ph ` is ` ps ` , all ` ps ` is ` ch ` , and ` ph ` exist, therefore some ` ch ` is ` ph ` . In Aristotelian notation, AAI-4: PaM and MaS therefore SiP. Very similar to ~ barbari . (Contributed by David A. Wheeler, 28-Aug-2016.) Shorten and reduce dependencies on axioms. (Revised by BJ, 16-Sep-2022.)","origin":"thm bamalip(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w1)\n} = {\n  mpbi(wex(s0, wa(w0, w1)), wex(s0, wa(w1, w0)))\n  barbari(s0, w1, w0, w2)\n  exancom(s0, w1, w0)\n}","pretty":"thm bamalip(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w1)\n} = {\n  mpbi(∃(s0,(w0 ∧ w1)), ∃(s0,(w1 ∧ w0)))\n  barbari(s0, w1, w0, w2)\n  exancom(s0, w1, w0)\n}","parent":["mpbi","barbari","exancom"],"children":[]},{"name":"bamalipOLD","content":"Obsolete proof of ~ bamalip as of 16-Sep-2022. (Contributed by David A. Wheeler, 28-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm bamalipOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wex(s0, wa(w0, w1))\n  -| wal(s0, wi(w1, w2))\n  -| wal(s0, wi(w2, w0))\n  -| wex(s0, w1)\n} = {\n  eximii(s0, wa(w0, w1), w1)\n  ancri(w1, w0)\n  syl(w1, w0, w2)\n  spi(s0, wi(w1, w2))\n  spi(s0, wi(w2, w0))\n}","pretty":"thm bamalipOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ ∃(s0,(w0 ∧ w1))\n  ⊣ ∀(s0,(w1 → w2))\n  ⊣ ∀(s0,(w2 → w0))\n  ⊣ ∃(s0, w1)\n} = {\n  eximii(s0, (w0 ∧ w1), w1)\n  ancri(w1, w0)\n  syl(w1, w0, w2)\n  spi(s0, (w1 → w2))\n  spi(s0, (w2 → w0))\n}","parent":["eximii","ancri","syl","spi"],"children":[]}]}