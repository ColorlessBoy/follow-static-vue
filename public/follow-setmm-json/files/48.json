{"index":48,"title":"Existential quantifier","content":"","blocks":[{"name":"wex","content":"Extend wff definition to include the existential quantifier (\"there exists\").","origin":"prop wff wex(setvar s0, wff w0) { ∃(s0, w0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wex.s","content":"","origin":"axiom diff.wex.s(setvar sBase, setvar s0, wff w0) {\n  |- diffsw(sBase, wex(s0, w0))\n  -| diffss(sBase, s0)\n  -| diffsw(sBase, w0)\n}","pretty":"axiom diff.wex.s(setvar sBase, setvar s0, wff w0) {\n  ⊢ d(sBase, ∃(s0, w0))\n  ⊣ d(sBase, s0)\n  ⊣ d(sBase, w0)\n}","parent":[],"children":[]},{"name":"diff.wex.c","content":"","origin":"axiom diff.wex.c(class cBase, setvar s0, wff w0) {\n  |- diffcw(cBase, wex(s0, w0))\n  -| diffsc(s0, cBase)\n  -| diffcw(cBase, w0)\n}","pretty":"axiom diff.wex.c(class cBase, setvar s0, wff w0) {\n  ⊢ d(cBase, ∃(s0, w0))\n  ⊣ d(s0, cBase)\n  ⊣ d(cBase, w0)\n}","parent":[],"children":[]},{"name":"diff.wex.w","content":"","origin":"axiom diff.wex.w(wff wBase, setvar s0, wff w0) {\n  |- diffww(wBase, wex(s0, w0))\n  -| diffsw(s0, wBase)\n  -| diffww(wBase, w0)\n}","pretty":"axiom diff.wex.w(wff wBase, setvar s0, wff w0) {\n  ⊢ d(wBase, ∃(s0, w0))\n  ⊣ d(s0, wBase)\n  ⊣ d(wBase, w0)\n}","parent":[],"children":[]},{"name":"df-ex","content":"Define existential quantification. ` E. x ph ` means \"there exists at least one set ` x ` such that ` ph ` is true\". Dual of ~ alex . See also the dual pair ~ alnex / ~ exnal . Definition of [Margaris] p. 49. (Contributed by NM, 10-Jan-1993.)","origin":"axiom df-ex(setvar s0, wff w0) {\n  |- wb(wex(s0, w0), wn(wal(s0, wn(w0))))\n}","pretty":"axiom df-ex(setvar s0, wff w0) {\n  ⊢ (∃(s0, w0)↔ ¬ ∀(s0, ¬ w0))\n}","parent":[],"children":["alnex","eximal","2nalexn","2exnaln","19.43OLD","speimfw","speimfwALT","spimfw","ax6ev","cbvexvw","hbe1w","hbe1","hbe1a","axc16nf","nfex","nfexd","cbvexv1","ax6","drex1","nfexd2","sbex","eujustALT","spcimegf","spcegf","spcimedv","neq0f","n0el","ax6vsep","axnulALT","axpownd","gchi","ballotlem2","axextprim","axrepprim","axunprim","axpowprim","axinfprim","axacprim","distel","bj-axtd","bj-modald","bj-modalbe","bj-hbext","bj-cbvexdv","bj-drex1v","gneispace","pm10.252","hbexgVD","elsetrecslem"]},{"name":"alnex","content":"Universal quantification of negation is equivalent to negation of existential quantification. Dual of ~ exnal (but does not depend on ~ ax-4 contrary to it). See also the dual pair ~ df-ex / ~ alex . Theorem 19.7 of [Margaris] p. 89. (Contributed by NM, 12-Mar-1993.)","origin":"thm alnex(setvar s0, wff w0) {\n  |- wb(wal(s0, wn(w0)), wn(wex(s0, w0)))\n} = {\n  con2bii(wal(s0, wn(w0)), wex(s0, w0))\n  df-ex(s0, w0)\n}","pretty":"thm alnex(setvar s0, wff w0) {\n  ⊢ (∀(s0, ¬ w0)↔ ¬ ∃(s0, w0))\n} = {\n  con2bii(∀(s0, ¬ w0), ∃(s0, w0))\n  df-ex(s0, w0)\n}","parent":["con2bii","df-ex"],"children":["nf3","nfntht2","nex","alex","2exnaln","aleximi","19.38","alinexa","alexn","nexdh","19.43","19.43OLD","19.33b","cbvex","cbvexv","cbvexd","cbvexdva","nexmo","nexmoOLD","dfmo","euae","ralnex","cbvrexdva2OLD","mo2icl","n0el","falseral0","disjsn","axprlem5","dm0rn0","reldm0","iotanul","imadif","dffv2","kmlem4","axpowndlem3","axpownd","hashgt0elex","nmo","bnj1143","unbdqndv1","bj-nexdh","axc11n11r","bj-hbntbi","bj-modal4e","wl-nfeqfb","wl-sb8et","wl-lem-nexmo","wl-dfrexsb","pm10.251","pm10.57","elnev","spr0nelg","zrninitoringc","alimp-no-surprise"]},{"name":"eximal","content":"An equivalence between an implication with an existentially quantified antecedent and an implication with a universally quantified consequent. An interesting case is when the same formula is substituted for both ` ph ` and ` ps ` , since then both implications express a type of non-freeness. See also ~ alimex . (Contributed by BJ, 12-May-2019.)","origin":"thm eximal(setvar s0, wff w0, wff w1) {\n  |- wb(wi(wex(s0, w0), w1), wi(wn(w1), wal(s0, wn(w0))))\n} = {\n  bitri(wi(wex(s0, w0), w1), wi(wn(w1), wal(s0, wn(w0))), wi(wn(wal(s0, wn(w0))), w1))\n  imbi1i(wex(s0, w0), w1, wn(wal(s0, wn(w0))))\n  df-ex(s0, w0)\n  con1b(wal(s0, wn(w0)), w1)\n}","pretty":"thm eximal(setvar s0, wff w0, wff w1) {\n  ⊢ ((∃(s0, w0)→ w1)↔(¬ w1 → ∀(s0, ¬ w0)))\n} = {\n  bitri((∃(s0, w0)→ w1), (¬ w1 → ∀(s0, ¬ w0)), (¬ ∀(s0, ¬ w0)→ w1))\n  imbi1i(∃(s0, w0), w1, ¬ ∀(s0, ¬ w0))\n  df-ex(s0, w0)\n  con1b(∀(s0, ¬ w0), w1)\n}","parent":["bitri","imbi1i","df-ex","con1b"],"children":["ax5e","19.23tOLD","xfree2","bj-exalims","bj-nnfnt"]}]}