{"index":1233,"title":"Disjoints vs. converse functions","content":"","blocks":[{"name":"df-disjss","content":"Define the class of all disjoint sets (but not necessarily disjoint relations, cf. ~ df-disjs ). It is used only by ~ df-disjs . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-disjss(setvar s0) {\n  |- wceq(cdisjss, cab(s0, wcel(ccoss(ccnv(cv(s0))), ccnvrefrels)))\n}","pretty":"axiom df-disjss(setvar s0) {\n  ⊢ Disjss = { s0 |, ~(`' s0)∈ CnvRefRels }\n}","parent":[],"children":["dfdisjs"]},{"name":"df-disjs","content":"Define the disjoint relations class, i.e., the class of disjoints. We need ` Disjs ` for the definition of Parts and Part for the Partition-Equivalence Theorems: this need for Parts as disjoint relations on their domain quotients is the reason why we must define ` Disjs ` instead of simply using converse functions (cf. ~ dfdisjALTV ). The element of the class of disjoints and the disjoint predicate are the same, that is ` ( R e. Disjs <-> Disj R ) ` when ` R ` is a set, see ~ eldisjsdisj . Alternate definitions are ~ dfdisjs , ... , ~ dfdisjs5 . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-disjs() {\n  |- wceq(cdisjs, cin(cdisjss, crels))\n}","pretty":"axiom df-disjs() {\n  ⊢ Disjs =(Disjss ⋂ Rels)\n}","parent":[],"children":["dfdisjs"]},{"name":"df-disjALTV","content":"Define the disjoint relation predicate, i.e., the disjoint predicate. A disjoint relation is a converse function of the relation by ~ dfdisjALTV , see the comment of ~ df-disjs why we need disjoint relations instead of converse functions anyway. The element of the class of disjoints and the disjoint predicate are the same, that is ` ( R e. Disjs <-> Disj R ) ` when ` R ` is a set, see ~ eldisjsdisj . Alternate definitions are ~ dfdisjALTV , ... , ~ dfdisjALTV5 . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-disjALTV(class c0) {\n  |- wb(wdisjALTV(c0), wa(wcnvrefrel(ccoss(ccnv(c0))), wrel(c0)))\n}","pretty":"axiom df-disjALTV(class c0) {\n  ⊢ (⊔ c0 ↔(CnvRefRel(, ~(`' c0))∧ Rel(c0)))\n}","parent":[],"children":["dfdisjALTV","dfdisjALTV2","eldisjsdisj","disjrel"]},{"name":"df-eldisjs","content":"Define the disjoint elementhood relations class, i.e., the disjoint elements class. The element of the disjoint elements class and the disjoint elementhood predicate are the same, that is ` ( A e. ElDisjs <-> ElDisj A ) ` when ` A ` is a set, see ~ eleldisjseldisj . (Contributed by Peter Mazsa, 28-Nov-2022.)","origin":"axiom df-eldisjs(setvar s0) {\n  |- wceq(celdisjs, cab(s0, wcel(cres(ccnv(cep), cv(s0)), cdisjs)))\n}","pretty":"axiom df-eldisjs(setvar s0) {\n  ⊢ ElDisjs = { s0 |(`' ∈ |` s0)∈ Disjs }\n}","parent":[],"children":["eleldisjs"]},{"name":"df-eldisj","content":"Define the disjoint elementhood relation predicate, i.e., the disjoint elementhood predicate. Read: the elements of ` A ` are disjoint. The element of the disjoint elements class and the disjoint elementhood predicate are the same, that is ` ( A e. ElDisjs <-> ElDisj A ) ` when ` A ` is a set, see ~ eleldisjseldisj . As of now, disjoint elementhood is defined as \"partition\" in set.mm : compare ~ df-prt with ~ dfeldisj5 . See also the comments of ~~? dfmembpart2 and of ~~? df-parts . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-eldisj(class c0) {\n  |- wb(weldisj(c0), wdisjALTV(cres(ccnv(cep), c0)))\n}","pretty":"axiom df-eldisj(class c0) {\n  ⊢ (ElDisj(c0)↔ ⊔(`' ∈ |` c0))\n}","parent":[],"children":["dfeldisj2","dfeldisj3","dfeldisj4","eleldisjseldisj","eldisjss","eldisjeq"]},{"name":"dfdisjs","content":"Alternate definition of the class of disjoints. (Contributed by Peter Mazsa, 18-Jul-2021.)","origin":"thm dfdisjs(setvar s0) {\n  |- wceq(cdisjs, crab(s0, crels, wcel(ccoss(ccnv(cv(s0))), ccnvrefrels)))\n} = {\n  abeqin(s0, cdisjs, crels, cdisjss, wcel(ccoss(ccnv(cv(s0))), ccnvrefrels))\n  df-disjs()\n  df-disjss(s0)\n  diff.crels.s(s0)\n}","pretty":"thm dfdisjs(setvar s0) {\n  ⊢ Disjs = { s0 ∈ Rels |, ~(`' s0)∈ CnvRefRels }\n} = {\n  abeqin(s0, cdisjs, crels, cdisjss, , ~(`' s0)∈ CnvRefRels)\n  df-disjs()\n  df-disjss(s0)\n  diff.crels.s(s0)\n}","parent":["abeqin","df-disjs","df-disjss","diff.crels.s"],"children":["dfdisjs2","eldisjs"]},{"name":"dfdisjs2","content":"Alternate definition of the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dfdisjs2(setvar s0) {\n  |- wceq(cdisjs, crab(s0, crels, wss(ccoss(ccnv(cv(s0))), cid)))\n} = {\n  rabimbieq(s0, cdisjs, crels, wss(ccoss(ccnv(cv(s0))), cid), wcel(ccoss(ccnv(cv(s0))), ccnvrefrels))\n  dfdisjs(s0)\n  syl6rbbr(wcel(cv(s0), crels), wcel(ccoss(ccnv(cv(s0))), ccnvrefrels), wss(ccoss(ccnv(cv(s0))), cid), wa(wss(ccoss(ccnv(cv(s0))), cid), wcel(ccoss(ccnv(cv(s0))), crels)))\n  biantrud(wcel(cv(s0), crels), wss(ccoss(ccnv(cv(s0))), cid), wcel(ccoss(ccnv(cv(s0))), crels))\n  cosscnvelrels(cv(s0), crels)\n  cosselcnvrefrels2(ccnv(cv(s0)))\n}","pretty":"thm dfdisjs2(setvar s0) {\n  ⊢ Disjs = { s0 ∈ Rels |, ~(`' s0)⊆ = }\n} = {\n  rabimbieq(s0, cdisjs, crels, , ~(`' s0)⊆ =, , ~(`' s0)∈ CnvRefRels)\n  dfdisjs(s0)\n  syl6rbbr(s0 ∈ Rels, , ~(`' s0)∈ CnvRefRels, , ~(`' s0)⊆ =, (, ~(`' s0)⊆ = ∧, ~(`' s0)∈ Rels))\n  biantrud(s0 ∈ Rels, , ~(`' s0)⊆ =, , ~(`' s0)∈ Rels)\n  cosscnvelrels(s0, crels)\n  cosselcnvrefrels2(`' s0)\n}","parent":["rabimbieq","dfdisjs","syl6rbbr","biantrud","cosscnvelrels","cosselcnvrefrels2"],"children":["dfdisjs3","dfdisjs4","dfdisjs5"]},{"name":"dfdisjs3","content":"Alternate definition of the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dfdisjs3(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wceq(cdisjs, crab(s0, crels, wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s3)), wbr(cv(s2), cv(s0), cv(s3))), wceq(cv(s1), cv(s2))))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n} = {\n  rabbieq(s0, cdisjs, crels, wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s3)), wbr(cv(s2), cv(s0), cv(s3))), wceq(cv(s1), cv(s2)))))), wss(ccoss(ccnv(cv(s0))), cid))\n  dfdisjs2(s0)\n  cosscnvssid3(s1, s2, s3, cv(s0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","pretty":"thm dfdisjs3(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ Disjs = { s0 ∈ Rels | ∀(s1, ∀(s2, ∀(s3,((s1[s0]s3 ∧ s2[s0]s3)→ s1 = s2))))}\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s2, s3)\n} = {\n  rabbieq(s0, cdisjs, crels, ∀(s1, ∀(s2, ∀(s3,((s1[s0]s3 ∧ s2[s0]s3)→ s1 = s2)))), , ~(`' s0)⊆ =)\n  dfdisjs2(s0)\n  cosscnvssid3(s1, s2, s3, s0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","parent":["rabbieq","dfdisjs2","cosscnvssid3","diff.cv.s","diffss.ex"],"children":[]},{"name":"dfdisjs4","content":"Alternate definition of the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dfdisjs4(setvar s0, setvar s1, setvar s2) {\n  |- wceq(cdisjs, crab(s0, crels, wal(s1, wmo(s2, wbr(cv(s2), cv(s0), cv(s1))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  rabbieq(s0, cdisjs, crels, wal(s1, wmo(s2, wbr(cv(s2), cv(s0), cv(s1)))), wss(ccoss(ccnv(cv(s0))), cid))\n  dfdisjs2(s0)\n  cosscnvssid4(s1, s2, cv(s0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n}","pretty":"thm dfdisjs4(setvar s0, setvar s1, setvar s2) {\n  ⊢ Disjs = { s0 ∈ Rels | ∀(s1, ∃*(s2, s2[s0]s1))}\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  rabbieq(s0, cdisjs, crels, ∀(s1, ∃*(s2, s2[s0]s1)), , ~(`' s0)⊆ =)\n  dfdisjs2(s0)\n  cosscnvssid4(s1, s2, s0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n}","parent":["rabbieq","dfdisjs2","cosscnvssid4","diff.cv.s","diffss.ex"],"children":[]},{"name":"dfdisjs5","content":"Alternate definition of the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dfdisjs5(setvar s0, setvar s1, setvar s2) {\n  |- wceq(cdisjs, crab(s0, crels, wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  rabimbieq(s0, cdisjs, crels, wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls)))), wss(ccoss(ccnv(cv(s0))), cid))\n  dfdisjs2(s0)\n  mpbiri(wcel(cv(s0), crels), wb(wss(ccoss(ccnv(cv(s0))), cid), wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls))))), wb(wa(wss(ccoss(ccnv(cv(s0))), cid), wrel(cv(s0))), wa(wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls)))), wrel(cv(s0)))))\n  cosscnvssid5(s1, s2, cv(s0))\n  bibi12d(wcel(cv(s0), crels), wss(ccoss(ccnv(cv(s0))), cid), wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls)))), wa(wss(ccoss(ccnv(cv(s0))), cid), wrel(cv(s0))), wa(wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls)))), wrel(cv(s0))))\n  biantrud(wcel(cv(s0), crels), wss(ccoss(ccnv(cv(s0))), cid), wrel(cv(s0)))\n  biantrud(wcel(cv(s0), crels), wral(s1, cdm(cv(s0)), wral(s2, cdm(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), cv(s0)), cec(cv(s2), cv(s0))), emptycls)))), wrel(cv(s0)))\n  elrelsrelim(cv(s0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n}","pretty":"thm dfdisjs5(setvar s0, setvar s1, setvar s2) {\n  ⊢ Disjs = { s0 ∈ Rels | ∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅)))}\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  rabimbieq(s0, cdisjs, crels, ∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅))), , ~(`' s0)⊆ =)\n  dfdisjs2(s0)\n  mpbiri(s0 ∈ Rels, (, ~(`' s0)⊆ = ↔ ∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅)))), ((, ~(`' s0)⊆ = ∧ Rel(s0))↔(∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅)))∧ Rel(s0))))\n  cosscnvssid5(s1, s2, s0)\n  bibi12d(s0 ∈ Rels, , ~(`' s0)⊆ =, ∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅))), (, ~(`' s0)⊆ = ∧ Rel(s0)), (∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅)))∧ Rel(s0)))\n  biantrud(s0 ∈ Rels, , ~(`' s0)⊆ =, Rel(s0))\n  biantrud(s0 ∈ Rels, ∀(s1 ∈ dom(s0), ∀(s2 ∈ dom(s0),(s1 = s2 ∨([s1]s0 ⋂[s2]s0)= ∅))), Rel(s0))\n  elrelsrelim(s0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n}","parent":["rabimbieq","dfdisjs2","mpbiri","cosscnvssid5","bibi12d","biantrud","elrelsrelim","diff.cv.s","diffss.ex"],"children":[]},{"name":"dfdisjALTV","content":"Alternate definition of the disjoint relation predicate. A disjoint relation is a converse function of the relation, see the comment of ~ df-disjs why we need disjoint relations instead of converse functions anyway. (Contributed by Peter Mazsa, 27-Jul-2021.)","origin":"thm dfdisjALTV(class c0) {\n  |- wb(wdisjALTV(c0), wa(wfunALTV(ccnv(c0)), wrel(c0)))\n} = {\n  bitr4i(wdisjALTV(c0), wa(wfunALTV(ccnv(c0)), wrel(c0)), wa(wcnvrefrel(ccoss(ccnv(c0))), wrel(c0)))\n  df-disjALTV(c0)\n  anbi1i(wfunALTV(ccnv(c0)), wrel(c0), wcnvrefrel(ccoss(ccnv(c0))))\n  mpbiran2(wfunALTV(ccnv(c0)), wcnvrefrel(ccoss(ccnv(c0))), wrel(ccnv(c0)))\n  relcnv(c0)\n  df-funALTV(ccnv(c0))\n}","pretty":"thm dfdisjALTV(class c0) {\n  ⊢ (⊔ c0 ↔(FunALTV(`' c0)∧ Rel(c0)))\n} = {\n  bitr4i(⊔ c0, (FunALTV(`' c0)∧ Rel(c0)), (CnvRefRel(, ~(`' c0))∧ Rel(c0)))\n  df-disjALTV(c0)\n  anbi1i(FunALTV(`' c0), Rel(c0), CnvRefRel(, ~(`' c0)))\n  mpbiran2(FunALTV(`' c0), CnvRefRel(, ~(`' c0)), Rel(`' c0))\n  relcnv(c0)\n  df-funALTV(`' c0)\n}","parent":["bitr4i","df-disjALTV","anbi1i","mpbiran2","relcnv","df-funALTV"],"children":["disjss"]},{"name":"dfdisjALTV2","content":"Alternate definition of the disjoint relation predicate, cf. ~ dffunALTV2 . (Contributed by Peter Mazsa, 27-Jul-2021.)","origin":"thm dfdisjALTV2(class c0) {\n  |- wb(wdisjALTV(c0), wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)))\n} = {\n  bitri(wdisjALTV(c0), wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)), wa(wcnvrefrel(ccoss(ccnv(c0))), wrel(c0)))\n  df-disjALTV(c0)\n  anbi1i(wcnvrefrel(ccoss(ccnv(c0))), wrel(c0), wss(ccoss(ccnv(c0)), cid))\n  cnvrefrelcoss2(ccnv(c0))\n}","pretty":"thm dfdisjALTV2(class c0) {\n  ⊢ (⊔ c0 ↔(, ~(`' c0)⊆ = ∧ Rel(c0)))\n} = {\n  bitri(⊔ c0, (, ~(`' c0)⊆ = ∧ Rel(c0)), (CnvRefRel(, ~(`' c0))∧ Rel(c0)))\n  df-disjALTV(c0)\n  anbi1i(CnvRefRel(, ~(`' c0)), Rel(c0), , ~(`' c0)⊆ =)\n  cnvrefrelcoss2(`' c0)\n}","parent":["bitri","df-disjALTV","anbi1i","cnvrefrelcoss2"],"children":["dfdisjALTV3","dfdisjALTV4","dfdisjALTV5","dfeldisj2","disjxrn","disjorimxrn","disjALTVid"]},{"name":"dfdisjALTV3","content":"Alternate definition of the disjoint relation predicate, cf. ~ dffunALTV3 . (Contributed by Peter Mazsa, 28-Jul-2021.)","origin":"thm dfdisjALTV3(setvar s0, setvar s1, setvar s2, class c0) {\n  |- wb(wdisjALTV(c0), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s2)), wbr(cv(s1), c0, cv(s2))), wceq(cv(s0), cv(s1)))))), wrel(c0)))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n  -| diffsc(s2, c0)\n} = {\n  bitri(wdisjALTV(c0), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s2)), wbr(cv(s1), c0, cv(s2))), wceq(cv(s0), cv(s1)))))), wrel(c0)), wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)))\n  dfdisjALTV2(c0)\n  anbi1i(wss(ccoss(ccnv(c0)), cid), wrel(c0), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s2)), wbr(cv(s1), c0, cv(s2))), wceq(cv(s0), cv(s1)))))))\n  cosscnvssid3(s0, s1, s2, c0)\n}","pretty":"thm dfdisjALTV3(setvar s0, setvar s1, setvar s2, class c0) {\n  ⊢ (⊔ c0 ↔(∀(s0, ∀(s1, ∀(s2,((s0[c0]s2 ∧ s1[c0]s2)→ s0 = s1))))∧ Rel(c0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n  ⊣ d(s2, c0)\n} = {\n  bitri(⊔ c0, (∀(s0, ∀(s1, ∀(s2,((s0[c0]s2 ∧ s1[c0]s2)→ s0 = s1))))∧ Rel(c0)), (, ~(`' c0)⊆ = ∧ Rel(c0)))\n  dfdisjALTV2(c0)\n  anbi1i(, ~(`' c0)⊆ =, Rel(c0), ∀(s0, ∀(s1, ∀(s2,((s0[c0]s2 ∧ s1[c0]s2)→ s0 = s1)))))\n  cosscnvssid3(s0, s1, s2, c0)\n}","parent":["bitri","dfdisjALTV2","anbi1i","cosscnvssid3"],"children":["dfeldisj3"]},{"name":"dfdisjALTV4","content":"Alternate definition of the disjoint relation predicate, cf. ~ dffunALTV4 . (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dfdisjALTV4(setvar s0, setvar s1, class c0) {\n  |- wb(wdisjALTV(c0), wa(wal(s0, wmo(s1, wbr(cv(s1), c0, cv(s0)))), wrel(c0)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wdisjALTV(c0), wa(wal(s0, wmo(s1, wbr(cv(s1), c0, cv(s0)))), wrel(c0)), wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)))\n  dfdisjALTV2(c0)\n  anbi1i(wss(ccoss(ccnv(c0)), cid), wrel(c0), wal(s0, wmo(s1, wbr(cv(s1), c0, cv(s0)))))\n  cosscnvssid4(s0, s1, c0)\n}","pretty":"thm dfdisjALTV4(setvar s0, setvar s1, class c0) {\n  ⊢ (⊔ c0 ↔(∀(s0, ∃*(s1, s1[c0]s0))∧ Rel(c0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(⊔ c0, (∀(s0, ∃*(s1, s1[c0]s0))∧ Rel(c0)), (, ~(`' c0)⊆ = ∧ Rel(c0)))\n  dfdisjALTV2(c0)\n  anbi1i(, ~(`' c0)⊆ =, Rel(c0), ∀(s0, ∃*(s1, s1[c0]s0)))\n  cosscnvssid4(s0, s1, c0)\n}","parent":["bitri","dfdisjALTV2","anbi1i","cosscnvssid4"],"children":["dfeldisj4","disjALTV0"]},{"name":"dfdisjALTV5","content":"Alternate definition of the disjoint relation predicate, cf. ~ dffunALTV5 . (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dfdisjALTV5(setvar s0, setvar s1, class c0) {\n  |- wb(wdisjALTV(c0), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wrel(c0)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wdisjALTV(c0), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wrel(c0)), wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)))\n  dfdisjALTV2(c0)\n  cosscnvssid5(s0, s1, c0)\n}","pretty":"thm dfdisjALTV5(setvar s0, setvar s1, class c0) {\n  ⊢ (⊔ c0 ↔(∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ Rel(c0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(⊔ c0, (∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ Rel(c0)), (, ~(`' c0)⊆ = ∧ Rel(c0)))\n  dfdisjALTV2(c0)\n  cosscnvssid5(s0, s1, c0)\n}","parent":["bitri","dfdisjALTV2","cosscnvssid5"],"children":[]},{"name":"dfeldisj2","content":"Alternate definition of the disjoint elementhood predicate. (Contributed by Peter Mazsa, 19-Sep-2021.)","origin":"thm dfeldisj2(class c0) {\n  |- wb(weldisj(c0), wss(ccoss(ccnv(cres(ccnv(cep), c0))), cid))\n} = {\n  bitri(weldisj(c0), wss(ccoss(ccnv(cres(ccnv(cep), c0))), cid), wdisjALTV(cres(ccnv(cep), c0)))\n  df-eldisj(c0)\n  mpbiran2(wdisjALTV(cres(ccnv(cep), c0)), wss(ccoss(ccnv(cres(ccnv(cep), c0))), cid), wrel(cres(ccnv(cep), c0)))\n  relres(ccnv(cep), c0)\n  dfdisjALTV2(cres(ccnv(cep), c0))\n}","pretty":"thm dfeldisj2(class c0) {\n  ⊢ (ElDisj(c0)↔, ~(`'(`' ∈ |` c0))⊆ =)\n} = {\n  bitri(ElDisj(c0), , ~(`'(`' ∈ |` c0))⊆ =, ⊔(`' ∈ |` c0))\n  df-eldisj(c0)\n  mpbiran2(⊔(`' ∈ |` c0), , ~(`'(`' ∈ |` c0))⊆ =, Rel((`' ∈ |` c0)))\n  relres(`' ∈, c0)\n  dfdisjALTV2((`' ∈ |` c0))\n}","parent":["bitri","df-eldisj","mpbiran2","relres","dfdisjALTV2"],"children":[]},{"name":"dfeldisj3","content":"Alternate definition of the disjoint elementhood predicate. (Contributed by Peter Mazsa, 19-Sep-2021.)","origin":"thm dfeldisj3(setvar s0, setvar s1, setvar s2, class c0) {\n  |- wb(weldisj(c0), wral(s0, c0, wral(s1, c0, wral(s2, cin(cv(s0), cv(s1)), wceq(cv(s0), cv(s1))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n  -| diffsc(s2, c0)\n} = {\n  bitr4i(weldisj(c0), wral(s0, c0, wral(s1, c0, wral(s2, cin(cv(s0), cv(s1)), wceq(cv(s0), cv(s1))))), wal(s0, wal(s1, wal(s2, wi(w3a(wcel(cv(s0), c0), wcel(cv(s1), c0), wcel(cv(s2), cin(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1)))))))\n  3bitri(weldisj(c0), wal(s0, wal(s1, wal(s2, wi(w3a(wcel(cv(s0), c0), wcel(cv(s1), c0), wcel(cv(s2), cin(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1)))))), wdisjALTV(cres(ccnv(cep), c0)), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2))), wceq(cv(s0), cv(s1)))))))\n  df-eldisj(c0)\n  mpbiran2(wdisjALTV(cres(ccnv(cep), c0)), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2))), wceq(cv(s0), cv(s1)))))), wrel(cres(ccnv(cep), c0)))\n  relres(ccnv(cep), c0)\n  dfdisjALTV3(s0, s1, s2, cres(ccnv(cep), c0))\n  3albii(s0, s1, s2, wi(wa(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2))), wceq(cv(s0), cv(s1))), wi(w3a(wcel(cv(s0), c0), wcel(cv(s1), c0), wcel(cv(s2), cin(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1))))\n  imbi1i(wa(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2))), wceq(cv(s0), cv(s1)), w3a(wcel(cv(s0), c0), wcel(cv(s1), c0), wcel(cv(s2), cin(cv(s0), cv(s1)))))\n  bitr4i(wa(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2))), w3a(wcel(cv(s0), c0), wcel(cv(s1), c0), wcel(cv(s2), cin(cv(s0), cv(s1)))), wa(wa(wcel(cv(s0), c0), wcel(cv(s1), c0)), wcel(cv(s2), cin(cv(s0), cv(s1)))))\n  3bitr4i(wa(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2))), wa(wa(wcel(cv(s0), c0), wcel(cv(s1), c0)), wcel(cv(s2), cin(cv(s0), cv(s1)))), wa(wa(wcel(cv(s0), c0), wcel(cv(s2), cv(s0))), wa(wcel(cv(s1), c0), wcel(cv(s2), cv(s1)))), wa(wa(wcel(cv(s0), c0), wcel(cv(s1), c0)), wa(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)))))\n  an4(wcel(cv(s0), c0), wcel(cv(s2), cv(s0)), wcel(cv(s1), c0), wcel(cv(s2), cv(s1)))\n  anbi12i(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wbr(cv(s1), cres(ccnv(cep), c0), cv(s2)), wa(wcel(cv(s0), c0), wcel(cv(s2), cv(s0))), wa(wcel(cv(s1), c0), wcel(cv(s2), cv(s1))))\n  el2v(s0, s2, wb(wbr(cv(s0), cres(ccnv(cep), c0), cv(s2)), wa(wcel(cv(s0), c0), wcel(cv(s2), cv(s0)))))\n  brcnvepres(cv(s0), universe, cv(s2), universe, c0)\n  el2v(s1, s2, wb(wbr(cv(s1), cres(ccnv(cep), c0), cv(s2)), wa(wcel(cv(s1), c0), wcel(cv(s2), cv(s1)))))\n  brcnvepres(cv(s1), universe, cv(s2), universe, c0)\n  anbi2i(wa(wcel(cv(s0), c0), wcel(cv(s1), c0)), wcel(cv(s2), cin(cv(s0), cv(s1))), wa(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  elin(cv(s2), cv(s0), cv(s1))\n  df-3an(wcel(cv(s0), c0), wcel(cv(s1), c0), wcel(cv(s2), cin(cv(s0), cv(s1))))\n  r3al(s0, s1, s2, c0, c0, cin(cv(s0), cv(s1)), wceq(cv(s0), cv(s1)))\n  diff.cres.s(s0, ccnv(cep), c0)\n  diff.ccnv.s(s0, cep)\n  diff.cep.s(s0)\n  diff.cres.s(s1, ccnv(cep), c0)\n  diff.ccnv.s(s1, cep)\n  diff.cep.s(s1)\n  diff.cres.s(s2, ccnv(cep), c0)\n  diff.ccnv.s(s2, cep)\n  diff.cep.s(s2)\n}","pretty":"thm dfeldisj3(setvar s0, setvar s1, setvar s2, class c0) {\n  ⊢ (ElDisj(c0)↔ ∀(s0 ∈ c0, ∀(s1 ∈ c0, ∀(s2 ∈(s0 ⋂ s1), s0 = s1))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n  ⊣ d(s2, c0)\n} = {\n  bitr4i(ElDisj(c0), ∀(s0 ∈ c0, ∀(s1 ∈ c0, ∀(s2 ∈(s0 ⋂ s1), s0 = s1))), ∀(s0, ∀(s1, ∀(s2,((s0 ∈ c0 ∧ s1 ∈ c0 ∧ s2 ∈(s0 ⋂ s1))→ s0 = s1)))))\n  3bitri(ElDisj(c0), ∀(s0, ∀(s1, ∀(s2,((s0 ∈ c0 ∧ s1 ∈ c0 ∧ s2 ∈(s0 ⋂ s1))→ s0 = s1)))), ⊔(`' ∈ |` c0), ∀(s0, ∀(s1, ∀(s2,((s0[(`' ∈ |` c0)]s2 ∧ s1[(`' ∈ |` c0)]s2)→ s0 = s1)))))\n  df-eldisj(c0)\n  mpbiran2(⊔(`' ∈ |` c0), ∀(s0, ∀(s1, ∀(s2,((s0[(`' ∈ |` c0)]s2 ∧ s1[(`' ∈ |` c0)]s2)→ s0 = s1)))), Rel((`' ∈ |` c0)))\n  relres(`' ∈, c0)\n  dfdisjALTV3(s0, s1, s2, (`' ∈ |` c0))\n  3albii(s0, s1, s2, ((s0[(`' ∈ |` c0)]s2 ∧ s1[(`' ∈ |` c0)]s2)→ s0 = s1), ((s0 ∈ c0 ∧ s1 ∈ c0 ∧ s2 ∈(s0 ⋂ s1))→ s0 = s1))\n  imbi1i((s0[(`' ∈ |` c0)]s2 ∧ s1[(`' ∈ |` c0)]s2), s0 = s1, (s0 ∈ c0 ∧ s1 ∈ c0 ∧ s2 ∈(s0 ⋂ s1)))\n  bitr4i((s0[(`' ∈ |` c0)]s2 ∧ s1[(`' ∈ |` c0)]s2), (s0 ∈ c0 ∧ s1 ∈ c0 ∧ s2 ∈(s0 ⋂ s1)), ((s0 ∈ c0 ∧ s1 ∈ c0)∧ s2 ∈(s0 ⋂ s1)))\n  3bitr4i((s0[(`' ∈ |` c0)]s2 ∧ s1[(`' ∈ |` c0)]s2), ((s0 ∈ c0 ∧ s1 ∈ c0)∧ s2 ∈(s0 ⋂ s1)), ((s0 ∈ c0 ∧ s2 ∈ s0)∧(s1 ∈ c0 ∧ s2 ∈ s1)), ((s0 ∈ c0 ∧ s1 ∈ c0)∧(s2 ∈ s0 ∧ s2 ∈ s1)))\n  an4(s0 ∈ c0, s2 ∈ s0, s1 ∈ c0, s2 ∈ s1)\n  anbi12i(s0[(`' ∈ |` c0)]s2, s1[(`' ∈ |` c0)]s2, (s0 ∈ c0 ∧ s2 ∈ s0), (s1 ∈ c0 ∧ s2 ∈ s1))\n  el2v(s0, s2, (s0[(`' ∈ |` c0)]s2 ↔(s0 ∈ c0 ∧ s2 ∈ s0)))\n  brcnvepres(s0, universe, s2, universe, c0)\n  el2v(s1, s2, (s1[(`' ∈ |` c0)]s2 ↔(s1 ∈ c0 ∧ s2 ∈ s1)))\n  brcnvepres(s1, universe, s2, universe, c0)\n  anbi2i((s0 ∈ c0 ∧ s1 ∈ c0), s2 ∈(s0 ⋂ s1), (s2 ∈ s0 ∧ s2 ∈ s1))\n  elin(s2, s0, s1)\n  df-3an(s0 ∈ c0, s1 ∈ c0, s2 ∈(s0 ⋂ s1))\n  r3al(s0, s1, s2, c0, c0, (s0 ⋂ s1), s0 = s1)\n  diff.cres.s(s0, `' ∈, c0)\n  diff.ccnv.s(s0, cep)\n  diff.cep.s(s0)\n  diff.cres.s(s1, `' ∈, c0)\n  diff.ccnv.s(s1, cep)\n  diff.cep.s(s1)\n  diff.cres.s(s2, `' ∈, c0)\n  diff.ccnv.s(s2, cep)\n  diff.cep.s(s2)\n}","parent":["bitr4i","3bitri","df-eldisj","mpbiran2","relres","dfdisjALTV3","3albii","imbi1i","3bitr4i","an4","anbi12i","el2v","brcnvepres","anbi2i","elin","df-3an","r3al","diff.cres.s","diff.ccnv.s","diff.cep.s"],"children":[]},{"name":"dfeldisj4","content":"Alternate definition of the disjoint elementhood predicate. (Contributed by Peter Mazsa, 19-Sep-2021.)","origin":"thm dfeldisj4(setvar s0, setvar s1, class c0) {\n  |- wb(weldisj(c0), wal(s0, wrmo(s1, c0, wcel(cv(s0), cv(s1)))))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  3bitri(weldisj(c0), wal(s0, wrmo(s1, c0, wcel(cv(s0), cv(s1)))), wdisjALTV(cres(ccnv(cep), c0)), wal(s0, wmo(s1, wbr(cv(s1), cres(ccnv(cep), c0), cv(s0)))))\n  df-eldisj(c0)\n  mpbiran2(wdisjALTV(cres(ccnv(cep), c0)), wal(s0, wmo(s1, wbr(cv(s1), cres(ccnv(cep), c0), cv(s0)))), wrel(cres(ccnv(cep), c0)))\n  relres(ccnv(cep), c0)\n  dfdisjALTV4(s0, s1, cres(ccnv(cep), c0))\n  albii(s0, wmo(s1, wbr(cv(s1), cres(ccnv(cep), c0), cv(s0))), wrmo(s1, c0, wcel(cv(s0), cv(s1))))\n  bitr4i(wmo(s1, wbr(cv(s1), cres(ccnv(cep), c0), cv(s0))), wrmo(s1, c0, wcel(cv(s0), cv(s1))), wmo(s1, wa(wcel(cv(s1), c0), wcel(cv(s0), cv(s1)))))\n  mobii(s1, wbr(cv(s1), cres(ccnv(cep), c0), cv(s0)), wa(wcel(cv(s1), c0), wcel(cv(s0), cv(s1))))\n  el2v(s1, s0, wb(wbr(cv(s1), cres(ccnv(cep), c0), cv(s0)), wa(wcel(cv(s1), c0), wcel(cv(s0), cv(s1)))))\n  brcnvepres(cv(s1), universe, cv(s0), universe, c0)\n  df-rmo(s1, c0, wcel(cv(s0), cv(s1)))\n  diff.cres.s(s0, ccnv(cep), c0)\n  diff.ccnv.s(s0, cep)\n  diff.cep.s(s0)\n  diff.cres.s(s1, ccnv(cep), c0)\n  diff.ccnv.s(s1, cep)\n  diff.cep.s(s1)\n}","pretty":"thm dfeldisj4(setvar s0, setvar s1, class c0) {\n  ⊢ (ElDisj(c0)↔ ∀(s0, ∃*(s1 ∈ c0, s0 ∈ s1)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  3bitri(ElDisj(c0), ∀(s0, ∃*(s1 ∈ c0, s0 ∈ s1)), ⊔(`' ∈ |` c0), ∀(s0, ∃*(s1, s1[(`' ∈ |` c0)]s0)))\n  df-eldisj(c0)\n  mpbiran2(⊔(`' ∈ |` c0), ∀(s0, ∃*(s1, s1[(`' ∈ |` c0)]s0)), Rel((`' ∈ |` c0)))\n  relres(`' ∈, c0)\n  dfdisjALTV4(s0, s1, (`' ∈ |` c0))\n  albii(s0, ∃*(s1, s1[(`' ∈ |` c0)]s0), ∃*(s1 ∈ c0, s0 ∈ s1))\n  bitr4i(∃*(s1, s1[(`' ∈ |` c0)]s0), ∃*(s1 ∈ c0, s0 ∈ s1), ∃*(s1,(s1 ∈ c0 ∧ s0 ∈ s1)))\n  mobii(s1, s1[(`' ∈ |` c0)]s0, (s1 ∈ c0 ∧ s0 ∈ s1))\n  el2v(s1, s0, (s1[(`' ∈ |` c0)]s0 ↔(s1 ∈ c0 ∧ s0 ∈ s1)))\n  brcnvepres(s1, universe, s0, universe, c0)\n  df-rmo(s1, c0, s0 ∈ s1)\n  diff.cres.s(s0, `' ∈, c0)\n  diff.ccnv.s(s0, cep)\n  diff.cep.s(s0)\n  diff.cres.s(s1, `' ∈, c0)\n  diff.ccnv.s(s1, cep)\n  diff.cep.s(s1)\n}","parent":["3bitri","df-eldisj","mpbiran2","relres","dfdisjALTV4","albii","bitr4i","mobii","el2v","brcnvepres","df-rmo","diff.cres.s","diff.ccnv.s","diff.cep.s"],"children":["dfeldisj5"]},{"name":"dfeldisj5","content":"Alternate definition of the disjoint elementhood predicate. (Contributed by Peter Mazsa, 19-Sep-2021.)","origin":"thm dfeldisj5(setvar s0, setvar s1, class c0) {\n  |- wb(weldisj(c0), wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cv(s0), cv(s1)), emptycls)))))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitr4i(weldisj(c0), wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cv(s0), cv(s1)), emptycls)))), wal(hs0, wrmo(s0, c0, wcel(cv(hs0), cv(s0)))))\n  dfeldisj4(hs0, s0, c0)\n  3bitr3i(wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cv(s0), cv(s1)), emptycls)))), wal(hs0, wrmo(s0, c0, wcel(cv(hs0), cv(s0)))), wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls)))), wal(hs0, wrmo(s0, c0, wbr(cv(s0), ccnv(cep), cv(hs0)))))\n  3bitr4i(wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls)))), wal(hs0, wrmo(s0, c0, wbr(cv(s0), ccnv(cep), cv(hs0)))), wa(wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls)))), wrel(ccnv(cep))), wa(wal(hs0, wrmo(s0, c0, wbr(cv(s0), ccnv(cep), cv(hs0)))), wrel(ccnv(cep))))\n  inecmo2(s0, s1, hs0, c0, ccnv(cep))\n  biantru(wral(s0, c0, wral(s1, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls)))), wrel(ccnv(cep)))\n  biantru(wal(hs0, wrmo(s0, c0, wbr(cv(s0), ccnv(cep), cv(hs0)))), wrel(ccnv(cep)))\n  relcnv(cep)\n  2ralbii(s0, s1, c0, c0, wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls)), wo(wceq(cv(s0), cv(s1)), wceq(cin(cv(s0), cv(s1)), emptycls)))\n  orbi2i(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls), wceq(cin(cv(s0), cv(s1)), emptycls))\n  eqeq1i(cin(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep))), emptycls, cin(cv(s0), cv(s1)))\n  ineq12i(cec(cv(s0), ccnv(cep)), cec(cv(s1), ccnv(cep)), cv(s0), cv(s1))\n  elv(s0, wceq(cec(cv(s0), ccnv(cep)), cv(s0)))\n  eccnvep(cv(s0), universe)\n  elv(s1, wceq(cec(cv(s1), ccnv(cep)), cv(s1)))\n  eccnvep(cv(s1), universe)\n  albii(hs0, wrmo(s0, c0, wbr(cv(s0), ccnv(cep), cv(hs0))), wrmo(s0, c0, wcel(cv(hs0), cv(s0))))\n  rmobii(s0, c0, wbr(cv(s0), ccnv(cep), cv(hs0)), wcel(cv(hs0), cv(s0)))\n  elv(s0, wb(wbr(cv(s0), ccnv(cep), cv(hs0)), wcel(cv(hs0), cv(s0))))\n  brcnvep(cv(s0), universe, cv(hs0))\n  diff.hs0.c(c0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.ccnv.s(s0, cep)\n  diff.cep.s(s0)\n  diff.ccnv.s(s1, cep)\n  diff.cep.s(s1)\n  diff.hs0.c(ccnv(cep))\n}","pretty":"thm dfeldisj5(setvar s0, setvar s1, class c0) {\n  ⊢ (ElDisj(c0)↔ ∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨(s0 ⋂ s1)= ∅))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitr4i(ElDisj(c0), ∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨(s0 ⋂ s1)= ∅))), ∀(hs0, ∃*(s0 ∈ c0, hs0 ∈ s0)))\n  dfeldisj4(hs0, s0, c0)\n  3bitr3i(∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨(s0 ⋂ s1)= ∅))), ∀(hs0, ∃*(s0 ∈ c0, hs0 ∈ s0)), ∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨([s0]`' ∈ ⋂[s1]`' ∈)= ∅))), ∀(hs0, ∃*(s0 ∈ c0, s0[`' ∈]hs0)))\n  3bitr4i(∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨([s0]`' ∈ ⋂[s1]`' ∈)= ∅))), ∀(hs0, ∃*(s0 ∈ c0, s0[`' ∈]hs0)), (∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨([s0]`' ∈ ⋂[s1]`' ∈)= ∅)))∧ Rel(`' ∈)), (∀(hs0, ∃*(s0 ∈ c0, s0[`' ∈]hs0))∧ Rel(`' ∈)))\n  inecmo2(s0, s1, hs0, c0, `' ∈)\n  biantru(∀(s0 ∈ c0, ∀(s1 ∈ c0,(s0 = s1 ∨([s0]`' ∈ ⋂[s1]`' ∈)= ∅))), Rel(`' ∈))\n  biantru(∀(hs0, ∃*(s0 ∈ c0, s0[`' ∈]hs0)), Rel(`' ∈))\n  relcnv(cep)\n  2ralbii(s0, s1, c0, c0, (s0 = s1 ∨([s0]`' ∈ ⋂[s1]`' ∈)= ∅), (s0 = s1 ∨(s0 ⋂ s1)= ∅))\n  orbi2i(s0 = s1, ([s0]`' ∈ ⋂[s1]`' ∈)= ∅, (s0 ⋂ s1)= ∅)\n  eqeq1i(([s0]`' ∈ ⋂[s1]`' ∈), emptycls, (s0 ⋂ s1))\n  ineq12i([s0]`' ∈, [s1]`' ∈, s0, s1)\n  elv(s0, [s0]`' ∈ = s0)\n  eccnvep(s0, universe)\n  elv(s1, [s1]`' ∈ = s1)\n  eccnvep(s1, universe)\n  albii(hs0, ∃*(s0 ∈ c0, s0[`' ∈]hs0), ∃*(s0 ∈ c0, hs0 ∈ s0))\n  rmobii(s0, c0, s0[`' ∈]hs0, hs0 ∈ s0)\n  elv(s0, (s0[`' ∈]hs0 ↔ hs0 ∈ s0))\n  brcnvep(s0, universe, hs0)\n  diff.hs0.c(c0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.ccnv.s(s0, cep)\n  diff.cep.s(s0)\n  diff.ccnv.s(s1, cep)\n  diff.cep.s(s1)\n  diff.hs0.c(`' ∈)\n}","parent":["bitr4i","dfeldisj4","3bitr3i","3bitr4i","inecmo2","biantru","relcnv","2ralbii","orbi2i","eqeq1i","ineq12i","elv","eccnvep","albii","rmobii","brcnvep","diff.hs0.c","diffss.ex","diff.hs0.s","diff.ccnv.s","diff.cep.s"],"children":[]},{"name":"eldisjs","content":"Elementhood in the class of disjoints. (Contributed by Peter Mazsa, 24-Jul-2021.)","origin":"thm eldisjs(class c0) {\n  |- wb(wcel(c0, cdisjs), wa(wcel(ccoss(ccnv(c0)), ccnvrefrels), wcel(c0, crels)))\n} = {\n  rabeqel(hs0, c0, cdisjs, crels, wcel(ccoss(ccnv(c0)), ccnvrefrels), wcel(ccoss(ccnv(cv(hs0))), ccnvrefrels))\n  dfdisjs(hs0)\n  eleq1d(ccoss(ccnv(cv(hs0))), ccnvrefrels, ccoss(ccnv(c0)), wceq(cv(hs0), c0))\n  cosseqd(ccnv(cv(hs0)), ccnv(c0), wceq(cv(hs0), c0))\n  cnveq(cv(hs0), c0)\n  diff.hs0.c(c0)\n  diff.hs0.c(crels)\n  diff.hs0.w(wcel(ccoss(ccnv(c0)), ccnvrefrels))\n}","pretty":"thm eldisjs(class c0) {\n  ⊢ (c0 ∈ Disjs ↔(, ~(`' c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n} = {\n  rabeqel(hs0, c0, cdisjs, crels, , ~(`' c0)∈ CnvRefRels, , ~(`' hs0)∈ CnvRefRels)\n  dfdisjs(hs0)\n  eleq1d(, ~(`' hs0), ccnvrefrels, , ~(`' c0), hs0 = c0)\n  cosseqd(`' hs0, `' c0, hs0 = c0)\n  cnveq(hs0, c0)\n  diff.hs0.c(c0)\n  diff.hs0.c(crels)\n  diff.hs0.w(, ~(`' c0)∈ CnvRefRels)\n}","parent":["rabeqel","dfdisjs","eleq1d","cosseqd","cnveq","diff.hs0.c","diff.hs0.w"],"children":["eldisjs2","eldisjsdisj"]},{"name":"eldisjs2","content":"Elementhood in the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm eldisjs2(class c0) {\n  |- wb(wcel(c0, cdisjs), wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)))\n} = {\n  bitri(wcel(c0, cdisjs), wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)), wa(wcel(ccoss(ccnv(c0)), ccnvrefrels), wcel(c0, crels)))\n  eldisjs(c0)\n  pm5.32ri(wcel(ccoss(ccnv(c0)), ccnvrefrels), wcel(c0, crels), wss(ccoss(ccnv(c0)), cid))\n  syl6rbbr(wcel(c0, crels), wcel(ccoss(ccnv(c0)), ccnvrefrels), wss(ccoss(ccnv(c0)), cid), wa(wss(ccoss(ccnv(c0)), cid), wcel(ccoss(ccnv(c0)), crels)))\n  biantrud(wcel(c0, crels), wss(ccoss(ccnv(c0)), cid), wcel(ccoss(ccnv(c0)), crels))\n  cosscnvelrels(c0, crels)\n  cosselcnvrefrels2(ccnv(c0))\n}","pretty":"thm eldisjs2(class c0) {\n  ⊢ (c0 ∈ Disjs ↔(, ~(`' c0)⊆ = ∧ c0 ∈ Rels))\n} = {\n  bitri(c0 ∈ Disjs, (, ~(`' c0)⊆ = ∧ c0 ∈ Rels), (, ~(`' c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n  eldisjs(c0)\n  pm5.32ri(, ~(`' c0)∈ CnvRefRels, c0 ∈ Rels, , ~(`' c0)⊆ =)\n  syl6rbbr(c0 ∈ Rels, , ~(`' c0)∈ CnvRefRels, , ~(`' c0)⊆ =, (, ~(`' c0)⊆ = ∧, ~(`' c0)∈ Rels))\n  biantrud(c0 ∈ Rels, , ~(`' c0)⊆ =, , ~(`' c0)∈ Rels)\n  cosscnvelrels(c0, crels)\n  cosselcnvrefrels2(`' c0)\n}","parent":["bitri","eldisjs","pm5.32ri","syl6rbbr","biantrud","cosscnvelrels","cosselcnvrefrels2"],"children":["eldisjs3","eldisjs4","eldisjs5"]},{"name":"eldisjs3","content":"Elementhood in the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm eldisjs3(setvar s0, setvar s1, setvar s2, class c0) {\n  |- wb(wcel(c0, cdisjs), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s2)), wbr(cv(s1), c0, cv(s2))), wceq(cv(s0), cv(s1)))))), wcel(c0, crels)))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n  -| diffsc(s2, c0)\n} = {\n  bitri(wcel(c0, cdisjs), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s2)), wbr(cv(s1), c0, cv(s2))), wceq(cv(s0), cv(s1)))))), wcel(c0, crels)), wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)))\n  eldisjs2(c0)\n  anbi1i(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s2)), wbr(cv(s1), c0, cv(s2))), wceq(cv(s0), cv(s1)))))))\n  cosscnvssid3(s0, s1, s2, c0)\n}","pretty":"thm eldisjs3(setvar s0, setvar s1, setvar s2, class c0) {\n  ⊢ (c0 ∈ Disjs ↔(∀(s0, ∀(s1, ∀(s2,((s0[c0]s2 ∧ s1[c0]s2)→ s0 = s1))))∧ c0 ∈ Rels))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n  ⊣ d(s2, c0)\n} = {\n  bitri(c0 ∈ Disjs, (∀(s0, ∀(s1, ∀(s2,((s0[c0]s2 ∧ s1[c0]s2)→ s0 = s1))))∧ c0 ∈ Rels), (, ~(`' c0)⊆ = ∧ c0 ∈ Rels))\n  eldisjs2(c0)\n  anbi1i(, ~(`' c0)⊆ =, c0 ∈ Rels, ∀(s0, ∀(s1, ∀(s2,((s0[c0]s2 ∧ s1[c0]s2)→ s0 = s1)))))\n  cosscnvssid3(s0, s1, s2, c0)\n}","parent":["bitri","eldisjs2","anbi1i","cosscnvssid3"],"children":[]},{"name":"eldisjs4","content":"Elementhood in the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm eldisjs4(setvar s0, setvar s1, class c0) {\n  |- wb(wcel(c0, cdisjs), wa(wal(s0, wmo(s1, wbr(cv(s1), c0, cv(s0)))), wcel(c0, crels)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wcel(c0, cdisjs), wa(wal(s0, wmo(s1, wbr(cv(s1), c0, cv(s0)))), wcel(c0, crels)), wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)))\n  eldisjs2(c0)\n  anbi1i(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels), wal(s0, wmo(s1, wbr(cv(s1), c0, cv(s0)))))\n  cosscnvssid4(s0, s1, c0)\n}","pretty":"thm eldisjs4(setvar s0, setvar s1, class c0) {\n  ⊢ (c0 ∈ Disjs ↔(∀(s0, ∃*(s1, s1[c0]s0))∧ c0 ∈ Rels))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(c0 ∈ Disjs, (∀(s0, ∃*(s1, s1[c0]s0))∧ c0 ∈ Rels), (, ~(`' c0)⊆ = ∧ c0 ∈ Rels))\n  eldisjs2(c0)\n  anbi1i(, ~(`' c0)⊆ =, c0 ∈ Rels, ∀(s0, ∃*(s1, s1[c0]s0)))\n  cosscnvssid4(s0, s1, c0)\n}","parent":["bitri","eldisjs2","anbi1i","cosscnvssid4"],"children":[]},{"name":"eldisjs5","content":"Elementhood in the class of disjoints. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm eldisjs5(setvar s0, setvar s1, class c0, class c1) {\n  |- wi(wcel(c0, c1), wb(wcel(c0, cdisjs), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wcel(c0, crels))))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  syl5bb(wcel(c0, c1), wcel(c0, cdisjs), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wcel(c0, crels)), wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)))\n  eldisjs2(c0)\n  mpbiri(wcel(c0, c1), wb(wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wcel(c0, crels))), wb(wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wrel(c0))))\n  cosscnvssid5(s0, s1, c0)\n  bibi12d(wcel(c0, c1), wa(wss(ccoss(ccnv(c0)), cid), wcel(c0, crels)), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wcel(c0, crels)), wa(wss(ccoss(ccnv(c0)), cid), wrel(c0)), wa(wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wrel(c0)))\n  anbi2d(wcel(c0, c1), wss(ccoss(ccnv(c0)), cid), wcel(c0, crels), wrel(c0))\n  anbi2d(wcel(c0, c1), wral(s0, cdm(c0), wral(s1, cdm(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), c0), cec(cv(s1), c0)), emptycls)))), wcel(c0, crels), wrel(c0))\n  elrelsrel(c0, c1)\n}","pretty":"thm eldisjs5(setvar s0, setvar s1, class c0, class c1) {\n  ⊢ (c0 ∈ c1 →(c0 ∈ Disjs ↔(∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ c0 ∈ Rels)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  syl5bb(c0 ∈ c1, c0 ∈ Disjs, (∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ c0 ∈ Rels), (, ~(`' c0)⊆ = ∧ c0 ∈ Rels))\n  eldisjs2(c0)\n  mpbiri(c0 ∈ c1, ((, ~(`' c0)⊆ = ∧ c0 ∈ Rels)↔(∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ c0 ∈ Rels)), ((, ~(`' c0)⊆ = ∧ Rel(c0))↔(∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ Rel(c0))))\n  cosscnvssid5(s0, s1, c0)\n  bibi12d(c0 ∈ c1, (, ~(`' c0)⊆ = ∧ c0 ∈ Rels), (∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ c0 ∈ Rels), (, ~(`' c0)⊆ = ∧ Rel(c0)), (∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅)))∧ Rel(c0)))\n  anbi2d(c0 ∈ c1, , ~(`' c0)⊆ =, c0 ∈ Rels, Rel(c0))\n  anbi2d(c0 ∈ c1, ∀(s0 ∈ dom(c0), ∀(s1 ∈ dom(c0),(s0 = s1 ∨([s0]c0 ⋂[s1]c0)= ∅))), c0 ∈ Rels, Rel(c0))\n  elrelsrel(c0, c1)\n}","parent":["syl5bb","eldisjs2","mpbiri","cosscnvssid5","bibi12d","anbi2d","elrelsrel"],"children":[]},{"name":"eldisjsdisj","content":"The element of the class of disjoint relations and the disjoint relation predicate are the same, that is ` ( R e. Disjs <-> Disj R ) ` when ` R ` is a set. (Contributed by Peter Mazsa, 25-Jul-2021.)","origin":"thm eldisjsdisj(class c0, class c1) {\n  |- wi(wcel(c0, c1), wb(wcel(c0, cdisjs), wdisjALTV(c0)))\n} = {\n  3bitr4g(wcel(c0, c1), wcel(c0, cdisjs), wdisjALTV(c0), wa(wcel(ccoss(ccnv(c0)), ccnvrefrels), wcel(c0, crels)), wa(wcnvrefrel(ccoss(ccnv(c0))), wrel(c0)))\n  anbi12d(wcel(c0, c1), wcel(ccoss(ccnv(c0)), ccnvrefrels), wcel(c0, crels), wcnvrefrel(ccoss(ccnv(c0))), wrel(c0))\n  syl(wcel(c0, c1), wb(wcel(ccoss(ccnv(c0)), ccnvrefrels), wcnvrefrel(ccoss(ccnv(c0)))), wcel(ccoss(ccnv(c0)), universe))\n  cosscnvex(c0, c1)\n  elcnvrefrelsrel(ccoss(ccnv(c0)), universe)\n  elrelsrel(c0, c1)\n  eldisjs(c0)\n  df-disjALTV(c0)\n}","pretty":"thm eldisjsdisj(class c0, class c1) {\n  ⊢ (c0 ∈ c1 →(c0 ∈ Disjs ↔ ⊔ c0))\n} = {\n  3bitr4g(c0 ∈ c1, c0 ∈ Disjs, ⊔ c0, (, ~(`' c0)∈ CnvRefRels ∧ c0 ∈ Rels), (CnvRefRel(, ~(`' c0))∧ Rel(c0)))\n  anbi12d(c0 ∈ c1, , ~(`' c0)∈ CnvRefRels, c0 ∈ Rels, CnvRefRel(, ~(`' c0)), Rel(c0))\n  syl(c0 ∈ c1, (, ~(`' c0)∈ CnvRefRels ↔ CnvRefRel(, ~(`' c0))), , ~(`' c0)∈ 𝕌)\n  cosscnvex(c0, c1)\n  elcnvrefrelsrel(, ~(`' c0), universe)\n  elrelsrel(c0, c1)\n  eldisjs(c0)\n  df-disjALTV(c0)\n}","parent":["3bitr4g","anbi12d","syl","cosscnvex","elcnvrefrelsrel","elrelsrel","eldisjs","df-disjALTV"],"children":["eleldisjseldisj"]},{"name":"eleldisjs","content":"Elementhood in the disjoint elements class. (Contributed by Peter Mazsa, 23-Jul-2023.)","origin":"thm eleldisjs(class c0, class c1) {\n  |- wi(wcel(c0, c1), wb(wcel(c0, celdisjs), wcel(cres(ccnv(cep), c0), cdisjs)))\n} = {\n  elab2g(hs0, c0, c1, celdisjs, wcel(cres(ccnv(cep), c0), cdisjs), wcel(cres(ccnv(cep), cv(hs0)), cdisjs))\n  eleq1d(cres(ccnv(cep), cv(hs0)), cdisjs, cres(ccnv(cep), c0), wceq(cv(hs0), c0))\n  reseq2(cv(hs0), c0, ccnv(cep))\n  df-eldisjs(hs0)\n  diff.hs0.c(c0)\n  diff.hs0.w(wcel(cres(ccnv(cep), c0), cdisjs))\n}","pretty":"thm eleldisjs(class c0, class c1) {\n  ⊢ (c0 ∈ c1 →(c0 ∈ ElDisjs ↔(`' ∈ |` c0)∈ Disjs))\n} = {\n  elab2g(hs0, c0, c1, celdisjs, (`' ∈ |` c0)∈ Disjs, (`' ∈ |` hs0)∈ Disjs)\n  eleq1d((`' ∈ |` hs0), cdisjs, (`' ∈ |` c0), hs0 = c0)\n  reseq2(hs0, c0, `' ∈)\n  df-eldisjs(hs0)\n  diff.hs0.c(c0)\n  diff.hs0.w((`' ∈ |` c0)∈ Disjs)\n}","parent":["elab2g","eleq1d","reseq2","df-eldisjs","diff.hs0.c","diff.hs0.w"],"children":["eleldisjseldisj"]},{"name":"eleldisjseldisj","content":"The element of the disjoint elements class and the disjoint elementhood predicate are the same, that is ` ( A e. ElDisjs <-> ElDisj A ) ` when ` A ` is a set. (Contributed by Peter Mazsa, 23-Jul-2023.)","origin":"thm eleldisjseldisj(class c0, class c1) {\n  |- wi(wcel(c0, c1), wb(wcel(c0, celdisjs), weldisj(c0)))\n} = {\n  syl6bbr(wcel(c0, c1), wcel(c0, celdisjs), weldisj(c0), wdisjALTV(cres(ccnv(cep), c0)))\n  bitrd(wcel(c0, c1), wcel(c0, celdisjs), wdisjALTV(cres(ccnv(cep), c0)), wcel(cres(ccnv(cep), c0), cdisjs))\n  eleldisjs(c0, c1)\n  syl(wcel(c0, c1), wb(wcel(cres(ccnv(cep), c0), cdisjs), wdisjALTV(cres(ccnv(cep), c0))), wcel(cres(ccnv(cep), c0), universe))\n  cnvepresex(c0, c1)\n  eldisjsdisj(cres(ccnv(cep), c0), universe)\n  df-eldisj(c0)\n}","pretty":"thm eleldisjseldisj(class c0, class c1) {\n  ⊢ (c0 ∈ c1 →(c0 ∈ ElDisjs ↔ ElDisj(c0)))\n} = {\n  syl6bbr(c0 ∈ c1, c0 ∈ ElDisjs, ElDisj(c0), ⊔(`' ∈ |` c0))\n  bitrd(c0 ∈ c1, c0 ∈ ElDisjs, ⊔(`' ∈ |` c0), (`' ∈ |` c0)∈ Disjs)\n  eleldisjs(c0, c1)\n  syl(c0 ∈ c1, ((`' ∈ |` c0)∈ Disjs ↔ ⊔(`' ∈ |` c0)), (`' ∈ |` c0)∈ 𝕌)\n  cnvepresex(c0, c1)\n  eldisjsdisj((`' ∈ |` c0), universe)\n  df-eldisj(c0)\n}","parent":["syl6bbr","bitrd","eleldisjs","syl","cnvepresex","eldisjsdisj","df-eldisj"],"children":[]},{"name":"disjrel","content":"Disjoint relation is a relation. (Contributed by Peter Mazsa, 15-Sep-2021.)","origin":"thm disjrel(class c0) {\n  |- wi(wdisjALTV(c0), wrel(c0))\n} = {\n  simprbi(wdisjALTV(c0), wrel(c0), wcnvrefrel(ccoss(ccnv(c0))))\n  df-disjALTV(c0)\n}","pretty":"thm disjrel(class c0) {\n  ⊢ (⊔ c0 → Rel(c0))\n} = {\n  simprbi(⊔ c0, Rel(c0), CnvRefRel(, ~(`' c0)))\n  df-disjALTV(c0)\n}","parent":["simprbi","df-disjALTV"],"children":[]},{"name":"disjss","content":"Subclass theorem for disjoints. (Contributed by Peter Mazsa, 28-Oct-2020.) (Revised by Peter Mazsa, 22-Sep-2021.)","origin":"thm disjss(class c0, class c1) {\n  |- wi(wss(c0, c1), wi(wdisjALTV(c1), wdisjALTV(c0)))\n} = {\n  3imtr4g(wss(c0, c1), wdisjALTV(c1), wdisjALTV(c0), wa(wfunALTV(ccnv(c1)), wrel(c1)), wa(wfunALTV(ccnv(c0)), wrel(c0)))\n  anim12d(wss(c0, c1), wfunALTV(ccnv(c1)), wrel(c1), wfunALTV(ccnv(c0)), wrel(c0))\n  syl(wss(c0, c1), wi(wfunALTV(ccnv(c1)), wfunALTV(ccnv(c0))), wss(ccnv(c0), ccnv(c1)))\n  cnvss(c0, c1)\n  funALTVss(ccnv(c0), ccnv(c1))\n  relss(c0, c1)\n  dfdisjALTV(c1)\n  dfdisjALTV(c0)\n}","pretty":"thm disjss(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 →(⊔ c1 → ⊔ c0))\n} = {\n  3imtr4g(c0 ⊆ c1, ⊔ c1, ⊔ c0, (FunALTV(`' c1)∧ Rel(c1)), (FunALTV(`' c0)∧ Rel(c0)))\n  anim12d(c0 ⊆ c1, FunALTV(`' c1), Rel(c1), FunALTV(`' c0), Rel(c0))\n  syl(c0 ⊆ c1, (FunALTV(`' c1)→ FunALTV(`' c0)), `' c0 ⊆ `' c1)\n  cnvss(c0, c1)\n  funALTVss(`' c0, `' c1)\n  relss(c0, c1)\n  dfdisjALTV(c1)\n  dfdisjALTV(c0)\n}","parent":["3imtr4g","anim12d","syl","cnvss","funALTVss","relss","dfdisjALTV"],"children":["disjssi","disjssd"]},{"name":"disjssi","content":"Subclass theorem for disjoints, inference version. (Contributed by Peter Mazsa, 28-Sep-2021.)","origin":"thm disjssi(class c0, class c1) {\n  |- wi(wdisjALTV(c0), wdisjALTV(c1))\n  -| wss(c1, c0)\n} = {\n  ax-mp(wi(wdisjALTV(c0), wdisjALTV(c1)), wss(c1, c0))\n  disjss(c1, c0)\n}","pretty":"thm disjssi(class c0, class c1) {\n  ⊢ (⊔ c0 → ⊔ c1)\n  ⊣ c1 ⊆ c0\n} = {\n  ax-mp((⊔ c0 → ⊔ c1), c1 ⊆ c0)\n  disjss(c1, c0)\n}","parent":["ax-mp","disjss"],"children":["disjimres","disjimin"]},{"name":"disjssd","content":"Subclass theorem for disjoints, deduction version. (Contributed by Peter Mazsa, 28-Sep-2021.)","origin":"thm disjssd(class c0, class c1, wff w0) {\n  |- wi(w0, wi(wdisjALTV(c0), wdisjALTV(c1)))\n  -| wi(w0, wss(c1, c0))\n} = {\n  syl(w0, wi(wdisjALTV(c0), wdisjALTV(c1)), wss(c1, c0))\n  disjss(c1, c0)\n}","pretty":"thm disjssd(class c0, class c1, wff w0) {\n  ⊢ (w0 →(⊔ c0 → ⊔ c1))\n  ⊣ (w0 → c1 ⊆ c0)\n} = {\n  syl(w0, (⊔ c0 → ⊔ c1), c1 ⊆ c0)\n  disjss(c1, c0)\n}","parent":["syl","disjss"],"children":["disjeq","eldisjss"]},{"name":"disjeq","content":"Equality theorem for disjoints. (Contributed by Peter Mazsa, 22-Sep-2021.)","origin":"thm disjeq(class c0, class c1) {\n  |- wi(wceq(c0, c1), wb(wdisjALTV(c0), wdisjALTV(c1)))\n} = {\n  impbid(wceq(c0, c1), wdisjALTV(c0), wdisjALTV(c1))\n  disjssd(c0, c1, wceq(c0, c1))\n  eqimss2(c0, c1)\n  disjssd(c1, c0, wceq(c0, c1))\n  eqimss(c0, c1)\n}","pretty":"thm disjeq(class c0, class c1) {\n  ⊢ (c0 = c1 →(⊔ c0 ↔ ⊔ c1))\n} = {\n  impbid(c0 = c1, ⊔ c0, ⊔ c1)\n  disjssd(c0, c1, c0 = c1)\n  eqimss2(c0, c1)\n  disjssd(c1, c0, c0 = c1)\n  eqimss(c0, c1)\n}","parent":["impbid","disjssd","eqimss2","eqimss"],"children":["disjeqi","disjeqd","disjdmqseqeq1"]},{"name":"disjeqi","content":"Equality theorem for disjoints, inference version. (Contributed by Peter Mazsa, 22-Sep-2021.)","origin":"thm disjeqi(class c0, class c1) {\n  |- wb(wdisjALTV(c0), wdisjALTV(c1))\n  -| wceq(c0, c1)\n} = {\n  ax-mp(wb(wdisjALTV(c0), wdisjALTV(c1)), wceq(c0, c1))\n  disjeq(c0, c1)\n}","pretty":"thm disjeqi(class c0, class c1) {\n  ⊢ (⊔ c0 ↔ ⊔ c1)\n  ⊣ c0 = c1\n} = {\n  ax-mp((⊔ c0 ↔ ⊔ c1), c0 = c1)\n  disjeq(c0, c1)\n}","parent":["ax-mp","disjeq"],"children":[]},{"name":"disjeqd","content":"Equality theorem for disjoints, deduction version. (Contributed by Peter Mazsa, 22-Sep-2021.)","origin":"thm disjeqd(class c0, class c1, wff w0) {\n  |- wi(w0, wb(wdisjALTV(c0), wdisjALTV(c1)))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  syl(w0, wb(wdisjALTV(c0), wdisjALTV(c1)), wceq(c0, c1))\n  disjeq(c0, c1)\n}","pretty":"thm disjeqd(class c0, class c1, wff w0) {\n  ⊢ (w0 →(⊔ c0 ↔ ⊔ c1))\n  ⊣ (w0 → c0 = c1)\n} = {\n  syl(w0, (⊔ c0 ↔ ⊔ c1), c0 = c1)\n  disjeq(c0, c1)\n}","parent":["syl","disjeq"],"children":["eldisjeq"]},{"name":"disjdmqseqeq1","content":"Lemma for the equality theorem for partition ~~? parteq1 . (Contributed by Peter Mazsa, 5-Oct-2021.)","origin":"thm disjdmqseqeq1(class c0, class c1, class c2) {\n  |- wi(wceq(c0, c1), wb(wa(wdisjALTV(c0), wceq(cqs(cdm(c0), c0), c2)), wa(wdisjALTV(c1), wceq(cqs(cdm(c1), c1), c2))))\n} = {\n  anbi12d(wceq(c0, c1), wdisjALTV(c0), wceq(cqs(cdm(c0), c0), c2), wdisjALTV(c1), wceq(cqs(cdm(c1), c1), c2))\n  disjeq(c0, c1)\n  dmqseqeq1(c0, c1, c2)\n}","pretty":"thm disjdmqseqeq1(class c0, class c1, class c2) {\n  ⊢ (c0 = c1 →((⊔ c0 ∧(dom(c0)/. c0)= c2)↔(⊔ c1 ∧(dom(c1)/. c1)= c2)))\n} = {\n  anbi12d(c0 = c1, ⊔ c0, (dom(c0)/. c0)= c2, ⊔ c1, (dom(c1)/. c1)= c2)\n  disjeq(c0, c1)\n  dmqseqeq1(c0, c1, c2)\n}","parent":["anbi12d","disjeq","dmqseqeq1"],"children":[]},{"name":"eldisjss","content":"Subclass theorem for disjoint elementhood. (Contributed by Peter Mazsa, 23-Sep-2021.)","origin":"thm eldisjss(class c0, class c1) {\n  |- wi(wss(c0, c1), wi(weldisj(c1), weldisj(c0)))\n} = {\n  3imtr4g(wss(c0, c1), weldisj(c1), weldisj(c0), wdisjALTV(cres(ccnv(cep), c1)), wdisjALTV(cres(ccnv(cep), c0)))\n  disjssd(cres(ccnv(cep), c1), cres(ccnv(cep), c0), wss(c0, c1))\n  ssres2(c0, c1, ccnv(cep))\n  df-eldisj(c1)\n  df-eldisj(c0)\n}","pretty":"thm eldisjss(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 →(ElDisj(c1)→ ElDisj(c0)))\n} = {\n  3imtr4g(c0 ⊆ c1, ElDisj(c1), ElDisj(c0), ⊔(`' ∈ |` c1), ⊔(`' ∈ |` c0))\n  disjssd((`' ∈ |` c1), (`' ∈ |` c0), c0 ⊆ c1)\n  ssres2(c0, c1, `' ∈)\n  df-eldisj(c1)\n  df-eldisj(c0)\n}","parent":["3imtr4g","disjssd","ssres2","df-eldisj"],"children":["eldisjssi","eldisjssd"]},{"name":"eldisjssi","content":"Subclass theorem for disjoint elementhood, inference version. (Contributed by Peter Mazsa, 28-Sep-2021.)","origin":"thm eldisjssi(class c0, class c1) {\n  |- wi(weldisj(c0), weldisj(c1))\n  -| wss(c1, c0)\n} = {\n  ax-mp(wi(weldisj(c0), weldisj(c1)), wss(c1, c0))\n  eldisjss(c1, c0)\n}","pretty":"thm eldisjssi(class c0, class c1) {\n  ⊢ (ElDisj(c0)→ ElDisj(c1))\n  ⊣ c1 ⊆ c0\n} = {\n  ax-mp((ElDisj(c0)→ ElDisj(c1)), c1 ⊆ c0)\n  eldisjss(c1, c0)\n}","parent":["ax-mp","eldisjss"],"children":[]},{"name":"eldisjssd","content":"Subclass theorem for disjoint elementhood, deduction version. (Contributed by Peter Mazsa, 28-Sep-2021.)","origin":"thm eldisjssd(class c0, class c1, wff w0) {\n  |- wi(w0, wi(weldisj(c0), weldisj(c1)))\n  -| wi(w0, wss(c1, c0))\n} = {\n  syl(w0, wi(weldisj(c0), weldisj(c1)), wss(c1, c0))\n  eldisjss(c1, c0)\n}","pretty":"thm eldisjssd(class c0, class c1, wff w0) {\n  ⊢ (w0 →(ElDisj(c0)→ ElDisj(c1)))\n  ⊣ (w0 → c1 ⊆ c0)\n} = {\n  syl(w0, (ElDisj(c0)→ ElDisj(c1)), c1 ⊆ c0)\n  eldisjss(c1, c0)\n}","parent":["syl","eldisjss"],"children":[]},{"name":"eldisjeq","content":"Equality theorem for disjoint elementhood. (Contributed by Peter Mazsa, 23-Sep-2021.)","origin":"thm eldisjeq(class c0, class c1) {\n  |- wi(wceq(c0, c1), wb(weldisj(c0), weldisj(c1)))\n} = {\n  3bitr4g(wceq(c0, c1), weldisj(c0), weldisj(c1), wdisjALTV(cres(ccnv(cep), c0)), wdisjALTV(cres(ccnv(cep), c1)))\n  disjeqd(cres(ccnv(cep), c0), cres(ccnv(cep), c1), wceq(c0, c1))\n  reseq2(c0, c1, ccnv(cep))\n  df-eldisj(c0)\n  df-eldisj(c1)\n}","pretty":"thm eldisjeq(class c0, class c1) {\n  ⊢ (c0 = c1 →(ElDisj(c0)↔ ElDisj(c1)))\n} = {\n  3bitr4g(c0 = c1, ElDisj(c0), ElDisj(c1), ⊔(`' ∈ |` c0), ⊔(`' ∈ |` c1))\n  disjeqd((`' ∈ |` c0), (`' ∈ |` c1), c0 = c1)\n  reseq2(c0, c1, `' ∈)\n  df-eldisj(c0)\n  df-eldisj(c1)\n}","parent":["3bitr4g","disjeqd","reseq2","df-eldisj"],"children":["eldisjeqi","eldisjeqd"]},{"name":"eldisjeqi","content":"Equality theorem for disjoint elementhood, inference version. (Contributed by Peter Mazsa, 23-Sep-2021.)","origin":"thm eldisjeqi(class c0, class c1) {\n  |- wb(weldisj(c0), weldisj(c1))\n  -| wceq(c0, c1)\n} = {\n  ax-mp(wb(weldisj(c0), weldisj(c1)), wceq(c0, c1))\n  eldisjeq(c0, c1)\n}","pretty":"thm eldisjeqi(class c0, class c1) {\n  ⊢ (ElDisj(c0)↔ ElDisj(c1))\n  ⊣ c0 = c1\n} = {\n  ax-mp((ElDisj(c0)↔ ElDisj(c1)), c0 = c1)\n  eldisjeq(c0, c1)\n}","parent":["ax-mp","eldisjeq"],"children":[]},{"name":"eldisjeqd","content":"Equality theorem for disjoint elementhood, deduction version. (Contributed by Peter Mazsa, 23-Sep-2021.)","origin":"thm eldisjeqd(class c0, class c1, wff w0) {\n  |- wi(w0, wb(weldisj(c0), weldisj(c1)))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  syl(w0, wb(weldisj(c0), weldisj(c1)), wceq(c0, c1))\n  eldisjeq(c0, c1)\n}","pretty":"thm eldisjeqd(class c0, class c1, wff w0) {\n  ⊢ (w0 →(ElDisj(c0)↔ ElDisj(c1)))\n  ⊣ (w0 → c0 = c1)\n} = {\n  syl(w0, (ElDisj(c0)↔ ElDisj(c1)), c0 = c1)\n  eldisjeq(c0, c1)\n}","parent":["syl","eldisjeq"],"children":[]},{"name":"disjxrn","content":"Two ways of saying that a range Cartesian product is disjoint. (Contributed by Peter Mazsa, 17-Jun-2020.) (Revised by Peter Mazsa, 21-Sep-2021.)","origin":"thm disjxrn(class c0, class c1) {\n  |- wb(wdisjALTV(cxrn(c0, c1)), wss(cin(ccoss(ccnv(c0)), ccoss(ccnv(c1))), cid))\n} = {\n  bitri(wdisjALTV(cxrn(c0, c1)), wss(cin(ccoss(ccnv(c0)), ccoss(ccnv(c1))), cid), wss(ccoss(ccnv(cxrn(c0, c1))), cid))\n  mpbiran2(wdisjALTV(cxrn(c0, c1)), wss(ccoss(ccnv(cxrn(c0, c1))), cid), wrel(cxrn(c0, c1)))\n  xrnrel(c0, c1)\n  dfdisjALTV2(cxrn(c0, c1))\n  sseq1i(ccoss(ccnv(cxrn(c0, c1))), cid, cin(ccoss(ccnv(c0)), ccoss(ccnv(c1))))\n  1cosscnvxrn(c0, c1)\n}","pretty":"thm disjxrn(class c0, class c1) {\n  ⊢ (⊔(c0 |X. c1)↔(, ~(`' c0)⋂, ~(`' c1))⊆ =)\n} = {\n  bitri(⊔(c0 |X. c1), (, ~(`' c0)⋂, ~(`' c1))⊆ =, , ~(`'(c0 |X. c1))⊆ =)\n  mpbiran2(⊔(c0 |X. c1), , ~(`'(c0 |X. c1))⊆ =, Rel((c0 |X. c1)))\n  xrnrel(c0, c1)\n  dfdisjALTV2((c0 |X. c1))\n  sseq1i(, ~(`'(c0 |X. c1)), cid, (, ~(`' c0)⋂, ~(`' c1)))\n  1cosscnvxrn(c0, c1)\n}","parent":["bitri","mpbiran2","xrnrel","dfdisjALTV2","sseq1i","1cosscnvxrn"],"children":["disjorimxrn"]},{"name":"disjorimxrn","content":"Disjointness condition for range Cartesian product. (Contributed by Peter Mazsa, 12-Jul-2020.) (Revised by Peter Mazsa, 22-Sep-2021.)","origin":"thm disjorimxrn(class c0, class c1) {\n  |- wi(wo(wdisjALTV(c0), wdisjALTV(c1)), wdisjALTV(cxrn(c0, c1)))\n} = {\n  sylibr(wo(wdisjALTV(c0), wdisjALTV(c1)), wdisjALTV(cxrn(c0, c1)), wss(cin(ccoss(ccnv(c0)), ccoss(ccnv(c1))), cid))\n  syl(wo(wdisjALTV(c0), wdisjALTV(c1)), wss(cin(ccoss(ccnv(c0)), ccoss(ccnv(c1))), cid), wo(wss(ccoss(ccnv(c0)), cid), wss(ccoss(ccnv(c1)), cid)))\n  orim12i(wdisjALTV(c0), wdisjALTV(c1), wss(ccoss(ccnv(c0)), cid), wss(ccoss(ccnv(c1)), cid))\n  simplbi(wdisjALTV(c0), wss(ccoss(ccnv(c0)), cid), wrel(c0))\n  dfdisjALTV2(c0)\n  simplbi(wdisjALTV(c1), wss(ccoss(ccnv(c1)), cid), wrel(c1))\n  dfdisjALTV2(c1)\n  inss(ccoss(ccnv(c0)), cid, ccoss(ccnv(c1)))\n  disjxrn(c0, c1)\n}","pretty":"thm disjorimxrn(class c0, class c1) {\n  ⊢ ((⊔ c0 ∨ ⊔ c1)→ ⊔(c0 |X. c1))\n} = {\n  sylibr((⊔ c0 ∨ ⊔ c1), ⊔(c0 |X. c1), (, ~(`' c0)⋂, ~(`' c1))⊆ =)\n  syl((⊔ c0 ∨ ⊔ c1), (, ~(`' c0)⋂, ~(`' c1))⊆ =, (, ~(`' c0)⊆ = ∨, ~(`' c1)⊆ =))\n  orim12i(⊔ c0, ⊔ c1, , ~(`' c0)⊆ =, , ~(`' c1)⊆ =)\n  simplbi(⊔ c0, , ~(`' c0)⊆ =, Rel(c0))\n  dfdisjALTV2(c0)\n  simplbi(⊔ c1, , ~(`' c1)⊆ =, Rel(c1))\n  dfdisjALTV2(c1)\n  inss(, ~(`' c0), cid, , ~(`' c1))\n  disjxrn(c0, c1)\n}","parent":["sylibr","syl","orim12i","simplbi","dfdisjALTV2","inss","disjxrn"],"children":["disjimxrn"]},{"name":"disjimxrn","content":"Disjointness condition for range Cartesian product. (Contributed by Peter Mazsa, 15-Dec-2020.) (Revised by Peter Mazsa, 22-Sep-2021.)","origin":"thm disjimxrn(class c0, class c1) {\n  |- wi(wdisjALTV(c0), wdisjALTV(cxrn(c1, c0)))\n} = {\n  olcs(wdisjALTV(c0), wdisjALTV(cxrn(c1, c0)), wdisjALTV(c1))\n  disjorimxrn(c1, c0)\n}","pretty":"thm disjimxrn(class c0, class c1) {\n  ⊢ (⊔ c0 → ⊔(c1 |X. c0))\n} = {\n  olcs(⊔ c0, ⊔(c1 |X. c0), ⊔ c1)\n  disjorimxrn(c1, c0)\n}","parent":["olcs","disjorimxrn"],"children":["disjimxrnres"]},{"name":"disjimres","content":"Disjointness condition for restriction. (Contributed by Peter Mazsa, 27-Sep-2021.)","origin":"thm disjimres(class c0, class c1) {\n  |- wi(wdisjALTV(c0), wdisjALTV(cres(c0, c1)))\n} = {\n  disjssi(c0, cres(c0, c1))\n  resss(c0, c1)\n}","pretty":"thm disjimres(class c0, class c1) {\n  ⊢ (⊔ c0 → ⊔(c0 |` c1))\n} = {\n  disjssi(c0, (c0 |` c1))\n  resss(c0, c1)\n}","parent":["disjssi","resss"],"children":["disjiminres","disjimxrnres","disjALTVidres"]},{"name":"disjimin","content":"Disjointness condition for intersection. (Contributed by Peter Mazsa, 11-Jun-2021.) (Revised by Peter Mazsa, 28-Sep-2021.)","origin":"thm disjimin(class c0, class c1) {\n  |- wi(wdisjALTV(c0), wdisjALTV(cin(c1, c0)))\n} = {\n  disjssi(c0, cin(c1, c0))\n  inss2(c1, c0)\n}","pretty":"thm disjimin(class c0, class c1) {\n  ⊢ (⊔ c0 → ⊔(c1 ⋂ c0))\n} = {\n  disjssi(c0, (c1 ⋂ c0))\n  inss2(c1, c0)\n}","parent":["disjssi","inss2"],"children":["disjiminres"]},{"name":"disjiminres","content":"Disjointness condition for intersection with restriction. (Contributed by Peter Mazsa, 27-Sep-2021.)","origin":"thm disjiminres(class c0, class c1, class c2) {\n  |- wi(wdisjALTV(c0), wdisjALTV(cin(c1, cres(c0, c2))))\n} = {\n  syl(wdisjALTV(c0), wdisjALTV(cin(c1, cres(c0, c2))), wdisjALTV(cres(c0, c2)))\n  disjimres(c0, c2)\n  disjimin(cres(c0, c2), c1)\n}","pretty":"thm disjiminres(class c0, class c1, class c2) {\n  ⊢ (⊔ c0 → ⊔(c1 ⋂(c0 |` c2)))\n} = {\n  syl(⊔ c0, ⊔(c1 ⋂(c0 |` c2)), ⊔(c0 |` c2))\n  disjimres(c0, c2)\n  disjimin((c0 |` c2), c1)\n}","parent":["syl","disjimres","disjimin"],"children":["disjALTVinidres"]},{"name":"disjimxrnres","content":"Disjointness condition for range Cartesian product with restriction. (Contributed by Peter Mazsa, 27-Sep-2021.)","origin":"thm disjimxrnres(class c0, class c1, class c2) {\n  |- wi(wdisjALTV(c0), wdisjALTV(cxrn(c1, cres(c0, c2))))\n} = {\n  syl(wdisjALTV(c0), wdisjALTV(cxrn(c1, cres(c0, c2))), wdisjALTV(cres(c0, c2)))\n  disjimres(c0, c2)\n  disjimxrn(cres(c0, c2), c1)\n}","pretty":"thm disjimxrnres(class c0, class c1, class c2) {\n  ⊢ (⊔ c0 → ⊔(c1 |X.(c0 |` c2)))\n} = {\n  syl(⊔ c0, ⊔(c1 |X.(c0 |` c2)), ⊔(c0 |` c2))\n  disjimres(c0, c2)\n  disjimxrn((c0 |` c2), c1)\n}","parent":["syl","disjimres","disjimxrn"],"children":["disjALTVxrnidres"]},{"name":"disjALTV0","content":"The null class is disjoint. (Contributed by Peter Mazsa, 27-Sep-2021.)","origin":"thm disjALTV0() {\n  |- wdisjALTV(emptycls)\n} = {\n  mpbir2an(wdisjALTV(emptycls), wal(hs1, wmo(hs0, wbr(cv(hs0), emptycls, cv(hs1)))), wrel(emptycls))\n  ax-gen(hs1, wmo(hs0, wbr(cv(hs0), emptycls, cv(hs1))))\n  ax-mp(wmo(hs0, wbr(cv(hs0), emptycls, cv(hs1))), wn(wex(hs0, wbr(cv(hs0), emptycls, cv(hs1)))))\n  nex(hs0, wbr(cv(hs0), emptycls, cv(hs1)))\n  br0(cv(hs0), cv(hs1))\n  nexmo(hs0, wbr(cv(hs0), emptycls, cv(hs1)))\n  rel0()\n  dfdisjALTV4(hs1, hs0, emptycls)\n  diff.hs1.s(hs0)\n  diff.hs1.c(emptycls)\n  diff.hs0.c(emptycls)\n}","pretty":"thm disjALTV0() {\n  ⊢ ⊔ ∅\n} = {\n  mpbir2an(⊔ ∅, ∀(hs1, ∃*(hs0, hs0[∅]hs1)), Rel(∅))\n  ax-gen(hs1, ∃*(hs0, hs0[∅]hs1))\n  ax-mp(∃*(hs0, hs0[∅]hs1), ¬ ∃(hs0, hs0[∅]hs1))\n  nex(hs0, hs0[∅]hs1)\n  br0(hs0, hs1)\n  nexmo(hs0, hs0[∅]hs1)\n  rel0()\n  dfdisjALTV4(hs1, hs0, emptycls)\n  diff.hs1.s(hs0)\n  diff.hs1.c(emptycls)\n  diff.hs0.c(emptycls)\n}","parent":["mpbir2an","ax-gen","ax-mp","nex","br0","nexmo","rel0","dfdisjALTV4","diff.hs1.s","diff.hs1.c","diff.hs0.c"],"children":[]},{"name":"disjALTVid","content":"The class of identity relations is disjoint. (Contributed by Peter Mazsa, 20-Jun-2021.)","origin":"thm disjALTVid() {\n  |- wdisjALTV(cid)\n} = {\n  mpbir2an(wdisjALTV(cid), wss(ccoss(ccnv(cid)), cid), wrel(cid))\n  eqimssi(ccoss(ccnv(cid)), cid)\n  cosscnvid()\n  reli()\n  dfdisjALTV2(cid)\n}","pretty":"thm disjALTVid() {\n  ⊢ ⊔ =\n} = {\n  mpbir2an(⊔ =, , ~(`' =)⊆ =, Rel(=))\n  eqimssi(, ~(`' =), cid)\n  cosscnvid()\n  reli()\n  dfdisjALTV2(cid)\n}","parent":["mpbir2an","eqimssi","cosscnvid","reli","dfdisjALTV2"],"children":["disjALTVidres","disjALTVinidres","disjALTVxrnidres"]},{"name":"disjALTVidres","content":"The class of identity relations restricted is disjoint. (Contributed by Peter Mazsa, 28-Jun-2020.) (Revised by Peter Mazsa, 27-Sep-2021.)","origin":"thm disjALTVidres(class c0) {\n  |- wdisjALTV(cres(cid, c0))\n} = {\n  ax-mp(wdisjALTV(cres(cid, c0)), wdisjALTV(cid))\n  disjALTVid()\n  disjimres(cid, c0)\n}","pretty":"thm disjALTVidres(class c0) {\n  ⊢ ⊔(= |` c0)\n} = {\n  ax-mp(⊔(= |` c0), ⊔ =)\n  disjALTVid()\n  disjimres(cid, c0)\n}","parent":["ax-mp","disjALTVid","disjimres"],"children":[]},{"name":"disjALTVinidres","content":"The intersection with restricted identity relation is disjoint. (Contributed by Peter Mazsa, 31-Dec-2021.)","origin":"thm disjALTVinidres(class c0, class c1) {\n  |- wdisjALTV(cin(c0, cres(cid, c1)))\n} = {\n  ax-mp(wdisjALTV(cin(c0, cres(cid, c1))), wdisjALTV(cid))\n  disjALTVid()\n  disjiminres(cid, c0, c1)\n}","pretty":"thm disjALTVinidres(class c0, class c1) {\n  ⊢ ⊔(c0 ⋂(= |` c1))\n} = {\n  ax-mp(⊔(c0 ⋂(= |` c1)), ⊔ =)\n  disjALTVid()\n  disjiminres(cid, c0, c1)\n}","parent":["ax-mp","disjALTVid","disjiminres"],"children":[]},{"name":"disjALTVxrnidres","content":"The class of range Cartesian product with restricted identity relation is disjoint. (Contributed by Peter Mazsa, 25-Jun-2020.) (Revised by Peter Mazsa, 27-Sep-2021.)","origin":"thm disjALTVxrnidres(class c0, class c1) {\n  |- wdisjALTV(cxrn(c0, cres(cid, c1)))\n} = {\n  ax-mp(wdisjALTV(cxrn(c0, cres(cid, c1))), wdisjALTV(cid))\n  disjALTVid()\n  disjimxrnres(cid, c0, c1)\n}","pretty":"thm disjALTVxrnidres(class c0, class c1) {\n  ⊢ ⊔(c0 |X.(= |` c1))\n} = {\n  ax-mp(⊔(c0 |X.(= |` c1)), ⊔ =)\n  disjALTVid()\n  disjimxrnres(cid, c0, c1)\n}","parent":["ax-mp","disjALTVid","disjimxrnres"],"children":[]}]}