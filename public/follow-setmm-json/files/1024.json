{"index":1024,"title":"Splitting fields","content":"","blocks":[{"name":"citr","content":"Integral subring of a ring.","origin":"const class citr { IntgRing }","pretty":"","parent":[],"children":[]},{"name":"diff.citr.s","content":"","origin":"axiom diff.citr.s(setvar s0) {\n  |- diffsc(s0, citr)\n}","pretty":"axiom diff.citr.s(setvar s0) {\n  ‚ä¢ d(s0, IntgRing)\n}","parent":[],"children":[]},{"name":"diff.citr.c","content":"","origin":"axiom diff.citr.c(class c0) {\n  |- diffcc(citr, c0)\n}","pretty":"axiom diff.citr.c(class c0) {\n  ‚ä¢ d(IntgRing, c0)\n}","parent":[],"children":[]},{"name":"diff.citr.w","content":"","origin":"axiom diff.citr.w(wff w0) {\n  |- diffcw(citr, w0)\n}","pretty":"axiom diff.citr.w(wff w0) {\n  ‚ä¢ d(IntgRing, w0)\n}","parent":[],"children":[]},{"name":"ccpms","content":"Completion of a metric space.","origin":"const class ccpms { cplMetSp }","pretty":"","parent":[],"children":[]},{"name":"diff.ccpms.s","content":"","origin":"axiom diff.ccpms.s(setvar s0) {\n  |- diffsc(s0, ccpms)\n}","pretty":"axiom diff.ccpms.s(setvar s0) {\n  ‚ä¢ d(s0, cplMetSp)\n}","parent":[],"children":[]},{"name":"diff.ccpms.c","content":"","origin":"axiom diff.ccpms.c(class c0) {\n  |- diffcc(ccpms, c0)\n}","pretty":"axiom diff.ccpms.c(class c0) {\n  ‚ä¢ d(cplMetSp, c0)\n}","parent":[],"children":[]},{"name":"diff.ccpms.w","content":"","origin":"axiom diff.ccpms.w(wff w0) {\n  |- diffcw(ccpms, w0)\n}","pretty":"axiom diff.ccpms.w(wff w0) {\n  ‚ä¢ d(cplMetSp, w0)\n}","parent":[],"children":[]},{"name":"chlb","content":"Embeddings for a direct limit.","origin":"const class chlb { HomLimB }","pretty":"","parent":[],"children":[]},{"name":"diff.chlb.s","content":"","origin":"axiom diff.chlb.s(setvar s0) {\n  |- diffsc(s0, chlb)\n}","pretty":"axiom diff.chlb.s(setvar s0) {\n  ‚ä¢ d(s0, HomLimB)\n}","parent":[],"children":[]},{"name":"diff.chlb.c","content":"","origin":"axiom diff.chlb.c(class c0) {\n  |- diffcc(chlb, c0)\n}","pretty":"axiom diff.chlb.c(class c0) {\n  ‚ä¢ d(HomLimB, c0)\n}","parent":[],"children":[]},{"name":"diff.chlb.w","content":"","origin":"axiom diff.chlb.w(wff w0) {\n  |- diffcw(chlb, w0)\n}","pretty":"axiom diff.chlb.w(wff w0) {\n  ‚ä¢ d(HomLimB, w0)\n}","parent":[],"children":[]},{"name":"chlim","content":"Direct limit structure.","origin":"const class chlim { HomLim }","pretty":"","parent":[],"children":[]},{"name":"diff.chlim.s","content":"","origin":"axiom diff.chlim.s(setvar s0) {\n  |- diffsc(s0, chlim)\n}","pretty":"axiom diff.chlim.s(setvar s0) {\n  ‚ä¢ d(s0, HomLim)\n}","parent":[],"children":[]},{"name":"diff.chlim.c","content":"","origin":"axiom diff.chlim.c(class c0) {\n  |- diffcc(chlim, c0)\n}","pretty":"axiom diff.chlim.c(class c0) {\n  ‚ä¢ d(HomLim, c0)\n}","parent":[],"children":[]},{"name":"diff.chlim.w","content":"","origin":"axiom diff.chlim.w(wff w0) {\n  |- diffcw(chlim, w0)\n}","pretty":"axiom diff.chlim.w(wff w0) {\n  ‚ä¢ d(HomLim, w0)\n}","parent":[],"children":[]},{"name":"cpfl","content":"Polynomial extension field.","origin":"const class cpfl { polyFld }","pretty":"","parent":[],"children":[]},{"name":"diff.cpfl.s","content":"","origin":"axiom diff.cpfl.s(setvar s0) {\n  |- diffsc(s0, cpfl)\n}","pretty":"axiom diff.cpfl.s(setvar s0) {\n  ‚ä¢ d(s0, polyFld)\n}","parent":[],"children":[]},{"name":"diff.cpfl.c","content":"","origin":"axiom diff.cpfl.c(class c0) {\n  |- diffcc(cpfl, c0)\n}","pretty":"axiom diff.cpfl.c(class c0) {\n  ‚ä¢ d(polyFld, c0)\n}","parent":[],"children":[]},{"name":"diff.cpfl.w","content":"","origin":"axiom diff.cpfl.w(wff w0) {\n  |- diffcw(cpfl, w0)\n}","pretty":"axiom diff.cpfl.w(wff w0) {\n  ‚ä¢ d(polyFld, w0)\n}","parent":[],"children":[]},{"name":"csf1","content":"Splitting field for a single polynomial (auxiliary).","origin":"const class csf1 { splitFld1 }","pretty":"","parent":[],"children":[]},{"name":"diff.csf1.s","content":"","origin":"axiom diff.csf1.s(setvar s0) {\n  |- diffsc(s0, csf1)\n}","pretty":"axiom diff.csf1.s(setvar s0) {\n  ‚ä¢ d(s0, splitFld1)\n}","parent":[],"children":[]},{"name":"diff.csf1.c","content":"","origin":"axiom diff.csf1.c(class c0) {\n  |- diffcc(csf1, c0)\n}","pretty":"axiom diff.csf1.c(class c0) {\n  ‚ä¢ d(splitFld1, c0)\n}","parent":[],"children":[]},{"name":"diff.csf1.w","content":"","origin":"axiom diff.csf1.w(wff w0) {\n  |- diffcw(csf1, w0)\n}","pretty":"axiom diff.csf1.w(wff w0) {\n  ‚ä¢ d(splitFld1, w0)\n}","parent":[],"children":[]},{"name":"csf","content":"Splitting field for a finite set of polynomials.","origin":"const class csf { splitFld }","pretty":"","parent":[],"children":[]},{"name":"diff.csf.s","content":"","origin":"axiom diff.csf.s(setvar s0) {\n  |- diffsc(s0, csf)\n}","pretty":"axiom diff.csf.s(setvar s0) {\n  ‚ä¢ d(s0, splitFld)\n}","parent":[],"children":[]},{"name":"diff.csf.c","content":"","origin":"axiom diff.csf.c(class c0) {\n  |- diffcc(csf, c0)\n}","pretty":"axiom diff.csf.c(class c0) {\n  ‚ä¢ d(splitFld, c0)\n}","parent":[],"children":[]},{"name":"diff.csf.w","content":"","origin":"axiom diff.csf.w(wff w0) {\n  |- diffcw(csf, w0)\n}","pretty":"axiom diff.csf.w(wff w0) {\n  ‚ä¢ d(splitFld, w0)\n}","parent":[],"children":[]},{"name":"cpsl","content":"Splitting field for a sequence of polynomials.","origin":"const class cpsl { polySplitLim }","pretty":"","parent":[],"children":[]},{"name":"diff.cpsl.s","content":"","origin":"axiom diff.cpsl.s(setvar s0) {\n  |- diffsc(s0, cpsl)\n}","pretty":"axiom diff.cpsl.s(setvar s0) {\n  ‚ä¢ d(s0, polySplitLim)\n}","parent":[],"children":[]},{"name":"diff.cpsl.c","content":"","origin":"axiom diff.cpsl.c(class c0) {\n  |- diffcc(cpsl, c0)\n}","pretty":"axiom diff.cpsl.c(class c0) {\n  ‚ä¢ d(polySplitLim, c0)\n}","parent":[],"children":[]},{"name":"diff.cpsl.w","content":"","origin":"axiom diff.cpsl.w(wff w0) {\n  |- diffcw(cpsl, w0)\n}","pretty":"axiom diff.cpsl.w(wff w0) {\n  ‚ä¢ d(polySplitLim, w0)\n}","parent":[],"children":[]},{"name":"df-irng","content":"Define the subring of elements of ` r ` integral over ` s ` in a ring. (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-irng(setvar s0, setvar s1, setvar s2) {\n  |- wceq(citr, cmpo(s0, s1, universe, universe, ciun(s2, cfv(cmn1, co(cv(s0), cress, cv(s1))), cima(ccnv(cv(s2)), csn(cfv(c0g, cv(s0)))))))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffss(s0, s1)\n}","pretty":"axiom df-irng(setvar s0, setvar s1, setvar s2) {\n  ‚ä¢ IntgRing =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶ ‚ãÉ(s2 ‚àà(Monic1p `(s0[|`s]s1)),(`' s2 \" {(0 ` s0)})))\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"df-cplmet","content":"A function which completes the given metric space. (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-cplmet(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9, setvar s10, setvar s11) {\n  |- wceq(ccpms, cmpt(s0, universe, csb(s1, co(co(cv(s0), cpws, cn), cress, cfv(ccau, cfv(cds, cv(s0)))), csb(s2, cfv(cbs, cv(s1)), csb(s7, copab(s3, s4, wa(wss(cpr(cv(s3), cv(s4)), cv(s2)), wral(s5, crp, wrex(s6, cz, wf(cres(cv(s3), cfv(cuz, cv(s6))), cfv(cuz, cv(s6)), co(cfv(cv(s4), cv(s6)), cfv(cbl, cfv(cds, cv(s0))), cv(s5))))))), co(co(cv(s1), cqus, cv(s7)), csts, csn(cop(cfv(cds, cnx), coprab(s5, s8, s9, wrex(s10, cv(s2), wrex(s11, cv(s2), wa(wa(wceq(cv(s5), cec(cv(s10), cv(s7))), wceq(cv(s8), cec(cv(s11), cv(s7)))), wbr(co(cv(s10), cof(cfv(cds, cv(s1))), cv(s11)), cli, cv(s9))))))))))))))\n  -| diffss(s3, s7)\n  -| diffss(s4, s7)\n  -| diffss(s6, s7)\n  -| diffss(s10, s7)\n  -| diffss(s11, s7)\n  -| diffss(s1, s7)\n  -| diffss(s2, s7)\n  -| diffss(s0, s7)\n  -| diffss(s5, s7)\n  -| diffss(s7, s8)\n  -| diffss(s7, s9)\n  -| diffss(s3, s4)\n  -| diffss(s3, s6)\n  -| diffss(s10, s3)\n  -| diffss(s11, s3)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n  -| diffss(s0, s3)\n  -| diffss(s3, s5)\n  -| diffss(s3, s8)\n  -| diffss(s3, s9)\n  -| diffss(s4, s6)\n  -| diffss(s10, s4)\n  -| diffss(s11, s4)\n  -| diffss(s1, s4)\n  -| diffss(s2, s4)\n  -| diffss(s0, s4)\n  -| diffss(s4, s5)\n  -| diffss(s4, s8)\n  -| diffss(s4, s9)\n  -| diffss(s10, s6)\n  -| diffss(s11, s6)\n  -| diffss(s1, s6)\n  -| diffss(s2, s6)\n  -| diffss(s0, s6)\n  -| diffss(s5, s6)\n  -| diffss(s6, s8)\n  -| diffss(s6, s9)\n  -| diffss(s10, s11)\n  -| diffss(s1, s10)\n  -| diffss(s10, s2)\n  -| diffss(s0, s10)\n  -| diffss(s10, s5)\n  -| diffss(s10, s8)\n  -| diffss(s10, s9)\n  -| diffss(s1, s11)\n  -| diffss(s11, s2)\n  -| diffss(s0, s11)\n  -| diffss(s11, s5)\n  -| diffss(s11, s8)\n  -| diffss(s11, s9)\n  -| diffss(s1, s2)\n  -| diffss(s0, s1)\n  -| diffss(s1, s5)\n  -| diffss(s1, s8)\n  -| diffss(s1, s9)\n  -| diffss(s0, s2)\n  -| diffss(s2, s5)\n  -| diffss(s2, s8)\n  -| diffss(s2, s9)\n  -| diffss(s0, s5)\n  -| diffss(s0, s8)\n  -| diffss(s0, s9)\n  -| diffss(s5, s8)\n  -| diffss(s5, s9)\n  -| diffss(s8, s9)\n}","pretty":"axiom df-cplmet(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9, setvar s10, setvar s11) {\n  ‚ä¢ cplMetSp =(s0 ‚àà ùïå ‚Ü¶[((s0[^]‚Ñï)[|`s](Cau `(dist ` s0)))/ s1][(Base ` s1)/ s2][{ < s3, s4 > |({ s3, s4 } ‚äÜ s2 ‚àß ‚àÄ(s5 ‚àà ‚Ñù+, ‚àÉ(s6 ‚àà ‚Ñ§,((s3 |`(‚Ñ§‚â• ` s6)):(‚Ñ§‚â• ` s6)‚Üí((s4 ` s6)[(ball `(dist ` s0))]s5)))))} / s7]((s1[/s]s7)[sSet]{ <(dist ` ndx), { < < s5, s8 >, s9 > | ‚àÉ(s10 ‚àà s2, ‚àÉ(s11 ‚àà s2,((s5 =[s10]s7 ‚àß s8 =[s11]s7)‚àß(s10[oF((dist ` s1))]s11)[~~>]s9)))} > }))\n  ‚ä£ d(s3, s7)\n  ‚ä£ d(s4, s7)\n  ‚ä£ d(s6, s7)\n  ‚ä£ d(s10, s7)\n  ‚ä£ d(s11, s7)\n  ‚ä£ d(s1, s7)\n  ‚ä£ d(s2, s7)\n  ‚ä£ d(s0, s7)\n  ‚ä£ d(s5, s7)\n  ‚ä£ d(s7, s8)\n  ‚ä£ d(s7, s9)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s3, s6)\n  ‚ä£ d(s10, s3)\n  ‚ä£ d(s11, s3)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s3, s8)\n  ‚ä£ d(s3, s9)\n  ‚ä£ d(s4, s6)\n  ‚ä£ d(s10, s4)\n  ‚ä£ d(s11, s4)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s4, s8)\n  ‚ä£ d(s4, s9)\n  ‚ä£ d(s10, s6)\n  ‚ä£ d(s11, s6)\n  ‚ä£ d(s1, s6)\n  ‚ä£ d(s2, s6)\n  ‚ä£ d(s0, s6)\n  ‚ä£ d(s5, s6)\n  ‚ä£ d(s6, s8)\n  ‚ä£ d(s6, s9)\n  ‚ä£ d(s10, s11)\n  ‚ä£ d(s1, s10)\n  ‚ä£ d(s10, s2)\n  ‚ä£ d(s0, s10)\n  ‚ä£ d(s10, s5)\n  ‚ä£ d(s10, s8)\n  ‚ä£ d(s10, s9)\n  ‚ä£ d(s1, s11)\n  ‚ä£ d(s11, s2)\n  ‚ä£ d(s0, s11)\n  ‚ä£ d(s11, s5)\n  ‚ä£ d(s11, s8)\n  ‚ä£ d(s11, s9)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s1, s8)\n  ‚ä£ d(s1, s9)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s2, s8)\n  ‚ä£ d(s2, s9)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s0, s8)\n  ‚ä£ d(s0, s9)\n  ‚ä£ d(s5, s8)\n  ‚ä£ d(s5, s9)\n  ‚ä£ d(s8, s9)\n}","parent":[],"children":[""]},{"name":"df-homlimb","content":"The input to this function is a sequence (on ` NN ` ) of homomorphisms ` F ( n ) : R ( n ) --> R ( n + 1 ) ` . The resulting structure is the direct limit of the direct system so defined. This function returns the pair ` <. S , G >. ` where ` S ` is the terminal object and ` G ` is a sequence of functions such that ` G ( n ) : R ( n ) --> S ` and ` G ( n ) = F ( n ) o. G ( n + 1 ) ` . (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-homlimb(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  |- wceq(chlb, cmpt(s0, universe, csb(s2, ciun(s1, cn, cxp(csn(cv(s1)), cdm(cfv(cv(s0), cv(s1))))), csb(s5, cint(cab(s3, wa(wer(cv(s3), cv(s2)), wss(cmpt(s4, cv(s2), cop(co(cfv(c1st, cv(s4)), caddc, nat1), cfv(cfv(cv(s0), cfv(c1st, cv(s4))), cfv(c2nd, cv(s4))))), cv(s3))))), cop(cqs(cv(s2), cv(s5)), cmpt(s1, cn, cmpt(s4, cdm(cfv(cv(s0), cv(s1))), cec(cop(cv(s1), cv(s4)), cv(s5)))))))))\n  -| diffss(s0, s5)\n  -| diffss(s1, s5)\n  -| diffss(s3, s5)\n  -| diffss(s2, s5)\n  -| diffss(s4, s5)\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s0, s2)\n  -| diffss(s0, s4)\n  -| diffss(s1, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s4)\n  -| diffss(s2, s3)\n  -| diffss(s3, s4)\n  -| diffss(s2, s4)\n}","pretty":"axiom df-homlimb(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  ‚ä¢ HomLimB =(s0 ‚àà ùïå ‚Ü¶[‚ãÉ(s1 ‚àà ‚Ñï,({ s1 } √ó dom((s0 ` s1))))/ s2][‚ãÇ { s3 |(s3[Er]s2 ‚àß(s4 ‚àà s2 ‚Ü¶ <((1st ` s4)[+]1),((s0 `(1st ` s4))`(2nd ` s4))>)‚äÜ s3)} / s5]<(s2 /. s5),(s1 ‚àà ‚Ñï ‚Ü¶(s4 ‚àà dom((s0 ` s1))‚Ü¶[< s1, s4 >]s5))>)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s2, s4)\n}","parent":[],"children":[""]},{"name":"df-homlim","content":"The input to this function is a sequence (on ` NN ` ) of structures ` R ( n ) ` and homomorphisms ` F ( n ) : R ( n ) --> R ( n + 1 ) ` . The resulting structure is the direct limit of the direct system so defined, and maintains any structures that were present in the original objects. TODO: generalize to directed sets? (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-homlim(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8) {\n  |- wceq(chlim, cmpo(s0, s1, universe, universe, csb(s2, cfv(chlb, cv(s1)), csb(s3, cfv(c1st, cv(s2)), csb(s4, cfv(c2nd, cv(s2)), cun(ctp(cop(cfv(cbs, cnx), cv(s3)), cop(cfv(cplusg, cnx), ciun(s5, cn, crn(cmpo(s6, s7, cdm(cfv(cv(s4), cv(s5))), cdm(cfv(cv(s4), cv(s5))), cop(cop(cfv(cfv(cv(s4), cv(s5)), cv(s6)), cfv(cfv(cv(s4), cv(s5)), cv(s7))), cfv(cfv(cv(s4), cv(s5)), co(cv(s6), cfv(cplusg, cfv(cv(s0), cv(s5))), cv(s7)))))))), cop(cfv(cmulr, cnx), ciun(s5, cn, crn(cmpo(s6, s7, cdm(cfv(cv(s4), cv(s5))), cdm(cfv(cv(s4), cv(s5))), cop(cop(cfv(cfv(cv(s4), cv(s5)), cv(s6)), cfv(cfv(cv(s4), cv(s5)), cv(s7))), cfv(cfv(cv(s4), cv(s5)), co(cv(s6), cfv(cmulr, cfv(cv(s0), cv(s5))), cv(s7))))))))), ctp(cop(cfv(ctopn, cnx), crab(s8, cpw(cv(s3)), wral(s5, cn, wcel(cima(ccnv(cfv(cv(s4), cv(s5))), cv(s8)), cfv(ctopn, cfv(cv(s0), cv(s5))))))), cop(cfv(cds, cnx), ciun(s5, cn, crn(cmpo(s6, s7, cdm(cfv(cfv(cv(s4), cv(s5)), cv(s5))), cdm(cfv(cfv(cv(s4), cv(s5)), cv(s5))), cop(cop(cfv(cfv(cv(s4), cv(s5)), cv(s6)), cfv(cfv(cv(s4), cv(s5)), cv(s7))), co(cv(s6), cfv(cds, cfv(cv(s0), cv(s5))), cv(s7))))))), cop(cfv(cple, cnx), ciun(s5, cn, ccom(ccnv(cfv(cv(s4), cv(s5))), ccom(cfv(cple, cfv(cv(s0), cv(s5))), cfv(cv(s4), cv(s5)))))))))))))\n  -| diffss(s1, s2)\n  -| diffss(s2, s4)\n  -| diffss(s2, s5)\n  -| diffss(s0, s2)\n  -| diffss(s2, s8)\n  -| diffss(s2, s3)\n  -| diffss(s2, s6)\n  -| diffss(s2, s7)\n  -| diffss(s1, s4)\n  -| diffss(s1, s5)\n  -| diffss(s0, s1)\n  -| diffss(s1, s8)\n  -| diffss(s1, s3)\n  -| diffss(s1, s6)\n  -| diffss(s1, s7)\n  -| diffss(s4, s5)\n  -| diffss(s0, s4)\n  -| diffss(s4, s8)\n  -| diffss(s3, s4)\n  -| diffss(s4, s6)\n  -| diffss(s4, s7)\n  -| diffss(s0, s5)\n  -| diffss(s5, s8)\n  -| diffss(s3, s5)\n  -| diffss(s5, s6)\n  -| diffss(s5, s7)\n  -| diffss(s0, s8)\n  -| diffss(s0, s3)\n  -| diffss(s0, s6)\n  -| diffss(s0, s7)\n  -| diffss(s3, s8)\n  -| diffss(s6, s8)\n  -| diffss(s7, s8)\n  -| diffss(s3, s6)\n  -| diffss(s3, s7)\n  -| diffss(s6, s7)\n}","pretty":"axiom df-homlim(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8) {\n  ‚ä¢ HomLim =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶[(HomLimB ` s1)/ s2][(1st ` s2)/ s3][(2nd ` s2)/ s4]({ <(Base ` ndx), s3 >, <(+ ` ndx), ‚ãÉ(s5 ‚àà ‚Ñï, ran((s6 ‚àà dom((s4 ` s5)), s7 ‚àà dom((s4 ` s5))‚Ü¶ < <((s4 ` s5)` s6),((s4 ` s5)` s7)>,((s4 ` s5)`(s6[(+ `(s0 ` s5))]s7))>)))>, <(√ó ` ndx), ‚ãÉ(s5 ‚àà ‚Ñï, ran((s6 ‚àà dom((s4 ` s5)), s7 ‚àà dom((s4 ` s5))‚Ü¶ < <((s4 ` s5)` s6),((s4 ` s5)` s7)>,((s4 ` s5)`(s6[(√ó `(s0 ` s5))]s7))>)))> } ‚ãÉ { <(TopOpen ` ndx), { s8 ‚àà P(s3)| ‚àÄ(s5 ‚àà ‚Ñï,(`'(s4 ` s5)\" s8)‚àà(TopOpen `(s0 ` s5)))} >, <(dist ` ndx), ‚ãÉ(s5 ‚àà ‚Ñï, ran((s6 ‚àà dom(((s4 ` s5)` s5)), s7 ‚àà dom(((s4 ` s5)` s5))‚Ü¶ < <((s4 ` s5)` s6),((s4 ` s5)` s7)>,(s6[(dist `(s0 ` s5))]s7)>)))>, <(le ` ndx), ‚ãÉ(s5 ‚àà ‚Ñï,(`'(s4 ` s5)‚àò((le `(s0 ` s5))‚àò(s4 ` s5))))> }))\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s2, s8)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s2, s6)\n  ‚ä£ d(s2, s7)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s8)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s1, s6)\n  ‚ä£ d(s1, s7)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s4, s8)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s4, s6)\n  ‚ä£ d(s4, s7)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s5, s8)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s5, s6)\n  ‚ä£ d(s5, s7)\n  ‚ä£ d(s0, s8)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s0, s6)\n  ‚ä£ d(s0, s7)\n  ‚ä£ d(s3, s8)\n  ‚ä£ d(s6, s8)\n  ‚ä£ d(s7, s8)\n  ‚ä£ d(s3, s6)\n  ‚ä£ d(s3, s7)\n  ‚ä£ d(s6, s7)\n}","parent":[],"children":[""]},{"name":"df-plfl","content":"Define the field extension that augments a field with the root of the given irreducible polynomial, and extends the norm if one exists and the extension is unique. (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-plfl(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9) {\n  |- wceq(cpfl, cmpo(s0, s1, universe, universe, csb(s2, cfv(cpl1, cv(s0)), csb(s3, cfv(cfv(crsp, cv(s2)), csn(cv(s1))), csb(s5, cmpt(s4, cfv(cbs, cv(s0)), cec(co(cv(s4), cfv(cvsca, cv(s2)), cfv(cur, cv(s2))), co(cv(s2), cqg, cv(s3)))), cop(csb(s6, co(cv(s2), cqus, co(cv(s2), cqg, cv(s3))), co(co(cv(s6), ctng, crio(s7, cfv(cabv, cv(s6)), wceq(ccom(cv(s7), cv(s5)), cfv(cnm, cv(s0))))), csts, cop(cfv(cple, cnx), csb(s9, cmpt(s4, cfv(cbs, cv(s6)), crio(s8, cv(s4), wbr(co(cv(s0), cdg1, cv(s8)), clt, co(cv(s0), cdg1, cv(s1))))), ccom(ccnv(cv(s9)), ccom(cfv(cple, cv(s2)), cv(s9))))))), cv(s5)))))))\n  -| diffss(s5, s9)\n  -| diffss(s3, s5)\n  -| diffss(s5, s7)\n  -| diffss(s1, s5)\n  -| diffss(s5, s8)\n  -| diffss(s0, s5)\n  -| diffss(s2, s5)\n  -| diffss(s5, s6)\n  -| diffss(s4, s5)\n  -| diffss(s3, s9)\n  -| diffss(s7, s9)\n  -| diffss(s1, s9)\n  -| diffss(s8, s9)\n  -| diffss(s0, s9)\n  -| diffss(s2, s9)\n  -| diffss(s6, s9)\n  -| diffss(s4, s9)\n  -| diffss(s3, s7)\n  -| diffss(s1, s3)\n  -| diffss(s3, s8)\n  -| diffss(s0, s3)\n  -| diffss(s2, s3)\n  -| diffss(s3, s6)\n  -| diffss(s3, s4)\n  -| diffss(s1, s7)\n  -| diffss(s7, s8)\n  -| diffss(s0, s7)\n  -| diffss(s2, s7)\n  -| diffss(s6, s7)\n  -| diffss(s4, s7)\n  -| diffss(s1, s8)\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffss(s1, s6)\n  -| diffss(s1, s4)\n  -| diffss(s0, s8)\n  -| diffss(s2, s8)\n  -| diffss(s6, s8)\n  -| diffss(s4, s8)\n  -| diffss(s0, s2)\n  -| diffss(s0, s6)\n  -| diffss(s0, s4)\n  -| diffss(s2, s6)\n  -| diffss(s2, s4)\n  -| diffss(s4, s6)\n}","pretty":"axiom df-plfl(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9) {\n  ‚ä¢ polyFld =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶[(Poly1 ` s0)/ s2][((RSpan ` s2)` { s1 })/ s3][(s4 ‚àà(Base ` s0)‚Ü¶[(s4[(√ó ` s2)](1r ` s2))](s2[~QG]s3))/ s5]<[(s2[/s](s2[~QG]s3))/ s6]((s6[toNrmGrp]iota(s7 ‚àà(AbsVal ` s6),(s7 ‚àò s5)=(norm ` s0)))[sSet]<(le ` ndx),[(s4 ‚àà(Base ` s6)‚Ü¶ iota(s8 ‚àà s4,(s0[deg1]s8)[<](s0[deg1]s1)))/ s9](`' s9 ‚àò((le ` s2)‚àò s9))>), s5 >)\n  ‚ä£ d(s5, s9)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s5, s7)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s5, s8)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s5, s6)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s3, s9)\n  ‚ä£ d(s7, s9)\n  ‚ä£ d(s1, s9)\n  ‚ä£ d(s8, s9)\n  ‚ä£ d(s0, s9)\n  ‚ä£ d(s2, s9)\n  ‚ä£ d(s6, s9)\n  ‚ä£ d(s4, s9)\n  ‚ä£ d(s3, s7)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s3, s8)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s3, s6)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s1, s7)\n  ‚ä£ d(s7, s8)\n  ‚ä£ d(s0, s7)\n  ‚ä£ d(s2, s7)\n  ‚ä£ d(s6, s7)\n  ‚ä£ d(s4, s7)\n  ‚ä£ d(s1, s8)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s1, s6)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s0, s8)\n  ‚ä£ d(s2, s8)\n  ‚ä£ d(s6, s8)\n  ‚ä£ d(s4, s8)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s0, s6)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s2, s6)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s4, s6)\n}","parent":[],"children":[""]},{"name":"df-sfl1","content":"Temporary construction for the splitting field of a polynomial. The inputs are a field ` r ` and a polynomial ` p ` that we want to split, along with a tuple ` j ` in the same format as the output. The output is a tuple ` <. S , F >. ` where ` S ` is the splitting field and ` F ` is an injective homomorphism from the original field ` r ` . The function works by repeatedly finding the smallest monic irreducible factor, and extending the field by that factor using the ` polyFld ` construction. We keep track of a total order in each of the splitting fields so that we can pick an element definably without needing global choice. (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-sfl1(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9) {\n  |- wceq(csf1, cmpo(s0, s1, universe, universe, cmpt(s2, cfv(cpl1, cv(s0)), cfv(crdg(cmpo(s3, s4, universe, universe, csb(s5, cfv(cmpl, cv(s3)), csb(s7, crab(s6, cin(cfv(cmn1, cv(s3)), cfv(cir, cv(s5))), wa(wbr(cv(s6), cfv(cdsr, cv(s5)), ccom(cv(s2), cv(s4))), wbr(nat1, clt, co(cv(s3), cdg1, cv(s6))))), cif(cop(cv(s3), cv(s4)), csb(s8, cfv(cglb, cv(s7)), csb(s9, co(cv(s3), cpfl, cv(s8)), cop(cfv(c1st, cv(s9)), ccom(cv(s4), cfv(c2nd, cv(s9)))))), wo(wceq(ccom(cv(s2), cv(s4)), cfv(c0g, cv(s5))), wceq(cv(s7), emptycls)))))), cv(s1)), cfv(ccrd, co(nat1, cfz, co(cv(s0), cdg1, cv(s2))))))))\n  -| diffss(s4, s7)\n  -| diffss(s6, s7)\n  -| diffss(s7, s8)\n  -| diffss(s1, s7)\n  -| diffss(s5, s7)\n  -| diffss(s2, s7)\n  -| diffss(s0, s7)\n  -| diffss(s3, s7)\n  -| diffss(s7, s9)\n  -| diffss(s4, s6)\n  -| diffss(s4, s8)\n  -| diffss(s1, s4)\n  -| diffss(s4, s5)\n  -| diffss(s2, s4)\n  -| diffss(s0, s4)\n  -| diffss(s3, s4)\n  -| diffss(s4, s9)\n  -| diffss(s6, s8)\n  -| diffss(s1, s6)\n  -| diffss(s5, s6)\n  -| diffss(s2, s6)\n  -| diffss(s0, s6)\n  -| diffss(s3, s6)\n  -| diffss(s6, s9)\n  -| diffss(s1, s8)\n  -| diffss(s5, s8)\n  -| diffss(s2, s8)\n  -| diffss(s0, s8)\n  -| diffss(s3, s8)\n  -| diffss(s8, s9)\n  -| diffss(s1, s5)\n  -| diffss(s1, s2)\n  -| diffss(s0, s1)\n  -| diffss(s1, s3)\n  -| diffss(s1, s9)\n  -| diffss(s2, s5)\n  -| diffss(s0, s5)\n  -| diffss(s3, s5)\n  -| diffss(s5, s9)\n  -| diffss(s0, s2)\n  -| diffss(s2, s3)\n  -| diffss(s2, s9)\n  -| diffss(s0, s3)\n  -| diffss(s0, s9)\n  -| diffss(s3, s9)\n}","pretty":"axiom df-sfl1(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9) {\n  ‚ä¢ splitFld1 =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(s2 ‚àà(Poly1 ` s0)‚Ü¶(rec((s3 ‚àà ùïå, s4 ‚àà ùïå ‚Ü¶[(mPoly ` s3)/ s5][{ s6 ‚àà((Monic1p ` s3)‚ãÇ(Irred ` s5))|(s6[(||r ` s5)](s2 ‚àò s4)‚àß 1[<](s3[deg1]s6))} / s7]if(((s2 ‚àò s4)=(0 ` s5)‚à® s7 = ‚àÖ), < s3, s4 >,[(glb ` s7)/ s8][(s3[polyFld]s8)/ s9]<(1st ` s9),(s4 ‚àò(2nd ` s9))>)), s1)`(card `(1[...](s0[deg1]s2))))))\n  ‚ä£ d(s4, s7)\n  ‚ä£ d(s6, s7)\n  ‚ä£ d(s7, s8)\n  ‚ä£ d(s1, s7)\n  ‚ä£ d(s5, s7)\n  ‚ä£ d(s2, s7)\n  ‚ä£ d(s0, s7)\n  ‚ä£ d(s3, s7)\n  ‚ä£ d(s7, s9)\n  ‚ä£ d(s4, s6)\n  ‚ä£ d(s4, s8)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s4, s9)\n  ‚ä£ d(s6, s8)\n  ‚ä£ d(s1, s6)\n  ‚ä£ d(s5, s6)\n  ‚ä£ d(s2, s6)\n  ‚ä£ d(s0, s6)\n  ‚ä£ d(s3, s6)\n  ‚ä£ d(s6, s9)\n  ‚ä£ d(s1, s8)\n  ‚ä£ d(s5, s8)\n  ‚ä£ d(s2, s8)\n  ‚ä£ d(s0, s8)\n  ‚ä£ d(s3, s8)\n  ‚ä£ d(s8, s9)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s1, s9)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s5, s9)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s2, s9)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s0, s9)\n  ‚ä£ d(s3, s9)\n}","parent":[],"children":[""]},{"name":"df-sfl","content":"Define the splitting field of a finite collection of polynomials, given a total ordered base field. The output is a tuple ` <. S , F >. ` where ` S ` is the totally ordered splitting field and ` F ` is an injective homomorphism from the original field ` r ` . (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-sfl(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  |- wceq(csf, cmpo(s0, s1, universe, universe, cio(s2, wex(s3, wa(wiso(cv(s3), clt, cfv(cplt, cv(s0)), co(nat1, cfz, cfv(chash, cv(s1))), cv(s1)), wceq(cv(s2), cfv(cseq(nat0, cmpo(s4, s5, universe, universe, cfv(co(cv(s0), csf1, cv(s4)), cv(s5))), cun(cv(s3), csn(cop(nat0, cop(cv(s0), cres(cid, cfv(cbs, cv(s0)))))))), cfv(chash, cv(s1)))))))))\n  -| diffss(s3, s4)\n  -| diffss(s4, s5)\n  -| diffss(s1, s4)\n  -| diffss(s0, s4)\n  -| diffss(s2, s4)\n  -| diffss(s3, s5)\n  -| diffss(s1, s3)\n  -| diffss(s0, s3)\n  -| diffss(s2, s3)\n  -| diffss(s1, s5)\n  -| diffss(s0, s5)\n  -| diffss(s2, s5)\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffss(s0, s2)\n}","pretty":"axiom df-sfl(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  ‚ä¢ splitFld =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶ iota(s2, ‚àÉ(s3,((s3 ‚âÖ <,(lt ` s0)((1[...](# ` s1)), s1))‚àß s2 =(seq(0((s4 ‚àà ùïå, s5 ‚àà ùïå ‚Ü¶((s0[splitFld1]s4)` s5)),(s3 ‚ãÉ { < 0, < s0,(= |`(Base ` s0))> > })))`(# ` s1))))))\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s0, s2)\n}","parent":[],"children":[""]},{"name":"df-psl","content":"Define the direct limit of an increasing sequence of fields produced by pasting together the splitting fields for each sequence of polynomials. That is, given a ring ` r ` , a strict order on ` r ` , and a sequence ` p : NN --> ( ~P r i^i Fin ) ` of finite sets of polynomials to split, we construct the direct limit system of field extensions by splitting one set at a time and passing the resulting construction to ` HomLim ` . (Contributed by Mario Carneiro, 2-Dec-2014.)","origin":"axiom df-psl(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7) {\n  |- wceq(cpsl, cmpo(s0, s1, universe, co(cin(cpw(cfv(cbs, cv(s0))), cfn), cmap, cn), csb(s7, ccom(c1st, cseq(nat0, cmpo(s2, s3, universe, universe, csb(s4, cfv(c1st, cv(s2)), csb(s5, cfv(c1st, cv(s4)), csb(s7, co(cv(s5), csf, crn(cmpt(s6, cv(s3), ccom(cv(s6), cfv(c2nd, cv(s2)))))), cop(cv(s7), ccom(cfv(c2nd, cv(s2)), cfv(c2nd, cv(s7)))))))), cun(cv(s1), csn(cop(nat0, cop(cop(cv(s0), emptycls), cres(cid, cfv(cbs, cv(s0))))))))), co(ccom(c1st, co(cv(s7), cshi, nat1)), chlim, ccom(c2nd, cv(s7))))))\n  -| diffss(s4, s7)\n  -| diffss(s2, s4)\n  -| diffss(s1, s4)\n  -| diffss(s3, s4)\n  -| diffss(s0, s4)\n  -| diffss(s4, s5)\n  -| diffss(s4, s6)\n  -| diffss(s2, s7)\n  -| diffss(s1, s7)\n  -| diffss(s3, s7)\n  -| diffss(s0, s7)\n  -| diffss(s5, s7)\n  -| diffss(s6, s7)\n  -| diffss(s1, s2)\n  -| diffss(s2, s3)\n  -| diffss(s0, s2)\n  -| diffss(s2, s5)\n  -| diffss(s2, s6)\n  -| diffss(s1, s3)\n  -| diffss(s0, s1)\n  -| diffss(s1, s5)\n  -| diffss(s1, s6)\n  -| diffss(s0, s3)\n  -| diffss(s3, s5)\n  -| diffss(s3, s6)\n  -| diffss(s0, s5)\n  -| diffss(s0, s6)\n  -| diffss(s5, s6)\n}","pretty":"axiom df-psl(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7) {\n  ‚ä¢ polySplitLim =(s0 ‚àà ùïå, s1 ‚àà((P((Base ` s0))‚ãÇ Fin)[‚Ü¶]‚Ñï)‚Ü¶[(1st ‚àò seq(0((s2 ‚àà ùïå, s3 ‚àà ùïå ‚Ü¶[(1st ` s2)/ s4][(1st ` s4)/ s5][(s5[splitFld]ran((s6 ‚àà s3 ‚Ü¶(s6 ‚àò(2nd ` s2)))))/ s7]< s7,((2nd ` s2)‚àò(2nd ` s7))>),(s1 ‚ãÉ { < 0, < < s0, ‚àÖ >,(= |`(Base ` s0))> > }))))/ s7]((1st ‚àò(s7[shift]1))[HomLim](2nd ‚àò s7)))\n  ‚ä£ d(s4, s7)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s4, s6)\n  ‚ä£ d(s2, s7)\n  ‚ä£ d(s1, s7)\n  ‚ä£ d(s3, s7)\n  ‚ä£ d(s0, s7)\n  ‚ä£ d(s5, s7)\n  ‚ä£ d(s6, s7)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s2, s6)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s1, s6)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s3, s6)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s0, s6)\n  ‚ä£ d(s5, s6)\n}","parent":[],"children":[""]}]}