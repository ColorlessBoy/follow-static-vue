{"index":1393,"title":"Theorems proved using conjunction-form Virtual Deduction","content":"","blocks":[{"name":"elpwgdedVD","content":"Membership in a power class. Theorem 86 of [Suppes] p. 47. Derived from ~ elpwg . In form of VD deduction with ` ph ` and ` ps ` as variable virtual hypothesis collections based on Mario Carneiro's metavariable concept. ~ elpwgded is ~ elpwgdedVD using conventional notation. (Contributed by Alan Sare, 23-Apr-2015.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm elpwgdedVD(class c0, class c1, wff w0, wff w1) {\n  |- wvd1(wvhc2(w0, w1), wcel(c0, cpw(c1)))\n  -| wvd1(w0, wcel(c0, universe))\n  -| wvd1(w1, wss(c0, c1))\n} = {\n  el12(w0, w1, wcel(c0, cpw(c1)), wcel(c0, universe), wss(c0, c1))\n  biimpar(wcel(c0, universe), wss(c0, c1), wcel(c0, cpw(c1)))\n  elpwg(c0, universe, c1)\n}","pretty":"thm elpwgdedVD(class c0, class c1, wff w0, wff w1) {\n  ⊢ ((w0, w1)→ c0 ∈ P(c1))\n  ⊣ (w0 → c0 ∈ 𝕌)\n  ⊣ (w1 → c0 ⊆ c1)\n} = {\n  el12(w0, w1, c0 ∈ P(c1), c0 ∈ 𝕌, c0 ⊆ c1)\n  biimpar(c0 ∈ 𝕌, c0 ⊆ c1, c0 ∈ P(c1))\n  elpwg(c0, universe, c1)\n}","parent":["el12","biimpar","elpwg"],"children":["sspwimpVD"]},{"name":"sspwimp","content":"If a class is a subclass of another class, then its power class is a subclass of that other class's power class. Left-to-right implication of Exercise 18 of [TakeutiZaring] p. 18. For the biconditional, see ~ sspwb . The proof ~ sspwimp , using conventional notation, was translated from virtual deduction form, ~ sspwimpVD , using a translation program. (Contributed by Alan Sare, 23-Apr-2015.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sspwimp(class c0, class c1) {\n  |- wi(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n} = {\n  iin1(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n  syl(wss(c0, c1), wss(cpw(c0), cpw(c1)), wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))))\n  alrimiv(hs0, wss(c0, c1), wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1))))\n  ex(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))\n  uun0.1(wa(wss(c0, c1), wcel(cv(hs0), cpw(c0))), wcel(cv(hs0), cpw(c1)), wcel(cv(hs0), universe), wss(cv(hs0), c1))\n  elpwgded(cv(hs0), c1, wtru, wa(wss(c0, c1), wcel(cv(hs0), cpw(c0))))\n  a1i(wtru, wcel(cv(hs0), universe))\n  vex(hs0)\n  syl2an(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c1), wss(c0, c1), wss(cv(hs0), c0))\n  id(wss(c0, c1))\n  syl(wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c0), wcel(cv(hs0), cpw(c0)))\n  id(wcel(cv(hs0), cpw(c0)))\n  elpwi(cv(hs0), c0)\n  ancoms(wss(c0, c1), wss(cv(hs0), c0), wss(cv(hs0), c1))\n  sstr(cv(hs0), c0, c1)\n  biimpri(wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))), wss(cpw(c0), cpw(c1)))\n  dfss2(hs0, cpw(c0), cpw(c1))\n  diff.hs0.w(wss(c0, c1))\n  diff.hs0.c(cpw(c0))\n  diff.hs0.c(cpw(c1))\n}","pretty":"thm sspwimp(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 → P(c0)⊆ P(c1))\n} = {\n  iin1(c0 ⊆ c1, P(c0)⊆ P(c1))\n  syl(c0 ⊆ c1, P(c0)⊆ P(c1), ∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))))\n  alrimiv(hs0, c0 ⊆ c1, (hs0 ∈ P(c0)→ hs0 ∈ P(c1)))\n  ex(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ∈ P(c1))\n  uun0.1((c0 ⊆ c1 ∧ hs0 ∈ P(c0)), hs0 ∈ P(c1), hs0 ∈ 𝕌, hs0 ⊆ c1)\n  elpwgded(hs0, c1, wtru, (c0 ⊆ c1 ∧ hs0 ∈ P(c0)))\n  a1i(wtru, hs0 ∈ 𝕌)\n  vex(hs0)\n  syl2an(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ⊆ c1, c0 ⊆ c1, hs0 ⊆ c0)\n  id(c0 ⊆ c1)\n  syl(hs0 ∈ P(c0), hs0 ⊆ c0, hs0 ∈ P(c0))\n  id(hs0 ∈ P(c0))\n  elpwi(hs0, c0)\n  ancoms(c0 ⊆ c1, hs0 ⊆ c0, hs0 ⊆ c1)\n  sstr(hs0, c0, c1)\n  biimpri(∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))), P(c0)⊆ P(c1))\n  dfss2(hs0, P(c0), P(c1))\n  diff.hs0.w(c0 ⊆ c1)\n  diff.hs0.c(P(c0))\n  diff.hs0.c(P(c1))\n}","parent":["iin1","syl","alrimiv","ex","uun0.1","elpwgded","a1i","vex","syl2an","id","elpwi","ancoms","sstr","biimpri","dfss2","diff.hs0.w","diff.hs0.c"],"children":[]},{"name":"sspwimpVD","content":"The following User's Proof is a Virtual Deduction proof (see ~ wvd1 ) using conjunction-form virtual hypothesis collections. It was completed manually, but has the potential to be completed automatically by a tools program which would invoke Mel L. O'Cat's mmj2 and Norm Megill's Metamath Proof Assistant. ~ sspwimp is ~ sspwimpVD without virtual deductions and was derived from ~ sspwimpVD . (Contributed by Alan Sare, 23-Apr-2015.) (Proof modification is discouraged.) (New usage is discouraged.) <HTML> <TABLE> <TR> <TD> 1:: <TD> ` |- (. A C_ B ->. A C_ B ). ` <TR> <TD> 2:: <TD> ` |- (. ` .............. ` x e. ~P A ` ` ->. x e. ~P A ). ` <TR> <TD> 3:2: <TD> ` |- (. ` .............. ` x e. ~P A ` ` ->. x C_ A ). ` <TR> <TD> 4:3,1: <TD> ` |- (. (. A C_ B ,. x e. ~P A ). ->. x C_ B ). ` <TR> <TD> 5:: <TD> ` |- x e. _V ` <TR> <TD> 6:4,5: <TD> ` |- (. (. A C_ B ,. x e. ~P A ). ->. x e. ~P B ` ` ). ` <TR> <TD> 7:6: <TD> ` |- (. A C_ B ->. ( x e. ~P A -> x e. ~P B ) ` ` ). ` <TR> <TD> 8:7: <TD> ` |- (. A C_ B ->. A. x ( x e. ~P A -> x e. ` ` ~P B ) ). ` <TR> <TD> 9:8: <TD> ` |- (. A C_ B ->. ~P A C_ ~P B ). ` <TR> <TD> qed:9: <TD> ` |- ( A C_ B -> ~P A C_ ~P B ) ` </TABLE> </HTML>","origin":"thm sspwimpVD(class c0, class c1) {\n  |- wi(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n} = {\n  in1(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n  el1(wss(c0, c1), wss(cpw(c0), cpw(c1)), wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))))\n  gen11(hs0, wss(c0, c1), wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1))))\n  int2(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))\n  un0.1(wvhc2(wss(c0, c1), wcel(cv(hs0), cpw(c0))), wcel(cv(hs0), cpw(c1)), wcel(cv(hs0), universe), wss(cv(hs0), c1))\n  elpwgdedVD(cv(hs0), c1, wtru, wvhc2(wss(c0, c1), wcel(cv(hs0), cpw(c0))))\n  vd01(wtru, wcel(cv(hs0), universe))\n  vex(hs0)\n  el12(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c1), wss(c0, c1), wss(cv(hs0), c0))\n  idn1(wss(c0, c1))\n  el1(wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c0), wcel(cv(hs0), cpw(c0)))\n  idn1(wcel(cv(hs0), cpw(c0)))\n  elpwi(cv(hs0), c0)\n  ancoms(wss(c0, c1), wss(cv(hs0), c0), wss(cv(hs0), c1))\n  sstr(cv(hs0), c0, c1)\n  biimpri(wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))), wss(cpw(c0), cpw(c1)))\n  dfss2(hs0, cpw(c0), cpw(c1))\n  diff.hs0.w(wss(c0, c1))\n  diff.hs0.c(cpw(c0))\n  diff.hs0.c(cpw(c1))\n}","pretty":"thm sspwimpVD(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 → P(c0)⊆ P(c1))\n} = {\n  in1(c0 ⊆ c1, P(c0)⊆ P(c1))\n  el1(c0 ⊆ c1, P(c0)⊆ P(c1), ∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))))\n  gen11(hs0, c0 ⊆ c1, (hs0 ∈ P(c0)→ hs0 ∈ P(c1)))\n  int2(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ∈ P(c1))\n  un0.1((c0 ⊆ c1, hs0 ∈ P(c0)), hs0 ∈ P(c1), hs0 ∈ 𝕌, hs0 ⊆ c1)\n  elpwgdedVD(hs0, c1, wtru, (c0 ⊆ c1, hs0 ∈ P(c0)))\n  vd01(wtru, hs0 ∈ 𝕌)\n  vex(hs0)\n  el12(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ⊆ c1, c0 ⊆ c1, hs0 ⊆ c0)\n  idn1(c0 ⊆ c1)\n  el1(hs0 ∈ P(c0), hs0 ⊆ c0, hs0 ∈ P(c0))\n  idn1(hs0 ∈ P(c0))\n  elpwi(hs0, c0)\n  ancoms(c0 ⊆ c1, hs0 ⊆ c0, hs0 ⊆ c1)\n  sstr(hs0, c0, c1)\n  biimpri(∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))), P(c0)⊆ P(c1))\n  dfss2(hs0, P(c0), P(c1))\n  diff.hs0.w(c0 ⊆ c1)\n  diff.hs0.c(P(c0))\n  diff.hs0.c(P(c1))\n}","parent":["in1","el1","gen11","int2","un0.1","elpwgdedVD","vd01","vex","el12","idn1","elpwi","ancoms","sstr","biimpri","dfss2","diff.hs0.w","diff.hs0.c"],"children":[]},{"name":"sspwimpcf","content":"If a class is a subclass of another class, then its power class is a subclass of that other class's power class. Left-to-right implication of Exercise 18 of [TakeutiZaring] p. 18. ~ sspwimpcf , using conventional notation, was translated from its virtual deduction form, ~ sspwimpcfVD , using a translation program. (Contributed by Alan Sare, 13-Jun-2015.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sspwimpcf(class c0, class c1) {\n  |- wi(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n} = {\n  iin1(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n  syl(wss(c0, c1), wss(cpw(c0), cpw(c1)), wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))))\n  alrimiv(hs0, wss(c0, c1), wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1))))\n  ex(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))\n  eel021old(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)), wcel(cv(hs0), universe), wss(cv(hs0), c1))\n  vex(hs0)\n  syl2an(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c1), wss(c0, c1), wss(cv(hs0), c0))\n  id(wss(c0, c1))\n  syl(wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c0), wcel(cv(hs0), cpw(c0)))\n  id(wcel(cv(hs0), cpw(c0)))\n  elpwi(cv(hs0), c0)\n  impcom(wss(c0, c1), wss(cv(hs0), c0), wss(cv(hs0), c1))\n  sstr2(cv(hs0), c0, c1)\n  biimpar(wcel(cv(hs0), universe), wss(cv(hs0), c1), wcel(cv(hs0), cpw(c1)))\n  elpwg(cv(hs0), universe, c1)\n  biimpri(wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))), wss(cpw(c0), cpw(c1)))\n  dfss2(hs0, cpw(c0), cpw(c1))\n  diff.hs0.w(wss(c0, c1))\n  diff.hs0.c(cpw(c0))\n  diff.hs0.c(cpw(c1))\n}","pretty":"thm sspwimpcf(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 → P(c0)⊆ P(c1))\n} = {\n  iin1(c0 ⊆ c1, P(c0)⊆ P(c1))\n  syl(c0 ⊆ c1, P(c0)⊆ P(c1), ∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))))\n  alrimiv(hs0, c0 ⊆ c1, (hs0 ∈ P(c0)→ hs0 ∈ P(c1)))\n  ex(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ∈ P(c1))\n  eel021old(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ∈ P(c1), hs0 ∈ 𝕌, hs0 ⊆ c1)\n  vex(hs0)\n  syl2an(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ⊆ c1, c0 ⊆ c1, hs0 ⊆ c0)\n  id(c0 ⊆ c1)\n  syl(hs0 ∈ P(c0), hs0 ⊆ c0, hs0 ∈ P(c0))\n  id(hs0 ∈ P(c0))\n  elpwi(hs0, c0)\n  impcom(c0 ⊆ c1, hs0 ⊆ c0, hs0 ⊆ c1)\n  sstr2(hs0, c0, c1)\n  biimpar(hs0 ∈ 𝕌, hs0 ⊆ c1, hs0 ∈ P(c1))\n  elpwg(hs0, universe, c1)\n  biimpri(∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))), P(c0)⊆ P(c1))\n  dfss2(hs0, P(c0), P(c1))\n  diff.hs0.w(c0 ⊆ c1)\n  diff.hs0.c(P(c0))\n  diff.hs0.c(P(c1))\n}","parent":["iin1","syl","alrimiv","ex","eel021old","vex","syl2an","id","elpwi","impcom","sstr2","biimpar","elpwg","biimpri","dfss2","diff.hs0.w","diff.hs0.c"],"children":[]},{"name":"sspwimpcfVD","content":"The following User's Proof is a Virtual Deduction proof (see ~ wvd1 ) using conjunction-form virtual hypothesis collections. It was completed automatically by a tools program which would invokes Mel L. O'Cat's mmj2 and Norm Megill's Metamath Proof Assistant. ~ sspwimpcf is ~ sspwimpcfVD without virtual deductions and was derived from ~ sspwimpcfVD . The version of completeusersproof.cmd used is capable of only generating conjunction-form unification theorems, not unification deductions. (Contributed by Alan Sare, 13-Jun-2015.) (Proof modification is discouraged.) (New usage is discouraged.) <HTML> <TABLE> <TR> <TD> 1:: <TD> ` |- (. A C_ B ->. A C_ B ). ` <TR> <TD> 2:: <TD> ` |- (. ` ........... ` x e. ~P A ` ` ->. x e. ~P A ). ` <TR> <TD> 3:2: <TD> ` |- (. ` ........... ` x e. ~P A ` ` ->. x C_ A ). ` <TR> <TD> 4:3,1: <TD> ` |- (. (. A C_ B ,. x e. ~P A ). ->. x C_ B ). ` <TR> <TD> 5:: <TD> ` |- x e. _V ` <TR> <TD> 6:4,5: <TD> ` |- (. (. A C_ B ,. x e. ~P A ). ->. x e. ~P B ` ` ). ` <TR> <TD> 7:6: <TD> ` |- (. A C_ B ->. ( x e. ~P A -> x e. ~P B ) ` ` ). ` <TR> <TD> 8:7: <TD> ` |- (. A C_ B ->. A. x ( x e. ~P A -> x e. ` ` ~P B ) ). ` <TR> <TD> 9:8: <TD> ` |- (. A C_ B ->. ~P A C_ ~P B ). ` <TR> <TD> qed:9: <TD> ` |- ( A C_ B -> ~P A C_ ~P B ) ` </TABLE> </HTML>","origin":"thm sspwimpcfVD(class c0, class c1) {\n  |- wi(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n} = {\n  in1(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n  el1(wss(c0, c1), wss(cpw(c0), cpw(c1)), wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))))\n  gen11(hs0, wss(c0, c1), wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1))))\n  int2(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))\n  el021old(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)), wcel(cv(hs0), universe), wss(cv(hs0), c1))\n  vex(hs0)\n  el12(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c1), wss(c0, c1), wss(cv(hs0), c0))\n  idn1(wss(c0, c1))\n  el1(wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c0), wcel(cv(hs0), cpw(c0)))\n  idn1(wcel(cv(hs0), cpw(c0)))\n  elpwi(cv(hs0), c0)\n  impcom(wss(c0, c1), wss(cv(hs0), c0), wss(cv(hs0), c1))\n  sstr2(cv(hs0), c0, c1)\n  biimpar(wcel(cv(hs0), universe), wss(cv(hs0), c1), wcel(cv(hs0), cpw(c1)))\n  elpwg(cv(hs0), universe, c1)\n  biimpri(wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))), wss(cpw(c0), cpw(c1)))\n  dfss2(hs0, cpw(c0), cpw(c1))\n  diff.hs0.w(wss(c0, c1))\n  diff.hs0.c(cpw(c0))\n  diff.hs0.c(cpw(c1))\n}","pretty":"thm sspwimpcfVD(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 → P(c0)⊆ P(c1))\n} = {\n  in1(c0 ⊆ c1, P(c0)⊆ P(c1))\n  el1(c0 ⊆ c1, P(c0)⊆ P(c1), ∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))))\n  gen11(hs0, c0 ⊆ c1, (hs0 ∈ P(c0)→ hs0 ∈ P(c1)))\n  int2(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ∈ P(c1))\n  el021old(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ∈ P(c1), hs0 ∈ 𝕌, hs0 ⊆ c1)\n  vex(hs0)\n  el12(c0 ⊆ c1, hs0 ∈ P(c0), hs0 ⊆ c1, c0 ⊆ c1, hs0 ⊆ c0)\n  idn1(c0 ⊆ c1)\n  el1(hs0 ∈ P(c0), hs0 ⊆ c0, hs0 ∈ P(c0))\n  idn1(hs0 ∈ P(c0))\n  elpwi(hs0, c0)\n  impcom(c0 ⊆ c1, hs0 ⊆ c0, hs0 ⊆ c1)\n  sstr2(hs0, c0, c1)\n  biimpar(hs0 ∈ 𝕌, hs0 ⊆ c1, hs0 ∈ P(c1))\n  elpwg(hs0, universe, c1)\n  biimpri(∀(hs0,(hs0 ∈ P(c0)→ hs0 ∈ P(c1))), P(c0)⊆ P(c1))\n  dfss2(hs0, P(c0), P(c1))\n  diff.hs0.w(c0 ⊆ c1)\n  diff.hs0.c(P(c0))\n  diff.hs0.c(P(c1))\n}","parent":["in1","el1","gen11","int2","el021old","vex","el12","idn1","elpwi","impcom","sstr2","biimpar","elpwg","biimpri","dfss2","diff.hs0.w","diff.hs0.c"],"children":[]},{"name":"suctrALTcf","content":"The sucessor of a transitive class is transitive. ~ suctrALTcf , using conventional notation, was translated from virtual deduction form, ~ suctrALTcfVD , using a translation program. (Contributed by Alan Sare, 13-Jun-2015.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm suctrALTcf(class c0) {\n  |- wi(wtr(c0), wtr(csuc(c0)))\n} = {\n  iin1(wtr(c0), wtr(csuc(c0)))\n  syl(wtr(c0), wtr(csuc(c0)), wal(hs0, wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))))\n  alrimivv(hs0, hs1, wtr(c0), wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))\n  ex(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)))\n  eel2122old(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)), wi(wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wi(wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)))\n  3expia(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)))\n  eel0321old(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)), wss(c0, csuc(c0)), wcel(cv(hs0), c0))\n  syl3an(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), c0), wtr(c0), wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), c0))\n  id(wtr(c0))\n  id(wcel(cv(hs1), c0))\n  3impib(wtr(c0), wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), c0), wcel(cv(hs0), c0))\n  trel(c0, cv(hs0), cv(hs1))\n  ex(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0)))\n  eel021old(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0)), wss(c0, csuc(c0)), wcel(cv(hs0), c0))\n  sssucid(c0)\n  syl2an(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), c0), wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), cv(hs1)), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  simpl(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0)))\n  id(wceq(cv(hs1), c0))\n  biimpac(wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0), wcel(cv(hs0), c0))\n  eleq2(cv(hs1), c0, cv(hs0))\n  ssel2(c0, csuc(c0), cv(hs0))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)), wcel(cv(hs1), csuc(c0)))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), csuc(c0)), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  id(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  simpr(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0)))\n  elsuci(cv(hs1), c0)\n  3imp(wi(wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wi(wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)), wcel(cv(hs0), csuc(c0)))\n  jao(wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)), wceq(cv(hs1), c0))\n  biimpri(wal(hs0, wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))), wtr(csuc(c0)))\n  dftr2(hs0, hs1, csuc(c0))\n  diff.hs0.w(wtr(c0))\n  diff.hs1.w(wtr(c0))\n  diff.hs0.s(hs1)\n  diff.hs0.c(csuc(c0))\n  diff.hs1.c(csuc(c0))\n}","pretty":"thm suctrALTcf(class c0) {\n  ⊢ (Tr(c0)→ Tr(suc(c0)))\n} = {\n  iin1(Tr(c0), Tr(suc(c0)))\n  syl(Tr(c0), Tr(suc(c0)), ∀(hs0, ∀(hs1,((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0))→ hs0 ∈ suc(c0)))))\n  alrimivv(hs0, hs1, Tr(c0), ((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0))→ hs0 ∈ suc(c0)))\n  ex(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs0 ∈ suc(c0))\n  eel2122old(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs0 ∈ suc(c0), (hs1 ∈ c0 → hs0 ∈ suc(c0)), (hs1 = c0 → hs0 ∈ suc(c0)), (hs1 ∈ c0 ∨ hs1 = c0))\n  3expia(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ c0, hs0 ∈ suc(c0))\n  eel0321old(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ c0, hs0 ∈ suc(c0), c0 ⊆ suc(c0), hs0 ∈ c0)\n  syl3an(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ c0, hs0 ∈ c0, Tr(c0), hs0 ∈ hs1, hs1 ∈ c0)\n  id(Tr(c0))\n  id(hs1 ∈ c0)\n  3impib(Tr(c0), hs0 ∈ hs1, hs1 ∈ c0, hs0 ∈ c0)\n  trel(c0, hs0, hs1)\n  ex((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 = c0, hs0 ∈ suc(c0))\n  eel021old((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 = c0, hs0 ∈ suc(c0), c0 ⊆ suc(c0), hs0 ∈ c0)\n  sssucid(c0)\n  syl2an((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 = c0, hs0 ∈ c0, hs0 ∈ hs1, hs1 = c0)\n  syl((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs0 ∈ hs1, (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)))\n  simpl(hs0 ∈ hs1, hs1 ∈ suc(c0))\n  id(hs1 = c0)\n  biimpac(hs0 ∈ hs1, hs1 = c0, hs0 ∈ c0)\n  eleq2(hs1, c0, hs0)\n  ssel2(c0, suc(c0), hs0)\n  syl((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), (hs1 ∈ c0 ∨ hs1 = c0), hs1 ∈ suc(c0))\n  syl((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ suc(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)))\n  id((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)))\n  simpr(hs0 ∈ hs1, hs1 ∈ suc(c0))\n  elsuci(hs1, c0)\n  3imp((hs1 ∈ c0 → hs0 ∈ suc(c0)), (hs1 = c0 → hs0 ∈ suc(c0)), (hs1 ∈ c0 ∨ hs1 = c0), hs0 ∈ suc(c0))\n  jao(hs1 ∈ c0, hs0 ∈ suc(c0), hs1 = c0)\n  biimpri(∀(hs0, ∀(hs1,((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0))→ hs0 ∈ suc(c0)))), Tr(suc(c0)))\n  dftr2(hs0, hs1, suc(c0))\n  diff.hs0.w(Tr(c0))\n  diff.hs1.w(Tr(c0))\n  diff.hs0.s(hs1)\n  diff.hs0.c(suc(c0))\n  diff.hs1.c(suc(c0))\n}","parent":["iin1","syl","alrimivv","ex","eel2122old","3expia","eel0321old","syl3an","id","3impib","trel","eel021old","sssucid","syl2an","simpl","biimpac","eleq2","ssel2","simpr","elsuci","3imp","jao","biimpri","dftr2","diff.hs0.w","diff.hs1.w","diff.hs0.s","diff.hs0.c","diff.hs1.c"],"children":[]},{"name":"suctrALTcfVD","content":"The following User's Proof is a Virtual Deduction proof (see ~ wvd1 ) using conjunction-form virtual hypothesis collections. The conjunction-form version of completeusersproof.cmd. It allows the User to avoid superflous virtual hypotheses. This proof was completed automatically by a tools program which invokes Mel L. O'Cat's mmj2 and Norm Megill's Metamath Proof Assistant. ~ suctrALTcf is ~ suctrALTcfVD without virtual deductions and was derived automatically from ~ suctrALTcfVD . The version of completeusersproof.cmd used is capable of only generating conjunction-form unification theorems, not unification deductions. (Contributed by Alan Sare, 13-Jun-2015.) (Proof modification is discouraged.) (New usage is discouraged.) <HTML> <TABLE> <TR> <TD> 1:: <TD> ` |- (. Tr A ->. Tr A ). ` <TR> <TD> 2:: <TD> ` |- (. ` ......... ` ( z e. y /\\ y e. ` ` suc A ) ->. ( z e. y /\\ y e. suc A ) ). ` <TR> <TD> 3:2: <TD> ` |- (. ` ......... ` ( z e. y /\\ y e. ` ` suc A ) ->. z e. y ). ` <TR> <TD> 4:: <TD> ` |- (. ` ................................... ....... ` y e. A ->. y e. A ). ` <TR> <TD> 5:1,3,4: <TD> ` |- (. (. Tr A ,. ( z e. y /\\ y e. suc A ) ` ` , y e. A ). ->. z e. A ). ` <TR> <TD> 6:: <TD> ` |- A C_ suc A ` <TR> <TD> 7:5,6: <TD> ` |- (. (. Tr A ,. ( z e. y /\\ y e. suc A ) ` ` , y e. A ). ->. z e. suc A ). ` <TR> <TD> 8:7: <TD> ` |- (. (. Tr A ,. ( z e. y /\\ y e. suc A ) ` ` ). ->. ( y e. A -> z e. suc A ) ). ` <TR> <TD> 9:: <TD> ` |- (. ` ................................... ...... ` y = A ->. y = A ). ` <TR> <TD> 10:3,9: <TD> ` |- (. ` ........ ` (. ( z e. y /\\ y e. ` ` suc A ) , y = A ). ->. z e. A ). ` <TR> <TD> 11:10,6: <TD> ` |- (. ` ........ ` (. ( z e. y /\\ y e. ` ` suc A ) , y = A ). ->. z e. suc A ). ` <TR> <TD> 12:11: <TD> ` |- (. ` .......... ` ( z e. y /\\ y e. ` ` suc A ) ->. ( y = A -> z e. suc A ) ). ` <TR> <TD> 13:2: <TD> ` |- (. ` .......... ` ( z e. y /\\ y e. ` ` suc A ) ->. y e. suc A ). ` <TR> <TD> 14:13: <TD> ` |- (. ` .......... ` ( z e. y /\\ y e. ` ` suc A ) ->. ( y e. A \\/ y = A ) ). ` <TR> <TD> 15:8,12,14: <TD> ` |- (. (. Tr A ,. ( z e. y /\\ y e. suc A ) ` ` ). ->. z e. suc A ). ` <TR> <TD> 16:15: <TD> ` |- ` ` (. Tr A ->. ( ( z e. y /\\ y e. ` ` suc A ) -> z e. suc A ) ). ` <TR> <TD> 17:16: <TD> ` |- ` ` (. Tr A ->. A. z A. y ( ( z e. ` ` y /\\ y e. suc A ) -> z e. suc A ) ). ` <TR> <TD> 18:17: <TD> ` |- ` ` (. Tr A ->. Tr suc A ). ` <TR> <TD> qed:18: <TD> ` |- ( Tr A -> Tr suc A ) ` </TABLE> </HTML>","origin":"thm suctrALTcfVD(class c0) {\n  |- wi(wtr(c0), wtr(csuc(c0)))\n} = {\n  in1(wtr(c0), wtr(csuc(c0)))\n  el1(wtr(c0), wtr(csuc(c0)), wal(hs0, wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))))\n  gen12(hs0, hs1, wtr(c0), wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))\n  int2(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)))\n  el2122old(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)), wi(wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wi(wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)))\n  int3(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)))\n  el0321old(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)), wss(c0, csuc(c0)), wcel(cv(hs0), c0))\n  el123(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), c0), wtr(c0), wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), c0))\n  idn1(wtr(c0))\n  idn1(wcel(cv(hs1), c0))\n  3impib(wtr(c0), wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), c0), wcel(cv(hs0), c0))\n  trel(c0, cv(hs0), cv(hs1))\n  int2(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0)))\n  el021old(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0)), wss(c0, csuc(c0)), wcel(cv(hs0), c0))\n  sssucid(c0)\n  el12(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), c0), wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0))\n  el1(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), cv(hs1)), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  simpl(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0)))\n  idn1(wceq(cv(hs1), c0))\n  biimpac(wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0), wcel(cv(hs0), c0))\n  eleq2(cv(hs1), c0, cv(hs0))\n  ssel2(c0, csuc(c0), cv(hs0))\n  el1(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)), wcel(cv(hs1), csuc(c0)))\n  el1(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), csuc(c0)), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  idn1(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  simpr(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0)))\n  elsuci(cv(hs1), c0)\n  3imp(wi(wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wi(wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)), wcel(cv(hs0), csuc(c0)))\n  jao(wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)), wceq(cv(hs1), c0))\n  biimpri(wal(hs0, wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))), wtr(csuc(c0)))\n  dftr2(hs0, hs1, csuc(c0))\n  diff.hs0.w(wtr(c0))\n  diff.hs1.w(wtr(c0))\n  diff.hs0.s(hs1)\n  diff.hs0.c(csuc(c0))\n  diff.hs1.c(csuc(c0))\n}","pretty":"thm suctrALTcfVD(class c0) {\n  ⊢ (Tr(c0)→ Tr(suc(c0)))\n} = {\n  in1(Tr(c0), Tr(suc(c0)))\n  el1(Tr(c0), Tr(suc(c0)), ∀(hs0, ∀(hs1,((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0))→ hs0 ∈ suc(c0)))))\n  gen12(hs0, hs1, Tr(c0), ((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0))→ hs0 ∈ suc(c0)))\n  int2(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs0 ∈ suc(c0))\n  el2122old(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs0 ∈ suc(c0), (hs1 ∈ c0 → hs0 ∈ suc(c0)), (hs1 = c0 → hs0 ∈ suc(c0)), (hs1 ∈ c0 ∨ hs1 = c0))\n  int3(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ c0, hs0 ∈ suc(c0))\n  el0321old(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ c0, hs0 ∈ suc(c0), c0 ⊆ suc(c0), hs0 ∈ c0)\n  el123(Tr(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ c0, hs0 ∈ c0, Tr(c0), hs0 ∈ hs1, hs1 ∈ c0)\n  idn1(Tr(c0))\n  idn1(hs1 ∈ c0)\n  3impib(Tr(c0), hs0 ∈ hs1, hs1 ∈ c0, hs0 ∈ c0)\n  trel(c0, hs0, hs1)\n  int2((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 = c0, hs0 ∈ suc(c0))\n  el021old((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 = c0, hs0 ∈ suc(c0), c0 ⊆ suc(c0), hs0 ∈ c0)\n  sssucid(c0)\n  el12((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 = c0, hs0 ∈ c0, hs0 ∈ hs1, hs1 = c0)\n  el1((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs0 ∈ hs1, (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)))\n  simpl(hs0 ∈ hs1, hs1 ∈ suc(c0))\n  idn1(hs1 = c0)\n  biimpac(hs0 ∈ hs1, hs1 = c0, hs0 ∈ c0)\n  eleq2(hs1, c0, hs0)\n  ssel2(c0, suc(c0), hs0)\n  el1((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), (hs1 ∈ c0 ∨ hs1 = c0), hs1 ∈ suc(c0))\n  el1((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)), hs1 ∈ suc(c0), (hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)))\n  idn1((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0)))\n  simpr(hs0 ∈ hs1, hs1 ∈ suc(c0))\n  elsuci(hs1, c0)\n  3imp((hs1 ∈ c0 → hs0 ∈ suc(c0)), (hs1 = c0 → hs0 ∈ suc(c0)), (hs1 ∈ c0 ∨ hs1 = c0), hs0 ∈ suc(c0))\n  jao(hs1 ∈ c0, hs0 ∈ suc(c0), hs1 = c0)\n  biimpri(∀(hs0, ∀(hs1,((hs0 ∈ hs1 ∧ hs1 ∈ suc(c0))→ hs0 ∈ suc(c0)))), Tr(suc(c0)))\n  dftr2(hs0, hs1, suc(c0))\n  diff.hs0.w(Tr(c0))\n  diff.hs1.w(Tr(c0))\n  diff.hs0.s(hs1)\n  diff.hs0.c(suc(c0))\n  diff.hs1.c(suc(c0))\n}","parent":["in1","el1","gen12","int2","el2122old","int3","el0321old","el123","idn1","3impib","trel","el021old","sssucid","el12","simpl","biimpac","eleq2","ssel2","simpr","elsuci","3imp","jao","biimpri","dftr2","diff.hs0.w","diff.hs1.w","diff.hs0.s","diff.hs0.c","diff.hs1.c"],"children":[]}]}