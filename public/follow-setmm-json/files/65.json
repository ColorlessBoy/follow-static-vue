{"index":65,"title":"Axiom scheme ax-13 (Quantified Equality)","content":"","blocks":[{"name":"ax-13","content":"Axiom of Quantified Equality. One of the equality and substitution axioms of predicate calculus with equality. An equivalent way to express this axiom that may be easier to understand is ` ( -. x = y -> ( -. x = z -> ( y = z -> A. x y = z ) ) ) ` (see ~ ax13b ). Recall that in the intended interpretation, our variables are metavariables ranging over the variables of predicate calculus (the object language). In order for the first antecedent ` -. x = y ` to hold, ` x ` and ` y ` must have different values and thus cannot be the same object-language variable (so they are effectively \"distinct variables\" even though no $d is present). Similarly, ` x ` and ` z ` cannot be the same object-language variable. Therefore, ` x ` will not occur in the wff ` y = z ` when the first two antecedents hold, so analogous to ~ ax-5 , the conclusion ` ( y = z -> A. x y = z ) ` follows. Note that ~ ax-5 cannot prove this because its distinct variable ($d) requirement is not satisfied directly but only indirectly (outside of Metamath) by the argument above. The original version of this axiom was ~ ax-c9 and was replaced with this shorter ~ ax-13 in December 2015. The old axiom is proved from this one as theorem ~ axc9 . The primary purpose of this axiom is to provide a way to introduce the quantifier ` A. x ` on ` y = z ` even when ` x ` and ` y ` are substituted with the same variable. In this case, the first antecedent becomes ` -. x = x ` and the axiom still holds. Although this version is shorter, the original version ~ axc9 may be more practical to work with because of the \"distinctor\" form of its antecedents. A typical application of ~ axc9 is in ~ dvelimh which converts a distinct variable pair to the distinctor antecedent ` -. A. x x = y ` . In particular, it is conjectured that it is not possible to prove ~ ax6 from ~ ax6v without this axiom. This axiom can be weakened if desired by adding distinct variable restrictions on pairs ` x , z ` and ` y , z ` . To show that, we add these restrictions to theorem ~ ax13v and use only ~ ax13v for further derivations. Thus, ~ ax13v should be the only theorem referencing this axiom. Other theorems can reference either ~ ax13v (preferred) or ~ ax13 (if the stronger form is needed). This axiom scheme is logically redundant (see ~ ax13w ) but is used as an auxiliary axiom scheme to achieve scheme completeness (i.e. so that all possible cases of bundling can be proved; see text linked at ~ mmtheorems.html#ax6dgen ). It is not known whether this axiom can be derived from the others. (Contributed by NM, 21-Dec-2015.) (New usage is discouraged.)","origin":"axiom ax-13(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n}","pretty":"axiom ax-13(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2)))\n}","parent":[],"children":["ax13v"]},{"name":"ax13v","content":"A weaker version of ~ ax-13 with distinct variable restrictions on pairs ` x , z ` and ` y , z ` . In order to show (with ~ ax13 ) that this weakening is still adequate, this should be the only theorem referencing ~ ax-13 directly. Had we additionally required ` x ` and ` y ` be distinct, too, this theorem would have been a direct consequence of ~ ax-5 . So essentially this theorem states, that a distinct variable condition can be replaced with an inequality between set variables. (Contributed by NM, 30-Jun-2016.)","origin":"thm ax13v(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  a1ii(wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))))), diffss(s0, s2))\n  a1ii(wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))))), diffss(s1, s2))\n  ax-13(s0, s1, s2)\n}","pretty":"thm ax13v(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2)))\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  a1ii((¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2))), d(s0, s2))\n  a1ii((¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2))), d(s1, s2))\n  ax-13(s0, s1, s2)\n}","parent":["a1ii","ax-13"],"children":["ax13lem1","wl-spae"]},{"name":"ax13lem1","content":"A version of ~ ax13v with one distinct variable restriction dropped. For convenience, ` y ` is kept on the right side of equations. The proof of ~ ax13 bases on ideas from NM, 24-Dec-2015. (Contributed by Wolf Lammen, 8-Sep-2018.) (New usage is discouraged.)","origin":"thm ax13lem1(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s2), cv(s1)), wal(s0, wceq(cv(s2), cv(s1)))))\n  -| diffss(s0, s2)\n} = {\n  syl5(wn(wceq(cv(s0), cv(s1))), wceq(cv(s2), cv(s1)), wal(s0, wceq(cv(s2), cv(s1))), wex(hs0, wa(wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)))))\n  equvinva(s2, s1, hs0)\n  exlimdv(hs0, wn(wceq(cv(s0), cv(s1))), wa(wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0))), wal(s0, wceq(cv(s2), cv(s1))))\n  impd(wn(wceq(cv(s0), cv(s1))), wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)), wal(s0, wceq(cv(s2), cv(s1))))\n  syl9(wn(wceq(cv(s0), cv(s1))), wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)), wal(s0, wceq(cv(s2), cv(s1))), wal(s0, wceq(cv(s1), cv(hs0))))\n  ax13v(s0, s1, hs0)\n  alimdv(s0, wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(s1)))\n  equeucl(s2, hs0, s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wn(wceq(cv(s0), cv(s1))))\n  diff.hs0.w(wal(s0, wceq(cv(s2), cv(s1))))\n  diff.wceq.s(s0, cv(s2), cv(hs0))\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm ax13lem1(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ s0 = s1 →(s2 = s1 → ∀(s0, s2 = s1)))\n  ⊣ d(s0, s2)\n} = {\n  syl5(¬ s0 = s1, s2 = s1, ∀(s0, s2 = s1), ∃(hs0,(s2 = hs0 ∧ s1 = hs0)))\n  equvinva(s2, s1, hs0)\n  exlimdv(hs0, ¬ s0 = s1, (s2 = hs0 ∧ s1 = hs0), ∀(s0, s2 = s1))\n  impd(¬ s0 = s1, s2 = hs0, s1 = hs0, ∀(s0, s2 = s1))\n  syl9(¬ s0 = s1, s2 = hs0, s1 = hs0, ∀(s0, s2 = s1), ∀(s0, s1 = hs0))\n  ax13v(s0, s1, hs0)\n  alimdv(s0, s2 = hs0, s1 = hs0, s2 = s1)\n  equeucl(s2, hs0, s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(¬ s0 = s1)\n  diff.hs0.w(∀(s0, s2 = s1))\n  diff.wceq.s(s0, s2, hs0)\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["syl5","equvinva","exlimdv","impd","syl9","ax13v","alimdv","equeucl","diffss.ex","diff.hs0.s","diff.hs0.w","diff.wceq.s","diff.cv.s"],"children":["ax13","ax13lem2","nfeqf2","nfeqf2OLD","ax6e","wl-19.8eqv","wl-19.2reqv"]},{"name":"ax13","content":"Derive ~ ax-13 from ~ ax13v and Tarski's FOL. This shows that the weakening in ~ ax13v is still sufficient for a complete system. (Contributed by NM, 21-Dec-2015.) (Proof shortened by Wolf Lammen, 31-Jan-2018.) Reduce axiom usage (Revised by Wolf Lammen, 2-Jun-2021.)","origin":"thm ax13(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n} = {\n  mpbir(wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))))), wi(wn(wceq(cv(s0), cv(s1))), wi(wn(wceq(cv(s0), cv(s2))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))))\n  ex(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n  syl5bi(wa(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2)))), wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))), wex(hs0, wa(wceq(cv(hs0), cv(s1)), wceq(cv(hs0), cv(s2)))))\n  equvinv(s1, s2, hs0)\n  exlimdv(hs0, wa(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2)))), wa(wceq(cv(hs0), cv(s1)), wceq(cv(hs0), cv(s2))), wal(s0, wceq(cv(s1), cv(s2))))\n  ex(wa(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2)))), wa(wceq(cv(hs0), cv(s1)), wceq(cv(hs0), cv(s2))), wal(s0, wceq(cv(s1), cv(s2))))\n  an4s(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2))), wceq(cv(hs0), cv(s1)), wceq(cv(hs0), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))))\n  syl2an(wa(wn(wceq(cv(s0), cv(s1))), wceq(cv(hs0), cv(s1))), wa(wn(wceq(cv(s0), cv(s2))), wceq(cv(hs0), cv(s2))), wal(s0, wceq(cv(s1), cv(s2))), wal(s0, wceq(cv(hs0), cv(s1))), wal(s0, wceq(cv(hs0), cv(s2))))\n  imp(wn(wceq(cv(s0), cv(s1))), wceq(cv(hs0), cv(s1)), wal(s0, wceq(cv(hs0), cv(s1))))\n  ax13lem1(s0, s1, hs0)\n  imp(wn(wceq(cv(s0), cv(s2))), wceq(cv(hs0), cv(s2)), wal(s0, wceq(cv(hs0), cv(s2))))\n  ax13lem1(s0, s2, hs0)\n  alanimi(s0, wceq(cv(hs0), cv(s1)), wceq(cv(hs0), cv(s2)), wceq(cv(s1), cv(s2)))\n  imp(wceq(cv(hs0), cv(s1)), wceq(cv(hs0), cv(s2)), wceq(cv(s1), cv(s2)))\n  ax7v1(hs0, s1, s2)\n  ax13b(s0, s1, s2, wal(s0, wceq(cv(s1), cv(s2))))\n  diffss.ex(s1, hs0)\n  diffss.ex(s2, hs0)\n  diff.hs0.w(wa(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2)))))\n  diff.hs0.w(wal(s0, wceq(cv(s1), cv(s2))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.s(s2)\n}","pretty":"thm ax13(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2)))\n} = {\n  mpbir((¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2))), (¬ s0 = s1 →(¬ s0 = s2 →(s1 = s2 → ∀(s0, s1 = s2)))))\n  ex(¬ s0 = s1, ¬ s0 = s2, (s1 = s2 → ∀(s0, s1 = s2)))\n  syl5bi((¬ s0 = s1 ∧ ¬ s0 = s2), s1 = s2, ∀(s0, s1 = s2), ∃(hs0,(hs0 = s1 ∧ hs0 = s2)))\n  equvinv(s1, s2, hs0)\n  exlimdv(hs0, (¬ s0 = s1 ∧ ¬ s0 = s2), (hs0 = s1 ∧ hs0 = s2), ∀(s0, s1 = s2))\n  ex((¬ s0 = s1 ∧ ¬ s0 = s2), (hs0 = s1 ∧ hs0 = s2), ∀(s0, s1 = s2))\n  an4s(¬ s0 = s1, ¬ s0 = s2, hs0 = s1, hs0 = s2, ∀(s0, s1 = s2))\n  syl2an((¬ s0 = s1 ∧ hs0 = s1), (¬ s0 = s2 ∧ hs0 = s2), ∀(s0, s1 = s2), ∀(s0, hs0 = s1), ∀(s0, hs0 = s2))\n  imp(¬ s0 = s1, hs0 = s1, ∀(s0, hs0 = s1))\n  ax13lem1(s0, s1, hs0)\n  imp(¬ s0 = s2, hs0 = s2, ∀(s0, hs0 = s2))\n  ax13lem1(s0, s2, hs0)\n  alanimi(s0, hs0 = s1, hs0 = s2, s1 = s2)\n  imp(hs0 = s1, hs0 = s2, s1 = s2)\n  ax7v1(hs0, s1, s2)\n  ax13b(s0, s1, s2, ∀(s0, s1 = s2))\n  diffss.ex(s1, hs0)\n  diffss.ex(s2, hs0)\n  diff.hs0.w((¬ s0 = s1 ∧ ¬ s0 = s2))\n  diff.hs0.w(∀(s0, s1 = s2))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.s(s2)\n}","parent":["mpbir","ex","syl5bi","equvinv","exlimdv","an4s","syl2an","imp","ax13lem1","alanimi","ax7v1","ax13b","diffss.ex","diff.hs0.w","diff.hs0.s"],"children":["equvini","sbequiOLD","sbequiALT"]},{"name":"ax13lem2","content":"Lemma for ~ nfeqf2 . This lemma is equivalent to ~ ax13v with one distinct variable constraint removed. (Contributed by Wolf Lammen, 8-Sep-2018.) Reduce axiom usage. (Revised by Wolf Lammen, 18-Oct-2020.) (New usage is discouraged.)","origin":"thm ax13lem2(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wceq(cv(s0), cv(s1))), wi(wex(s0, wceq(cv(s2), cv(s1))), wceq(cv(s2), cv(s1))))\n  -| diffss(s0, s2)\n} = {\n  syl6ib(wn(wceq(cv(s0), cv(s1))), wex(s0, wceq(cv(s2), cv(s1))), wceq(cv(s2), cv(s1)), wal(hs0, wi(wceq(cv(hs0), cv(s1)), wceq(cv(s2), cv(hs0)))))\n  alrimdv(hs0, wn(wceq(cv(s0), cv(s1))), wex(s0, wceq(cv(s2), cv(s1))), wi(wceq(cv(hs0), cv(s1)), wceq(cv(s2), cv(hs0))))\n  syl9(wn(wceq(cv(s0), cv(s1))), wex(s0, wceq(cv(s2), cv(s1))), wceq(cv(hs0), cv(s1)), wceq(cv(s2), cv(hs0)), wal(s0, wceq(cv(hs0), cv(s1))))\n  ax13lem1(s0, s1, hs0)\n  sylib(wex(s0, wceq(cv(s2), cv(s1))), wi(wal(s0, wceq(cv(hs0), cv(s1))), wceq(cv(s2), cv(hs0))), wex(s0, wi(wceq(cv(hs0), cv(s1)), wceq(cv(s2), cv(hs0)))))\n  eximi(s0, wceq(cv(s2), cv(s1)), wi(wceq(cv(hs0), cv(s1)), wceq(cv(s2), cv(hs0))))\n  equeucl(s2, s1, hs0)\n  19.36v(s0, wceq(cv(hs0), cv(s1)), wceq(cv(s2), cv(hs0)))\n  equsalvw(hs0, s1, wceq(cv(s2), cv(hs0)), wceq(cv(s2), cv(s1)))\n  equequ2(hs0, s1, s2)\n  diff.hs0.w(wn(wceq(cv(s0), cv(s1))))\n  diff.hs0.w(wex(s0, wceq(cv(s2), cv(s1))))\n  diff.wceq.s(s0, cv(s2), cv(hs0))\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wceq(cv(s2), cv(s1)))\n}","pretty":"thm ax13lem2(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ s0 = s1 →(∃(s0, s2 = s1)→ s2 = s1))\n  ⊣ d(s0, s2)\n} = {\n  syl6ib(¬ s0 = s1, ∃(s0, s2 = s1), s2 = s1, ∀(hs0,(hs0 = s1 → s2 = hs0)))\n  alrimdv(hs0, ¬ s0 = s1, ∃(s0, s2 = s1), (hs0 = s1 → s2 = hs0))\n  syl9(¬ s0 = s1, ∃(s0, s2 = s1), hs0 = s1, s2 = hs0, ∀(s0, hs0 = s1))\n  ax13lem1(s0, s1, hs0)\n  sylib(∃(s0, s2 = s1), (∀(s0, hs0 = s1)→ s2 = hs0), ∃(s0,(hs0 = s1 → s2 = hs0)))\n  eximi(s0, s2 = s1, (hs0 = s1 → s2 = hs0))\n  equeucl(s2, s1, hs0)\n  19.36v(s0, hs0 = s1, s2 = hs0)\n  equsalvw(hs0, s1, s2 = hs0, s2 = s1)\n  equequ2(hs0, s1, s2)\n  diff.hs0.w(¬ s0 = s1)\n  diff.hs0.w(∃(s0, s2 = s1))\n  diff.wceq.s(s0, s2, hs0)\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.w(s2 = s1)\n}","parent":["syl6ib","alrimdv","syl9","ax13lem1","sylib","eximi","equeucl","19.36v","equsalvw","equequ2","diff.hs0.w","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs0.s"],"children":["nfeqf2","nfeqf2OLD","wl-speqv","wl-19.2reqv"]},{"name":"nfeqf2","content":"An equation between setvar is free of any other setvar. (Contributed by Wolf Lammen, 9-Jun-2019.) Remove dependency on ~ ax-12 . (Revised by Wolf Lammen, 16-Dec-2022.)","origin":"thm nfeqf2(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s2), cv(s1))))\n  -| diffss(s0, s2)\n} = {\n  sylbir(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s2), cv(s1))), wex(s0, wn(wceq(cv(s0), cv(s1)))))\n  exnal(s0, wceq(cv(s0), cv(s1)))\n  nfd(s0, wex(s0, wn(wceq(cv(s0), cv(s1)))), wceq(cv(s2), cv(s1)))\n  syl6com(wex(s0, wn(wceq(cv(s0), cv(s1)))), wex(s0, wceq(cv(s2), cv(s1))), wal(s0, wceq(cv(s2), cv(s1))), wex(s0, wal(s0, wceq(cv(s2), cv(s1)))))\n  eximdh(s0, wex(s0, wceq(cv(s2), cv(s1))), wn(wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s2), cv(s1))))\n  hbe1(s0, wceq(cv(s2), cv(s1)))\n  syldc(wex(s0, wceq(cv(s2), cv(s1))), wn(wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s2), cv(s1))), wceq(cv(s2), cv(s1)))\n  ax13lem2(s0, s1, s2)\n  ax13lem1(s0, s1, s2)\n  hbe1a(s0, wceq(cv(s2), cv(s1)))\n}","pretty":"thm nfeqf2(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0, s2 = s1))\n  ⊣ d(s0, s2)\n} = {\n  sylbir(¬ ∀(s0, s0 = s1), F/(s0, s2 = s1), ∃(s0, ¬ s0 = s1))\n  exnal(s0, s0 = s1)\n  nfd(s0, ∃(s0, ¬ s0 = s1), s2 = s1)\n  syl6com(∃(s0, ¬ s0 = s1), ∃(s0, s2 = s1), ∀(s0, s2 = s1), ∃(s0, ∀(s0, s2 = s1)))\n  eximdh(s0, ∃(s0, s2 = s1), ¬ s0 = s1, ∀(s0, s2 = s1))\n  hbe1(s0, s2 = s1)\n  syldc(∃(s0, s2 = s1), ¬ s0 = s1, ∀(s0, s2 = s1), s2 = s1)\n  ax13lem2(s0, s1, s2)\n  ax13lem1(s0, s1, s2)\n  hbe1a(s0, s2 = s1)\n}","parent":["sylbir","exnal","nfd","syl6com","eximdh","hbe1","syldc","ax13lem2","ax13lem1","hbe1a"],"children":["dveeq2","nfeqf1","sb4b","sbal1","copsexg","axrepndlem1","axpowndlem2","axpowndlem3","bj-dvelimdv","bj-dvelimdv1","wl-equsb3","wl-sbcom2d-lem1","wl-mo2df","wl-eudf","wl-euequf"]},{"name":"nfeqf2OLD","content":"Obsolete version of ~ nfeqf2 as of 16-Dec-2022. (Contributed by Wolf Lammen, 9-Jun-2019.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm nfeqf2OLD(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s2), cv(s1))))\n  -| diffss(s0, s2)\n} = {\n  sylbir(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s2), cv(s1))), wex(s0, wn(wceq(cv(s0), cv(s1)))))\n  exnal(s0, wceq(cv(s0), cv(s1)))\n  nfd(s0, wex(s0, wn(wceq(cv(s0), cv(s1)))), wceq(cv(s2), cv(s1)))\n  syl56(wex(s0, wn(wceq(cv(s0), cv(s1)))), wex(s0, wceq(cv(s2), cv(s1))), wal(s0, wceq(cv(s2), cv(s1))), wal(s0, wex(s0, wceq(cv(s2), cv(s1)))), wex(s0, wal(s0, wceq(cv(s2), cv(s1)))))\n  hbe1(s0, wceq(cv(s2), cv(s1)))\n  com12(wex(s0, wn(wceq(cv(s0), cv(s1)))), wal(s0, wex(s0, wceq(cv(s2), cv(s1)))), wex(s0, wal(s0, wceq(cv(s2), cv(s1)))))\n  aleximi(s0, wex(s0, wceq(cv(s2), cv(s1))), wn(wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s2), cv(s1))))\n  syldc(wex(s0, wceq(cv(s2), cv(s1))), wn(wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s2), cv(s1))), wceq(cv(s2), cv(s1)))\n  ax13lem2(s0, s1, s2)\n  ax13lem1(s0, s1, s2)\n  hbe1a(s0, wceq(cv(s2), cv(s1)))\n}","pretty":"thm nfeqf2OLD(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0, s2 = s1))\n  ⊣ d(s0, s2)\n} = {\n  sylbir(¬ ∀(s0, s0 = s1), F/(s0, s2 = s1), ∃(s0, ¬ s0 = s1))\n  exnal(s0, s0 = s1)\n  nfd(s0, ∃(s0, ¬ s0 = s1), s2 = s1)\n  syl56(∃(s0, ¬ s0 = s1), ∃(s0, s2 = s1), ∀(s0, s2 = s1), ∀(s0, ∃(s0, s2 = s1)), ∃(s0, ∀(s0, s2 = s1)))\n  hbe1(s0, s2 = s1)\n  com12(∃(s0, ¬ s0 = s1), ∀(s0, ∃(s0, s2 = s1)), ∃(s0, ∀(s0, s2 = s1)))\n  aleximi(s0, ∃(s0, s2 = s1), ¬ s0 = s1, ∀(s0, s2 = s1))\n  syldc(∃(s0, s2 = s1), ¬ s0 = s1, ∀(s0, s2 = s1), s2 = s1)\n  ax13lem2(s0, s1, s2)\n  ax13lem1(s0, s1, s2)\n  hbe1a(s0, s2 = s1)\n}","parent":["sylbir","exnal","nfd","syl56","hbe1","com12","aleximi","syldc","ax13lem2","ax13lem1","hbe1a"],"children":[]},{"name":"dveeq2","content":"Quantifier introduction when one pair of variables is distinct. (Contributed by NM, 2-Jan-2002.) (Revised by NM, 20-Jul-2015.) Remove dependency on ~ ax-11 . (Revised by Wolf Lammen, 8-Sep-2018.)","origin":"thm dveeq2(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s2), cv(s1)), wal(s0, wceq(cv(s2), cv(s1)))))\n  -| diffss(s0, s2)\n} = {\n  nf5rd(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s2), cv(s1)))\n  nfeqf2(s0, s1, s2)\n}","pretty":"thm dveeq2(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s2 = s1 → ∀(s0, s2 = s1)))\n  ⊣ d(s0, s2)\n} = {\n  nf5rd(s0, ¬ ∀(s0, s0 = s1), s2 = s1)\n  nfeqf2(s0, s1, s2)\n}","parent":["nf5rd","nfeqf2"],"children":["axc15","axc15OLD"]},{"name":"nfeqf1","content":"An equation between setvar is free of any other setvar. (Contributed by Wolf Lammen, 10-Jun-2019.)","origin":"thm nfeqf1(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s1), cv(s2))))\n  -| diffss(s0, s2)\n} = {\n  sylib(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s1), cv(s2))), wnf(s0, wceq(cv(s2), cv(s1))))\n  nfeqf2(s0, s1, s2)\n  nfbii(s0, wceq(cv(s2), cv(s1)), wceq(cv(s1), cv(s2)))\n  equcom(s2, s1)\n}","pretty":"thm nfeqf1(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0, s1 = s2))\n  ⊣ d(s0, s2)\n} = {\n  sylib(¬ ∀(s0, s0 = s1), F/(s0, s1 = s2), F/(s0, s2 = s1))\n  nfeqf2(s0, s1, s2)\n  nfbii(s0, s2 = s1, s1 = s2)\n  equcom(s2, s1)\n}","parent":["sylib","nfeqf2","nfbii","equcom"],"children":["dveeq1","sbal2","sbal2OLD","nfmod2","nfeud2OLD","nfiotad","wl-mo2df","wl-eudf"]},{"name":"dveeq1","content":"Quantifier introduction when one pair of variables is distinct. (Contributed by NM, 2-Jan-2002.) Remove dependency on ~ ax-11 . (Revised by Wolf Lammen, 8-Sep-2018.)","origin":"thm dveeq1(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n  -| diffss(s0, s2)\n} = {\n  nf5rd(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s1), cv(s2)))\n  nfeqf1(s0, s1, s2)\n}","pretty":"thm dveeq1(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s1 = s2 → ∀(s0, s1 = s2)))\n  ⊣ d(s0, s2)\n} = {\n  nf5rd(s0, ¬ ∀(s0, s0 = s1), s1 = s2)\n  nfeqf1(s0, s1, s2)\n}","parent":["nf5rd","nfeqf1"],"children":["nfeqf","axc11n"]},{"name":"nfeqf","content":"A variable is effectively not free in an equality if it is not either of the involved variables. ` F/ ` version of ~ ax-c9 . (Contributed by Mario Carneiro, 6-Oct-2016.) Remove dependency on ~ ax-11 . (Revised by Wolf Lammen, 6-Sep-2018.)","origin":"thm nfeqf(setvar s0, setvar s1, setvar s2) {\n  |- wi(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wnf(s0, wceq(cv(s1), cv(s2))))\n} = {\n  nf5d(s0, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s1), cv(s2)))\n  nfan(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))))\n  nfna1(s0, wceq(cv(s0), cv(s1)))\n  nfna1(s0, wceq(cv(s0), cv(s2)))\n  syl5(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))), wex(hs0, wa(wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(hs0)))))\n  equvinva(s1, s2, hs0)\n  exlimdv(hs0, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wa(wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(hs0))), wal(s0, wceq(cv(s1), cv(s2))))\n  ex(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wa(wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(hs0))), wal(s0, wceq(cv(s1), cv(s2))))\n  an4s(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))), wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(hs0)), wal(s0, wceq(cv(s1), cv(s2))))\n  syl2an(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s1), cv(hs0))), wa(wn(wal(s0, wceq(cv(s0), cv(s2)))), wceq(cv(s2), cv(hs0))), wal(s0, wceq(cv(s1), cv(s2))), wal(s0, wceq(cv(s1), cv(hs0))), wal(s0, wceq(cv(s2), cv(hs0))))\n  imp(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s1), cv(hs0)), wal(s0, wceq(cv(s1), cv(hs0))))\n  dveeq1(s0, s1, hs0)\n  imp(wn(wal(s0, wceq(cv(s0), cv(s2)))), wceq(cv(s2), cv(hs0)), wal(s0, wceq(cv(s2), cv(hs0))))\n  dveeq1(s0, s2, hs0)\n  alanimi(s0, wceq(cv(s1), cv(hs0)), wceq(cv(s2), cv(hs0)), wceq(cv(s1), cv(s2)))\n  equtr2(s1, hs0, s2)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diff.hs0.w(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))))\n  diff.hs0.w(wal(s0, wceq(cv(s1), cv(s2))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm nfeqf(setvar s0, setvar s1, setvar s2) {\n  ⊢ ((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2))→ F/(s0, s1 = s2))\n} = {\n  nf5d(s0, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s1 = s2)\n  nfan(s0, ¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2))\n  nfna1(s0, s0 = s1)\n  nfna1(s0, s0 = s2)\n  syl5((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s1 = s2, ∀(s0, s1 = s2), ∃(hs0,(s1 = hs0 ∧ s2 = hs0)))\n  equvinva(s1, s2, hs0)\n  exlimdv(hs0, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), (s1 = hs0 ∧ s2 = hs0), ∀(s0, s1 = s2))\n  ex((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), (s1 = hs0 ∧ s2 = hs0), ∀(s0, s1 = s2))\n  an4s(¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2), s1 = hs0, s2 = hs0, ∀(s0, s1 = s2))\n  syl2an((¬ ∀(s0, s0 = s1)∧ s1 = hs0), (¬ ∀(s0, s0 = s2)∧ s2 = hs0), ∀(s0, s1 = s2), ∀(s0, s1 = hs0), ∀(s0, s2 = hs0))\n  imp(¬ ∀(s0, s0 = s1), s1 = hs0, ∀(s0, s1 = hs0))\n  dveeq1(s0, s1, hs0)\n  imp(¬ ∀(s0, s0 = s2), s2 = hs0, ∀(s0, s2 = hs0))\n  dveeq1(s0, s2, hs0)\n  alanimi(s0, s1 = hs0, s2 = hs0, s1 = s2)\n  equtr2(s1, hs0, s2)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diff.hs0.w((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)))\n  diff.hs0.w(∀(s0, s1 = s2))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["nf5d","nfan","nfna1","syl5","equvinva","exlimdv","ex","an4s","syl2an","imp","dveeq1","alanimi","equtr2","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["axc9","dvelimf","equvel","2ax6elem","wl-exeq","wl-nfeqfb","wl-equsb4","wl-2sb6d","wl-sbalnae"]},{"name":"axc9","content":"Derive set.mm's original ~ ax-c9 from the shorter ~ ax-13 . (Contributed by NM, 29-Nov-2015.) (Revised by NM, 24-Dec-2015.) (Proof shortened by Wolf Lammen, 29-Apr-2018.)","origin":"thm axc9(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))))))\n} = {\n  ex(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n  nf5rd(s0, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s1), cv(s2)))\n  nfeqf(s0, s1, s2)\n}","pretty":"thm axc9(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(¬ ∀(s0, s0 = s2)→(s1 = s2 → ∀(s0, s1 = s2))))\n} = {\n  ex(¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2), (s1 = s2 → ∀(s0, s1 = s2)))\n  nf5rd(s0, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s1 = s2)\n  nfeqf(s0, s1, s2)\n}","parent":["ex","nf5rd","nfeqf"],"children":["ax13ALT","hbae","axi12","axi12OLD","axbndOLD","axext4dist","bj-ax6elem1","axc11n11r","bj-hbaeb2","wl-aleq","ax12eq","ax12indalem"]},{"name":"ax6e","content":"At least one individual exists. This is not a theorem of free logic, which is sound in empty domains. For such a logic, we would add this theorem as an axiom of set theory (Axiom 0 of [Kunen] p. 10). In the system consisting of ~ ax-4 through ~ ax-9 , all axioms other than ~ ax-6 are believed to be theorems of free logic, although the system without ~ ax-6 is not complete in free logic. It is preferred to use ~ ax6ev when it is sufficient. (Contributed by NM, 14-May-1993.) Shortened after ~ ax13lem1 became available. (Revised by Wolf Lammen, 8-Sep-2018.)","origin":"thm ax6e(setvar s0, setvar s1) {\n  |- wex(s0, wceq(cv(s0), cv(s1)))\n} = {\n  pm2.61i(wex(s0, wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(s1)))\n  19.8a(s0, wceq(cv(s0), cv(s1)))\n  exlimiiv(hs0, wi(wn(wceq(cv(s0), cv(s1))), wex(s0, wceq(cv(s0), cv(s1)))), wceq(cv(hs0), cv(s1)))\n  syl6com(wceq(cv(hs0), cv(s1)), wn(wceq(cv(s0), cv(s1))), wex(s0, wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(hs0), cv(s1))))\n  ax13lem1(s0, s1, hs0)\n  19.35i(s0, wceq(cv(hs0), cv(s1)), wceq(cv(s0), cv(s1)))\n  eximii(s0, wi(wceq(cv(hs0), cv(s1)), wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(hs0)))\n  ax6ev(s0, hs0)\n  equtr(s0, hs0, s1)\n  ax6ev(hs0, s1)\n  diff.hs0.w(wi(wn(wceq(cv(s0), cv(s1))), wex(s0, wceq(cv(s0), cv(s1)))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n}","pretty":"thm ax6e(setvar s0, setvar s1) {\n  ⊢ ∃(s0, s0 = s1)\n} = {\n  pm2.61i(∃(s0, s0 = s1), s0 = s1)\n  19.8a(s0, s0 = s1)\n  exlimiiv(hs0, (¬ s0 = s1 → ∃(s0, s0 = s1)), hs0 = s1)\n  syl6com(hs0 = s1, ¬ s0 = s1, ∃(s0, s0 = s1), ∀(s0, hs0 = s1))\n  ax13lem1(s0, s1, hs0)\n  19.35i(s0, hs0 = s1, s0 = s1)\n  eximii(s0, (hs0 = s1 → s0 = s1), s0 = hs0)\n  ax6ev(s0, hs0)\n  equtr(s0, hs0, s1)\n  ax6ev(hs0, s1)\n  diff.hs0.w((¬ s0 = s1 → ∃(s0, s0 = s1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n}","parent":["pm2.61i","19.8a","exlimiiv","syl6com","ax13lem1","19.35i","eximii","ax6ev","equtr","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":["ax6","spimt","spimtOLD","spim","spimed","spimvALT","spei","equs4","equsal","equsexALT","equvini","equvel","2ax6elem","axi9","dtrucor2","axextnd","ax8dfeq","bj-axc10","bj-alequex","ax6er","exlimiieq1","wl-exeq","wl-equsald","ax6e2nd","ax6e2ndVD","ax6e2ndALT","spd"]},{"name":"ax6","content":"Theorem showing that ~ ax-6 follows from the weaker version ~ ax6v . (Even though this theorem depends on ~ ax-6 , all references of ~ ax-6 are made via ~ ax6v . An earlier version stated ~ ax6v as a separate axiom, but having two axioms caused some confusion.) This theorem should be referenced in place of ~ ax-6 so that all proofs can be traced back to ~ ax6v . When possible, use the weaker ~ ax6v rather than ~ ax6 since the ~ ax6v derivation is much shorter and requires fewer axioms. (Contributed by NM, 12-Nov-2013.) (Revised by NM, 25-Jul-2015.) (Proof shortened by Wolf Lammen, 4-Feb-2018.)","origin":"thm ax6(setvar s0, setvar s1) {\n  |- wn(wal(s0, wn(wceq(cv(s0), cv(s1)))))\n} = {\n  mpbi(wn(wal(s0, wn(wceq(cv(s0), cv(s1))))), wex(s0, wceq(cv(s0), cv(s1))))\n  ax6e(s0, s1)\n  df-ex(s0, wceq(cv(s0), cv(s1)))\n}","pretty":"thm ax6(setvar s0, setvar s1) {\n  ⊢ ¬ ∀(s0, ¬ s0 = s1)\n} = {\n  mpbi(¬ ∀(s0, ¬ s0 = s1), ∃(s0, s0 = s1))\n  ax6e(s0, s1)\n  df-ex(s0, s0 = s1)\n}","parent":["mpbi","ax6e","df-ex"],"children":["axc10"]},{"name":"axc10","content":"Show that the original axiom ~ ax-c10 can be derived from ~ ax6 and ~ axc7 (on top of propositional calculus, ~ ax-gen , and ~ ax-4 ). See ~ ax6fromc10 for the rederivation of ~ ax6 from ~ ax-c10 . Normally, ~ axc10 should be used rather than ~ ax-c10 , except by theorems specifically studying the latter's properties. (Contributed by NM, 5-Aug-1993.) (Proof modification is discouraged.)","origin":"thm axc10(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wi(wceq(cv(s0), cv(s1)), wal(s0, w0))), w0)\n} = {\n  syl(wal(s0, wi(wceq(cv(s0), cv(s1)), wal(s0, w0))), w0, wn(wal(s0, wn(wal(s0, w0)))))\n  mtoi(wal(s0, wi(wceq(cv(s0), cv(s1)), wal(s0, w0))), wal(s0, wn(wal(s0, w0))), wal(s0, wn(wceq(cv(s0), cv(s1)))))\n  ax6(s0, s1)\n  al2imi(s0, wi(wceq(cv(s0), cv(s1)), wal(s0, w0)), wn(wal(s0, w0)), wn(wceq(cv(s0), cv(s1))))\n  con3(wceq(cv(s0), cv(s1)), wal(s0, w0))\n  axc7(s0, w0)\n}","pretty":"thm axc10(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,(s0 = s1 → ∀(s0, w0)))→ w0)\n} = {\n  syl(∀(s0,(s0 = s1 → ∀(s0, w0))), w0, ¬ ∀(s0, ¬ ∀(s0, w0)))\n  mtoi(∀(s0,(s0 = s1 → ∀(s0, w0))), ∀(s0, ¬ ∀(s0, w0)), ∀(s0, ¬ s0 = s1))\n  ax6(s0, s1)\n  al2imi(s0, (s0 = s1 → ∀(s0, w0)), ¬ ∀(s0, w0), ¬ s0 = s1)\n  con3(s0 = s1, ∀(s0, w0))\n  axc7(s0, w0)\n}","parent":["syl","mtoi","ax6","al2imi","con3","axc7"],"children":[]},{"name":"spimt","content":"Closed theorem form of ~ spim . (Contributed by NM, 15-Jan-2008.) (Revised by Mario Carneiro, 17-Oct-2016.) (Proof shortened by Wolf Lammen, 21-Mar-2023.)","origin":"thm spimt(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wa(wnf(s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0)))), wi(wal(s0, w1), w0))\n} = {\n  sylan9r(wnf(s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0))), wal(s0, w1), w0, wex(s0, w0))\n  sylib(wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0))), wi(wal(s0, w1), wex(s0, w0)), wex(s0, wi(w1, w0)))\n  mpi(wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0))), wex(s0, wi(w1, w0)), wex(s0, wceq(cv(s0), cv(s1))))\n  ax6e(s0, s1)\n  exim(s0, wceq(cv(s0), cv(s1)), wi(w1, w0))\n  19.35(s0, w1, w0)\n  19.9d(s0, wnf(s0, w0), w0)\n  id(wnf(s0, w0))\n}","pretty":"thm spimt(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ((F/(s0, w0)∧ ∀(s0,(s0 = s1 →(w1 → w0))))→(∀(s0, w1)→ w0))\n} = {\n  sylan9r(F/(s0, w0), ∀(s0,(s0 = s1 →(w1 → w0))), ∀(s0, w1), w0, ∃(s0, w0))\n  sylib(∀(s0,(s0 = s1 →(w1 → w0))), (∀(s0, w1)→ ∃(s0, w0)), ∃(s0,(w1 → w0)))\n  mpi(∀(s0,(s0 = s1 →(w1 → w0))), ∃(s0,(w1 → w0)), ∃(s0, s0 = s1))\n  ax6e(s0, s1)\n  exim(s0, s0 = s1, (w1 → w0))\n  19.35(s0, w1, w0)\n  19.9d(s0, F/(s0, w0), w0)\n  id(F/(s0, w0))\n}","parent":["sylan9r","sylib","mpi","ax6e","exim","19.35","19.9d","id"],"children":[]},{"name":"spimtOLD","content":"Obsolete version of ~ spimt as of 21-Mar-2023. (Contributed by NM, 15-Jan-2008.) (Revised by Mario Carneiro, 17-Oct-2016.) (Proof shortened by Wolf Lammen, 24-Feb-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm spimtOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wa(wnf(s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0)))), wi(wal(s0, w1), w0))\n} = {\n  sylan9r(wnf(s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0))), wal(s0, w1), w0, wex(s0, w0))\n  sylib(wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0))), wi(wal(s0, w1), wex(s0, w0)), wex(s0, wi(w1, w0)))\n  mpi(wal(s0, wi(wceq(cv(s0), cv(s1)), wi(w1, w0))), wex(s0, wi(w1, w0)), wex(s0, wceq(cv(s0), cv(s1))))\n  ax6e(s0, s1)\n  exim(s0, wceq(cv(s0), cv(s1)), wi(w1, w0))\n  19.35(s0, w1, w0)\n  biimpd(wnf(s0, w0), wex(s0, w0), w0)\n  19.9t(s0, w0)\n}","pretty":"thm spimtOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ((F/(s0, w0)∧ ∀(s0,(s0 = s1 →(w1 → w0))))→(∀(s0, w1)→ w0))\n} = {\n  sylan9r(F/(s0, w0), ∀(s0,(s0 = s1 →(w1 → w0))), ∀(s0, w1), w0, ∃(s0, w0))\n  sylib(∀(s0,(s0 = s1 →(w1 → w0))), (∀(s0, w1)→ ∃(s0, w0)), ∃(s0,(w1 → w0)))\n  mpi(∀(s0,(s0 = s1 →(w1 → w0))), ∃(s0,(w1 → w0)), ∃(s0, s0 = s1))\n  ax6e(s0, s1)\n  exim(s0, s0 = s1, (w1 → w0))\n  19.35(s0, w1, w0)\n  biimpd(F/(s0, w0), ∃(s0, w0), w0)\n  19.9t(s0, w0)\n}","parent":["sylan9r","sylib","mpi","ax6e","exim","19.35","biimpd","19.9t"],"children":[]},{"name":"spim","content":"Specialization, using implicit substitution. Compare Lemma 14 of [Tarski] p. 70. The ~ spim series of theorems requires that only one direction of the substitution hypothesis hold. (Contributed by NM, 10-Jan-1993.) (Revised by Mario Carneiro, 3-Oct-2016.) (Proof shortened by Wolf Lammen, 18-Feb-2018.)","origin":"thm spim(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, w0), w1)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n} = {\n  19.36i(s0, w0, w1)\n  eximii(s0, wi(w0, w1), wceq(cv(s0), cv(s1)))\n  ax6e(s0, s1)\n}","pretty":"thm spim(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)→ w1)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 → w1))\n} = {\n  19.36i(s0, w0, w1)\n  eximii(s0, (w0 → w1), s0 = s1)\n  ax6e(s0, s1)\n}","parent":["19.36i","eximii","ax6e"],"children":["spimv","chvar","cbv3","setrec2fun"]},{"name":"spimed","content":"Deduction version of ~ spime . (Contributed by NM, 14-May-1993.) (Revised by Mario Carneiro, 3-Oct-2016.) (Proof shortened by Wolf Lammen, 19-Feb-2018.)","origin":"thm spimed(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(w1, wex(s0, w2)))\n  -| wi(w0, wnf(s0, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wi(w1, w2))\n} = {\n  syl6(w0, w1, wex(s0, w2), wal(s0, w1))\n  nf5rd(s0, w0, w1)\n  19.35i(s0, w1, w2)\n  eximii(s0, wi(w1, w2), wceq(cv(s0), cv(s1)))\n  ax6e(s0, s1)\n}","pretty":"thm spimed(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(w1 → ∃(s0, w2)))\n  ⊣ (w0 → F/(s0, w1))\n  ⊣ (s0 = s1 →(w1 → w2))\n} = {\n  syl6(w0, w1, ∃(s0, w2), ∀(s0, w1))\n  nf5rd(s0, w0, w1)\n  19.35i(s0, w1, w2)\n  eximii(s0, (w1 → w2), s0 = s1)\n  ax6e(s0, s1)\n}","parent":["syl6","nf5rd","19.35i","eximii","ax6e"],"children":["spime","2ax6elem"]},{"name":"spime","content":"Existential introduction, using implicit substitution. Compare Lemma 14 of [Tarski] p. 70. (Contributed by NM, 7-Aug-1994.) (Revised by Mario Carneiro, 3-Oct-2016.) (Proof shortened by Wolf Lammen, 6-Mar-2018.)","origin":"thm spime(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wex(s0, w1))\n  -| wnf(s0, w0)\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n} = {\n  mptru(wi(w0, wex(s0, w1)))\n  spimed(s0, s1, wtru, w0, w1)\n  a1i(wtru, wnf(s0, w0))\n}","pretty":"thm spime(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → ∃(s0, w1))\n  ⊣ F/(s0, w0)\n  ⊣ (s0 = s1 →(w0 → w1))\n} = {\n  mptru((w0 → ∃(s0, w1)))\n  spimed(s0, s1, wtru, w0, w1)\n  a1i(wtru, F/(s0, w0))\n}","parent":["mptru","spimed","a1i"],"children":["spimev","exnel"]},{"name":"spimv","content":"A version of ~ spim with a distinct variable requirement instead of a bound-variable hypothesis. See ~ spimv1 and ~ spimvw for versions requiring fewer axioms. (Contributed by NM, 31-Jul-1993.)","origin":"thm spimv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, w0), w1)\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n  -| diffsw(s0, w1)\n} = {\n  spim(s0, s1, w0, w1)\n  nfv(s0, w1)\n}","pretty":"thm spimv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)→ w1)\n  ⊣ (s0 = s1 →(w0 → w1))\n  ⊣ d(s0, w1)\n} = {\n  spim(s0, s1, w0, w1)\n  nfv(s0, w1)\n}","parent":["spim","nfv"],"children":["spv"]},{"name":"spimvALT","content":"Alternate proof of ~ spimv . Note that it requires only ~ ax-1 through ~ ax-5 together with ~ ax6e . Currently, proofs derive from ~ ax6v , but if ~ ax-6 could be used instead, this proof would reduce axiom usage. (Contributed by NM, 31-Jul-1993.) Remove dependency on ~ ax-10 . (Revised by BJ, 29-Nov-2020.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm spimvALT(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, w0), w1)\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n  -| diffsw(s0, w1)\n} = {\n  19.36iv(s0, w0, w1)\n  eximii(s0, wi(w0, w1), wceq(cv(s0), cv(s1)))\n  ax6e(s0, s1)\n}","pretty":"thm spimvALT(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)→ w1)\n  ⊣ (s0 = s1 →(w0 → w1))\n  ⊣ d(s0, w1)\n} = {\n  19.36iv(s0, w0, w1)\n  eximii(s0, (w0 → w1), s0 = s1)\n  ax6e(s0, s1)\n}","parent":["19.36iv","eximii","ax6e"],"children":[]},{"name":"spimev","content":"Distinct-variable version of ~ spime . (Contributed by NM, 10-Jan-1993.)","origin":"thm spimev(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wex(s0, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n  -| diffsw(s0, w0)\n} = {\n  spime(s0, s1, w0, w1)\n  nfv(s0, w0)\n}","pretty":"thm spimev(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → ∃(s0, w1))\n  ⊣ (s0 = s1 →(w0 → w1))\n  ⊣ d(s0, w0)\n} = {\n  spime(s0, s1, w0, w1)\n  nfv(s0, w0)\n}","parent":["spime","nfv"],"children":["axsep","dtru","zfpair","fvn0ssdmfun","refimssco","rlimdmafv","rlimdmafv2","elsprel"]},{"name":"spv","content":"Specialization, using implicit substitution. See ~ spvv for a version using fewer axioms. (Contributed by NM, 30-Aug-1993.)","origin":"thm spv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, w0), w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| diffsw(s0, w1)\n} = {\n  spimv(s0, s1, w0, w1)\n  biimpd(wceq(cv(s0), cv(s1)), w0, w1)\n}","pretty":"thm spv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)→ w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ d(s0, w1)\n} = {\n  spimv(s0, s1, w0, w1)\n  biimpd(s0 = s1, w0, w1)\n}","parent":["spimv","biimpd"],"children":["cbvalv","isowe2","tfisi","findcard2","marypha1lem","setind","karden","kmlem4","axgroth3","ramcl","alexsubALTlem3","i1fd","dfpo2","dfon2lem6","trer","axc11n-16","elsetrecslem"]},{"name":"spei","content":"Inference from existential specialization, using implicit substitution. Remove a distinct variable constraint. (Contributed by NM, 19-Aug-1993.) (Proof shortened by Wolf Lammen, 12-May-2018.)","origin":"thm spei(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wex(s0, w0)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| w1\n} = {\n  eximii(s0, w0, wceq(cv(s0), cv(s1)))\n  ax6e(s0, s1)\n  mpbiri(wceq(cv(s0), cv(s1)), w0, w1)\n}","pretty":"thm spei(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ∃(s0, w0)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ w1\n} = {\n  eximii(s0, w0, s0 = s1)\n  ax6e(s0, s1)\n  mpbiri(s0 = s1, w0, w1)\n}","parent":["eximii","ax6e","mpbiri"],"children":["elirrv","bnj1014","eusnsn"]},{"name":"chvar","content":"Implicit substitution of ` y ` for ` x ` into a theorem. (Contributed by Raph Levien, 9-Jul-2003.) (Revised by Mario Carneiro, 3-Oct-2016.)","origin":"thm chvar(setvar s0, setvar s1, wff w0, wff w1) {\n  |- w0\n  -| wnf(s0, w0)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w1, w0))\n  -| w1\n} = {\n  mpg(s0, w0, w1)\n  spim(s0, s1, w1, w0)\n  biimpd(wceq(cv(s0), cv(s1)), w1, w0)\n}","pretty":"thm chvar(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ w0\n  ⊣ F/(s0, w0)\n  ⊣ (s0 = s1 →(w1 ↔ w0))\n  ⊣ w1\n} = {\n  mpg(s0, w0, w1)\n  spim(s0, s1, w1, w0)\n  biimpd(s0 = s1, w1, w0)\n}","parent":["mpg","spim","biimpd"],"children":["chvarv","csbhypf","axrep2","axrep3","opelopabsb","wfisg","tfindes","findes","dfoprab4f","dom2lem","zfcndrep","pwfseqlem4a","pwfseqlem4","uzind4s","seqof2","fsumsplitf","fproddivf","fprodsplitf","gsumcom2","mdetralt2","mdetunilem2","ptcldmpt","elmptrab","isfildlem","dvmptfsum","dvfsumlem2","lgamgulmlem2","fmptcof2","aciunf1lem","fsumiunle","esum2dlem","fiunelros","measiun","bnj849","bnj1014","bnj1384","bnj1489","bnj1497","setinds","frpoinsg","frinsg","finxpreclem6","ptrest","poimirlem24","poimirlem25","poimirlem26","fdc1","fsumshftd","fphpd","monotuz","monotoddzz","oddcomabszz","setindtrs","flcidc","binomcxplemnotnn0","fiiuncl","disjf1","disjinfi","supxrleubrnmptf","monoordxr","monoord2xr","fsumclf","fsummulc1f","fsumnncl","fsumf1of","fsumiunss","fsumreclf","fsumlessf","fsumsermpt","fmul01","fmuldfeq","fmul01lt1lem1","fmul01lt1lem2","fprodexp","fprodabs2","climmulf","climexp","climsuse","climrecf","climinff","climaddf","mullimc","neglimc","addlimc","0ellimcdiv","climsubmpt","climreclf","climeldmeqmpt","climfveqmpt","fnlimfvre","climfveqf","climfveqmpt3","climeldmeqf","climeqf","climeldmeqmpt3","climinf2","climinf2mpt","climinfmpt","limsupequz","limsupequzmptf","fprodcncf","dvmptmulf","dvnmptdivc","dvnmul","dvmptfprod","stoweidlem3","stoweidlem34","stoweidlem42","stoweidlem48","fourierdlem112","sge0lempt","sge0iunmptlemfi","sge0iunmptlemre","sge0iunmpt","sge0ltfirpmpt2","sge0isummpt2","sge0xaddlem2","sge0xadd","meadjiun","voliunsge0lem","meaiunincf","meaiuninc3","meaiininc","hoimbl2","vonhoire","vonn0ioo2","vonn0icc2","salpreimagtlt","smflimlem3"]},{"name":"chvarv","content":"Implicit substitution of ` y ` for ` x ` into a theorem. (Contributed by NM, 20-Apr-1994.) (Proof shortened by Wolf Lammen, 22-Apr-2018.)","origin":"thm chvarv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- w0\n  -| wi(wceq(cv(s0), cv(s1)), wb(w1, w0))\n  -| w1\n  -| diffsw(s0, w0)\n} = {\n  chvar(s0, s1, w0, w1)\n  nfv(s0, w0)\n}","pretty":"thm chvarv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ w0\n  ⊣ (s0 = s1 →(w1 ↔ w0))\n  ⊣ w1\n  ⊣ d(s0, w0)\n} = {\n  chvar(s0, s1, w0, w1)\n  nfv(s0, w0)\n}","parent":["chvar","nfv"],"children":["axext3ALT","axrep1","axsep2","isso2i","tz6.12f","dfac12lem2","wunex2","ltordlem","prodfdiv","iscatd2","yoniso","mndind","gsum2dlem2","isdrngrd","frlmphl","frlmup1","mdetralt","mdetunilem9","neiptoptop","neiptopnei","cnextcn","cnextfres1","ustuqtop4","dscmet","nrmmetd","rolle","numclwlk2lem2f1o","numclwlk2lem2f1oOLD","chscllem2","suppovss","fedgmullem1","esumcvg","eulerpartlemgvv","eulerpartlemn","bnj1326","fwddifnp1","poimirlem13","poimirlem14","poimirlem25","poimirlem31","ftc1anclem7","ftc1anc","fdc","fdc1","iscringd","ismrcd2","fphpdo","monotoddzzfi","monotoddzz","mendlmod","dvgrat","cvgdvgrat","binomcxplemnotnn0","iunincfi","wessf1ornlem","monoords","limcperiod","sumnnodd","cncfshift","cncfperiod","icccncfext","fperdvper","dvnprodlem1","dvnprodlem2","dvnprodlem3","iblspltprt","itgspltprt","stoweidlem43","stoweidlem62","dirkercncflem2","fourierdlem12","fourierdlem15","fourierdlem34","fourierdlem41","fourierdlem42","fourierdlem48","fourierdlem50","fourierdlem51","fourierdlem73","fourierdlem79","fourierdlem81","fourierdlem83","fourierdlem92","fourierdlem94","fourierdlem103","fourierdlem104","fourierdlem111","fourierdlem112","fourierdlem113","etransclem2","etransclem46","intsaluni","meaiuninclem","meaiuninc3v","meaiininclem","ovn0lem","hoidmvlelem2","hoidmvlelem3","hspmbllem2","vonioo","vonicc","pimincfltioc","smflimlem4"]},{"name":"cbv3","content":"Rule used to change bound variables, using implicit substitution, that does not use ~ ax-c9 . (Contributed by NM, 5-Aug-1993.) (Proof shortened by Wolf Lammen, 12-May-2018.)","origin":"thm cbv3(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, w0), wal(s1, w1))\n  -| wnf(s1, w0)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n} = {\n  alrimih(s1, wal(s0, w0), w1)\n  hbal(s0, s1, w0)\n  nf5ri(s1, w0)\n  spim(s0, s1, w0, w1)\n}","pretty":"thm cbv3(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)→ ∀(s1, w1))\n  ⊣ F/(s1, w0)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 → w1))\n} = {\n  alrimih(s1, ∀(s0, w0), w1)\n  hbal(s0, s1, w0)\n  nf5ri(s1, w0)\n  spim(s0, s1, w0, w1)\n}","parent":["alrimih","hbal","nf5ri","spim"],"children":["cbv3h","cbv1","cbval","axc16i"]},{"name":"cbv3h","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 8-Jun-1993.) (Proof shortened by Andrew Salmon, 25-May-2011.) (Proof shortened by Wolf Lammen, 12-May-2018.)","origin":"thm cbv3h(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, w0), wal(s1, w1))\n  -| wi(w0, wal(s1, w0))\n  -| wi(w1, wal(s0, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wi(w0, w1))\n} = {\n  cbv3(s0, s1, w0, w1)\n  nf5i(s1, w0)\n  nf5i(s0, w1)\n}","pretty":"thm cbv3h(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)→ ∀(s1, w1))\n  ⊣ (w0 → ∀(s1, w0))\n  ⊣ (w1 → ∀(s0, w1))\n  ⊣ (s0 = s1 →(w0 → w1))\n} = {\n  cbv3(s0, s1, w0, w1)\n  nf5i(s1, w0)\n  nf5i(s0, w1)\n}","parent":["cbv3","nf5i"],"children":[]},{"name":"cbv1","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 5-Aug-1993.) (Revised by Mario Carneiro, 3-Oct-2016.) Format hypotheses to common style. (Revised by Wolf Lammen, 13-May-2018.)","origin":"thm cbv1(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(wal(s0, w1), wal(s1, w2)))\n  -| wnf(s0, w0)\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s1, w1))\n  -| wi(w0, wnf(s0, w2))\n  -| wi(w0, wi(wceq(cv(s0), cv(s1)), wi(w1, w2)))\n} = {\n  pm2.86i(w0, wal(s0, w1), wal(s1, w2))\n  3imtr3i(wi(w0, wal(s0, w1)), wi(w0, wal(s1, w2)), wal(s0, wi(w0, w1)), wal(s1, wi(w0, w2)))\n  cbv3(s0, s1, wi(w0, w1), wi(w0, w2))\n  nfim1(s1, w0, w1)\n  nfim1(s0, w0, w2)\n  a2d(wceq(cv(s0), cv(s1)), w0, w1, w2)\n  com12(wceq(cv(s0), cv(s1)), w0, wi(w1, w2))\n  19.21(s0, w0, w1)\n  19.21(s1, w0, w2)\n}","pretty":"thm cbv1(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∀(s0, w1)→ ∀(s1, w2)))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s1, w1))\n  ⊣ (w0 → F/(s0, w2))\n  ⊣ (w0 →(s0 = s1 →(w1 → w2)))\n} = {\n  pm2.86i(w0, ∀(s0, w1), ∀(s1, w2))\n  3imtr3i((w0 → ∀(s0, w1)), (w0 → ∀(s1, w2)), ∀(s0,(w0 → w1)), ∀(s1,(w0 → w2)))\n  cbv3(s0, s1, (w0 → w1), (w0 → w2))\n  nfim1(s1, w0, w1)\n  nfim1(s0, w0, w2)\n  a2d(s0 = s1, w0, w1, w2)\n  com12(s0 = s1, w0, (w1 → w2))\n  19.21(s0, w0, w1)\n  19.21(s1, w0, w2)\n}","parent":["pm2.86i","3imtr3i","cbv3","nfim1","a2d","com12","19.21"],"children":["cbv1h"]},{"name":"cbv1h","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 11-May-1993.) (Proof shortened by Wolf Lammen, 13-May-2018.)","origin":"thm cbv1h(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(wal(s0, wal(s1, w0)), wi(wal(s0, w1), wal(s1, w2)))\n  -| wi(w0, wi(w1, wal(s1, w1)))\n  -| wi(w0, wi(w2, wal(s0, w2)))\n  -| wi(w0, wi(wceq(cv(s0), cv(s1)), wi(w1, w2)))\n} = {\n  cbv1(s0, s1, wal(s0, wal(s1, w0)), w1, w2)\n  nf5d(s1, wal(s0, wal(s1, w0)), w1)\n  nfa2(s1, s0, w0)\n  syl(wal(s0, wal(s1, w0)), wi(w1, wal(s1, w1)), w0)\n  nf5d(s0, wal(s0, wal(s1, w0)), w2)\n  nfa1(s0, wal(s1, w0))\n  syl(wal(s0, wal(s1, w0)), wi(w2, wal(s0, w2)), w0)\n  syl(wal(s0, wal(s1, w0)), wi(wceq(cv(s0), cv(s1)), wi(w1, w2)), w0)\n  2sp(s0, s1, w0)\n}","pretty":"thm cbv1h(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (∀(s0, ∀(s1, w0))→(∀(s0, w1)→ ∀(s1, w2)))\n  ⊣ (w0 →(w1 → ∀(s1, w1)))\n  ⊣ (w0 →(w2 → ∀(s0, w2)))\n  ⊣ (w0 →(s0 = s1 →(w1 → w2)))\n} = {\n  cbv1(s0, s1, ∀(s0, ∀(s1, w0)), w1, w2)\n  nf5d(s1, ∀(s0, ∀(s1, w0)), w1)\n  nfa2(s1, s0, w0)\n  syl(∀(s0, ∀(s1, w0)), (w1 → ∀(s1, w1)), w0)\n  nf5d(s0, ∀(s0, ∀(s1, w0)), w2)\n  nfa1(s0, ∀(s1, w0))\n  syl(∀(s0, ∀(s1, w0)), (w2 → ∀(s0, w2)), w0)\n  syl(∀(s0, ∀(s1, w0)), (s0 = s1 →(w1 → w2)), w0)\n  2sp(s0, s1, w0)\n}","parent":["cbv1","nf5d","nfa2","syl","nfa1","2sp"],"children":["cbv2h"]},{"name":"cbv2h","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 11-May-1993.)","origin":"thm cbv2h(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(wal(s0, wal(s1, w0)), wb(wal(s0, w1), wal(s1, w2)))\n  -| wi(w0, wi(w1, wal(s1, w1)))\n  -| wi(w0, wi(w2, wal(s0, w2)))\n  -| wi(w0, wi(wceq(cv(s0), cv(s1)), wb(w1, w2)))\n} = {\n  impbid(wal(s0, wal(s1, w0)), wal(s0, w1), wal(s1, w2))\n  cbv1h(s0, s1, w0, w1, w2)\n  syl6(w0, wceq(cv(s0), cv(s1)), wi(w1, w2), wb(w1, w2))\n  biimp(w1, w2)\n  alcoms(s0, s1, w0, wi(wal(s1, w2), wal(s0, w1)))\n  cbv1h(s1, s0, w0, w2, w1)\n  syl56(w0, wceq(cv(s1), cv(s0)), wi(w2, w1), wceq(cv(s0), cv(s1)), wb(w1, w2))\n  equcomi(s1, s0)\n  biimpr(w1, w2)\n}","pretty":"thm cbv2h(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (∀(s0, ∀(s1, w0))→(∀(s0, w1)↔ ∀(s1, w2)))\n  ⊣ (w0 →(w1 → ∀(s1, w1)))\n  ⊣ (w0 →(w2 → ∀(s0, w2)))\n  ⊣ (w0 →(s0 = s1 →(w1 ↔ w2)))\n} = {\n  impbid(∀(s0, ∀(s1, w0)), ∀(s0, w1), ∀(s1, w2))\n  cbv1h(s0, s1, w0, w1, w2)\n  syl6(w0, s0 = s1, (w1 → w2), (w1 ↔ w2))\n  biimp(w1, w2)\n  alcoms(s0, s1, w0, (∀(s1, w2)→ ∀(s0, w1)))\n  cbv1h(s1, s0, w0, w2, w1)\n  syl56(w0, s1 = s0, (w2 → w1), s0 = s1, (w1 ↔ w2))\n  equcomi(s1, s0)\n  biimpr(w1, w2)\n}","parent":["impbid","cbv1h","syl6","biimp","alcoms","syl56","equcomi","biimpr"],"children":["cbv2","eujustALT"]},{"name":"cbv2","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 5-Aug-1993.) (Revised by Mario Carneiro, 3-Oct-2016.) Format hypotheses to common style. (Revised by Wolf Lammen, 13-May-2018.)","origin":"thm cbv2(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wal(s0, w1), wal(s1, w2)))\n  -| wnf(s0, w0)\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s1, w1))\n  -| wi(w0, wnf(s0, w2))\n  -| wi(w0, wi(wceq(cv(s0), cv(s1)), wb(w1, w2)))\n} = {\n  syl(w0, wb(wal(s0, w1), wal(s1, w2)), wal(s0, wal(s1, w0)))\n  alrimi(s0, w0, wal(s1, w0))\n  nf5ri(s1, w0)\n  cbv2h(s0, s1, w0, w1, w2)\n  nf5rd(s1, w0, w1)\n  nf5rd(s0, w0, w2)\n}","pretty":"thm cbv2(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∀(s0, w1)↔ ∀(s1, w2)))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s1, w1))\n  ⊣ (w0 → F/(s0, w2))\n  ⊣ (w0 →(s0 = s1 →(w1 ↔ w2)))\n} = {\n  syl(w0, (∀(s0, w1)↔ ∀(s1, w2)), ∀(s0, ∀(s1, w0)))\n  alrimi(s0, w0, ∀(s1, w0))\n  nf5ri(s1, w0)\n  cbv2h(s0, s1, w0, w1, w2)\n  nf5rd(s1, w0, w1)\n  nf5rd(s0, w0, w2)\n}","parent":["syl","alrimi","nf5ri","cbv2h","nf5rd"],"children":["cbvald","sb9","wl-cbvalnaed","wl-sb8t"]},{"name":"cbval","content":"Rule used to change bound variables, using implicit substitution. See ~ cbvalv , ~ cbvalv1 , and ~ cbvalvw for weaker versions using fewer axioms. (Contributed by NM, 13-May-1993.) (Revised by Mario Carneiro, 3-Oct-2016.)","origin":"thm cbval(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, w0), wal(s1, w1))\n  -| wnf(s1, w0)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  impbii(wal(s0, w0), wal(s1, w1))\n  cbv3(s0, s1, w0, w1)\n  biimpd(wceq(cv(s0), cv(s1)), w0, w1)\n  cbv3(s1, s0, w1, w0)\n  equcoms(s1, s0, wi(w1, w0))\n  biimprd(wceq(cv(s0), cv(s1)), w1, w0)\n}","pretty":"thm cbval(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)↔ ∀(s1, w1))\n  ⊣ F/(s1, w0)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  impbii(∀(s0, w0), ∀(s1, w1))\n  cbv3(s0, s1, w0, w1)\n  biimpd(s0 = s1, w0, w1)\n  cbv3(s1, s0, w1, w0)\n  equcoms(s1, s0, (w1 → w0))\n  biimprd(s0 = s1, w1, w0)\n}","parent":["impbii","cbv3","biimpd","equcoms","biimprd"],"children":["cbvex","cbval2","sb8"]},{"name":"cbvex","content":"Rule used to change bound variables, using implicit substitution. See ~ cbvexv , ~ cbvexv1 , and ~ cbvexvw for weaker versions using fewer axioms. (Contributed by NM, 21-Jun-1993.)","origin":"thm cbvex(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wex(s0, w0), wex(s1, w1))\n  -| wnf(s1, w0)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  con4bii(wex(s0, w0), wex(s1, w1))\n  3bitr3i(wn(wex(s0, w0)), wn(wex(s1, w1)), wal(s0, wn(w0)), wal(s1, wn(w1)))\n  cbval(s0, s1, wn(w0), wn(w1))\n  nfn(s1, w0)\n  nfn(s0, w1)\n  notbid(wceq(cv(s0), cv(s1)), w0, w1)\n  alnex(s0, w0)\n  alnex(s1, w1)\n}","pretty":"thm cbvex(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0, w0)↔ ∃(s1, w1))\n  ⊣ F/(s1, w0)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  con4bii(∃(s0, w0), ∃(s1, w1))\n  3bitr3i(¬ ∃(s0, w0), ¬ ∃(s1, w1), ∀(s0, ¬ w0), ∀(s1, ¬ w1))\n  cbval(s0, s1, ¬ w0, ¬ w1)\n  nfn(s1, w0)\n  nfn(s0, w1)\n  notbid(s0 = s1, w0, w1)\n  alnex(s0, w0)\n  alnex(s1, w1)\n}","parent":["con4bii","3bitr3i","cbval","nfn","notbid","alnex"],"children":["exsbOLD","sb8e","mofOLD","eufOLD","cbveuALT","cbvmoOLD"]},{"name":"cbvalv","content":"Rule used to change bound variables, using implicit substitution. See ~ cbvalvw for a version requiring fewer axioms, to be preferred when sufficient. (Contributed by NM, 5-Aug-1993.) Remove dependency on ~ ax-10 . (Revised by Wolf Lammen, 17-Jul-2021.)","origin":"thm cbvalv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, w0), wal(s1, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  impbii(wal(s0, w0), wal(s1, w1))\n  alrimih(s1, wal(s0, w0), w1)\n  hbal(s0, s1, w0)\n  ax-5(s1, w0)\n  spv(s0, s1, w0, w1)\n  alrimih(s0, wal(s1, w1), w0)\n  hbal(s1, s0, w1)\n  ax-5(s0, w1)\n  spv(s1, s0, w1, w0)\n  bicomd(wceq(cv(s1), cv(s0)), w1, w0)\n  equcoms(s1, s0, wb(w0, w1))\n}","pretty":"thm cbvalv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)↔ ∀(s1, w1))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  impbii(∀(s0, w0), ∀(s1, w1))\n  alrimih(s1, ∀(s0, w0), w1)\n  hbal(s0, s1, w0)\n  ax-5(s1, w0)\n  spv(s0, s1, w0, w1)\n  alrimih(s0, ∀(s1, w1), w0)\n  hbal(s1, s0, w1)\n  ax-5(s0, w1)\n  spv(s1, s0, w1, w0)\n  bicomd(s1 = s0, w1, w0)\n  equcoms(s1, s0, (w0 ↔ w1))\n}","parent":["impbii","alrimih","hbal","ax-5","spv","bicomd","equcoms"],"children":["cbvexv","cbvaldva","cbval2v","cdeqal1"]},{"name":"cbvexv","content":"Rule used to change bound variables, using implicit substitution. See ~ cbvexvw for a version requiring fewer axioms, to be preferred when sufficient. (Contributed by NM, 21-Jun-1993.) Remove dependency on ~ ax-10 . (Revised by Wolf Lammen, 17-Jul-2021.)","origin":"thm cbvexv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wex(s0, w0), wex(s1, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  con4bii(wex(s0, w0), wex(s1, w1))\n  3bitr3i(wn(wex(s0, w0)), wn(wex(s1, w1)), wal(s0, wn(w0)), wal(s1, wn(w1)))\n  cbvalv(s0, s1, wn(w0), wn(w1))\n  notbid(wceq(cv(s0), cv(s1)), w0, w1)\n  alnex(s0, w0)\n  alnex(s1, w1)\n  diff.wn.s(s0, w1)\n  diff.wn.s(s1, w0)\n}","pretty":"thm cbvexv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0, w0)↔ ∃(s1, w1))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  con4bii(∃(s0, w0), ∃(s1, w1))\n  3bitr3i(¬ ∃(s0, w0), ¬ ∃(s1, w1), ∀(s0, ¬ w0), ∀(s1, ¬ w1))\n  cbvalv(s0, s1, ¬ w0, ¬ w1)\n  notbid(s0 = s1, w0, w1)\n  alnex(s0, w0)\n  alnex(s1, w1)\n  diff.wn.s(s0, w1)\n  diff.wn.s(s1, w0)\n}","parent":["con4bii","3bitr3i","cbvalv","notbid","alnex","diff.wn.s"],"children":["cbvex2v","ichexmpl1"]},{"name":"cbvald","content":"Deduction used to change bound variables, using implicit substitution, particularly useful in conjunction with ~ dvelim . (Contributed by NM, 2-Jan-2002.) (Revised by Mario Carneiro, 6-Oct-2016.) (Revised by Wolf Lammen, 13-May-2018.)","origin":"thm cbvald(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wal(s0, w1), wal(s1, w2)))\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s1, w1))\n  -| wi(w0, wi(wceq(cv(s0), cv(s1)), wb(w1, w2)))\n  -| diffsw(s0, w0)\n  -| diffsw(s0, w2)\n} = {\n  cbv2(s0, s1, w0, w1, w2)\n  nfv(s0, w0)\n  nfvd(s0, w0, w2)\n}","pretty":"thm cbvald(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∀(s0, w1)↔ ∀(s1, w2)))\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s1, w1))\n  ⊣ (w0 →(s0 = s1 →(w1 ↔ w2)))\n  ⊣ d(s0, w0)\n  ⊣ d(s0, w2)\n} = {\n  cbv2(s0, s1, w0, w1, w2)\n  nfv(s0, w0)\n  nfvd(s0, w0, w2)\n}","parent":["cbv2","nfv","nfvd"],"children":["cbvexd","axextnd","axrepndlem1","axunndlem1","axpowndlem2","axpowndlem3","axpowndlem4","axregndlem2","axregnd","axinfnd","axacndlem5","axacnd","axextdist","distel","wl-sb8eut"]},{"name":"cbvexd","content":"Deduction used to change bound variables, using implicit substitution, particularly useful in conjunction with ~ dvelim . (Contributed by NM, 2-Jan-2002.) (Revised by Mario Carneiro, 6-Oct-2016.)","origin":"thm cbvexd(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wex(s0, w1), wex(s1, w2)))\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s1, w1))\n  -| wi(w0, wi(wceq(cv(s0), cv(s1)), wb(w1, w2)))\n  -| diffsw(s0, w0)\n  -| diffsw(s0, w2)\n} = {\n  con4bid(w0, wex(s0, w1), wex(s1, w2))\n  3bitr3g(w0, wn(wex(s0, w1)), wn(wex(s1, w2)), wal(s0, wn(w1)), wal(s1, wn(w2)))\n  cbvald(s0, s1, w0, wn(w1), wn(w2))\n  nfnd(s1, w0, w1)\n  syl6ib(w0, wceq(cv(s0), cv(s1)), wb(wn(w1), wn(w2)), wb(w1, w2))\n  notbi(w1, w2)\n  alnex(s0, w1)\n  alnex(s1, w2)\n  diff.wn.s(s0, w2)\n}","pretty":"thm cbvexd(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∃(s0, w1)↔ ∃(s1, w2)))\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s1, w1))\n  ⊣ (w0 →(s0 = s1 →(w1 ↔ w2)))\n  ⊣ d(s0, w0)\n  ⊣ d(s0, w2)\n} = {\n  con4bid(w0, ∃(s0, w1), ∃(s1, w2))\n  3bitr3g(w0, ¬ ∃(s0, w1), ¬ ∃(s1, w2), ∀(s0, ¬ w1), ∀(s1, ¬ w2))\n  cbvald(s0, s1, w0, ¬ w1, ¬ w2)\n  nfnd(s1, w0, w1)\n  syl6ib(w0, s0 = s1, (¬ w1 ↔ ¬ w2), (w1 ↔ w2))\n  notbi(w1, w2)\n  alnex(s0, w1)\n  alnex(s1, w2)\n  diff.wn.s(s0, w2)\n}","parent":["con4bid","3bitr3g","cbvald","nfnd","syl6ib","notbi","alnex","diff.wn.s"],"children":["vtoclgft","dfid3","axrepndlem2","axunnd","axpowndlem2","axpownd","axregndlem2","axinfndlem1","axacndlem4","wl-mo2df","wl-eudf","wl-mo2t"]},{"name":"cbval2","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 22-Dec-2003.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 22-Apr-2018.)","origin":"thm cbval2(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  |- wb(wal(s0, wal(s1, w0)), wal(s2, wal(s3, w1)))\n  -| wnf(s2, w0)\n  -| wnf(s3, w0)\n  -| wnf(s0, w1)\n  -| wnf(s1, w1)\n  -| wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s2, s3)\n} = {\n  cbval(s0, s2, wal(s1, w0), wal(s3, w1))\n  nfal(s2, s1, w0)\n  nfal(s0, s3, w1)\n  pm5.74ri(wceq(cv(s0), cv(s2)), wal(s1, w0), wal(s3, w1))\n  3bitr3i(wi(wceq(cv(s0), cv(s2)), wal(s1, w0)), wi(wceq(cv(s0), cv(s2)), wal(s3, w1)), wal(s1, wi(wceq(cv(s0), cv(s2)), w0)), wal(s3, wi(wceq(cv(s0), cv(s2)), w1)))\n  cbval(s1, s3, wi(wceq(cv(s0), cv(s2)), w0), wi(wceq(cv(s0), cv(s2)), w1))\n  nfim(s3, wceq(cv(s0), cv(s2)), w0)\n  nfv(s3, wceq(cv(s0), cv(s2)))\n  nfim(s1, wceq(cv(s0), cv(s2)), w1)\n  nfv(s1, wceq(cv(s0), cv(s2)))\n  pm5.74d(wceq(cv(s1), cv(s3)), wceq(cv(s0), cv(s2)), w0, w1)\n  expcom(wceq(cv(s1), cv(s3)), wceq(cv(s0), cv(s2)), wb(w0, w1))\n  19.21v(s1, wceq(cv(s0), cv(s2)), w0)\n  19.21v(s3, wceq(cv(s0), cv(s2)), w1)\n  diff.wceq.s(s3, cv(s0), cv(s2))\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s2)\n  diffss.ex(s3, s2)\n  diff.wceq.s(s1, cv(s0), cv(s2))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, s2)\n}","pretty":"thm cbval2(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  ⊢ (∀(s0, ∀(s1, w0))↔ ∀(s2, ∀(s3, w1)))\n  ⊣ F/(s2, w0)\n  ⊣ F/(s3, w0)\n  ⊣ F/(s0, w1)\n  ⊣ F/(s1, w1)\n  ⊣ ((s0 = s2 ∧ s1 = s3)→(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s2, s3)\n} = {\n  cbval(s0, s2, ∀(s1, w0), ∀(s3, w1))\n  nfal(s2, s1, w0)\n  nfal(s0, s3, w1)\n  pm5.74ri(s0 = s2, ∀(s1, w0), ∀(s3, w1))\n  3bitr3i((s0 = s2 → ∀(s1, w0)), (s0 = s2 → ∀(s3, w1)), ∀(s1,(s0 = s2 → w0)), ∀(s3,(s0 = s2 → w1)))\n  cbval(s1, s3, (s0 = s2 → w0), (s0 = s2 → w1))\n  nfim(s3, s0 = s2, w0)\n  nfv(s3, s0 = s2)\n  nfim(s1, s0 = s2, w1)\n  nfv(s1, s0 = s2)\n  pm5.74d(s1 = s3, s0 = s2, w0, w1)\n  expcom(s1 = s3, s0 = s2, (w0 ↔ w1))\n  19.21v(s1, s0 = s2, w0)\n  19.21v(s3, s0 = s2, w1)\n  diff.wceq.s(s3, s0, s2)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s2)\n  diffss.ex(s3, s2)\n  diff.wceq.s(s1, s0, s2)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, s2)\n}","parent":["cbval","nfal","pm5.74ri","3bitr3i","nfim","nfv","pm5.74d","expcom","19.21v","diff.wceq.s","diff.cv.s","diffss.ex"],"children":["cbvex2","eqrelf"]},{"name":"cbvex2","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 14-Sep-2003.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 16-Jun-2019.)","origin":"thm cbvex2(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  |- wb(wex(s0, wex(s1, w0)), wex(s2, wex(s3, w1)))\n  -| wnf(s2, w0)\n  -| wnf(s3, w0)\n  -| wnf(s0, w1)\n  -| wnf(s1, w1)\n  -| wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s2, s3)\n} = {\n  con4bii(wex(s0, wex(s1, w0)), wex(s2, wex(s3, w1)))\n  3bitr4i(wn(wex(s0, wex(s1, w0))), wn(wex(s2, wex(s3, w1))), wal(s0, wal(s1, wn(w0))), wal(s2, wal(s3, wn(w1))))\n  cbval2(s0, s1, s2, s3, wn(w0), wn(w1))\n  nfn(s2, w0)\n  nfn(s3, w0)\n  nfn(s0, w1)\n  nfn(s1, w1)\n  notbid(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0, w1)\n  2nexaln(s0, s1, w0)\n  2nexaln(s2, s3, w1)\n}","pretty":"thm cbvex2(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  ⊢ (∃(s0, ∃(s1, w0))↔ ∃(s2, ∃(s3, w1)))\n  ⊣ F/(s2, w0)\n  ⊣ F/(s3, w0)\n  ⊣ F/(s0, w1)\n  ⊣ F/(s1, w1)\n  ⊣ ((s0 = s2 ∧ s1 = s3)→(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s2, s3)\n} = {\n  con4bii(∃(s0, ∃(s1, w0)), ∃(s2, ∃(s3, w1)))\n  3bitr4i(¬ ∃(s0, ∃(s1, w0)), ¬ ∃(s2, ∃(s3, w1)), ∀(s0, ∀(s1, ¬ w0)), ∀(s2, ∀(s3, ¬ w1)))\n  cbval2(s0, s1, s2, s3, ¬ w0, ¬ w1)\n  nfn(s2, w0)\n  nfn(s3, w0)\n  nfn(s0, w1)\n  nfn(s1, w1)\n  notbid((s0 = s2 ∧ s1 = s3), w0, w1)\n  2nexaln(s0, s1, w0)\n  2nexaln(s2, s3, w1)\n}","parent":["con4bii","3bitr4i","cbval2","nfn","notbid","2nexaln"],"children":["cbvopab","cbvoprab12"]},{"name":"cbvaldva","content":"Rule used to change the bound variable in a universal quantifier with implicit substitution. Deduction form. (Contributed by David Moews, 1-May-2017.) Remove dependency on ~ ax-10 . (Revised by Wolf Lammen, 18-Jul-2021.)","origin":"thm cbvaldva(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wal(s0, w1), wal(s1, w2)))\n  -| wi(wa(w0, wceq(cv(s0), cv(s1))), wb(w1, w2))\n  -| diffsw(s0, w0)\n  -| diffsw(s0, w2)\n  -| diffsw(s1, w0)\n  -| diffsw(s1, w1)\n} = {\n  pm5.74ri(w0, wal(s0, w1), wal(s1, w2))\n  3bitr3i(wi(w0, wal(s0, w1)), wi(w0, wal(s1, w2)), wal(s0, wi(w0, w1)), wal(s1, wi(w0, w2)))\n  cbvalv(s0, s1, wi(w0, w1), wi(w0, w2))\n  pm5.74d(wceq(cv(s0), cv(s1)), w0, w1, w2)\n  expcom(wceq(cv(s0), cv(s1)), w0, wb(w1, w2))\n  19.21v(s0, w0, w1)\n  19.21v(s1, w0, w2)\n  diff.wi.s(s0, w0, w2)\n  diff.wi.s(s1, w0, w1)\n}","pretty":"thm cbvaldva(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∀(s0, w1)↔ ∀(s1, w2)))\n  ⊣ ((w0 ∧ s0 = s1)→(w1 ↔ w2))\n  ⊣ d(s0, w0)\n  ⊣ d(s0, w2)\n  ⊣ d(s1, w0)\n  ⊣ d(s1, w1)\n} = {\n  pm5.74ri(w0, ∀(s0, w1), ∀(s1, w2))\n  3bitr3i((w0 → ∀(s0, w1)), (w0 → ∀(s1, w2)), ∀(s0,(w0 → w1)), ∀(s1,(w0 → w2)))\n  cbvalv(s0, s1, (w0 → w1), (w0 → w2))\n  pm5.74d(s0 = s1, w0, w1, w2)\n  expcom(s0 = s1, w0, (w1 ↔ w2))\n  19.21v(s0, w0, w1)\n  19.21v(s1, w0, w2)\n  diff.wi.s(s0, w0, w2)\n  diff.wi.s(s1, w0, w1)\n}","parent":["pm5.74ri","3bitr3i","cbvalv","pm5.74d","expcom","19.21v","diff.wi.s"],"children":["cbvexdva","cbval2v"]},{"name":"cbvexdva","content":"Rule used to change the bound variable in an existential quantifier with implicit substitution. Deduction form. (Contributed by David Moews, 1-May-2017.) Remove dependency on ~ ax-10 . (Revised by Wolf Lammen, 18-Jul-2021.)","origin":"thm cbvexdva(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wex(s0, w1), wex(s1, w2)))\n  -| wi(wa(w0, wceq(cv(s0), cv(s1))), wb(w1, w2))\n  -| diffsw(s0, w0)\n  -| diffsw(s0, w2)\n  -| diffsw(s1, w0)\n  -| diffsw(s1, w1)\n} = {\n  con4bid(w0, wex(s0, w1), wex(s1, w2))\n  3bitr3g(w0, wn(wex(s0, w1)), wn(wex(s1, w2)), wal(s0, wn(w1)), wal(s1, wn(w2)))\n  cbvaldva(s0, s1, w0, wn(w1), wn(w2))\n  notbid(wa(w0, wceq(cv(s0), cv(s1))), w1, w2)\n  alnex(s0, w1)\n  alnex(s1, w2)\n  diff.wn.s(s0, w2)\n  diff.wn.s(s1, w1)\n}","pretty":"thm cbvexdva(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∃(s0, w1)↔ ∃(s1, w2)))\n  ⊣ ((w0 ∧ s0 = s1)→(w1 ↔ w2))\n  ⊣ d(s0, w0)\n  ⊣ d(s0, w2)\n  ⊣ d(s1, w0)\n  ⊣ d(s1, w1)\n} = {\n  con4bid(w0, ∃(s0, w1), ∃(s1, w2))\n  3bitr3g(w0, ¬ ∃(s0, w1), ¬ ∃(s1, w2), ∀(s0, ¬ w1), ∀(s1, ¬ w2))\n  cbvaldva(s0, s1, w0, ¬ w1, ¬ w2)\n  notbid((w0 ∧ s0 = s1), w1, w2)\n  alnex(s0, w1)\n  alnex(s1, w2)\n  diff.wn.s(s0, w2)\n  diff.wn.s(s1, w1)\n}","parent":["con4bid","3bitr3g","cbvaldva","notbid","alnex","diff.wn.s"],"children":["cbvex2v","isinf"]},{"name":"cbval2v","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 4-Feb-2005.) Remove dependency on ~ ax-10 . (Revised by Wolf Lammen, 18-Jul-2021.)","origin":"thm cbval2v(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  |- wb(wal(s0, wal(s1, w0)), wal(s2, wal(s3, w1)))\n  -| wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s2, s3)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w1)\n  -| diffsw(s2, w0)\n  -| diffsw(s3, w0)\n} = {\n  cbvalv(s0, s2, wal(s1, w0), wal(s3, w1))\n  cbvaldva(s1, s3, wceq(cv(s0), cv(s2)), w0, w1)\n  diff.wal.s(s0, s3, w1)\n  diff.wal.s(s2, s1, w0)\n  diffss.ex(s2, s1)\n  diff.wceq.s(s1, cv(s0), cv(s2))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, cv(s0), cv(s2))\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s2)\n  diffss.ex(s3, s2)\n}","pretty":"thm cbval2v(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  ⊢ (∀(s0, ∀(s1, w0))↔ ∀(s2, ∀(s3, w1)))\n  ⊣ ((s0 = s2 ∧ s1 = s3)→(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s2, s3)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w1)\n  ⊣ d(s2, w0)\n  ⊣ d(s3, w0)\n} = {\n  cbvalv(s0, s2, ∀(s1, w0), ∀(s3, w1))\n  cbvaldva(s1, s3, s0 = s2, w0, w1)\n  diff.wal.s(s0, s3, w1)\n  diff.wal.s(s2, s1, w0)\n  diffss.ex(s2, s1)\n  diff.wceq.s(s1, s0, s2)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, s0, s2)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s2)\n  diffss.ex(s3, s2)\n}","parent":["cbvalv","cbvaldva","diff.wal.s","diffss.ex","diff.wceq.s","diff.cv.s"],"children":["seqf1o","fi1uzind","brfi1indALT","mbfresfi"]},{"name":"cbvex2v","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 26-Jul-1995.) Remove dependency on ~ ax-10 . (Revised by Wolf Lammen, 18-Jul-2021.)","origin":"thm cbvex2v(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  |- wb(wex(s0, wex(s1, w0)), wex(s2, wex(s3, w1)))\n  -| wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s2, s3)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w1)\n  -| diffsw(s2, w0)\n  -| diffsw(s3, w0)\n} = {\n  cbvexv(s0, s2, wex(s1, w0), wex(s3, w1))\n  cbvexdva(s1, s3, wceq(cv(s0), cv(s2)), w0, w1)\n  diff.wex.s(s0, s3, w1)\n  diff.wex.s(s2, s1, w0)\n  diffss.ex(s2, s1)\n  diff.wceq.s(s1, cv(s0), cv(s2))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, cv(s0), cv(s2))\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s2)\n  diffss.ex(s3, s2)\n}","pretty":"thm cbvex2v(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  ⊢ (∃(s0, ∃(s1, w0))↔ ∃(s2, ∃(s3, w1)))\n  ⊣ ((s0 = s2 ∧ s1 = s3)→(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s2, s3)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w1)\n  ⊣ d(s2, w0)\n  ⊣ d(s3, w0)\n} = {\n  cbvexv(s0, s2, ∃(s1, w0), ∃(s3, w1))\n  cbvexdva(s1, s3, s0 = s2, w0, w1)\n  diff.wex.s(s0, s3, w1)\n  diff.wex.s(s2, s1, w0)\n  diffss.ex(s2, s1)\n  diff.wceq.s(s1, s0, s2)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, s0, s2)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s2)\n  diffss.ex(s3, s2)\n}","parent":["cbvexv","cbvexdva","diff.wex.s","diffss.ex","diff.wceq.s","diff.cv.s"],"children":["cbvex4v","funop1","uspgrsprf1"]},{"name":"cbvex4v","content":"Rule used to change bound variables, using implicit substitution. (Contributed by NM, 26-Jul-1995.)","origin":"thm cbvex4v(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, wff w0, wff w1, wff w2) {\n  |- wb(wex(s0, wex(s1, wex(s2, wex(s3, w0)))), wex(s4, wex(s5, wex(s6, wex(s7, w1)))))\n  -| wi(wa(wceq(cv(s0), cv(s4)), wceq(cv(s1), cv(s5))), wb(w0, w2))\n  -| wi(wa(wceq(cv(s2), cv(s6)), wceq(cv(s3), cv(s7))), wb(w2, w1))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s0, s5)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s1, s4)\n  -| diffss(s2, s3)\n  -| diffss(s2, s4)\n  -| diffss(s2, s5)\n  -| diffss(s2, s7)\n  -| diffss(s3, s4)\n  -| diffss(s3, s5)\n  -| diffss(s3, s6)\n  -| diffss(s4, s5)\n  -| diffss(s6, s7)\n  -| diffsw(s0, w2)\n  -| diffsw(s1, w2)\n  -| diffsw(s2, w1)\n  -| diffsw(s3, w1)\n  -| diffsw(s4, w0)\n  -| diffsw(s5, w0)\n  -| diffsw(s6, w2)\n  -| diffsw(s7, w2)\n} = {\n  bitri(wex(s0, wex(s1, wex(s2, wex(s3, w0)))), wex(s4, wex(s5, wex(s6, wex(s7, w1)))), wex(s4, wex(s5, wex(s2, wex(s3, w2)))))\n  cbvex2v(s0, s1, s4, s5, wex(s2, wex(s3, w0)), wex(s2, wex(s3, w2)))\n  2exbidv(s2, s3, wa(wceq(cv(s0), cv(s4)), wceq(cv(s1), cv(s5))), w0, w2)\n  2exbii(s4, s5, wex(s2, wex(s3, w2)), wex(s6, wex(s7, w1)))\n  cbvex2v(s2, s3, s6, s7, w2, w1)\n  diff.wex.s(s0, s2, wex(s3, w2))\n  diff.wex.s(s0, s3, w2)\n  diff.wex.s(s1, s2, wex(s3, w2))\n  diff.wex.s(s1, s3, w2)\n  diff.wex.s(s4, s2, wex(s3, w0))\n  diffss.ex(s4, s2)\n  diff.wex.s(s4, s3, w0)\n  diffss.ex(s4, s3)\n  diff.wex.s(s5, s2, wex(s3, w0))\n  diffss.ex(s5, s2)\n  diff.wex.s(s5, s3, w0)\n  diffss.ex(s5, s3)\n  diff.wa.s(s2, wceq(cv(s0), cv(s4)), wceq(cv(s1), cv(s5)))\n  diff.wceq.s(s2, cv(s0), cv(s4))\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s2, s4)\n  diff.wceq.s(s2, cv(s1), cv(s5))\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n  diff.cv.s(s2, s5)\n  diff.wa.s(s3, wceq(cv(s0), cv(s4)), wceq(cv(s1), cv(s5)))\n  diff.wceq.s(s3, cv(s0), cv(s4))\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s4)\n  diff.wceq.s(s3, cv(s1), cv(s5))\n  diff.cv.s(s3, s1)\n  diffss.ex(s3, s1)\n  diff.cv.s(s3, s5)\n}","pretty":"thm cbvex4v(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, wff w0, wff w1, wff w2) {\n  ⊢ (∃(s0, ∃(s1, ∃(s2, ∃(s3, w0))))↔ ∃(s4, ∃(s5, ∃(s6, ∃(s7, w1)))))\n  ⊣ ((s0 = s4 ∧ s1 = s5)→(w0 ↔ w2))\n  ⊣ ((s2 = s6 ∧ s3 = s7)→(w2 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s0, s5)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s1, s4)\n  ⊣ d(s2, s3)\n  ⊣ d(s2, s4)\n  ⊣ d(s2, s5)\n  ⊣ d(s2, s7)\n  ⊣ d(s3, s4)\n  ⊣ d(s3, s5)\n  ⊣ d(s3, s6)\n  ⊣ d(s4, s5)\n  ⊣ d(s6, s7)\n  ⊣ d(s0, w2)\n  ⊣ d(s1, w2)\n  ⊣ d(s2, w1)\n  ⊣ d(s3, w1)\n  ⊣ d(s4, w0)\n  ⊣ d(s5, w0)\n  ⊣ d(s6, w2)\n  ⊣ d(s7, w2)\n} = {\n  bitri(∃(s0, ∃(s1, ∃(s2, ∃(s3, w0)))), ∃(s4, ∃(s5, ∃(s6, ∃(s7, w1)))), ∃(s4, ∃(s5, ∃(s2, ∃(s3, w2)))))\n  cbvex2v(s0, s1, s4, s5, ∃(s2, ∃(s3, w0)), ∃(s2, ∃(s3, w2)))\n  2exbidv(s2, s3, (s0 = s4 ∧ s1 = s5), w0, w2)\n  2exbii(s4, s5, ∃(s2, ∃(s3, w2)), ∃(s6, ∃(s7, w1)))\n  cbvex2v(s2, s3, s6, s7, w2, w1)\n  diff.wex.s(s0, s2, ∃(s3, w2))\n  diff.wex.s(s0, s3, w2)\n  diff.wex.s(s1, s2, ∃(s3, w2))\n  diff.wex.s(s1, s3, w2)\n  diff.wex.s(s4, s2, ∃(s3, w0))\n  diffss.ex(s4, s2)\n  diff.wex.s(s4, s3, w0)\n  diffss.ex(s4, s3)\n  diff.wex.s(s5, s2, ∃(s3, w0))\n  diffss.ex(s5, s2)\n  diff.wex.s(s5, s3, w0)\n  diffss.ex(s5, s3)\n  diff.wa.s(s2, s0 = s4, s1 = s5)\n  diff.wceq.s(s2, s0, s4)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s2, s4)\n  diff.wceq.s(s2, s1, s5)\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n  diff.cv.s(s2, s5)\n  diff.wa.s(s3, s0 = s4, s1 = s5)\n  diff.wceq.s(s3, s0, s4)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.cv.s(s3, s4)\n  diff.wceq.s(s3, s1, s5)\n  diff.cv.s(s3, s1)\n  diffss.ex(s3, s1)\n  diff.cv.s(s3, s5)\n}","parent":["bitri","cbvex2v","2exbidv","2exbii","diff.wex.s","diffss.ex","diff.wa.s","diff.wceq.s","diff.cv.s"],"children":["addsrmo","mulsrmo"]},{"name":"equs4","content":"Lemma used in proofs of implicit substitution properties. The converse requires either a disjoint variable condition ( ~ sb56 ) or a non-freeness hypothesis ( ~ equs45f ). See ~ equs4v for a version requiring fewer axioms. (Contributed by NM, 10-May-1993.) (Proof shortened by Mario Carneiro, 20-May-2014.) (Proof shortened by Wolf Lammen, 5-Feb-2018.)","origin":"thm equs4(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)))\n} = {\n  mpi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wex(s0, wceq(cv(s0), cv(s1))))\n  ax6e(s0, s1)\n  exintr(s0, wceq(cv(s0), cv(s1)), w0)\n}","pretty":"thm equs4(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,(s0 = s1 → w0))→ ∃(s0,(s0 = s1 ∧ w0)))\n} = {\n  mpi(∀(s0,(s0 = s1 → w0)), ∃(s0,(s0 = s1 ∧ w0)), ∃(s0, s0 = s1))\n  ax6e(s0, s1)\n  exintr(s0, s0 = s1, w0)\n}","parent":["mpi","ax6e","exintr"],"children":["equsex","equs45f","equs5","sb1","sb2ALT","bj-sbsb"]},{"name":"equsal","content":"An equivalence related to implicit substitution. See ~ equsalvw and ~ equsalv for versions with disjoint variable conditions proved from fewer axioms. See also the dual form ~ equsex . (Contributed by NM, 2-Jun-1993.) (Proof shortened by Andrew Salmon, 12-Aug-2011.) (Revised by Mario Carneiro, 3-Oct-2016.) (Proof shortened by Wolf Lammen, 5-Feb-2018.)","origin":"thm equsal(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  3bitr4i(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1, wal(s0, wi(wceq(cv(s0), cv(s1)), w1)), wi(wex(s0, wceq(cv(s0), cv(s1))), w1))\n  19.23(s0, wceq(cv(s0), cv(s1)), w1)\n  albii(s0, wi(wceq(cv(s0), cv(s1)), w0), wi(wceq(cv(s0), cv(s1)), w1))\n  pm5.74i(wceq(cv(s0), cv(s1)), w0, w1)\n  a1bi(w1, wex(s0, wceq(cv(s0), cv(s1))))\n  ax6e(s0, s1)\n}","pretty":"thm equsal(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  3bitr4i(∀(s0,(s0 = s1 → w0)), w1, ∀(s0,(s0 = s1 → w1)), (∃(s0, s0 = s1)→ w1))\n  19.23(s0, s0 = s1, w1)\n  albii(s0, (s0 = s1 → w0), (s0 = s1 → w1))\n  pm5.74i(s0 = s1, w0, w1)\n  a1bi(w1, ∃(s0, s0 = s1))\n  ax6e(s0, s1)\n}","parent":["3bitr4i","19.23","albii","pm5.74i","a1bi","ax6e"],"children":["equsex","equsalh","dvelimf","sb6x","sb6rf","bj-sbievv"]},{"name":"equsex","content":"An equivalence related to implicit substitution. See ~ equsexvw and ~ equsexv for versions with disjoint variable conditions proved from fewer axioms. See also the dual form ~ equsal . See ~ equsexALT for an alternate proof. (Contributed by NM, 5-Aug-1993.) (Revised by Mario Carneiro, 3-Oct-2016.) (Proof shortened by Wolf Lammen, 6-Feb-2018.)","origin":"thm equsex(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), w1)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  impbii(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), w1)\n  exlimi(s0, wa(wceq(cv(s0), cv(s1)), w0), w1)\n  biimpa(wceq(cv(s0), cv(s1)), w0, w1)\n  sylbir(w1, wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  equsal(s0, s1, w0, w1)\n  equs4(s0, s1, w0)\n}","pretty":"thm equsex(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0,(s0 = s1 ∧ w0))↔ w1)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  impbii(∃(s0,(s0 = s1 ∧ w0)), w1)\n  exlimi(s0, (s0 = s1 ∧ w0), w1)\n  biimpa(s0 = s1, w0, w1)\n  sylbir(w1, ∃(s0,(s0 = s1 ∧ w0)), ∀(s0,(s0 = s1 → w0)))\n  equsal(s0, s1, w0, w1)\n  equs4(s0, s1, w0)\n}","parent":["impbii","exlimi","biimpa","sylbir","equsal","equs4"],"children":["equsexh","sb5rf"]},{"name":"equsexALT","content":"Alternate proof of ~ equsex . This proves the result directly, instead of as a corollary of ~ equsal via ~ equs4 . Note in particular that only existential quantifiers appear in the proof and that the only step requiring ~ ax-13 is ~ ax6e . This proof mimics that of ~ equsal (in particular, note that ~ pm5.32i , ~ exbii , ~ 19.41 , ~ mpbiran correspond respectively to ~ pm5.74i , ~ albii , ~ 19.23 , ~ a1bi ). (Contributed by BJ, 20-Aug-2020.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm equsexALT(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), w1)\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  bitri(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), w1, wex(s0, wa(wceq(cv(s0), cv(s1)), w1)))\n  exbii(s0, wa(wceq(cv(s0), cv(s1)), w0), wa(wceq(cv(s0), cv(s1)), w1))\n  pm5.32i(wceq(cv(s0), cv(s1)), w0, w1)\n  mpbiran(wex(s0, wa(wceq(cv(s0), cv(s1)), w1)), w1, wex(s0, wceq(cv(s0), cv(s1))))\n  ax6e(s0, s1)\n  19.41(s0, wceq(cv(s0), cv(s1)), w1)\n}","pretty":"thm equsexALT(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0,(s0 = s1 ∧ w0))↔ w1)\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  bitri(∃(s0,(s0 = s1 ∧ w0)), w1, ∃(s0,(s0 = s1 ∧ w1)))\n  exbii(s0, (s0 = s1 ∧ w0), (s0 = s1 ∧ w1))\n  pm5.32i(s0 = s1, w0, w1)\n  mpbiran(∃(s0,(s0 = s1 ∧ w1)), w1, ∃(s0, s0 = s1))\n  ax6e(s0, s1)\n  19.41(s0, s0 = s1, w1)\n}","parent":["bitri","exbii","pm5.32i","mpbiran","ax6e","19.41"],"children":[]},{"name":"equsalh","content":"An equivalence related to implicit substitution. See ~ equsalhw for a version with a disjoint variable condition requiring fewer axioms. (Contributed by NM, 2-Jun-1993.)","origin":"thm equsalh(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w1)\n  -| wi(w1, wal(s0, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  equsal(s0, s1, w0, w1)\n  nf5i(s0, w1)\n}","pretty":"thm equsalh(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0,(s0 = s1 → w0))↔ w1)\n  ⊣ (w1 → ∀(s0, w1))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  equsal(s0, s1, w0, w1)\n  nf5i(s0, w1)\n}","parent":["equsal","nf5i"],"children":["dvelimf-o"]},{"name":"equsexh","content":"An equivalence related to implicit substitution. See ~ equsexhv for a version with a disjoint variable condition which does not require ~ ax-13 . (Contributed by NM, 5-Aug-1993.)","origin":"thm equsexh(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), w1)\n  -| wi(w1, wal(s0, w1))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n} = {\n  equsex(s0, s1, w0, w1)\n  nf5i(s0, w1)\n}","pretty":"thm equsexh(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0,(s0 = s1 ∧ w0))↔ w1)\n  ⊣ (w1 → ∀(s0, w1))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n} = {\n  equsex(s0, s1, w0, w1)\n  nf5i(s0, w1)\n}","parent":["equsex","nf5i"],"children":[]},{"name":"axc15","content":"Derivation of set.mm's original ~ ax-c15 from ~ ax-c11n and the shorter ~ ax-12 that has replaced it. Theorem ~ ax12 shows the reverse derivation of ~ ax-12 from ~ ax-c15 . Normally, ~ axc15 should be used rather than ~ ax-c15 , except by theorems specifically studying the latter's properties. (Contributed by NM, 2-Feb-2007.) (Proof shortened by Wolf Lammen, 26-Mar-2023.)","origin":"thm axc15(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n} = {\n  mpi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wex(hs0, wceq(cv(hs0), cv(s1))))\n  ax6ev(hs0, s1)\n  exlimdv(hs0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(hs0), cv(s1)), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n  syl6mpi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(hs0), cv(s1)), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wal(s0, wceq(cv(hs0), cv(s1))), wi(wceq(cv(s0), cv(hs0)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(hs0)), w0)))))\n  dveeq2(s0, s1, hs0)\n  ax12v(s0, hs0, w0)\n  imim12d(wal(s0, wceq(cv(hs0), cv(s1))), wceq(cv(s0), cv(hs0)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(hs0)), w0))), wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  sps(s0, wceq(cv(hs0), cv(s1)), wi(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(hs0))))\n  imim2d(wal(s0, wceq(cv(hs0), cv(s1))), w0, wal(s0, wi(wceq(cv(s0), cv(hs0)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  al2imi(s0, wceq(cv(hs0), cv(s1)), wi(wceq(cv(s0), cv(hs0)), w0), wi(wceq(cv(s0), cv(s1)), w0))\n  imim1d(wceq(cv(hs0), cv(s1)), wceq(cv(s0), cv(hs0)), w0, wceq(cv(s0), cv(s1)))\n  equeuclr(hs0, s1, s0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wn(wal(s0, wceq(cv(s0), cv(s1)))))\n  diff.hs0.w(wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm axc15(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))))\n} = {\n  mpi(¬ ∀(s0, s0 = s1), (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))), ∃(hs0, hs0 = s1))\n  ax6ev(hs0, s1)\n  exlimdv(hs0, ¬ ∀(s0, s0 = s1), hs0 = s1, (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))))\n  syl6mpi(¬ ∀(s0, s0 = s1), hs0 = s1, (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))), ∀(s0, hs0 = s1), (s0 = hs0 →(w0 → ∀(s0,(s0 = hs0 → w0)))))\n  dveeq2(s0, s1, hs0)\n  ax12v(s0, hs0, w0)\n  imim12d(∀(s0, hs0 = s1), s0 = hs0, (w0 → ∀(s0,(s0 = hs0 → w0))), s0 = s1, (w0 → ∀(s0,(s0 = s1 → w0))))\n  sps(s0, hs0 = s1, (s0 = s1 → s0 = hs0))\n  imim2d(∀(s0, hs0 = s1), w0, ∀(s0,(s0 = hs0 → w0)), ∀(s0,(s0 = s1 → w0)))\n  al2imi(s0, hs0 = s1, (s0 = hs0 → w0), (s0 = s1 → w0))\n  imim1d(hs0 = s1, s0 = hs0, w0, s0 = s1)\n  equeuclr(hs0, s1, s0)\n  diff.hs0.s(s1)\n  diff.hs0.w(¬ ∀(s0, s0 = s1))\n  diff.hs0.w((s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["mpi","ax6ev","exlimdv","syl6mpi","dveeq2","ax12v","imim12d","sps","imim2d","al2imi","imim1d","equeuclr","diff.hs0.s","diff.hs0.w","diffss.ex"],"children":["ax12","ax12b","equs5","ax12vALT","bj-ax12v3ALT"]},{"name":"axc15OLD","content":"Obsolete proof of ~ axc15 as of 26-Mar-2023. (Contributed by NM, 2-Feb-2007.) (Proof shortened by Wolf Lammen, 21-Apr-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm axc15OLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n} = {\n  mpi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wex(hs0, wceq(cv(hs0), cv(s1))))\n  ax6ev(hs0, s1)\n  exlimdv(hs0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(hs0), cv(s1)), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n  syl6(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(hs0), cv(s1)), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wal(s0, wceq(cv(hs0), cv(s1))))\n  dveeq2(s0, s1, hs0)\n  mpbii(wal(s0, wceq(cv(hs0), cv(s1))), wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wi(wceq(cv(s0), cv(hs0)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(hs0)), w0)))))\n  ax12v(s0, hs0, w0)\n  imbi12d(wal(s0, wceq(cv(hs0), cv(s1))), wceq(cv(s0), cv(hs0)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(hs0)), w0))), wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  imbi2d(wal(s0, wceq(cv(hs0), cv(s1))), w0, wal(s0, wi(wceq(cv(s0), cv(hs0)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  albid(s0, wal(s0, wceq(cv(hs0), cv(s1))), wi(wceq(cv(s0), cv(hs0)), w0), wi(wceq(cv(s0), cv(s1)), w0))\n  nfa1(s0, wceq(cv(hs0), cv(s1)))\n  imbi1d(wal(s0, wceq(cv(hs0), cv(s1))), wceq(cv(s0), cv(hs0)), w0, wceq(cv(s0), cv(s1)))\n  sps(s0, wceq(cv(hs0), cv(s1)), wb(wceq(cv(s0), cv(hs0)), wceq(cv(s0), cv(s1))))\n  equequ2(hs0, s1, s0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wn(wal(s0, wceq(cv(s0), cv(s1)))))\n  diff.hs0.w(wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm axc15OLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))))\n} = {\n  mpi(¬ ∀(s0, s0 = s1), (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))), ∃(hs0, hs0 = s1))\n  ax6ev(hs0, s1)\n  exlimdv(hs0, ¬ ∀(s0, s0 = s1), hs0 = s1, (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))))\n  syl6(¬ ∀(s0, s0 = s1), hs0 = s1, (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))), ∀(s0, hs0 = s1))\n  dveeq2(s0, s1, hs0)\n  mpbii(∀(s0, hs0 = s1), (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))), (s0 = hs0 →(w0 → ∀(s0,(s0 = hs0 → w0)))))\n  ax12v(s0, hs0, w0)\n  imbi12d(∀(s0, hs0 = s1), s0 = hs0, (w0 → ∀(s0,(s0 = hs0 → w0))), s0 = s1, (w0 → ∀(s0,(s0 = s1 → w0))))\n  imbi2d(∀(s0, hs0 = s1), w0, ∀(s0,(s0 = hs0 → w0)), ∀(s0,(s0 = s1 → w0)))\n  albid(s0, ∀(s0, hs0 = s1), (s0 = hs0 → w0), (s0 = s1 → w0))\n  nfa1(s0, hs0 = s1)\n  imbi1d(∀(s0, hs0 = s1), s0 = hs0, w0, s0 = s1)\n  sps(s0, hs0 = s1, (s0 = hs0 ↔ s0 = s1))\n  equequ2(hs0, s1, s0)\n  diff.hs0.s(s1)\n  diff.hs0.w(¬ ∀(s0, s0 = s1))\n  diff.hs0.w((s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["mpi","ax6ev","exlimdv","syl6","dveeq2","mpbii","ax12v","imbi12d","imbi2d","albid","nfa1","imbi1d","sps","equequ2","diff.hs0.s","diff.hs0.w","diffss.ex"],"children":[]},{"name":"ax12","content":"Rederivation of axiom ~ ax-12 from ~ ax12v (used only via ~ sp ) , ~ axc11r , and ~ axc15 (on top of Tarski's FOL). (Contributed by NM, 22-Jan-2007.) Proof uses contemporary axioms. (Revised by Wolf Lammen, 8-Aug-2020.) (Proof shortened by BJ, 4-Jul-2021.)","origin":"thm ax12(setvar s0, setvar s1, wff w0) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wal(s1, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n} = {\n  pm2.61i(wi(wceq(cv(s0), cv(s1)), wi(wal(s1, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wal(s0, wceq(cv(s0), cv(s1))))\n  a1d(wal(s0, wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(s1)), wi(wal(s1, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  syl6(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(s0, w0))\n  axc11r(s0, s1, w0)\n  ala1(s0, w0, wceq(cv(s0), cv(s1)))\n  syl7(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1)), wal(s1, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w0)\n  sp(s1, w0)\n  axc15(s0, s1, w0)\n}","pretty":"thm ax12(setvar s0, setvar s1, wff w0) {\n  ⊢ (s0 = s1 →(∀(s1, w0)→ ∀(s0,(s0 = s1 → w0))))\n} = {\n  pm2.61i((s0 = s1 →(∀(s1, w0)→ ∀(s0,(s0 = s1 → w0)))), ∀(s0, s0 = s1))\n  a1d(∀(s0, s0 = s1), s0 = s1, (∀(s1, w0)→ ∀(s0,(s0 = s1 → w0))))\n  syl6(∀(s0, s0 = s1), ∀(s1, w0), ∀(s0,(s0 = s1 → w0)), ∀(s0, w0))\n  axc11r(s0, s1, w0)\n  ala1(s0, w0, s0 = s1)\n  syl7(¬ ∀(s0, s0 = s1), s0 = s1, ∀(s1, w0), ∀(s0,(s0 = s1 → w0)), w0)\n  sp(s1, w0)\n  axc15(s0, s1, w0)\n}","parent":["pm2.61i","a1d","syl6","axc11r","ala1","syl7","sp","axc15"],"children":["equs5a","equs5e","bj-ax12v3","axc11-o"]},{"name":"ax12b","content":"A bidirectional version of ~ axc15 . (Contributed by NM, 30-Jun-2006.)","origin":"thm ax12b(setvar s0, setvar s1, wff w0) {\n  |- wi(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1))), wb(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n} = {\n  impbid(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1))), w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  imp(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  axc15(s0, s1, w0)\n  adantl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1)), wi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w0))\n  com12(wceq(cv(s0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w0)\n  sp(s0, wi(wceq(cv(s0), cv(s1)), w0))\n}","pretty":"thm ax12b(setvar s0, setvar s1, wff w0) {\n  ⊢ ((¬ ∀(s0, s0 = s1)∧ s0 = s1)→(w0 ↔ ∀(s0,(s0 = s1 → w0))))\n} = {\n  impbid((¬ ∀(s0, s0 = s1)∧ s0 = s1), w0, ∀(s0,(s0 = s1 → w0)))\n  imp(¬ ∀(s0, s0 = s1), s0 = s1, (w0 → ∀(s0,(s0 = s1 → w0))))\n  axc15(s0, s1, w0)\n  adantl(¬ ∀(s0, s0 = s1), s0 = s1, (∀(s0,(s0 = s1 → w0))→ w0))\n  com12(s0 = s1, ∀(s0,(s0 = s1 → w0)), w0)\n  sp(s0, (s0 = s1 → w0))\n}","parent":["impbid","imp","axc15","adantl","com12","sp"],"children":[]},{"name":"ax13ALT","content":"Alternate proof of ~ ax13 from FOL, ~ sp , and ~ axc9 . (Contributed by NM, 21-Dec-2015.) (Proof shortened by Wolf Lammen, 31-Jan-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm ax13ALT(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))\n} = {\n  mpbir(wi(wn(wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2))))), wi(wn(wceq(cv(s0), cv(s1))), wi(wn(wceq(cv(s0), cv(s2))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))))))\n  syl2im(wn(wceq(cv(s0), cv(s1))), wn(wceq(cv(s0), cv(s2))), wi(wceq(cv(s1), cv(s2)), wal(s0, wceq(cv(s1), cv(s2)))), wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))))\n  con3i(wceq(cv(s0), cv(s1)), wal(s0, wceq(cv(s0), cv(s1))))\n  sp(s0, wceq(cv(s0), cv(s1)))\n  con3i(wceq(cv(s0), cv(s2)), wal(s0, wceq(cv(s0), cv(s2))))\n  sp(s0, wceq(cv(s0), cv(s2)))\n  axc9(s0, s1, s2)\n  ax13b(s0, s1, s2, wal(s0, wceq(cv(s1), cv(s2))))\n}","pretty":"thm ax13ALT(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2)))\n} = {\n  mpbir((¬ s0 = s1 →(s1 = s2 → ∀(s0, s1 = s2))), (¬ s0 = s1 →(¬ s0 = s2 →(s1 = s2 → ∀(s0, s1 = s2)))))\n  syl2im(¬ s0 = s1, ¬ s0 = s2, (s1 = s2 → ∀(s0, s1 = s2)), ¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2))\n  con3i(s0 = s1, ∀(s0, s0 = s1))\n  sp(s0, s0 = s1)\n  con3i(s0 = s2, ∀(s0, s0 = s2))\n  sp(s0, s0 = s2)\n  axc9(s0, s1, s2)\n  ax13b(s0, s1, s2, ∀(s0, s1 = s2))\n}","parent":["mpbir","syl2im","con3i","sp","axc9","ax13b"],"children":[]},{"name":"axc11n","content":"Derive set.mm's original ~ ax-c11n from others. Commutation law for identical variable specifiers. The antecedent and consequent are true when ` x ` and ` y ` are substituted with the same variable. Lemma L12 in [Megill] p. 445 (p. 12 of the preprint). If a disjoint variable condition is added on ` x ` and ` y ` , then this becomes an instance of ~ aevlem . Use ~ aecom instead when this does not lengthen the proof. (Contributed by NM, 10-May-1993.) (Revised by NM, 7-Nov-2015.) (Proof shortened by Wolf Lammen, 6-Mar-2018.) (Revised by Wolf Lammen, 30-Nov-2019.) (Proof shortened by BJ, 29-Mar-2021.) (Proof shortened by Wolf Lammen, 2-Jul-2021.)","origin":"thm axc11n(setvar s0, setvar s1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s1), cv(s0))))\n} = {\n  pm2.18d(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s1), cv(s0))))\n  exlimiiv(hs0, wi(wal(s0, wceq(cv(s0), cv(s1))), wi(wn(wal(s1, wceq(cv(s1), cv(s0)))), wal(s1, wceq(cv(s1), cv(s0))))), wceq(cv(s0), cv(hs0)))\n  syl9(wceq(cv(s0), cv(hs0)), wal(s0, wceq(cv(s0), cv(s1))), wn(wal(s1, wceq(cv(s1), cv(s0)))), wal(s1, wceq(cv(s1), cv(s0))), wal(s1, wceq(cv(s0), cv(hs0))))\n  com12(wceq(cv(s0), cv(hs0)), wn(wal(s1, wceq(cv(s1), cv(s0)))), wal(s1, wceq(cv(s0), cv(hs0))))\n  dveeq1(s1, s0, hs0)\n  syl6(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s0), cv(hs0))), wal(s1, wceq(cv(s1), cv(s0))), wal(s0, wceq(cv(s0), cv(hs0))))\n  axc11r(s0, s1, wceq(cv(s0), cv(hs0)))\n  aev(s0, hs0, s1, s1, s0)\n  ax6evr(hs0, s0)\n  diff.hs0.w(wi(wal(s0, wceq(cv(s0), cv(s1))), wi(wn(wal(s1, wceq(cv(s1), cv(s0)))), wal(s1, wceq(cv(s1), cv(s0))))))\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm axc11n(setvar s0, setvar s1) {\n  ⊢ (∀(s0, s0 = s1)→ ∀(s1, s1 = s0))\n} = {\n  pm2.18d(∀(s0, s0 = s1), ∀(s1, s1 = s0))\n  exlimiiv(hs0, (∀(s0, s0 = s1)→(¬ ∀(s1, s1 = s0)→ ∀(s1, s1 = s0))), s0 = hs0)\n  syl9(s0 = hs0, ∀(s0, s0 = s1), ¬ ∀(s1, s1 = s0), ∀(s1, s1 = s0), ∀(s1, s0 = hs0))\n  com12(s0 = hs0, ¬ ∀(s1, s1 = s0), ∀(s1, s0 = hs0))\n  dveeq1(s1, s0, hs0)\n  syl6(∀(s0, s0 = s1), ∀(s1, s0 = hs0), ∀(s1, s1 = s0), ∀(s0, s0 = hs0))\n  axc11r(s0, s1, s0 = hs0)\n  aev(s0, hs0, s1, s1, s0)\n  ax6evr(hs0, s0)\n  diff.hs0.w((∀(s0, s0 = s1)→(¬ ∀(s1, s1 = s0)→ ∀(s1, s1 = s0))))\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["pm2.18d","exlimiiv","syl9","com12","dveeq1","syl6","axc11r","aev","ax6evr","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":["aecom","axi10","wl-hbae1","wl-ax11-lem3","wl-ax11-lem8","2sb5ndVD","e2ebindVD","e2ebindALT","2sb5ndALT"]},{"name":"aecom","content":"Commutation law for identical variable specifiers. Both sides of the biconditional are true when ` x ` and ` y ` are substituted with the same variable. (Contributed by NM, 10-May-1993.) Change to a biconditional. (Revised by BJ, 26-Sep-2019.)","origin":"thm aecom(setvar s0, setvar s1) {\n  |- wb(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s1), cv(s0))))\n} = {\n  impbii(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s1), cv(s0))))\n  axc11n(s0, s1)\n  axc11n(s1, s0)\n}","pretty":"thm aecom(setvar s0, setvar s1) {\n  ⊢ (∀(s0, s0 = s1)↔ ∀(s1, s1 = s0))\n} = {\n  impbii(∀(s0, s0 = s1), ∀(s1, s1 = s0))\n  axc11n(s0, s1)\n  axc11n(s1, s0)\n}","parent":["impbii","axc11n"],"children":["aecoms","naecoms","wl-nfae1"]},{"name":"aecoms","content":"A commutation rule for identical variable specifiers. (Contributed by NM, 10-May-1993.)","origin":"thm aecoms(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), w0)\n  -| wi(wal(s1, wceq(cv(s1), cv(s0))), w0)\n} = {\n  sylbi(wal(s0, wceq(cv(s0), cv(s1))), w0, wal(s1, wceq(cv(s1), cv(s0))))\n  aecom(s0, s1)\n}","pretty":"thm aecoms(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→ w0)\n  ⊣ (∀(s1, s1 = s0)→ w0)\n} = {\n  sylbi(∀(s0, s0 = s1), w0, ∀(s1, s1 = s0))\n  aecom(s0, s1)\n}","parent":["sylbi","aecom"],"children":["axc11","nd4","axrepnd","axpownd","axregnd","axinfnd","axacndlem5","axacnd","wl-ax11-lem1","wl-ax11-lem3","wl-ax11-lem9","wl-ax11-lem10","e2ebind"]},{"name":"naecoms","content":"A commutation rule for distinct variable specifiers. (Contributed by NM, 2-Jan-2002.)","origin":"thm naecoms(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), w0)\n  -| wi(wn(wal(s1, wceq(cv(s1), cv(s0)))), w0)\n} = {\n  sylnbir(wal(s0, wceq(cv(s0), cv(s1))), w0, wal(s1, wceq(cv(s1), cv(s0))))\n  aecom(s1, s0)\n}","pretty":"thm naecoms(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ w0)\n  ⊣ (¬ ∀(s1, s1 = s0)→ w0)\n} = {\n  sylnbir(∀(s0, s0 = s1), w0, ∀(s1, s1 = s0))\n  aecom(s1, s0)\n}","parent":["sylnbir","aecom"],"children":["sb9","eujustALT","nfcvf2","axpowndlem2","wl-sbcom2d","wl-mo2df","wl-eudf"]},{"name":"axc11","content":"Show that ~ ax-c11 can be derived from ~ ax-c11n in the form of ~ axc11n . Normally, ~ axc11 should be used rather than ~ ax-c11 , except by theorems specifically studying the latter's properties. (Contributed by NM, 16-May-2008.) (Proof shortened by Wolf Lammen, 21-Apr-2018.)","origin":"thm axc11(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wi(wal(s0, w0), wal(s1, w0)))\n} = {\n  aecoms(s0, s1, wi(wal(s0, w0), wal(s1, w0)))\n  axc11r(s1, s0, w0)\n}","pretty":"thm axc11(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→(∀(s0, w0)→ ∀(s1, w0)))\n} = {\n  aecoms(s0, s1, (∀(s0, w0)→ ∀(s1, w0)))\n  axc11r(s1, s0, w0)\n}","parent":["aecoms","axc11r"],"children":["hbae","dral1","dral1ALT","nd1","nd2","axc11n11","bj-hbaeb2","wl-aetr","ax6e2eq","ax6e2eqVD","2sb5ndVD","2sb5ndALT"]},{"name":"hbae","content":"All variables are effectively bound in an identical variable specifier. (Contributed by NM, 13-May-1993.) (Proof shortened by Wolf Lammen, 21-Apr-2018.)","origin":"thm hbae(setvar s0, setvar s1, setvar s2) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s0, wceq(cv(s0), cv(s1)))))\n} = {\n  syl(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wal(s0, wceq(cv(s0), cv(s1)))), wal(s0, wal(s2, wceq(cv(s0), cv(s1)))))\n  axc4i(s0, wceq(cv(s0), cv(s1)), wal(s2, wceq(cv(s0), cv(s1))))\n  pm2.61ii(wi(wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wceq(cv(s0), cv(s1)))), wal(s2, wceq(cv(s2), cv(s0))), wal(s2, wceq(cv(s2), cv(s1))))\n  syl7(wn(wal(s2, wceq(cv(s2), cv(s0)))), wn(wal(s2, wceq(cv(s2), cv(s1)))), wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(s1)))\n  sp(s0, wceq(cv(s0), cv(s1)))\n  axc9(s2, s0, s1)\n  axc11r(s2, s0, wceq(cv(s0), cv(s1)))\n  syl5(wal(s2, wceq(cv(s2), cv(s1))), wal(s0, wceq(cv(s0), cv(s1))), wal(s2, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s0), cv(s1))))\n  pm2.43i(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, wceq(cv(s0), cv(s1))))\n  axc11(s0, s1, wceq(cv(s0), cv(s1)))\n  axc11r(s2, s1, wceq(cv(s0), cv(s1)))\n  ax-11(s0, s2, wceq(cv(s0), cv(s1)))\n}","pretty":"thm hbae(setvar s0, setvar s1, setvar s2) {\n  ⊢ (∀(s0, s0 = s1)→ ∀(s2, ∀(s0, s0 = s1)))\n} = {\n  syl(∀(s0, s0 = s1), ∀(s2, ∀(s0, s0 = s1)), ∀(s0, ∀(s2, s0 = s1)))\n  axc4i(s0, s0 = s1, ∀(s2, s0 = s1))\n  pm2.61ii((∀(s0, s0 = s1)→ ∀(s2, s0 = s1)), ∀(s2, s2 = s0), ∀(s2, s2 = s1))\n  syl7(¬ ∀(s2, s2 = s0), ¬ ∀(s2, s2 = s1), ∀(s0, s0 = s1), ∀(s2, s0 = s1), s0 = s1)\n  sp(s0, s0 = s1)\n  axc9(s2, s0, s1)\n  axc11r(s2, s0, s0 = s1)\n  syl5(∀(s2, s2 = s1), ∀(s0, s0 = s1), ∀(s2, s0 = s1), ∀(s1, s0 = s1))\n  pm2.43i(∀(s0, s0 = s1), ∀(s1, s0 = s1))\n  axc11(s0, s1, s0 = s1)\n  axc11r(s2, s1, s0 = s1)\n  ax-11(s0, s2, s0 = s1)\n}","parent":["syl","axc4i","pm2.61ii","syl7","sp","axc9","axc11r","syl5","pm2.43i","axc11","ax-11"],"children":["nfae","hbnae","ax6e2eq"]},{"name":"nfae","content":"All variables are effectively bound in an identical variable specifier. (Contributed by Mario Carneiro, 11-Aug-2016.)","origin":"thm nfae(setvar s0, setvar s1, setvar s2) {\n  |- wnf(s0, wal(s1, wceq(cv(s1), cv(s2))))\n} = {\n  nf5i(s0, wal(s1, wceq(cv(s1), cv(s2))))\n  hbae(s1, s2, s0)\n}","pretty":"thm nfae(setvar s0, setvar s1, setvar s2) {\n  ⊢ F/(s0, ∀(s1, s1 = s2))\n} = {\n  nf5i(s0, ∀(s1, s1 = s2))\n  hbae(s1, s2, s0)\n}","parent":["nf5i","hbae"],"children":["nfnae","axc16nfALT","dral2","drex2","drnf2","sbequ5","2ax6elem","sbco3","sbal","euaeOLD","axi12OLD","axbnd","axrepnd","axunnd","axpowndlem3","axpownd","axregndlem1","axregnd","axacndlem1","axacndlem2","axacndlem3","axacndlem4","axacndlem5","axacnd"]},{"name":"hbnae","content":"All variables are effectively bound in a distinct variable specifier. A version with a distinct variable condition based on fewer axioms is ~ hbnaev . Lemma L19 in [Megill] p. 446 (p. 14 of the preprint). (Contributed by NM, 13-May-1993.)","origin":"thm hbnae(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wal(s2, wn(wal(s0, wceq(cv(s0), cv(s1))))))\n} = {\n  hbn(s2, wal(s0, wceq(cv(s0), cv(s1))))\n  hbae(s0, s1, s2)\n}","pretty":"thm hbnae(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ ∀(s2, ¬ ∀(s0, s0 = s1)))\n} = {\n  hbn(s2, ∀(s0, s0 = s1))\n  hbae(s0, s1, s2)\n}","parent":["hbn","hbae"],"children":["hbnaes","eujustALT","bj-hbnaeb","ax6e2nd","ax6e2ndVD","ax6e2ndeqVD","ax6e2ndALT","ax6e2ndeqALT"]},{"name":"nfnae","content":"All variables are effectively bound in a distinct variable specifier. (Contributed by Mario Carneiro, 11-Aug-2016.)","origin":"thm nfnae(setvar s0, setvar s1, setvar s2) {\n  |- wnf(s0, wn(wal(s1, wceq(cv(s1), cv(s2)))))\n} = {\n  nfn(s0, wal(s1, wceq(cv(s1), cv(s2))))\n  nfae(s0, s1, s2)\n}","pretty":"thm nfnae(setvar s0, setvar s1, setvar s2) {\n  ⊢ F/(s0, ¬ ∀(s1, s1 = s2))\n} = {\n  nfn(s0, ∀(s1, s1 = s2))\n  nfae(s0, s1, s2)\n}","parent":["nfn","nfae"],"children":["nfald2","dvelimf","sbequ6","2ax6elem","nfsb4t","sbco2","sbco3","sb9","sbal1","sbal2","sbal2OLD","nfsb4tALT","sbco2ALT","axbndOLD","nfabd2","nfabd2OLD","ralcom2","dfid3","nfriotad","axextnd","axrepndlem1","axrepndlem2","axrepnd","axunndlem1","axunnd","axpowndlem2","axpowndlem3","axpowndlem4","axpownd","axregndlem2","axregnd","axinfndlem1","axinfnd","axacndlem4","axacndlem5","axacnd","axextdist","axext4dist","distel","wl-cbvalnaed","wl-2sb6d","wl-sbalnae","wl-mo2df","wl-mo2tf","wl-eudf","wl-eutf","ax6e2ndeq","ax6e2ndeqVD"]},{"name":"hbnaes","content":"Rule that applies ~ hbnae to antecedent. (Contributed by NM, 15-May-1993.)","origin":"thm hbnaes(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), w0)\n  -| wi(wal(s2, wn(wal(s0, wceq(cv(s0), cv(s1))))), w0)\n} = {\n  syl(wn(wal(s0, wceq(cv(s0), cv(s1)))), w0, wal(s2, wn(wal(s0, wceq(cv(s0), cv(s1))))))\n  hbnae(s0, s1, s2)\n}","pretty":"thm hbnaes(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ w0)\n  ⊣ (∀(s2, ¬ ∀(s0, s0 = s1))→ w0)\n} = {\n  syl(¬ ∀(s0, s0 = s1), w0, ∀(s2, ¬ ∀(s0, s0 = s1)))\n  hbnae(s0, s1, s2)\n}","parent":["syl","hbnae"],"children":[]},{"name":"axc16i","content":"Inference with ~ axc16 as its conclusion. (Contributed by NM, 20-May-2008.) (Proof modification is discouraged.)","origin":"thm axc16i(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wi(w0, wal(s0, w0)))\n  -| wi(wceq(cv(s0), cv(s2)), wb(w0, w1))\n  -| wi(w1, wal(s0, w1))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsw(s2, w0)\n} = {\n  3syl(wal(s0, wceq(cv(s0), cv(s1))), wi(w0, wal(s0, w0)), wal(s2, wceq(cv(s2), cv(s1))), wal(s2, wceq(cv(s0), cv(s2))))\n  cbv3(s0, s2, wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s1)))\n  nfv(s2, wceq(cv(s0), cv(s1)))\n  nfv(s0, wceq(cv(s2), cv(s1)))\n  ax7(s0, s2, s1)\n  syl(wal(s2, wceq(cv(s2), cv(s1))), wal(s2, wceq(cv(s0), cv(s2))), wal(s2, wceq(cv(s2), cv(s0))))\n  mpcom(wal(s2, wceq(cv(s2), cv(s1))), wal(s2, wceq(cv(s2), cv(s0))), wceq(cv(s0), cv(s1)))\n  spimvw(s2, s0, wceq(cv(s2), cv(s1)), wceq(cv(s0), cv(s1)))\n  ax7(s2, s0, s1)\n  alimdv(s2, wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s1)), wceq(cv(s2), cv(s0)))\n  syl5com(wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s1)), wceq(cv(s2), cv(s0)), wceq(cv(s1), cv(s0)))\n  equcomi(s0, s1)\n  syl(wceq(cv(s2), cv(s1)), wi(wceq(cv(s1), cv(s0)), wceq(cv(s2), cv(s0))), wceq(cv(s1), cv(s2)))\n  equcomi(s2, s1)\n  ax7(s1, s2, s0)\n  alimi(s2, wceq(cv(s2), cv(s0)), wceq(cv(s0), cv(s2)))\n  syl6com(wal(s2, wceq(cv(s0), cv(s2))), w0, wal(s0, w0), wal(s2, w1))\n  alimdv(s2, w0, wceq(cv(s0), cv(s2)), w1)\n  biimpcd(w0, wceq(cv(s0), cv(s2)), w1)\n  cbv3(s2, s0, w1, w0)\n  nf5i(s0, w1)\n  nfv(s2, w0)\n  syl(wceq(cv(s2), cv(s0)), wi(w1, w0), wceq(cv(s0), cv(s2)))\n  equcomi(s2, s0)\n  biimprd(wceq(cv(s0), cv(s2)), w1, w0)\n  diff.wceq.s(s2, cv(s0), cv(s1))\n  diff.cv.s(s2, s0)\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n  diff.wceq.s(s0, cv(s2), cv(s1))\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, s1)\n  diffss.ex(s2, s0)\n}","pretty":"thm axc16i(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n  ⊣ (s0 = s2 →(w0 ↔ w1))\n  ⊣ (w1 → ∀(s0, w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s2, w0)\n} = {\n  3syl(∀(s0, s0 = s1), (w0 → ∀(s0, w0)), ∀(s2, s2 = s1), ∀(s2, s0 = s2))\n  cbv3(s0, s2, s0 = s1, s2 = s1)\n  nfv(s2, s0 = s1)\n  nfv(s0, s2 = s1)\n  ax7(s0, s2, s1)\n  syl(∀(s2, s2 = s1), ∀(s2, s0 = s2), ∀(s2, s2 = s0))\n  mpcom(∀(s2, s2 = s1), ∀(s2, s2 = s0), s0 = s1)\n  spimvw(s2, s0, s2 = s1, s0 = s1)\n  ax7(s2, s0, s1)\n  alimdv(s2, s0 = s1, s2 = s1, s2 = s0)\n  syl5com(s0 = s1, s2 = s1, s2 = s0, s1 = s0)\n  equcomi(s0, s1)\n  syl(s2 = s1, (s1 = s0 → s2 = s0), s1 = s2)\n  equcomi(s2, s1)\n  ax7(s1, s2, s0)\n  alimi(s2, s2 = s0, s0 = s2)\n  syl6com(∀(s2, s0 = s2), w0, ∀(s0, w0), ∀(s2, w1))\n  alimdv(s2, w0, s0 = s2, w1)\n  biimpcd(w0, s0 = s2, w1)\n  cbv3(s2, s0, w1, w0)\n  nf5i(s0, w1)\n  nfv(s2, w0)\n  syl(s2 = s0, (w1 → w0), s0 = s2)\n  equcomi(s2, s0)\n  biimprd(s0 = s2, w1, w0)\n  diff.wceq.s(s2, s0, s1)\n  diff.cv.s(s2, s0)\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n  diff.wceq.s(s0, s2, s1)\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, s1)\n  diffss.ex(s2, s0)\n}","parent":["3syl","cbv3","nfv","ax7","syl","mpcom","spimvw","alimdv","syl5com","equcomi","alimi","syl6com","biimpcd","nf5i","biimprd","diff.wceq.s","diff.cv.s","diffss.ex"],"children":["axc16ALT"]},{"name":"axc16nfALT","content":"Alternate proof of ~ axc16nf , shorter but requiring ~ ax-11 and ~ ax-13 . (Contributed by Mario Carneiro, 7-Oct-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm axc16nfALT(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wnf(s2, w0))\n  -| diffss(s0, s1)\n} = {\n  nf5d(s2, wal(s0, wceq(cv(s0), cv(s1))), w0)\n  nfae(s2, s0, s1)\n  axc16g(s0, s1, s2, w0)\n}","pretty":"thm axc16nfALT(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→ F/(s2, w0))\n  ⊣ d(s0, s1)\n} = {\n  nf5d(s2, ∀(s0, s0 = s1), w0)\n  nfae(s2, s0, s1)\n  axc16g(s0, s1, s2, w0)\n}","parent":["nf5d","nfae","axc16g"],"children":[]},{"name":"dral2","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). (Contributed by NM, 27-Feb-2005.) Allow a shortening of ~ dral1 . (Revised by Wolf Lammen, 4-Mar-2018.)","origin":"thm dral2(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wal(s2, w0), wal(s2, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  albid(s2, wal(s0, wceq(cv(s0), cv(s1))), w0, w1)\n  nfae(s2, s0, s1)\n}","pretty":"thm dral2(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(∀(s2, w0)↔ ∀(s2, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  albid(s2, ∀(s0, s0 = s1), w0, w1)\n  nfae(s2, s0, s1)\n}","parent":["albid","nfae"],"children":["dral1ALT","sbal1","sbal2","sbal2OLD","drnfc1OLD","axpownd","wl-sbalnae"]},{"name":"dral1","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). (Contributed by NM, 24-Nov-1994.) Remove dependency on ~ ax-11 . (Revised by Wolf Lammen, 6-Sep-2018.)","origin":"thm dral1(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wal(s0, w0), wal(s1, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  bitrd(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, w0), wal(s1, w1), wal(s0, w1))\n  albid(s0, wal(s0, wceq(cv(s0), cv(s1))), w0, w1)\n  nfa1(s0, wceq(cv(s0), cv(s1)))\n  impbid(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, w1), wal(s1, w1))\n  axc11(s0, s1, w1)\n  axc11r(s0, s1, w1)\n}","pretty":"thm dral1(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(∀(s0, w0)↔ ∀(s1, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  bitrd(∀(s0, s0 = s1), ∀(s0, w0), ∀(s1, w1), ∀(s0, w1))\n  albid(s0, ∀(s0, s0 = s1), w0, w1)\n  nfa1(s0, s0 = s1)\n  impbid(∀(s0, s0 = s1), ∀(s0, w1), ∀(s1, w1))\n  axc11(s0, s1, w1)\n  axc11r(s0, s1, w1)\n}","parent":["bitrd","albid","nfa1","impbid","axc11","axc11r"],"children":["drex1","drnf1","axc16gALT","sb9","ralcom2","axpownd","wl-dral1d","wl-ax11-lem5","wl-ax11-lem8","wl-ax11-lem9"]},{"name":"dral1ALT","content":"Alternate proof of ~ dral1 , shorter but requiring ~ ax-11 . (Contributed by NM, 24-Nov-1994.) (Proof shortened by Wolf Lammen, 22-Apr-2018.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm dral1ALT(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wal(s0, w0), wal(s1, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  bitrd(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, w0), wal(s1, w1), wal(s0, w1))\n  dral2(s0, s1, s0, w0, w1)\n  impbid(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, w1), wal(s1, w1))\n  axc11(s0, s1, w1)\n  axc11r(s0, s1, w1)\n}","pretty":"thm dral1ALT(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(∀(s0, w0)↔ ∀(s1, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  bitrd(∀(s0, s0 = s1), ∀(s0, w0), ∀(s1, w1), ∀(s0, w1))\n  dral2(s0, s1, s0, w0, w1)\n  impbid(∀(s0, s0 = s1), ∀(s0, w1), ∀(s1, w1))\n  axc11(s0, s1, w1)\n  axc11r(s0, s1, w1)\n}","parent":["bitrd","dral2","impbid","axc11","axc11r"],"children":[]},{"name":"drex1","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). (Contributed by NM, 27-Feb-2005.)","origin":"thm drex1(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wex(s0, w0), wex(s1, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  3bitr4g(wal(s0, wceq(cv(s0), cv(s1))), wex(s0, w0), wex(s1, w1), wn(wal(s0, wn(w0))), wn(wal(s1, wn(w1))))\n  notbid(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, wn(w0)), wal(s1, wn(w1)))\n  dral1(s0, s1, wn(w0), wn(w1))\n  notbid(wal(s0, wceq(cv(s0), cv(s1))), w0, w1)\n  df-ex(s0, w0)\n  df-ex(s1, w1)\n}","pretty":"thm drex1(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(∃(s0, w0)↔ ∃(s1, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  3bitr4g(∀(s0, s0 = s1), ∃(s0, w0), ∃(s1, w1), ¬ ∀(s0, ¬ w0), ¬ ∀(s1, ¬ w1))\n  notbid(∀(s0, s0 = s1), ∀(s0, ¬ w0), ∀(s1, ¬ w1))\n  dral1(s0, s1, ¬ w0, ¬ w1)\n  notbid(∀(s0, s0 = s1), w0, w1)\n  df-ex(s0, w0)\n  df-ex(s1, w1)\n}","parent":["3bitr4g","notbid","dral1","df-ex"],"children":["exdistrf","drsb1","eujustALT","copsexg","dfid3","dropab1","dropab2","e2ebind","e2ebindVD","e2ebindALT"]},{"name":"drex2","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). (Contributed by NM, 27-Feb-2005.)","origin":"thm drex2(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wex(s2, w0), wex(s2, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  exbid(s2, wal(s0, wceq(cv(s0), cv(s1))), w0, w1)\n  nfae(s2, s0, s1)\n}","pretty":"thm drex2(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(∃(s2, w0)↔ ∃(s2, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  exbid(s2, ∀(s0, s0 = s1), w0, w1)\n  nfae(s2, s0, s1)\n}","parent":["exbid","nfae"],"children":["dfid3","dropab1","dropab2","e2ebind"]},{"name":"drnf1","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. (Contributed by Mario Carneiro, 4-Oct-2016.)","origin":"thm drnf1(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wnf(s0, w0), wnf(s1, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  3bitr4g(wal(s0, wceq(cv(s0), cv(s1))), wnf(s0, w0), wnf(s1, w1), wal(s0, wi(w0, wal(s0, w0))), wal(s1, wi(w1, wal(s1, w1))))\n  dral1(s0, s1, wi(w0, wal(s0, w0)), wi(w1, wal(s1, w1)))\n  imbi12d(wal(s0, wceq(cv(s0), cv(s1))), w0, wal(s0, w0), w1, wal(s1, w1))\n  dral1(s0, s1, w0, w1)\n  nf5(s0, w0)\n  nf5(s1, w1)\n}","pretty":"thm drnf1(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(F/(s0, w0)↔ F/(s1, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  3bitr4g(∀(s0, s0 = s1), F/(s0, w0), F/(s1, w1), ∀(s0,(w0 → ∀(s0, w0))), ∀(s1,(w1 → ∀(s1, w1))))\n  dral1(s0, s1, (w0 → ∀(s0, w0)), (w1 → ∀(s1, w1)))\n  imbi12d(∀(s0, s0 = s1), w0, ∀(s0, w0), w1, ∀(s1, w1))\n  dral1(s0, s1, w0, w1)\n  nf5(s0, w0)\n  nf5(s1, w1)\n}","parent":["3bitr4g","dral1","imbi12d","nf5"],"children":["nfald2","drnfc1","drnfc1OLD","wl-nfs1t"]},{"name":"drnf2","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. (Contributed by Mario Carneiro, 4-Oct-2016.) (Proof shortened by Wolf Lammen, 5-May-2018.)","origin":"thm drnf2(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wnf(s2, w0), wnf(s2, w1)))\n  -| wi(wal(s0, wceq(cv(s0), cv(s1))), wb(w0, w1))\n} = {\n  nfbidf(s2, wal(s0, wceq(cv(s0), cv(s1))), w0, w1)\n  nfae(s2, s0, s1)\n}","pretty":"thm drnf2(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (∀(s0, s0 = s1)→(F/(s2, w0)↔ F/(s2, w1)))\n  ⊣ (∀(s0, s0 = s1)→(w0 ↔ w1))\n} = {\n  nfbidf(s2, ∀(s0, s0 = s1), w0, w1)\n  nfae(s2, s0, s1)\n}","parent":["nfbidf","nfae"],"children":["nfsb4t","nfsb4tALT","drnfc2"]},{"name":"nfald2","content":"Variation on ~ nfald which adds the hypothesis that ` x ` and ` y ` are distinct in the inner subproof. (Contributed by Mario Carneiro, 8-Oct-2016.)","origin":"thm nfald2(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wnf(s0, wal(s1, w1)))\n  -| wnf(s1, w0)\n  -| wi(wa(w0, wn(wal(s0, wceq(cv(s0), cv(s1))))), wnf(s0, w1))\n} = {\n  pm2.61d2(w0, wnf(s0, wal(s1, w1)), wal(s0, wceq(cv(s0), cv(s1))))\n  ex(w0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wal(s1, w1)))\n  nfald(s0, s1, wa(w0, wn(wal(s0, wceq(cv(s0), cv(s1))))), w1)\n  nfan(s1, w0, wn(wal(s0, wceq(cv(s0), cv(s1)))))\n  nfnae(s1, s0, s1)\n  mpbiri(wal(s0, wceq(cv(s0), cv(s1))), wnf(s0, wal(s1, w1)), wnf(s1, wal(s1, w1)))\n  nfa1(s1, w1)\n  drnf1(s0, s1, wal(s1, w1), wal(s1, w1))\n  biidd(wal(s0, wceq(cv(s0), cv(s1))), wal(s1, w1))\n}","pretty":"thm nfald2(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → F/(s0, ∀(s1, w1)))\n  ⊣ F/(s1, w0)\n  ⊣ ((w0 ∧ ¬ ∀(s0, s0 = s1))→ F/(s0, w1))\n} = {\n  pm2.61d2(w0, F/(s0, ∀(s1, w1)), ∀(s0, s0 = s1))\n  ex(w0, ¬ ∀(s0, s0 = s1), F/(s0, ∀(s1, w1)))\n  nfald(s0, s1, (w0 ∧ ¬ ∀(s0, s0 = s1)), w1)\n  nfan(s1, w0, ¬ ∀(s0, s0 = s1))\n  nfnae(s1, s0, s1)\n  mpbiri(∀(s0, s0 = s1), F/(s0, ∀(s1, w1)), F/(s1, ∀(s1, w1)))\n  nfa1(s1, w1)\n  drnf1(s0, s1, ∀(s1, w1), ∀(s1, w1))\n  biidd(∀(s0, s0 = s1), ∀(s1, w1))\n}","parent":["pm2.61d2","ex","nfald","nfan","nfnae","mpbiri","nfa1","drnf1","biidd"],"children":["nfexd2","dvelimf","nfmod2","nfeud2OLD","nfrald","nfiotad","nfixp"]},{"name":"nfexd2","content":"Variation on ~ nfexd which adds the hypothesis that ` x ` and ` y ` are distinct in the inner subproof. (Contributed by Mario Carneiro, 8-Oct-2016.)","origin":"thm nfexd2(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wnf(s0, wex(s1, w1)))\n  -| wnf(s1, w0)\n  -| wi(wa(w0, wn(wal(s0, wceq(cv(s0), cv(s1))))), wnf(s0, w1))\n} = {\n  nfxfrd(s0, w0, wex(s1, w1), wn(wal(s1, wn(w1))))\n  df-ex(s1, w1)\n  nfnd(s0, w0, wal(s1, wn(w1)))\n  nfald2(s0, s1, w0, wn(w1))\n  nfnd(s0, wa(w0, wn(wal(s0, wceq(cv(s0), cv(s1))))), w1)\n}","pretty":"thm nfexd2(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → F/(s0, ∃(s1, w1)))\n  ⊣ F/(s1, w0)\n  ⊣ ((w0 ∧ ¬ ∀(s0, s0 = s1))→ F/(s0, w1))\n} = {\n  nfxfrd(s0, w0, ∃(s1, w1), ¬ ∀(s1, ¬ w1))\n  df-ex(s1, w1)\n  nfnd(s0, w0, ∀(s1, ¬ w1))\n  nfald2(s0, s1, w0, ¬ w1)\n  nfnd(s0, (w0 ∧ ¬ ∀(s0, s0 = s1)), w1)\n}","parent":["nfxfrd","df-ex","nfnd","nfald2"],"children":["nfeud2","nfmod2OLD"]},{"name":"exdistrf","content":"Distribution of existential quantifiers, with a bound-variable hypothesis saying that ` y ` is not free in ` ph ` , but ` x ` can be free in ` ph ` (and there is no distinct variable condition on ` x ` and ` y ` ). (Contributed by Mario Carneiro, 20-Mar-2013.) (Proof shortened by Wolf Lammen, 14-May-2018.)","origin":"thm exdistrf(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wex(s0, wex(s1, wa(w0, w1))), wex(s0, wa(w0, wex(s1, w1))))\n  -| wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s1, w0))\n} = {\n  exlimi(s0, wex(s1, wa(w0, w1)), wex(s0, wa(w0, wex(s1, w1))))\n  nfe1(s0, wa(w0, wex(s1, w1)))\n  pm2.61i(wi(wex(s1, wa(w0, w1)), wex(s0, wa(w0, wex(s1, w1)))), wal(s0, wceq(cv(s0), cv(s1))))\n  syl5ibr(wal(s0, wceq(cv(s0), cv(s1))), wex(s1, wa(w0, w1)), wex(s0, wa(w0, wex(s1, w1))), wex(s1, wa(w0, wex(s1, w1))))\n  eximi(s1, wa(w0, w1), wa(w0, wex(s1, w1)))\n  anim2i(w0, w1, wex(s1, w1))\n  19.8a(s1, w1)\n  drex1(s0, s1, wa(w0, wex(s1, w1)), wa(w0, wex(s1, w1)))\n  biidd(wal(s0, wceq(cv(s0), cv(s1))), wa(w0, wex(s1, w1)))\n  syl56(wn(wal(s0, wceq(cv(s0), cv(s1)))), wex(s1, wa(w0, w1)), wex(s0, wa(w0, wex(s1, w1))), wa(wex(s1, w0), wex(s1, w1)), wa(w0, wex(s1, w1)))\n  19.40(s1, w0, w1)\n  anim1d(wn(wal(s0, wceq(cv(s0), cv(s1)))), wex(s1, w0), wex(s1, w1), w0)\n  19.9d(s1, wn(wal(s0, wceq(cv(s0), cv(s1)))), w0)\n  19.8a(s0, wa(w0, wex(s1, w1)))\n}","pretty":"thm exdistrf(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0, ∃(s1,(w0 ∧ w1)))→ ∃(s0,(w0 ∧ ∃(s1, w1))))\n  ⊣ (¬ ∀(s0, s0 = s1)→ F/(s1, w0))\n} = {\n  exlimi(s0, ∃(s1,(w0 ∧ w1)), ∃(s0,(w0 ∧ ∃(s1, w1))))\n  nfe1(s0, (w0 ∧ ∃(s1, w1)))\n  pm2.61i((∃(s1,(w0 ∧ w1))→ ∃(s0,(w0 ∧ ∃(s1, w1)))), ∀(s0, s0 = s1))\n  syl5ibr(∀(s0, s0 = s1), ∃(s1,(w0 ∧ w1)), ∃(s0,(w0 ∧ ∃(s1, w1))), ∃(s1,(w0 ∧ ∃(s1, w1))))\n  eximi(s1, (w0 ∧ w1), (w0 ∧ ∃(s1, w1)))\n  anim2i(w0, w1, ∃(s1, w1))\n  19.8a(s1, w1)\n  drex1(s0, s1, (w0 ∧ ∃(s1, w1)), (w0 ∧ ∃(s1, w1)))\n  biidd(∀(s0, s0 = s1), (w0 ∧ ∃(s1, w1)))\n  syl56(¬ ∀(s0, s0 = s1), ∃(s1,(w0 ∧ w1)), ∃(s0,(w0 ∧ ∃(s1, w1))), (∃(s1, w0)∧ ∃(s1, w1)), (w0 ∧ ∃(s1, w1)))\n  19.40(s1, w0, w1)\n  anim1d(¬ ∀(s0, s0 = s1), ∃(s1, w0), ∃(s1, w1), w0)\n  19.9d(s1, ¬ ∀(s0, s0 = s1), w0)\n  19.8a(s0, (w0 ∧ ∃(s1, w1)))\n}","parent":["exlimi","nfe1","pm2.61i","syl5ibr","eximi","anim2i","19.8a","drex1","biidd","syl56","19.40","anim1d","19.9d"],"children":["oprabid"]},{"name":"dvelimf","content":"Version of ~ dvelimv without any variable restrictions. (Contributed by NM, 1-Oct-2002.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 11-May-2018.)","origin":"thm dvelimf(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, w0))\n  -| wnf(s0, w1)\n  -| wnf(s2, w0)\n  -| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))\n} = {\n  nfxfrd(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), w0, wal(s2, wi(wceq(cv(s2), cv(s1)), w1)))\n  bicomi(w0, wal(s2, wi(wceq(cv(s2), cv(s1)), w1)))\n  equsal(s2, s1, w1, w0)\n  nfald2(s0, s2, wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s2), cv(s1)), w1))\n  nfnae(s2, s0, s1)\n  nfimd(s0, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s2), cv(s1)), w1)\n  ancoms(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))), wnf(s0, wceq(cv(s2), cv(s1))))\n  nfeqf(s0, s2, s1)\n  a1i(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wnf(s0, w1))\n}","pretty":"thm dvelimf(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0, w0))\n  ⊣ F/(s0, w1)\n  ⊣ F/(s2, w0)\n  ⊣ (s2 = s1 →(w1 ↔ w0))\n} = {\n  nfxfrd(s0, ¬ ∀(s0, s0 = s1), w0, ∀(s2,(s2 = s1 → w1)))\n  bicomi(w0, ∀(s2,(s2 = s1 → w1)))\n  equsal(s2, s1, w1, w0)\n  nfald2(s0, s2, ¬ ∀(s0, s0 = s1), (s2 = s1 → w1))\n  nfnae(s2, s0, s1)\n  nfimd(s0, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s2 = s1, w1)\n  ancoms(¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2), F/(s0, s2 = s1))\n  nfeqf(s0, s2, s1)\n  a1i((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), F/(s0, w1))\n}","parent":["nfxfrd","bicomi","equsal","nfald2","nfnae","nfimd","ancoms","nfeqf","a1i"],"children":["dvelimdf","dvelimh","dvelimnf"]},{"name":"dvelimdf","content":"Deduction form of ~ dvelimf . (Contributed by NM, 7-Apr-2004.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 11-May-2018.)","origin":"thm dvelimdf(setvar s0, setvar s1, setvar s2, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, w1)))\n  -| wnf(s0, w0)\n  -| wnf(s2, w0)\n  -| wi(w0, wnf(s0, w2))\n  -| wi(w0, wnf(s2, w1))\n  -| wi(w0, wi(wceq(cv(s2), cv(s1)), wb(w2, w1)))\n} = {\n  syl5ib(w0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, w1), wnf(s0, wi(w0, w1)))\n  dvelimf(s0, s1, s2, wi(w0, w1), wi(w0, w2))\n  nfim1(s0, w0, w2)\n  nfim1(s2, w0, w1)\n  pm5.74d(wceq(cv(s2), cv(s1)), w0, w2, w1)\n  com12(wceq(cv(s2), cv(s1)), w0, wb(w2, w1))\n  nfbidf(s0, w0, wi(w0, w1), w1)\n  pm5.5(w0, w1)\n}","pretty":"thm dvelimdf(setvar s0, setvar s1, setvar s2, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(¬ ∀(s0, s0 = s1)→ F/(s0, w1)))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s2, w0)\n  ⊣ (w0 → F/(s0, w2))\n  ⊣ (w0 → F/(s2, w1))\n  ⊣ (w0 →(s2 = s1 →(w2 ↔ w1)))\n} = {\n  syl5ib(w0, ¬ ∀(s0, s0 = s1), F/(s0, w1), F/(s0,(w0 → w1)))\n  dvelimf(s0, s1, s2, (w0 → w1), (w0 → w2))\n  nfim1(s0, w0, w2)\n  nfim1(s2, w0, w1)\n  pm5.74d(s2 = s1, w0, w2, w1)\n  com12(s2 = s1, w0, (w2 ↔ w1))\n  nfbidf(s0, w0, (w0 → w1), w1)\n  pm5.5(w0, w1)\n}","parent":["syl5ib","dvelimf","nfim1","pm5.74d","com12","nfbidf","pm5.5"],"children":["nfsb4t","nfsb4tALT","dvelimdc"]},{"name":"dvelimh","content":"Version of ~ dvelim without any variable restrictions. (Contributed by NM, 1-Oct-2002.) (Proof shortened by Wolf Lammen, 11-May-2018.)","origin":"thm dvelimh(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))\n  -| wi(w1, wal(s0, w1))\n  -| wi(w0, wal(s2, w0))\n  -| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))\n} = {\n  nf5rd(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), w0)\n  dvelimf(s0, s1, s2, w0, w1)\n  nf5i(s0, w1)\n  nf5i(s2, w0)\n}","pretty":"thm dvelimh(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n  ⊣ (w1 → ∀(s0, w1))\n  ⊣ (w0 → ∀(s2, w0))\n  ⊣ (s2 = s1 →(w1 ↔ w0))\n} = {\n  nf5rd(s0, ¬ ∀(s0, s0 = s1), w0)\n  dvelimf(s0, s1, s2, w0, w1)\n  nf5i(s0, w1)\n  nf5i(s2, w0)\n}","parent":["nf5rd","dvelimf","nf5i"],"children":["dvelim","dveeq1-o16","dveel2ALT","ax6e2nd","ax6e2ndVD","ax6e2ndALT"]},{"name":"dvelim","content":"This theorem can be used to eliminate a distinct variable restriction on ` x ` and ` z ` and replace it with the \"distinctor\" ` -. A. x x = y ` as an antecedent. ` ph ` normally has ` z ` free and can be read ` ph ( z ) ` , and ` ps ` substitutes ` y ` for ` z ` and can be read ` ph ( y ) ` . We do not require that ` x ` and ` y ` be distinct: if they are not, the distinctor will become false (in multiple-element domains of discourse) and \"protect\" the consequent. To obtain a closed-theorem form of this inference, prefix the hypotheses with ` A. x A. z ` , conjoin them, and apply ~ dvelimdf . Other variants of this theorem are ~ dvelimh (with no distinct variable restrictions) and ~ dvelimhw (that avoids ~ ax-13 ). (Contributed by NM, 23-Nov-1994.)","origin":"thm dvelim(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))\n  -| wi(w1, wal(s0, w1))\n  -| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))\n  -| diffsw(s2, w0)\n} = {\n  dvelimh(s0, s1, s2, w0, w1)\n  ax-5(s2, w0)\n}","pretty":"thm dvelim(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n  ⊣ (w1 → ∀(s0, w1))\n  ⊣ (s2 = s1 →(w1 ↔ w0))\n  ⊣ d(s2, w0)\n} = {\n  dvelimh(s0, s1, s2, w0, w1)\n  ax-5(s2, w0)\n}","parent":["dvelimh","ax-5"],"children":["dvelimv","axc14","eujustALT"]},{"name":"dvelimv","content":"Similar to ~ dvelim with first hypothesis replaced by a distinct variable condition. (Contributed by NM, 25-Jul-2015.) (Proof shortened by Wolf Lammen, 30-Apr-2018.)","origin":"thm dvelimv(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(w0, wal(s0, w0)))\n  -| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))\n  -| diffsw(s0, w1)\n  -| diffsw(s2, w0)\n} = {\n  dvelim(s0, s1, s2, w0, w1)\n  ax-5(s0, w1)\n}","pretty":"thm dvelimv(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n  ⊣ (s2 = s1 →(w1 ↔ w0))\n  ⊣ d(s0, w1)\n  ⊣ d(s2, w0)\n} = {\n  dvelim(s0, s1, s2, w0, w1)\n  ax-5(s0, w1)\n}","parent":["dvelim","ax-5"],"children":["dveeq2ALT","dveel1","dveel2","rgen2a"]},{"name":"dvelimnf","content":"Version of ~ dvelim using \"not free\" notation. (Contributed by Mario Carneiro, 9-Oct-2016.)","origin":"thm dvelimnf(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, w0))\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s2), cv(s1)), wb(w1, w0))\n  -| diffsw(s2, w0)\n} = {\n  dvelimf(s0, s1, s2, w0, w1)\n  nfv(s2, w0)\n}","pretty":"thm dvelimnf(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0, w0))\n  ⊣ F/(s0, w1)\n  ⊣ (s2 = s1 →(w1 ↔ w0))\n  ⊣ d(s2, w0)\n} = {\n  dvelimf(s0, s1, s2, w0, w1)\n  nfv(s2, w0)\n}","parent":["dvelimf","nfv"],"children":["nfcvf","nfrab"]},{"name":"dveeq2ALT","content":"Alternate proof of ~ dveeq2 , shorter but requiring ~ ax-11 . (Contributed by NM, 2-Jan-2002.) (Revised by NM, 20-Jul-2015.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm dveeq2ALT(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s2), cv(s1)), wal(s0, wceq(cv(s2), cv(s1)))))\n  -| diffss(s0, s2)\n} = {\n  dvelimv(s0, s1, hs0, wceq(cv(s2), cv(s1)), wceq(cv(s2), cv(hs0)))\n  equequ2(hs0, s1, s2)\n  diff.wceq.s(s0, cv(s2), cv(hs0))\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(wceq(cv(s2), cv(s1)))\n}","pretty":"thm dveeq2ALT(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s2 = s1 → ∀(s0, s2 = s1)))\n  ⊣ d(s0, s2)\n} = {\n  dvelimv(s0, s1, hs0, s2 = s1, s2 = hs0)\n  equequ2(hs0, s1, s2)\n  diff.wceq.s(s0, s2, hs0)\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(s2 = s1)\n}","parent":["dvelimv","equequ2","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":[]},{"name":"equvini","content":"A variable introduction law for equality. Lemma 15 of [Monk2] p. 109, however we do not require ` z ` to be distinct from ` x ` and ` y ` . See ~ equvinv for a shorter proof requiring fewer axioms when ` z ` is required to be distinct from ` x ` and ` y ` . (Contributed by NM, 10-Jan-1993.) (Proof shortened by Andrew Salmon, 25-May-2011.) (Proof shortened by Wolf Lammen, 15-Sep-2018.)","origin":"thm equvini(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wex(s2, wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1)))))\n} = {\n  pm2.61i(wi(wceq(cv(s0), cv(s1)), wex(s2, wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1))))), wceq(cv(s2), cv(s0)))\n  syl6(wceq(cv(s2), cv(s0)), wceq(cv(s0), cv(s1)), wex(s2, wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1)))), wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1))))\n  syli(wceq(cv(s2), cv(s0)), wceq(cv(s0), cv(s1)), wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1))), wceq(cv(s2), cv(s1)))\n  equtr(s2, s0, s1)\n  19.8a(s2, wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1))))\n  syl6(wn(wceq(cv(s2), cv(s0))), wceq(cv(s0), cv(s1)), wex(s2, wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1)))), wal(s2, wceq(cv(s0), cv(s1))))\n  ax13(s2, s0, s1)\n  19.35i(s2, wceq(cv(s0), cv(s1)), wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1))))\n  eximii(s2, wi(wceq(cv(s0), cv(s1)), wa(wceq(cv(s0), cv(s2)), wceq(cv(s2), cv(s1)))), wceq(cv(s2), cv(s1)))\n  ax6e(s2, s1)\n  anc2ri(wceq(cv(s2), cv(s1)), wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2)))\n  equeuclr(s2, s1, s0)\n}","pretty":"thm equvini(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 → ∃(s2,(s0 = s2 ∧ s2 = s1)))\n} = {\n  pm2.61i((s0 = s1 → ∃(s2,(s0 = s2 ∧ s2 = s1))), s2 = s0)\n  syl6(s2 = s0, s0 = s1, ∃(s2,(s0 = s2 ∧ s2 = s1)), (s0 = s2 ∧ s2 = s1))\n  syli(s2 = s0, s0 = s1, (s0 = s2 ∧ s2 = s1), s2 = s1)\n  equtr(s2, s0, s1)\n  19.8a(s2, (s0 = s2 ∧ s2 = s1))\n  syl6(¬ s2 = s0, s0 = s1, ∃(s2,(s0 = s2 ∧ s2 = s1)), ∀(s2, s0 = s1))\n  ax13(s2, s0, s1)\n  19.35i(s2, s0 = s1, (s0 = s2 ∧ s2 = s1))\n  eximii(s2, (s0 = s1 →(s0 = s2 ∧ s2 = s1)), s2 = s1)\n  ax6e(s2, s1)\n  anc2ri(s2 = s1, s0 = s1, s0 = s2)\n  equeuclr(s2, s1, s0)\n}","parent":["pm2.61i","syl6","syli","equtr","19.8a","ax13","19.35i","eximii","ax6e","anc2ri","equeuclr"],"children":["2ax6elem"]},{"name":"equvel","content":"A variable elimination law for equality with no distinct variable requirements. Compare ~ equvini . (Contributed by NM, 1-Mar-2013.) (Proof shortened by Mario Carneiro, 17-Oct-2016.) (Proof shortened by Wolf Lammen, 15-Jun-2019.)","origin":"thm equvel(setvar s0, setvar s1, setvar s2) {\n  |- wi(wal(s0, wb(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2)))), wceq(cv(s1), cv(s2)))\n} = {\n  sylc(wal(s0, wb(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2)))), wceq(cv(s1), cv(s2)), wb(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s0), cv(s2)))), wex(s0, wceq(cv(s1), cv(s2))))\n  albi(s0, wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2)))\n  19.35i(s0, wb(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2))), wceq(cv(s1), cv(s2)))\n  eximii(s0, wi(wb(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2))), wceq(cv(s1), cv(s2))), wceq(cv(s0), cv(s2)))\n  ax6e(s0, s2)\n  com12(wceq(cv(s0), cv(s2)), wb(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2))), wceq(cv(s1), cv(s2)))\n  syli(wb(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2))), wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s1)))\n  biimpr(wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2)))\n  bija(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s0), cv(s2))), wi(wex(s0, wceq(cv(s1), cv(s2))), wceq(cv(s1), cv(s2))))\n  a1dd(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, wceq(cv(s0), cv(s2))), wex(s0, wceq(cv(s1), cv(s2))), wceq(cv(s1), cv(s2)))\n  sps(s0, wceq(cv(s0), cv(s1)), wi(wal(s0, wceq(cv(s0), cv(s2))), wceq(cv(s1), cv(s2))))\n  spsd(s0, wceq(cv(s0), cv(s1)), wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s2)))\n  ax7(s0, s1, s2)\n  ex(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))), wi(wex(s0, wceq(cv(s1), cv(s2))), wceq(cv(s1), cv(s2))))\n  19.9d(s0, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s1), cv(s2)))\n  nfeqf(s0, s1, s2)\n}","pretty":"thm equvel(setvar s0, setvar s1, setvar s2) {\n  ⊢ (∀(s0,(s0 = s1 ↔ s0 = s2))→ s1 = s2)\n} = {\n  sylc(∀(s0,(s0 = s1 ↔ s0 = s2)), s1 = s2, (∀(s0, s0 = s1)↔ ∀(s0, s0 = s2)), ∃(s0, s1 = s2))\n  albi(s0, s0 = s1, s0 = s2)\n  19.35i(s0, (s0 = s1 ↔ s0 = s2), s1 = s2)\n  eximii(s0, ((s0 = s1 ↔ s0 = s2)→ s1 = s2), s0 = s2)\n  ax6e(s0, s2)\n  com12(s0 = s2, (s0 = s1 ↔ s0 = s2), s1 = s2)\n  syli((s0 = s1 ↔ s0 = s2), s0 = s2, s1 = s2, s0 = s1)\n  biimpr(s0 = s1, s0 = s2)\n  bija(∀(s0, s0 = s1), ∀(s0, s0 = s2), (∃(s0, s1 = s2)→ s1 = s2))\n  a1dd(∀(s0, s0 = s1), ∀(s0, s0 = s2), ∃(s0, s1 = s2), s1 = s2)\n  sps(s0, s0 = s1, (∀(s0, s0 = s2)→ s1 = s2))\n  spsd(s0, s0 = s1, s0 = s2, s1 = s2)\n  ax7(s0, s1, s2)\n  ex(¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2), (∃(s0, s1 = s2)→ s1 = s2))\n  19.9d(s0, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s1 = s2)\n  nfeqf(s0, s1, s2)\n}","parent":["sylc","albi","19.35i","eximii","ax6e","com12","syli","biimpr","bija","a1dd","sps","spsd","ax7","ex","19.9d","nfeqf"],"children":[]},{"name":"equs5a","content":"A property related to substitution that unlike ~ equs5 does not require a distinctor antecedent. See ~ equs5aALT for an alternate proof using ~ ax-12 but not ~ ax13 . (Contributed by NM, 2-Feb-2007.)","origin":"thm equs5a(setvar s0, setvar s1, wff w0) {\n  |- wi(wex(s0, wa(wceq(cv(s0), cv(s1)), wal(s1, w0))), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n} = {\n  exlimi(s0, wa(wceq(cv(s0), cv(s1)), wal(s1, w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  nfa1(s0, wi(wceq(cv(s0), cv(s1)), w0))\n  imp(wceq(cv(s0), cv(s1)), wal(s1, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  ax12(s0, s1, w0)\n}","pretty":"thm equs5a(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃(s0,(s0 = s1 ∧ ∀(s1, w0)))→ ∀(s0,(s0 = s1 → w0)))\n} = {\n  exlimi(s0, (s0 = s1 ∧ ∀(s1, w0)), ∀(s0,(s0 = s1 → w0)))\n  nfa1(s0, (s0 = s1 → w0))\n  imp(s0 = s1, ∀(s1, w0), ∀(s0,(s0 = s1 → w0)))\n  ax12(s0, s1, w0)\n}","parent":["exlimi","nfa1","imp","ax12"],"children":["equs45f","sb4aALT","bj-equs45fv"]},{"name":"equs5e","content":"A property related to substitution that unlike ~ equs5 does not require a distinctor antecedent. See ~ equs5eALT for an alternate proof using ~ ax-12 but not ~ ax13 . (Contributed by NM, 2-Feb-2007.) (Proof shortened by Wolf Lammen, 15-Jan-2018.)","origin":"thm equs5e(setvar s0, setvar s1, wff w0) {\n  |- wi(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), wex(s1, w0))))\n} = {\n  exlimi(s0, wa(wceq(cv(s0), cv(s1)), w0), wal(s0, wi(wceq(cv(s0), cv(s1)), wex(s1, w0))))\n  nfa1(s0, wi(wceq(cv(s0), cv(s1)), wex(s1, w0)))\n  impel(wceq(cv(s0), cv(s1)), w0, wal(s0, wi(wceq(cv(s0), cv(s1)), wex(s1, w0))), wal(s1, wex(s1, w0)))\n  ax12(s0, s1, wex(s1, w0))\n  19.23bi(s1, w0, wal(s1, wex(s1, w0)))\n  hbe1(s1, w0)\n}","pretty":"thm equs5e(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃(s0,(s0 = s1 ∧ w0))→ ∀(s0,(s0 = s1 → ∃(s1, w0))))\n} = {\n  exlimi(s0, (s0 = s1 ∧ w0), ∀(s0,(s0 = s1 → ∃(s1, w0))))\n  nfa1(s0, (s0 = s1 → ∃(s1, w0)))\n  impel(s0 = s1, w0, ∀(s0,(s0 = s1 → ∃(s1, w0))), ∀(s1, ∃(s1, w0)))\n  ax12(s0, s1, ∃(s1, w0))\n  19.23bi(s1, w0, ∀(s1, ∃(s1, w0)))\n  hbe1(s1, w0)\n}","parent":["exlimi","nfa1","impel","ax12","19.23bi","hbe1"],"children":["sb4e"]},{"name":"equs45f","content":"Two ways of expressing substitution when ` y ` is not free in ` ph ` . The implication \"to the left\" is ~ equs4 and does not require the non-freeness hypothesis. Theorem ~ sb56 replaces the non-freeness hypothesis with a disjoint variable condition and ~ equs5 replaces it with a distinctor as antecedent. (Contributed by NM, 25-Apr-2008.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm equs45f(setvar s0, setvar s1, wff w0) {\n  |- wb(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  -| wnf(s1, w0)\n} = {\n  impbii(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  syl(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wex(s0, wa(wceq(cv(s0), cv(s1)), wal(s1, w0))))\n  eximi(s0, wa(wceq(cv(s0), cv(s1)), w0), wa(wceq(cv(s0), cv(s1)), wal(s1, w0)))\n  anim2i(wceq(cv(s0), cv(s1)), w0, wal(s1, w0))\n  nf5ri(s1, w0)\n  equs5a(s0, s1, w0)\n  equs4(s0, s1, w0)\n}","pretty":"thm equs45f(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃(s0,(s0 = s1 ∧ w0))↔ ∀(s0,(s0 = s1 → w0)))\n  ⊣ F/(s1, w0)\n} = {\n  impbii(∃(s0,(s0 = s1 ∧ w0)), ∀(s0,(s0 = s1 → w0)))\n  syl(∃(s0,(s0 = s1 ∧ w0)), ∀(s0,(s0 = s1 → w0)), ∃(s0,(s0 = s1 ∧ ∀(s1, w0))))\n  eximi(s0, (s0 = s1 ∧ w0), (s0 = s1 ∧ ∀(s1, w0)))\n  anim2i(s0 = s1, w0, ∀(s1, w0))\n  nf5ri(s1, w0)\n  equs5a(s0, s1, w0)\n  equs4(s0, s1, w0)\n}","parent":["impbii","syl","eximi","anim2i","nf5ri","equs5a","equs4"],"children":["sb5f","sb5fALT"]},{"name":"equs5","content":"Lemma used in proofs of substitution properties. If there is a disjoint variable condition on ` x , y ` , then ~ sb56 can be used instead; if ` y ` is not free in ` ph ` , then ~ equs45f can be used. (Contributed by NM, 14-May-1993.) (Revised by BJ, 1-Oct-2018.)","origin":"thm equs5(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n} = {\n  impbid1(wn(wal(s0, wceq(cv(s0), cv(s1)))), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  exlimd(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wa(wceq(cv(s0), cv(s1)), w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  nfna1(s0, wceq(cv(s0), cv(s1)))\n  nfa1(s0, wi(wceq(cv(s0), cv(s1)), w0))\n  impd(wn(wal(s0, wceq(cv(s0), cv(s1)))), wceq(cv(s0), cv(s1)), w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  axc15(s0, s1, w0)\n  equs4(s0, s1, w0)\n}","pretty":"thm equs5(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(∃(s0,(s0 = s1 ∧ w0))↔ ∀(s0,(s0 = s1 → w0))))\n} = {\n  impbid1(¬ ∀(s0, s0 = s1), ∃(s0,(s0 = s1 ∧ w0)), ∀(s0,(s0 = s1 → w0)))\n  exlimd(s0, ¬ ∀(s0, s0 = s1), (s0 = s1 ∧ w0), ∀(s0,(s0 = s1 → w0)))\n  nfna1(s0, s0 = s1)\n  nfa1(s0, (s0 = s1 → w0))\n  impd(¬ ∀(s0, s0 = s1), s0 = s1, w0, ∀(s0,(s0 = s1 → w0)))\n  axc15(s0, s1, w0)\n  equs4(s0, s1, w0)\n}","parent":["impbid1","exlimd","nfna1","nfa1","impd","axc15","equs4"],"children":["sb3","sb4ALT","bj-sbsb"]},{"name":"dveel1","content":"Quantifier introduction when one pair of variables is distinct. (Contributed by NM, 2-Jan-2002.)","origin":"thm dveel1(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wcel(cv(s1), cv(s2)), wal(s0, wcel(cv(s1), cv(s2)))))\n  -| diffss(s0, s2)\n} = {\n  dvelimv(s0, s1, hs0, wcel(cv(s1), cv(s2)), wcel(cv(hs0), cv(s2)))\n  elequ1(hs0, s1, s2)\n  diff.wcel.s(s0, cv(hs0), cv(s2))\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cv.s(s0, s2)\n  diff.hs0.w(wcel(cv(s1), cv(s2)))\n}","pretty":"thm dveel1(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s1 ∈ s2 → ∀(s0, s1 ∈ s2)))\n  ⊣ d(s0, s2)\n} = {\n  dvelimv(s0, s1, hs0, s1 ∈ s2, hs0 ∈ s2)\n  elequ1(hs0, s1, s2)\n  diff.wcel.s(s0, hs0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cv.s(s0, s2)\n  diff.hs0.w(s1 ∈ s2)\n}","parent":["dvelimv","elequ1","diff.wcel.s","diff.cv.s","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["distel"]},{"name":"dveel2","content":"Quantifier introduction when one pair of variables is distinct. (Contributed by NM, 2-Jan-2002.)","origin":"thm dveel2(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wcel(cv(s2), cv(s1)), wal(s0, wcel(cv(s2), cv(s1)))))\n  -| diffss(s0, s2)\n} = {\n  dvelimv(s0, s1, hs0, wcel(cv(s2), cv(s1)), wcel(cv(s2), cv(hs0)))\n  elequ2(hs0, s1, s2)\n  diff.wcel.s(s0, cv(s2), cv(hs0))\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(wcel(cv(s2), cv(s1)))\n}","pretty":"thm dveel2(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(s2 ∈ s1 → ∀(s0, s2 ∈ s1)))\n  ⊣ d(s0, s2)\n} = {\n  dvelimv(s0, s1, hs0, s2 ∈ s1, s2 ∈ hs0)\n  elequ2(hs0, s1, s2)\n  diff.wcel.s(s0, s2, hs0)\n  diff.cv.s(s0, s2)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(s2 ∈ s1)\n}","parent":["dvelimv","elequ2","diff.wcel.s","diff.cv.s","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["axc14"]},{"name":"axc14","content":"Axiom ~ ax-c14 is redundant if we assume ~ ax-5 . Remark 9.6 in [Megill] p. 448 (p. 16 of the preprint), regarding axiom scheme C14'. Note that ` w ` is a dummy variable introduced in the proof. Its purpose is to satisfy the distinct variable requirements of ~ dveel2 and ~ ax-5 . By the end of the proof it has vanished, and the final theorem has no distinct variable requirements. (Contributed by NM, 29-Jun-1995.) (Proof modification is discouraged.)","origin":"thm axc14(setvar s0, setvar s1, setvar s2) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wi(wcel(cv(s1), cv(s2)), wal(s0, wcel(cv(s1), cv(s2))))))\n} = {\n  pm2.86d(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2)), wal(s0, wcel(cv(s1), cv(s2))))\n  syl6ib(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2))), wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wal(s0, wcel(cv(s1), cv(s2)))), wal(s0, wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2)))))\n  dvelim(s0, s1, hs0, wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2))), wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(hs0), cv(s2))))\n  hbim1(s0, wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(hs0), cv(s2)))\n  hbn1(s0, wceq(cv(s0), cv(s2)))\n  dveel2(s0, s2, hs0)\n  imbi2d(wceq(cv(hs0), cv(s1)), wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(hs0), cv(s2)), wcel(cv(s1), cv(s2)))\n  elequ1(hs0, s1, s2)\n  19.21(s0, wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2)))\n  nfn(s0, wal(s0, wceq(cv(s0), cv(s2))))\n  nfa1(s0, wceq(cv(s0), cv(s2)))\n  diff.hs0.w(wi(wn(wal(s0, wceq(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm axc14(setvar s0, setvar s1, setvar s2) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(¬ ∀(s0, s0 = s2)→(s1 ∈ s2 → ∀(s0, s1 ∈ s2))))\n} = {\n  pm2.86d(¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2), s1 ∈ s2, ∀(s0, s1 ∈ s2))\n  syl6ib(¬ ∀(s0, s0 = s1), (¬ ∀(s0, s0 = s2)→ s1 ∈ s2), (¬ ∀(s0, s0 = s2)→ ∀(s0, s1 ∈ s2)), ∀(s0,(¬ ∀(s0, s0 = s2)→ s1 ∈ s2)))\n  dvelim(s0, s1, hs0, (¬ ∀(s0, s0 = s2)→ s1 ∈ s2), (¬ ∀(s0, s0 = s2)→ hs0 ∈ s2))\n  hbim1(s0, ¬ ∀(s0, s0 = s2), hs0 ∈ s2)\n  hbn1(s0, s0 = s2)\n  dveel2(s0, s2, hs0)\n  imbi2d(hs0 = s1, ¬ ∀(s0, s0 = s2), hs0 ∈ s2, s1 ∈ s2)\n  elequ1(hs0, s1, s2)\n  19.21(s0, ¬ ∀(s0, s0 = s2), s1 ∈ s2)\n  nfn(s0, ∀(s0, s0 = s2))\n  nfa1(s0, s0 = s2)\n  diff.hs0.w((¬ ∀(s0, s0 = s2)→ s1 ∈ s2))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["pm2.86d","syl6ib","dvelim","hbim1","hbn1","dveel2","imbi2d","elequ1","19.21","nfn","nfa1","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":[]},{"name":"sbequOLD","content":"Obsolete proof of ~ sbequ as of 7-Jul-2023. An equality theorem for substitution. Used in proof of Theorem 9.7 in [Megill] p. 449 (p. 16 of the preprint). (Contributed by NM, 14-May-1993.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbequOLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wceq(cv(s0), cv(s1)), wb(wsb(s0, s2, w0), wsb(s1, s2, w0)))\n} = {\n  impbid(wceq(cv(s0), cv(s1)), wsb(s0, s2, w0), wsb(s1, s2, w0))\n  sbequi(s0, s1, s2, w0)\n  equcoms(s0, s1, wi(wsb(s1, s2, w0), wsb(s0, s2, w0)))\n  sbequi(s1, s0, s2, w0)\n}","pretty":"thm sbequOLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (s0 = s1 →([s0 / s2]w0 ↔[s1 / s2]w0))\n} = {\n  impbid(s0 = s1, [s0 / s2]w0, [s1 / s2]w0)\n  sbequi(s0, s1, s2, w0)\n  equcoms(s0, s1, ([s1 / s2]w0 →[s0 / s2]w0))\n  sbequi(s1, s0, s2, w0)\n}","parent":["impbid","sbequi","equcoms"],"children":[]},{"name":"drsb2","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). (Contributed by NM, 27-Feb-2005.)","origin":"thm drsb2(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wsb(s0, s2, w0), wsb(s1, s2, w0)))\n} = {\n  sps(s0, wceq(cv(s0), cv(s1)), wb(wsb(s0, s2, w0), wsb(s1, s2, w0)))\n  sbequ(s0, s1, s2, w0)\n}","pretty":"thm drsb2(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→([s0 / s2]w0 ↔[s1 / s2]w0))\n} = {\n  sps(s0, s0 = s1, ([s0 / s2]w0 ↔[s1 / s2]w0))\n  sbequ(s0, s1, s2, w0)\n}","parent":["sps","sbequ"],"children":["sbcom3","sbal2","sbal2OLD"]},{"name":"sbh","content":"Substitution for a variable not free in a wff does not affect it. (Contributed by NM, 14-May-1993.)","origin":"thm sbh(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), w0)\n  -| wi(w0, wal(s1, w0))\n} = {\n  sbf(s0, s1, w0)\n  nf5i(s1, w0)\n}","pretty":"thm sbh(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ w0)\n  ⊣ (w0 → ∀(s1, w0))\n} = {\n  sbf(s0, s1, w0)\n  nf5i(s1, w0)\n}","parent":["sbf","nf5i"],"children":[]},{"name":"sbf2","content":"Substitution has no effect on a bound variable. (Contributed by NM, 1-Jul-2005.)","origin":"thm sbf2(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, wal(s1, w0)), wal(s1, w0))\n} = {\n  sbf(s0, s1, wal(s1, w0))\n  nfa1(s1, w0)\n}","pretty":"thm sbf2(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]∀(s1, w0)↔ ∀(s1, w0))\n} = {\n  sbf(s0, s1, ∀(s1, w0))\n  nfa1(s1, w0)\n}","parent":["sbf","nfa1"],"children":[]},{"name":"nfs1f","content":"If ` x ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` . (Contributed by Mario Carneiro, 11-Aug-2016.)","origin":"thm nfs1f(setvar s0, setvar s1, wff w0) {\n  |- wnf(s0, wsb(s1, s0, w0))\n  -| wnf(s0, w0)\n} = {\n  nfxfr(s0, wsb(s1, s0, w0), w0)\n  sbf(s1, s0, w0)\n}","pretty":"thm nfs1f(setvar s0, setvar s1, wff w0) {\n  ⊢ F/(s0,[s1 / s0]w0)\n  ⊣ F/(s0, w0)\n} = {\n  nfxfr(s0, [s1 / s0]w0, w0)\n  sbf(s1, s0, w0)\n}","parent":["nfxfr","sbf"],"children":[]},{"name":"sb6x","content":"Equivalence involving substitution for a variable not free. (Contributed by NM, 2-Jun-1993.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm sb6x(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  -| wnf(s1, w0)\n} = {\n  bitr4i(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), w0)\n  sbf(s0, s1, w0)\n  equsal(s1, s0, w0, w0)\n  biidd(wceq(cv(s1), cv(s0)), w0)\n}","pretty":"thm sb6x(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∀(s1,(s1 = s0 → w0)))\n  ⊣ F/(s1, w0)\n} = {\n  bitr4i([s0 / s1]w0, ∀(s1,(s1 = s0 → w0)), w0)\n  sbf(s0, s1, w0)\n  equsal(s1, s0, w0, w0)\n  biidd(s1 = s0, w0)\n}","parent":["bitr4i","sbf","equsal","biidd"],"children":[]},{"name":"sbequ5","content":"Substitution does not change an identical variable specifier. (Contributed by NM, 15-May-1993.)","origin":"thm sbequ5(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wb(wsb(s0, s1, wal(s2, wceq(cv(s2), cv(s3)))), wal(s2, wceq(cv(s2), cv(s3))))\n} = {\n  sbf(s0, s1, wal(s2, wceq(cv(s2), cv(s3))))\n  nfae(s1, s2, s3)\n}","pretty":"thm sbequ5(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ ([s0 / s1]∀(s2, s2 = s3)↔ ∀(s2, s2 = s3))\n} = {\n  sbf(s0, s1, ∀(s2, s2 = s3))\n  nfae(s1, s2, s3)\n}","parent":["sbf","nfae"],"children":[]},{"name":"sbequ6","content":"Substitution does not change a distinctor. (Contributed by NM, 5-Aug-1993.)","origin":"thm sbequ6(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wb(wsb(s0, s1, wn(wal(s2, wceq(cv(s2), cv(s3))))), wn(wal(s2, wceq(cv(s2), cv(s3)))))\n} = {\n  sbf(s0, s1, wn(wal(s2, wceq(cv(s2), cv(s3)))))\n  nfnae(s1, s2, s3)\n}","pretty":"thm sbequ6(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ ([s0 / s1]¬ ∀(s2, s2 = s3)↔ ¬ ∀(s2, s2 = s3))\n} = {\n  sbf(s0, s1, ¬ ∀(s2, s2 = s3))\n  nfnae(s1, s2, s3)\n}","parent":["sbf","nfnae"],"children":[]},{"name":"sb5rf","content":"Reversed substitution. (Contributed by NM, 3-Feb-2005.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 20-Sep-2018.)","origin":"thm sb5rf(setvar s0, setvar s1, wff w0) {\n  |- wb(w0, wex(s0, wa(wceq(cv(s0), cv(s1)), wsb(s0, s1, w0))))\n  -| wnf(s0, w0)\n} = {\n  bicomi(w0, wex(s0, wa(wceq(cv(s0), cv(s1)), wsb(s0, s1, w0))))\n  equsex(s0, s1, wsb(s0, s1, w0), w0)\n  sbequ12r(s0, s1, w0)\n}","pretty":"thm sb5rf(setvar s0, setvar s1, wff w0) {\n  ⊢ (w0 ↔ ∃(s0,(s0 = s1 ∧[s0 / s1]w0)))\n  ⊣ F/(s0, w0)\n} = {\n  bicomi(w0, ∃(s0,(s0 = s1 ∧[s0 / s1]w0)))\n  equsex(s0, s1, [s0 / s1]w0, w0)\n  sbequ12r(s0, s1, w0)\n}","parent":["bicomi","equsex","sbequ12r"],"children":[]},{"name":"sb6rf","content":"Reversed substitution. For a version requiring disjoint variables, but fewer axioms, see ~ sb6rfv . (Contributed by NM, 1-Aug-1993.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 21-Sep-2018.)","origin":"thm sb6rf(setvar s0, setvar s1, wff w0) {\n  |- wb(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), wsb(s0, s1, w0))))\n  -| wnf(s0, w0)\n} = {\n  bicomi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), wsb(s0, s1, w0))))\n  equsal(s0, s1, wsb(s0, s1, w0), w0)\n  sbequ12r(s0, s1, w0)\n}","pretty":"thm sb6rf(setvar s0, setvar s1, wff w0) {\n  ⊢ (w0 ↔ ∀(s0,(s0 = s1 →[s0 / s1]w0)))\n  ⊣ F/(s0, w0)\n} = {\n  bicomi(w0, ∀(s0,(s0 = s1 →[s0 / s1]w0)))\n  equsal(s0, s1, [s0 / s1]w0, w0)\n  sbequ12r(s0, s1, w0)\n}","parent":["bicomi","equsal","sbequ12r"],"children":["eu1OLD"]},{"name":"ax12vALT","content":"Alternate proof of ~ ax12v2 , shorter, but depending on more axioms. (Contributed by NM, 5-Aug-1993.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm ax12vALT(setvar s0, setvar s1, wff w0) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  -| diffss(s0, s1)\n} = {\n  pm2.61i(wi(wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wal(s0, wceq(cv(s0), cv(s1))))\n  a1d(wal(s0, wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(s1)), wi(w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  syl5(wal(s0, wceq(cv(s0), cv(s1))), w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wi(wceq(cv(s0), cv(s1)), w0))\n  ax-1(w0, wceq(cv(s0), cv(s1)))\n  axc16(s0, s1, wi(wceq(cv(s0), cv(s1)), w0))\n  axc15(s0, s1, w0)\n}","pretty":"thm ax12vALT(setvar s0, setvar s1, wff w0) {\n  ⊢ (s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0))))\n  ⊣ d(s0, s1)\n} = {\n  pm2.61i((s0 = s1 →(w0 → ∀(s0,(s0 = s1 → w0)))), ∀(s0, s0 = s1))\n  a1d(∀(s0, s0 = s1), s0 = s1, (w0 → ∀(s0,(s0 = s1 → w0))))\n  syl5(∀(s0, s0 = s1), w0, ∀(s0,(s0 = s1 → w0)), (s0 = s1 → w0))\n  ax-1(w0, s0 = s1)\n  axc16(s0, s1, (s0 = s1 → w0))\n  axc15(s0, s1, w0)\n}","parent":["pm2.61i","a1d","syl5","ax-1","axc16","axc15"],"children":[]},{"name":"elsb3","content":"Substitution applied to an atomic membership wff. (Contributed by NM, 7-Nov-2006.) (Proof shortened by Andrew Salmon, 14-Jun-2011.) Reduce axiom usage. (Revised by Wolf Lammen, 24-Jul-2023.)","origin":"thm elsb3(setvar s0, setvar s1, setvar s2) {\n  |- wb(wsb(s0, s1, wcel(cv(s1), cv(s2))), wcel(cv(s0), cv(s2)))\n  -| diffss(s1, s2)\n} = {\n  sbievw2(s0, s1, hs0, wcel(cv(s1), cv(s2)), wcel(cv(s0), cv(s2)), wcel(cv(hs0), cv(s2)))\n  elequ1(s1, hs0, s2)\n  elequ1(hs0, s0, s2)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.wcel.s(s1, cv(hs0), cv(s2))\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s2)\n  diff.hs0.w(wcel(cv(s1), cv(s2)))\n  diff.hs0.w(wcel(cv(s0), cv(s2)))\n}","pretty":"thm elsb3(setvar s0, setvar s1, setvar s2) {\n  ⊢ ([s0 / s1]s1 ∈ s2 ↔ s0 ∈ s2)\n  ⊣ d(s1, s2)\n} = {\n  sbievw2(s0, s1, hs0, s1 ∈ s2, s0 ∈ s2, hs0 ∈ s2)\n  elequ1(s1, hs0, s2)\n  elequ1(hs0, s0, s2)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.wcel.s(s1, hs0, s2)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s2)\n  diff.hs0.w(s1 ∈ s2)\n  diff.hs0.w(s0 ∈ s2)\n}","parent":["sbievw2","elequ1","diffss.ex","diff.hs0.s","diff.wcel.s","diff.cv.s","diff.hs0.w"],"children":["cvjust"]},{"name":"elsb4","content":"Substitution applied to an atomic membership wff. (Contributed by Rodolfo Medina, 3-Apr-2010.) (Proof shortened by Andrew Salmon, 14-Jun-2011.) Reduce axiom usage. (Revised by Wolf Lammen, 24-Jul-2023.)","origin":"thm elsb4(setvar s0, setvar s1, setvar s2) {\n  |- wb(wsb(s0, s1, wcel(cv(s2), cv(s1))), wcel(cv(s2), cv(s0)))\n  -| diffss(s1, s2)\n} = {\n  sbievw2(s0, s1, hs0, wcel(cv(s2), cv(s1)), wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(hs0)))\n  elequ2(s1, hs0, s2)\n  elequ2(hs0, s0, s2)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.wcel.s(s1, cv(s2), cv(hs0))\n  diff.cv.s(s1, s2)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wcel(cv(s2), cv(s1)))\n  diff.hs0.w(wcel(cv(s2), cv(s0)))\n}","pretty":"thm elsb4(setvar s0, setvar s1, setvar s2) {\n  ⊢ ([s0 / s1]s2 ∈ s1 ↔ s2 ∈ s0)\n  ⊣ d(s1, s2)\n} = {\n  sbievw2(s0, s1, hs0, s2 ∈ s1, s2 ∈ s0, s2 ∈ hs0)\n  elequ2(s1, hs0, s2)\n  elequ2(hs0, s0, s2)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.wcel.s(s1, s2, hs0)\n  diff.cv.s(s1, s2)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(s2 ∈ s1)\n  diff.hs0.w(s2 ∈ s0)\n}","parent":["sbievw2","elequ2","diffss.ex","diff.hs0.s","diff.wcel.s","diff.cv.s","diff.hs0.w"],"children":["nfnid"]},{"name":"sbcom2","content":"Commutativity law for substitution. Used in proof of Theorem 9.7 of [Megill] p. 449 (p. 16 of the preprint). (Contributed by NM, 27-May-1997.) (Proof shortened by Wolf Lammen, 23-Dec-2022.)","origin":"thm sbcom2(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)))\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n} = {\n  exlimiiv(hs0, wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))), wceq(cv(hs0), cv(s0)))\n  exlimiiv(hs1, wi(wceq(cv(hs0), cv(s0)), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)))), wceq(cv(hs1), cv(s2)))\n  ex(wceq(cv(hs1), cv(s2)), wceq(cv(hs0), cv(s0)), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))))\n  bitr3d(wa(wceq(cv(hs1), cv(s2)), wceq(cv(hs0), cv(s0))), wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)), wsb(hs1, s3, wsb(hs0, s1, w0)))\n  sylan9bb(wceq(cv(hs1), cv(s2)), wceq(cv(hs0), cv(s0)), wsb(hs1, s3, wsb(hs0, s1, w0)), wsb(s0, s1, wsb(s2, s3, w0)), wsb(hs0, s1, wsb(s2, s3, w0)))\n  syl5bbr(wceq(cv(hs1), cv(s2)), wsb(hs1, s3, wsb(hs0, s1, w0)), wsb(hs0, s1, wsb(s2, s3, w0)), wsb(hs0, s1, wsb(hs1, s3, w0)))\n  bitr4i(wsb(hs0, s1, wsb(hs1, s3, w0)), wsb(hs1, s3, wsb(hs0, s1, w0)), wal(s3, wal(s1, wi(wa(wceq(cv(s3), cv(hs1)), wceq(cv(s1), cv(hs0))), w0))))\n  3bitri(wsb(hs0, s1, wsb(hs1, s3, w0)), wal(s3, wal(s1, wi(wa(wceq(cv(s3), cv(hs1)), wceq(cv(s1), cv(hs0))), w0))), wal(s1, wal(s3, wi(wa(wceq(cv(s1), cv(hs0)), wceq(cv(s3), cv(hs1))), w0))), wal(s3, wal(s1, wi(wa(wceq(cv(s1), cv(hs0)), wceq(cv(s3), cv(hs1))), w0))))\n  2sb6(hs0, s1, hs1, s3, w0)\n  alcom(s1, s3, wi(wa(wceq(cv(s1), cv(hs0)), wceq(cv(s3), cv(hs1))), w0))\n  2albii(s3, s1, wi(wa(wceq(cv(s1), cv(hs0)), wceq(cv(s3), cv(hs1))), w0), wi(wa(wceq(cv(s3), cv(hs1)), wceq(cv(s1), cv(hs0))), w0))\n  ancomst(wceq(cv(s1), cv(hs0)), wceq(cv(s3), cv(hs1)), w0)\n  2sb6(hs1, s3, hs0, s1, w0)\n  sbbidv(hs0, s1, wceq(cv(hs1), cv(s2)), wsb(hs1, s3, w0), wsb(s2, s3, w0))\n  sbequ(hs1, s2, s3, w0)\n  sbequ(hs0, s0, s1, wsb(s2, s3, w0))\n  sylan9bbr(wceq(cv(hs1), cv(s2)), wceq(cv(hs0), cv(s0)), wsb(hs1, s3, wsb(hs0, s1, w0)), wsb(s2, s3, wsb(s0, s1, w0)), wsb(hs1, s3, wsb(s0, s1, w0)))\n  sbbidv(hs1, s3, wceq(cv(hs0), cv(s0)), wsb(hs0, s1, w0), wsb(s0, s1, w0))\n  sbequ(hs0, s0, s1, w0)\n  sbequ(hs1, s2, s3, wsb(s0, s1, w0))\n  ax6ev(hs1, s2)\n  ax6ev(hs0, s0)\n  diff.hs0.w(wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))))\n  diff.hs1.w(wi(wceq(cv(hs0), cv(s0)), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)))))\n  diff.hs0.s(s1)\n  diff.hs1.s(s3)\n  diffss.ex(s3, s1)\n  diff.wceq.s(s1, cv(hs1), cv(s2))\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.hs1.s(s1)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, cv(hs0), cv(s0))\n  diff.cv.s(s3, hs0)\n  diffss.ex(s3, hs0)\n  diff.hs0.s(s3)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.hs1.s(s2)\n  diff.hs0.s(s0)\n}","pretty":"thm sbcom2(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ ([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n} = {\n  exlimiiv(hs0, ([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0), hs0 = s0)\n  exlimiiv(hs1, (hs0 = s0 →([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0)), hs1 = s2)\n  ex(hs1 = s2, hs0 = s0, ([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0))\n  bitr3d((hs1 = s2 ∧ hs0 = s0), [s0 / s1][s2 / s3]w0, [s2 / s3][s0 / s1]w0, [hs1 / s3][hs0 / s1]w0)\n  sylan9bb(hs1 = s2, hs0 = s0, [hs1 / s3][hs0 / s1]w0, [s0 / s1][s2 / s3]w0, [hs0 / s1][s2 / s3]w0)\n  syl5bbr(hs1 = s2, [hs1 / s3][hs0 / s1]w0, [hs0 / s1][s2 / s3]w0, [hs0 / s1][hs1 / s3]w0)\n  bitr4i([hs0 / s1][hs1 / s3]w0, [hs1 / s3][hs0 / s1]w0, ∀(s3, ∀(s1,((s3 = hs1 ∧ s1 = hs0)→ w0))))\n  3bitri([hs0 / s1][hs1 / s3]w0, ∀(s3, ∀(s1,((s3 = hs1 ∧ s1 = hs0)→ w0))), ∀(s1, ∀(s3,((s1 = hs0 ∧ s3 = hs1)→ w0))), ∀(s3, ∀(s1,((s1 = hs0 ∧ s3 = hs1)→ w0))))\n  2sb6(hs0, s1, hs1, s3, w0)\n  alcom(s1, s3, ((s1 = hs0 ∧ s3 = hs1)→ w0))\n  2albii(s3, s1, ((s1 = hs0 ∧ s3 = hs1)→ w0), ((s3 = hs1 ∧ s1 = hs0)→ w0))\n  ancomst(s1 = hs0, s3 = hs1, w0)\n  2sb6(hs1, s3, hs0, s1, w0)\n  sbbidv(hs0, s1, hs1 = s2, [hs1 / s3]w0, [s2 / s3]w0)\n  sbequ(hs1, s2, s3, w0)\n  sbequ(hs0, s0, s1, [s2 / s3]w0)\n  sylan9bbr(hs1 = s2, hs0 = s0, [hs1 / s3][hs0 / s1]w0, [s2 / s3][s0 / s1]w0, [hs1 / s3][s0 / s1]w0)\n  sbbidv(hs1, s3, hs0 = s0, [hs0 / s1]w0, [s0 / s1]w0)\n  sbequ(hs0, s0, s1, w0)\n  sbequ(hs1, s2, s3, [s0 / s1]w0)\n  ax6ev(hs1, s2)\n  ax6ev(hs0, s0)\n  diff.hs0.w(([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0))\n  diff.hs1.w((hs0 = s0 →([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0)))\n  diff.hs0.s(s1)\n  diff.hs1.s(s3)\n  diffss.ex(s3, s1)\n  diff.wceq.s(s1, hs1, s2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.hs1.s(s1)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, hs0, s0)\n  diff.cv.s(s3, hs0)\n  diffss.ex(s3, hs0)\n  diff.hs0.s(s3)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n  diff.hs1.s(s2)\n  diff.hs0.s(s0)\n}","parent":["exlimiiv","ex","bitr3d","sylan9bb","syl5bbr","bitr4i","3bitri","2sb6","alcom","2albii","ancomst","sbbidv","sbequ","sylan9bbr","ax6ev","diff.hs0.w","diff.hs1.w","diff.hs0.s","diff.hs1.s","diffss.ex","diff.wceq.s","diff.cv.s"],"children":["sbco4lem","sbco4","2mo","cnvopab","2reu8i","dfich2bi","ichbi12i"]},{"name":"sbcom2OLD","content":"Obsolete version of ~ sbcom2 as of 23-Dec-2022. (Contributed by NM, 27-May-1997.) (Proof shortened by Wolf Lammen, 24-Sep-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbcom2OLD(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)))\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n} = {\n  mp2(wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))), wex(hs0, wceq(cv(hs0), cv(s2))), wex(hs1, wceq(cv(hs1), cv(s0))))\n  ax6ev(hs0, s2)\n  ax6ev(hs1, s0)\n  exlimiv(hs0, wceq(cv(hs0), cv(s2)), wi(wex(hs1, wceq(cv(hs1), cv(s0))), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)))))\n  exlimdv(hs1, wceq(cv(hs0), cv(s2)), wceq(cv(hs1), cv(s0)), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))))\n  ex(wceq(cv(hs0), cv(s2)), wceq(cv(hs1), cv(s0)), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))))\n  bitr3d(wa(wceq(cv(hs0), cv(s2)), wceq(cv(hs1), cv(s0))), wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)), wsb(hs0, s3, wsb(hs1, s1, w0)))\n  sylan9bb(wceq(cv(hs0), cv(s2)), wceq(cv(hs1), cv(s0)), wsb(hs0, s3, wsb(hs1, s1, w0)), wsb(s0, s1, wsb(s2, s3, w0)), wsb(hs1, s1, wsb(s2, s3, w0)))\n  syl5bbr(wceq(cv(hs0), cv(s2)), wsb(hs0, s3, wsb(hs1, s1, w0)), wsb(hs1, s1, wsb(s2, s3, w0)), wsb(hs1, s1, wsb(hs0, s3, w0)))\n  bitr4i(wsb(hs1, s1, wsb(hs0, s3, w0)), wsb(hs0, s3, wsb(hs1, s1, w0)), wal(s3, wal(s1, wi(wa(wceq(cv(s3), cv(hs0)), wceq(cv(s1), cv(hs1))), w0))))\n  3bitri(wsb(hs1, s1, wsb(hs0, s3, w0)), wal(s3, wal(s1, wi(wa(wceq(cv(s3), cv(hs0)), wceq(cv(s1), cv(hs1))), w0))), wal(s1, wal(s3, wi(wa(wceq(cv(s1), cv(hs1)), wceq(cv(s3), cv(hs0))), w0))), wal(s3, wal(s1, wi(wa(wceq(cv(s1), cv(hs1)), wceq(cv(s3), cv(hs0))), w0))))\n  2sb6(hs1, s1, hs0, s3, w0)\n  alcom(s1, s3, wi(wa(wceq(cv(s1), cv(hs1)), wceq(cv(s3), cv(hs0))), w0))\n  2albii(s3, s1, wi(wa(wceq(cv(s1), cv(hs1)), wceq(cv(s3), cv(hs0))), w0), wi(wa(wceq(cv(s3), cv(hs0)), wceq(cv(s1), cv(hs1))), w0))\n  ancomst(wceq(cv(s1), cv(hs1)), wceq(cv(s3), cv(hs0)), w0)\n  2sb6(hs0, s3, hs1, s1, w0)\n  sbbid(hs1, s1, wceq(cv(hs0), cv(s2)), wsb(hs0, s3, w0), wsb(s2, s3, w0))\n  nfv(s1, wceq(cv(hs0), cv(s2)))\n  sbequ(hs0, s2, s3, w0)\n  sbequ(hs1, s0, s1, wsb(s2, s3, w0))\n  sylan9bbr(wceq(cv(hs0), cv(s2)), wceq(cv(hs1), cv(s0)), wsb(hs0, s3, wsb(hs1, s1, w0)), wsb(s2, s3, wsb(s0, s1, w0)), wsb(hs0, s3, wsb(s0, s1, w0)))\n  sbbid(hs0, s3, wceq(cv(hs1), cv(s0)), wsb(hs1, s1, w0), wsb(s0, s1, w0))\n  nfv(s3, wceq(cv(hs1), cv(s0)))\n  sbequ(hs1, s0, s1, w0)\n  sbequ(hs0, s2, s3, wsb(s0, s1, w0))\n  diff.hs0.s(s2)\n  diff.hs1.s(s0)\n  diff.hs0.w(wi(wex(hs1, wceq(cv(hs1), cv(s0))), wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0)))))\n  diff.hs1.w(wceq(cv(hs0), cv(s2)))\n  diff.hs1.w(wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s3, wsb(s0, s1, w0))))\n  diff.hs1.s(s1)\n  diff.hs0.s(s3)\n  diffss.ex(s3, s1)\n  diff.wceq.s(s1, cv(hs0), cv(s2))\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, cv(hs1), cv(s0))\n  diff.cv.s(s3, hs1)\n  diffss.ex(s3, hs1)\n  diff.hs1.s(s3)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","pretty":"thm sbcom2OLD(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ ([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n} = {\n  mp2(([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0), ∃(hs0, hs0 = s2), ∃(hs1, hs1 = s0))\n  ax6ev(hs0, s2)\n  ax6ev(hs1, s0)\n  exlimiv(hs0, hs0 = s2, (∃(hs1, hs1 = s0)→([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0)))\n  exlimdv(hs1, hs0 = s2, hs1 = s0, ([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0))\n  ex(hs0 = s2, hs1 = s0, ([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0))\n  bitr3d((hs0 = s2 ∧ hs1 = s0), [s0 / s1][s2 / s3]w0, [s2 / s3][s0 / s1]w0, [hs0 / s3][hs1 / s1]w0)\n  sylan9bb(hs0 = s2, hs1 = s0, [hs0 / s3][hs1 / s1]w0, [s0 / s1][s2 / s3]w0, [hs1 / s1][s2 / s3]w0)\n  syl5bbr(hs0 = s2, [hs0 / s3][hs1 / s1]w0, [hs1 / s1][s2 / s3]w0, [hs1 / s1][hs0 / s3]w0)\n  bitr4i([hs1 / s1][hs0 / s3]w0, [hs0 / s3][hs1 / s1]w0, ∀(s3, ∀(s1,((s3 = hs0 ∧ s1 = hs1)→ w0))))\n  3bitri([hs1 / s1][hs0 / s3]w0, ∀(s3, ∀(s1,((s3 = hs0 ∧ s1 = hs1)→ w0))), ∀(s1, ∀(s3,((s1 = hs1 ∧ s3 = hs0)→ w0))), ∀(s3, ∀(s1,((s1 = hs1 ∧ s3 = hs0)→ w0))))\n  2sb6(hs1, s1, hs0, s3, w0)\n  alcom(s1, s3, ((s1 = hs1 ∧ s3 = hs0)→ w0))\n  2albii(s3, s1, ((s1 = hs1 ∧ s3 = hs0)→ w0), ((s3 = hs0 ∧ s1 = hs1)→ w0))\n  ancomst(s1 = hs1, s3 = hs0, w0)\n  2sb6(hs0, s3, hs1, s1, w0)\n  sbbid(hs1, s1, hs0 = s2, [hs0 / s3]w0, [s2 / s3]w0)\n  nfv(s1, hs0 = s2)\n  sbequ(hs0, s2, s3, w0)\n  sbequ(hs1, s0, s1, [s2 / s3]w0)\n  sylan9bbr(hs0 = s2, hs1 = s0, [hs0 / s3][hs1 / s1]w0, [s2 / s3][s0 / s1]w0, [hs0 / s3][s0 / s1]w0)\n  sbbid(hs0, s3, hs1 = s0, [hs1 / s1]w0, [s0 / s1]w0)\n  nfv(s3, hs1 = s0)\n  sbequ(hs1, s0, s1, w0)\n  sbequ(hs0, s2, s3, [s0 / s1]w0)\n  diff.hs0.s(s2)\n  diff.hs1.s(s0)\n  diff.hs0.w((∃(hs1, hs1 = s0)→([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0)))\n  diff.hs1.w(hs0 = s2)\n  diff.hs1.w(([s0 / s1][s2 / s3]w0 ↔[s2 / s3][s0 / s1]w0))\n  diff.hs1.s(s1)\n  diff.hs0.s(s3)\n  diffss.ex(s3, s1)\n  diff.wceq.s(s1, hs0, s2)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s2)\n  diff.wceq.s(s3, hs1, s0)\n  diff.cv.s(s3, hs1)\n  diffss.ex(s3, hs1)\n  diff.hs1.s(s3)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","parent":["mp2","ax6ev","exlimiv","exlimdv","ex","bitr3d","sylan9bb","syl5bbr","bitr4i","3bitri","2sb6","alcom","2albii","ancomst","sbbid","nfv","sbequ","sylan9bbr","diff.hs0.s","diff.hs1.s","diff.hs0.w","diff.hs1.w","diffss.ex","diff.wceq.s","diff.cv.s"],"children":[]},{"name":"sbcom4","content":"Commutativity law for substitution. This theorem was incorrectly used as our previous version of ~ pm11.07 but may still be useful. (Contributed by Andrew Salmon, 17-Jun-2011.) (Proof shortened by Jim Kingdon, 22-Jan-2018.)","origin":"thm sbcom4(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s1, wsb(s0, s3, w0)))\n  -| diffsw(s1, w0)\n  -| diffsw(s3, w0)\n} = {\n  3bitr4i(wsb(s0, s1, wsb(s2, s3, w0)), wsb(s2, s1, wsb(s0, s3, w0)), wsb(s0, s1, w0), w0)\n  sbv(s0, s1, w0)\n  sbbii(s0, s1, wsb(s2, s3, w0), w0)\n  sbv(s2, s3, w0)\n  bitri(wsb(s2, s1, wsb(s0, s3, w0)), w0, wsb(s2, s1, w0))\n  sbbii(s2, s1, wsb(s0, s3, w0), w0)\n  sbv(s0, s3, w0)\n  sbv(s2, s1, w0)\n}","pretty":"thm sbcom4(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ ([s0 / s1][s2 / s3]w0 ↔[s2 / s1][s0 / s3]w0)\n  ⊣ d(s1, w0)\n  ⊣ d(s3, w0)\n} = {\n  3bitr4i([s0 / s1][s2 / s3]w0, [s2 / s1][s0 / s3]w0, [s0 / s1]w0, w0)\n  sbv(s0, s1, w0)\n  sbbii(s0, s1, [s2 / s3]w0, w0)\n  sbv(s2, s3, w0)\n  bitri([s2 / s1][s0 / s3]w0, w0, [s2 / s1]w0)\n  sbbii(s2, s1, [s0 / s3]w0, w0)\n  sbv(s0, s3, w0)\n  sbv(s2, s1, w0)\n}","parent":["3bitr4i","sbv","sbbii","bitri"],"children":[]},{"name":"2ax6elem","content":"We can always find values matching ` x ` and ` y ` , as long as they are represented by distinct variables. This theorem merges two ~ ax6e instances ` E. z z = x ` and ` E. w w = y ` into a common expression. Alan Sare contributed a variant of this theorem with distinct variable conditions before, see ~ ax6e2nd . (Contributed by Wolf Lammen, 27-Sep-2018.)","origin":"thm 2ax6elem(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wex(s1, wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))))\n} = {\n  pm2.61d2(wn(wal(s0, wceq(cv(s0), cv(s1)))), wex(s1, wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))), wal(s0, wceq(cv(s0), cv(s2))))\n  ex(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))), wex(s1, wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))))\n  mpi(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wex(s1, wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))), wex(s1, wceq(cv(s1), cv(s2))))\n  ax6e(s1, s2)\n  eximd(s1, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s1), cv(s2)), wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3)))))\n  nfan(s1, wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2)))))\n  nfnae(s1, s0, s1)\n  nfnae(s1, s0, s2)\n  spimed(s0, s3, wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s0, wceq(cv(s0), cv(s2))))), wceq(cv(s1), cv(s2)), wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))\n  nfeqf(s0, s1, s2)\n  pm3.21(wceq(cv(s0), cv(s3)), wceq(cv(s1), cv(s2)))\n  mpi(wal(s0, wceq(cv(s0), cv(s2))), wex(s1, wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))), wex(s1, wceq(cv(s1), cv(s3))))\n  ax6e(s1, s3)\n  eximd(s1, wal(s0, wceq(cv(s0), cv(s2))), wceq(cv(s1), cv(s3)), wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3)))))\n  nfae(s1, s0, s2)\n  syl5(wal(s0, wceq(cv(s0), cv(s2))), wceq(cv(s1), cv(s3)), wex(s0, wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3)))), wex(s0, wa(wceq(cv(s1), cv(s0)), wceq(cv(s0), cv(s3)))))\n  equvini(s1, s3, s0)\n  aleximi(s0, wceq(cv(s0), cv(s2)), wa(wceq(cv(s1), cv(s0)), wceq(cv(s0), cv(s3))), wa(wceq(cv(s1), cv(s2)), wceq(cv(s0), cv(s3))))\n  anim1d(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s0)), wceq(cv(s0), cv(s3)), wceq(cv(s1), cv(s2)))\n  equtrr(s0, s2, s1)\n}","pretty":"thm 2ax6elem(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ ∃(s1, ∃(s0,(s1 = s2 ∧ s0 = s3))))\n} = {\n  pm2.61d2(¬ ∀(s0, s0 = s1), ∃(s1, ∃(s0,(s1 = s2 ∧ s0 = s3))), ∀(s0, s0 = s2))\n  ex(¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2), ∃(s1, ∃(s0,(s1 = s2 ∧ s0 = s3))))\n  mpi((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), ∃(s1, ∃(s0,(s1 = s2 ∧ s0 = s3))), ∃(s1, s1 = s2))\n  ax6e(s1, s2)\n  eximd(s1, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s1 = s2, ∃(s0,(s1 = s2 ∧ s0 = s3)))\n  nfan(s1, ¬ ∀(s0, s0 = s1), ¬ ∀(s0, s0 = s2))\n  nfnae(s1, s0, s1)\n  nfnae(s1, s0, s2)\n  spimed(s0, s3, (¬ ∀(s0, s0 = s1)∧ ¬ ∀(s0, s0 = s2)), s1 = s2, (s1 = s2 ∧ s0 = s3))\n  nfeqf(s0, s1, s2)\n  pm3.21(s0 = s3, s1 = s2)\n  mpi(∀(s0, s0 = s2), ∃(s1, ∃(s0,(s1 = s2 ∧ s0 = s3))), ∃(s1, s1 = s3))\n  ax6e(s1, s3)\n  eximd(s1, ∀(s0, s0 = s2), s1 = s3, ∃(s0,(s1 = s2 ∧ s0 = s3)))\n  nfae(s1, s0, s2)\n  syl5(∀(s0, s0 = s2), s1 = s3, ∃(s0,(s1 = s2 ∧ s0 = s3)), ∃(s0,(s1 = s0 ∧ s0 = s3)))\n  equvini(s1, s3, s0)\n  aleximi(s0, s0 = s2, (s1 = s0 ∧ s0 = s3), (s1 = s2 ∧ s0 = s3))\n  anim1d(s0 = s2, s1 = s0, s0 = s3, s1 = s2)\n  equtrr(s0, s2, s1)\n}","parent":["pm2.61d2","ex","mpi","ax6e","eximd","nfan","nfnae","spimed","nfeqf","pm3.21","nfae","syl5","equvini","aleximi","anim1d","equtrr"],"children":["2ax6e"]},{"name":"2ax6e","content":"We can always find values matching ` x ` and ` y ` , as long as they are represented by distinct variables. Version of ~ 2ax6elem with a distinct variable constraint. (Contributed by Wolf Lammen, 28-Sep-2018.)","origin":"thm 2ax6e(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))))\n  -| diffss(s0, s1)\n} = {\n  pm2.61i(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), wal(s1, wceq(cv(s1), cv(s0))))\n  3syl(wal(s1, wceq(cv(s1), cv(s0))), wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))))\n  jca(wal(s1, wceq(cv(s1), cv(s0))), wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))\n  aeveq(s1, s0, s0, s2)\n  aeveq(s1, s0, s1, s3)\n  19.8a(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))\n  19.8a(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))))\n  2ax6elem(s1, s0, s2, s3)\n  diffss.ex(s1, s0)\n}","pretty":"thm 2ax6e(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ ∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))\n  ⊣ d(s0, s1)\n} = {\n  pm2.61i(∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3))), ∀(s1, s1 = s0))\n  3syl(∀(s1, s1 = s0), ∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3))), (s0 = s2 ∧ s1 = s3), ∃(s1,(s0 = s2 ∧ s1 = s3)))\n  jca(∀(s1, s1 = s0), s0 = s2, s1 = s3)\n  aeveq(s1, s0, s0, s2)\n  aeveq(s1, s0, s1, s3)\n  19.8a(s1, (s0 = s2 ∧ s1 = s3))\n  19.8a(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))\n  2ax6elem(s1, s0, s2, s3)\n  diffss.ex(s1, s0)\n}","parent":["pm2.61i","3syl","jca","aeveq","19.8a","2ax6elem","diffss.ex"],"children":["2sb5rf","2sb6rf","2sb6rfOLD"]},{"name":"2sb5rf","content":"Reversed double substitution. (Contributed by NM, 3-Feb-2005.) (Revised by Mario Carneiro, 6-Oct-2016.) Remove distinct variable constraints. (Revised by Wolf Lammen, 28-Sep-2018.)","origin":"thm 2sb5rf(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(w0, wex(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))))))\n  -| wnf(s0, w0)\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  3bitr4ri(w0, wex(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))))), wex(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))), wa(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0))\n  bitri(wex(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))), wa(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0), wex(s0, wa(wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0)))\n  exbii(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0)), wa(wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0))\n  19.41(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0)\n  19.41(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0)\n  2exbii(s0, s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))), wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))\n  pm5.32i(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0)), w0)\n  sylan9bb(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)), wsb(s0, s2, wsb(s1, s3, w0)), w0, wsb(s1, s3, w0))\n  sbequ12r(s0, s2, wsb(s1, s3, w0))\n  sbequ12r(s1, s3, w0)\n  biantrur(w0, wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))))\n  2ax6e(s0, s1, s2, s3)\n}","pretty":"thm 2sb5rf(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ (w0 ↔ ∃(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧[s0 / s2][s1 / s3]w0))))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  3bitr4ri(w0, ∃(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧[s0 / s2][s1 / s3]w0))), ∃(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧ w0))), (∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))∧ w0))\n  bitri(∃(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧ w0))), (∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))∧ w0), ∃(s0,(∃(s1,(s0 = s2 ∧ s1 = s3))∧ w0)))\n  exbii(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧ w0)), (∃(s1,(s0 = s2 ∧ s1 = s3))∧ w0))\n  19.41(s1, (s0 = s2 ∧ s1 = s3), w0)\n  19.41(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)), w0)\n  2exbii(s0, s1, ((s0 = s2 ∧ s1 = s3)∧[s0 / s2][s1 / s3]w0), ((s0 = s2 ∧ s1 = s3)∧ w0))\n  pm5.32i((s0 = s2 ∧ s1 = s3), [s0 / s2][s1 / s3]w0, w0)\n  sylan9bb(s0 = s2, s1 = s3, [s0 / s2][s1 / s3]w0, w0, [s1 / s3]w0)\n  sbequ12r(s0, s2, [s1 / s3]w0)\n  sbequ12r(s1, s3, w0)\n  biantrur(w0, ∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3))))\n  2ax6e(s0, s1, s2, s3)\n}","parent":["3bitr4ri","bitri","exbii","19.41","2exbii","pm5.32i","sylan9bb","sbequ12r","biantrur","2ax6e"],"children":["sbel2x"]},{"name":"2sb6rf","content":"Reversed double substitution. (Contributed by NM, 3-Feb-2005.) (Revised by Mario Carneiro, 6-Oct-2016.) Remove variable constraints. (Revised by Wolf Lammen, 28-Sep-2018.) (Proof shortened by Wolf Lammen, 13-Apr-2023.)","origin":"thm 2sb6rf(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(w0, wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))))))\n  -| wnf(s0, w0)\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  3bitr4ri(w0, wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))))), wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))), wi(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0))\n  bitri(wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))), wi(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0), wal(s0, wi(wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0)))\n  albii(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0)), wi(wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0))\n  19.23(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0)\n  19.23(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0)\n  2albii(s0, s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))), wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))\n  pm5.74i(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0)), w0)\n  sylan9bb(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)), wsb(s0, s2, wsb(s1, s3, w0)), w0, wsb(s1, s3, w0))\n  sbequ12r(s0, s2, wsb(s1, s3, w0))\n  sbequ12r(s1, s3, w0)\n  a1bi(w0, wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))))\n  2ax6e(s0, s1, s2, s3)\n}","pretty":"thm 2sb6rf(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ (w0 ↔ ∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→[s0 / s2][s1 / s3]w0))))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  3bitr4ri(w0, ∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→[s0 / s2][s1 / s3]w0))), ∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→ w0))), (∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))→ w0))\n  bitri(∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→ w0))), (∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))→ w0), ∀(s0,(∃(s1,(s0 = s2 ∧ s1 = s3))→ w0)))\n  albii(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→ w0)), (∃(s1,(s0 = s2 ∧ s1 = s3))→ w0))\n  19.23(s1, (s0 = s2 ∧ s1 = s3), w0)\n  19.23(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)), w0)\n  2albii(s0, s1, ((s0 = s2 ∧ s1 = s3)→[s0 / s2][s1 / s3]w0), ((s0 = s2 ∧ s1 = s3)→ w0))\n  pm5.74i((s0 = s2 ∧ s1 = s3), [s0 / s2][s1 / s3]w0, w0)\n  sylan9bb(s0 = s2, s1 = s3, [s0 / s2][s1 / s3]w0, w0, [s1 / s3]w0)\n  sbequ12r(s0, s2, [s1 / s3]w0)\n  sbequ12r(s1, s3, w0)\n  a1bi(w0, ∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3))))\n  2ax6e(s0, s1, s2, s3)\n}","parent":["3bitr4ri","bitri","albii","19.23","2albii","pm5.74i","sylan9bb","sbequ12r","a1bi","2ax6e"],"children":[]},{"name":"2sb6rfOLD","content":"Obsolete version of ~ 2sb6rf as of 13-Apr-2023. (Contributed by NM, 3-Feb-2005.) (Revised by Mario Carneiro, 6-Oct-2016.) Remove variable constraints. (Revised by Wolf Lammen, 28-Sep-2018.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm 2sb6rfOLD(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(w0, wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))))))\n  -| wnf(s0, w0)\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  3bitrri(w0, wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))))), wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))), wi(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0))\n  2albii(s0, s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0))), wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))\n  pm5.74i(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s0, s2, wsb(s1, s3, w0)), w0)\n  sylan9bb(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)), wsb(s0, s2, wsb(s1, s3, w0)), w0, wsb(s1, s3, w0))\n  sbequ12r(s0, s2, wsb(s1, s3, w0))\n  sbequ12r(s1, s3, w0)\n  bitri(wal(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0))), wi(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0), wal(s0, wi(wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0)))\n  albii(s0, wal(s1, wi(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0)), wi(wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0))\n  19.23(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), w0)\n  19.23(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3)))), w0)\n  ax-mp(wb(wi(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0), w0), wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))))\n  2ax6e(s0, s1, s2, s3)\n  pm5.5(wex(s0, wex(s1, wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))), w0)\n}","pretty":"thm 2sb6rfOLD(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ (w0 ↔ ∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→[s0 / s2][s1 / s3]w0))))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  3bitrri(w0, ∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→[s0 / s2][s1 / s3]w0))), ∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→ w0))), (∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))→ w0))\n  2albii(s0, s1, ((s0 = s2 ∧ s1 = s3)→[s0 / s2][s1 / s3]w0), ((s0 = s2 ∧ s1 = s3)→ w0))\n  pm5.74i((s0 = s2 ∧ s1 = s3), [s0 / s2][s1 / s3]w0, w0)\n  sylan9bb(s0 = s2, s1 = s3, [s0 / s2][s1 / s3]w0, w0, [s1 / s3]w0)\n  sbequ12r(s0, s2, [s1 / s3]w0)\n  sbequ12r(s1, s3, w0)\n  bitri(∀(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→ w0))), (∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))→ w0), ∀(s0,(∃(s1,(s0 = s2 ∧ s1 = s3))→ w0)))\n  albii(s0, ∀(s1,((s0 = s2 ∧ s1 = s3)→ w0)), (∃(s1,(s0 = s2 ∧ s1 = s3))→ w0))\n  19.23(s1, (s0 = s2 ∧ s1 = s3), w0)\n  19.23(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)), w0)\n  ax-mp(((∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3)))→ w0)↔ w0), ∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3))))\n  2ax6e(s0, s1, s2, s3)\n  pm5.5(∃(s0, ∃(s1,(s0 = s2 ∧ s1 = s3))), w0)\n}","parent":["3bitrri","2albii","pm5.74i","sylan9bb","sbequ12r","bitri","albii","19.23","ax-mp","2ax6e","pm5.5"],"children":[]},{"name":"sbel2x","content":"Elimination of double substitution. (Contributed by NM, 5-Aug-1993.) (Proof shortened by Wolf Lammen, 29-Sep-2018.)","origin":"thm sbel2x(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(w0, wex(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s1, s3, wsb(s0, s2, w0))))))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w0)\n  -| diffsw(s1, w0)\n} = {\n  3bitri(w0, wex(s0, wex(s1, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s1, s3, wsb(s0, s2, w0))))), wex(s1, wex(s0, wa(wa(wceq(cv(s1), cv(s3)), wceq(cv(s0), cv(s2))), wsb(s1, s3, wsb(s0, s2, w0))))), wex(s1, wex(s0, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s1, s3, wsb(s0, s2, w0))))))\n  2sb5rf(s1, s0, s3, s2, w0)\n  nfv(s1, w0)\n  nfv(s0, w0)\n  2exbii(s1, s0, wa(wa(wceq(cv(s1), cv(s3)), wceq(cv(s0), cv(s2))), wsb(s1, s3, wsb(s0, s2, w0))), wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s1, s3, wsb(s0, s2, w0))))\n  anbi1i(wa(wceq(cv(s1), cv(s3)), wceq(cv(s0), cv(s2))), wsb(s1, s3, wsb(s0, s2, w0)), wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))))\n  ancom(wceq(cv(s1), cv(s3)), wceq(cv(s0), cv(s2)))\n  excom(s1, s0, wa(wa(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s3))), wsb(s1, s3, wsb(s0, s2, w0))))\n  diffss.ex(s1, s0)\n}","pretty":"thm sbel2x(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ (w0 ↔ ∃(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧[s1 / s3][s0 / s2]w0))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w0)\n  ⊣ d(s1, w0)\n} = {\n  3bitri(w0, ∃(s0, ∃(s1,((s0 = s2 ∧ s1 = s3)∧[s1 / s3][s0 / s2]w0))), ∃(s1, ∃(s0,((s1 = s3 ∧ s0 = s2)∧[s1 / s3][s0 / s2]w0))), ∃(s1, ∃(s0,((s0 = s2 ∧ s1 = s3)∧[s1 / s3][s0 / s2]w0))))\n  2sb5rf(s1, s0, s3, s2, w0)\n  nfv(s1, w0)\n  nfv(s0, w0)\n  2exbii(s1, s0, ((s1 = s3 ∧ s0 = s2)∧[s1 / s3][s0 / s2]w0), ((s0 = s2 ∧ s1 = s3)∧[s1 / s3][s0 / s2]w0))\n  anbi1i((s1 = s3 ∧ s0 = s2), [s1 / s3][s0 / s2]w0, (s0 = s2 ∧ s1 = s3))\n  ancom(s1 = s3, s0 = s2)\n  excom(s1, s0, ((s0 = s2 ∧ s1 = s3)∧[s1 / s3][s0 / s2]w0))\n  diffss.ex(s1, s0)\n}","parent":["3bitri","2sb5rf","nfv","2exbii","anbi1i","ancom","excom","diffss.ex"],"children":[]},{"name":"exsbOLD","content":"Obsolete version of ~ exsb as of 16-Oct-2022. (Contributed by NM, 2-Feb-2005.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm exsbOLD(setvar s0, setvar s1, wff w0) {\n  |- wb(wex(s0, w0), wex(s1, wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n} = {\n  cbvex(s0, s1, w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  nfv(s1, w0)\n  nfa1(s0, wi(wceq(cv(s0), cv(s1)), w0))\n  impbid(wceq(cv(s0), cv(s1)), w0, wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  ax12v(s0, s1, w0)\n  com12(wceq(cv(s0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), w0)\n  sp(s0, wi(wceq(cv(s0), cv(s1)), w0))\n}","pretty":"thm exsbOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃(s0, w0)↔ ∃(s1, ∀(s0,(s0 = s1 → w0))))\n  ⊣ d(s0, s1)\n  ⊣ d(s1, w0)\n} = {\n  cbvex(s0, s1, w0, ∀(s0,(s0 = s1 → w0)))\n  nfv(s1, w0)\n  nfa1(s0, (s0 = s1 → w0))\n  impbid(s0 = s1, w0, ∀(s0,(s0 = s1 → w0)))\n  ax12v(s0, s1, w0)\n  com12(s0 = s1, ∀(s0,(s0 = s1 → w0)), w0)\n  sp(s0, (s0 = s1 → w0))\n}","parent":["cbvex","nfv","nfa1","impbid","ax12v","com12","sp"],"children":[]},{"name":"sb4b","content":"Simplified definition of substitution when variables are distinct. Version of ~ sb6 with a distinctor. (Contributed by NM, 27-May-1997.) Revise ~ df-sb . (Revised by Wolf Lammen, 25-Jul-2023.)","origin":"thm sb4b(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s1, s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n} = {\n  3bitr4g(wn(wal(s0, wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(hs0, wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(hs0)), w0)))), wal(hs0, wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))))\n  albidv(hs0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(hs0)), w0))), wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  syl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(hs0)), w0))), wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wnf(s0, wceq(cv(hs0), cv(s1))))\n  nfeqf2(s0, s1, hs0)\n  pm5.74da(wnf(s0, wceq(cv(hs0), cv(s1))), wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(hs0)), w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  albid(s0, wa(wnf(s0, wceq(cv(hs0), cv(s1))), wceq(cv(hs0), cv(s1))), wi(wceq(cv(s0), cv(hs0)), w0), wi(wceq(cv(s0), cv(s1)), w0))\n  nfan1(s0, wnf(s0, wceq(cv(hs0), cv(s1))), wceq(cv(hs0), cv(s1)))\n  nfnf1(s0, wceq(cv(hs0), cv(s1)))\n  id(wnf(s0, wceq(cv(hs0), cv(s1))))\n  adantl(wnf(s0, wceq(cv(hs0), cv(s1))), wceq(cv(hs0), cv(s1)), wb(wi(wceq(cv(s0), cv(hs0)), w0), wi(wceq(cv(s0), cv(s1)), w0)))\n  imbi1d(wceq(cv(hs0), cv(s1)), wceq(cv(s0), cv(hs0)), w0, wceq(cv(s0), cv(s1)))\n  equequ2(hs0, s1, s0)\n  df-sb(s1, s0, hs0, w0)\n  bitr4i(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wal(hs0, wi(wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))), wi(wex(hs0, wceq(cv(hs0), cv(s1))), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n  a1bi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wex(hs0, wceq(cv(hs0), cv(s1))))\n  ax6ev(hs0, s1)\n  19.23v(hs0, wceq(cv(hs0), cv(s1)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  diff.hs0.w(wn(wal(s0, wceq(cv(s0), cv(s1)))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.w(w0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n}","pretty":"thm sb4b(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s1 / s0]w0 ↔ ∀(s0,(s0 = s1 → w0))))\n} = {\n  3bitr4g(¬ ∀(s0, s0 = s1), [s1 / s0]w0, ∀(s0,(s0 = s1 → w0)), ∀(hs0,(hs0 = s1 → ∀(s0,(s0 = hs0 → w0)))), ∀(hs0,(hs0 = s1 → ∀(s0,(s0 = s1 → w0)))))\n  albidv(hs0, ¬ ∀(s0, s0 = s1), (hs0 = s1 → ∀(s0,(s0 = hs0 → w0))), (hs0 = s1 → ∀(s0,(s0 = s1 → w0))))\n  syl(¬ ∀(s0, s0 = s1), ((hs0 = s1 → ∀(s0,(s0 = hs0 → w0)))↔(hs0 = s1 → ∀(s0,(s0 = s1 → w0)))), F/(s0, hs0 = s1))\n  nfeqf2(s0, s1, hs0)\n  pm5.74da(F/(s0, hs0 = s1), hs0 = s1, ∀(s0,(s0 = hs0 → w0)), ∀(s0,(s0 = s1 → w0)))\n  albid(s0, (F/(s0, hs0 = s1)∧ hs0 = s1), (s0 = hs0 → w0), (s0 = s1 → w0))\n  nfan1(s0, F/(s0, hs0 = s1), hs0 = s1)\n  nfnf1(s0, hs0 = s1)\n  id(F/(s0, hs0 = s1))\n  adantl(F/(s0, hs0 = s1), hs0 = s1, ((s0 = hs0 → w0)↔(s0 = s1 → w0)))\n  imbi1d(hs0 = s1, s0 = hs0, w0, s0 = s1)\n  equequ2(hs0, s1, s0)\n  df-sb(s1, s0, hs0, w0)\n  bitr4i(∀(s0,(s0 = s1 → w0)), ∀(hs0,(hs0 = s1 → ∀(s0,(s0 = s1 → w0)))), (∃(hs0, hs0 = s1)→ ∀(s0,(s0 = s1 → w0))))\n  a1bi(∀(s0,(s0 = s1 → w0)), ∃(hs0, hs0 = s1))\n  ax6ev(hs0, s1)\n  19.23v(hs0, hs0 = s1, ∀(s0,(s0 = s1 → w0)))\n  diff.hs0.w(¬ ∀(s0, s0 = s1))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.w(w0)\n  diff.hs0.s(s1)\n  diff.hs0.w(∀(s0,(s0 = s1 → w0)))\n}","parent":["3bitr4g","albidv","syl","nfeqf2","pm5.74da","albid","nfan1","nfnf1","id","adantl","imbi1d","equequ2","df-sb","bitr4i","a1bi","ax6ev","19.23v","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":["sb2","sb4OLD","sb1","sb4a","hbsb2","dfsb2","sbcom3","sbal1","sbal2","sbal2OLD","wl-2sb6d","wl-sbalnae"]},{"name":"sb2","content":"One direction of a simplified definition of substitution. The converse requires either a disjoint variable condition ( ~ sb6 ) or a non-freeness hypothesis ( ~ sb6f ). (Contributed by NM, 13-May-1993.) Revise ~ df-sb . (Revised by Wolf Lammen, 26-Jul-2023.)","origin":"thm sb2(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0))\n} = {\n  pm2.61i(wi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0)), wal(s0, wceq(cv(s0), cv(s1))))\n  syl6(wal(s0, wceq(cv(s0), cv(s1))), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0), wal(s0, w0))\n  al2imi(s0, wceq(cv(s0), cv(s1)), wi(wceq(cv(s0), cv(s1)), w0), w0)\n  pm2.27(wceq(cv(s0), cv(s1)), w0)\n  stdpc4(s0, s1, w0)\n  biimprd(wn(wal(s0, wceq(cv(s0), cv(s1)))), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0))\n  sb4b(s0, s1, w0)\n}","pretty":"thm sb2(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,(s0 = s1 → w0))→[s1 / s0]w0)\n} = {\n  pm2.61i((∀(s0,(s0 = s1 → w0))→[s1 / s0]w0), ∀(s0, s0 = s1))\n  syl6(∀(s0, s0 = s1), ∀(s0,(s0 = s1 → w0)), [s1 / s0]w0, ∀(s0, w0))\n  al2imi(s0, s0 = s1, (s0 = s1 → w0), w0)\n  pm2.27(s0 = s1, w0)\n  stdpc4(s0, s1, w0)\n  biimprd(¬ ∀(s0, s0 = s1), ∀(s0,(s0 = s1 → w0)), [s1 / s0]w0)\n  sb4b(s0, s1, w0)\n}","parent":["pm2.61i","syl6","al2imi","pm2.27","stdpc4","biimprd","sb4b"],"children":["sb3","hbsb2","hbsb2a","hbsb2e","equsb1","equsb2","dfsb2","sbequiOLD","sb6f","sbi1OLD","sbeqal1"]},{"name":"sb3","content":"One direction of a simplified definition of substitution when variables are distinct. (Contributed by NM, 5-Aug-1993.)","origin":"thm sb3(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0)))\n} = {\n  syl6bi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  equs5(s0, s1, w0)\n  sb2(s0, s1, w0)\n}","pretty":"thm sb3(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→(∃(s0,(s0 = s1 ∧ w0))→[s1 / s0]w0))\n} = {\n  syl6bi(¬ ∀(s0, s0 = s1), ∃(s0,(s0 = s1 ∧ w0)), [s1 / s0]w0, ∀(s0,(s0 = s1 → w0)))\n  equs5(s0, s1, w0)\n  sb2(s0, s1, w0)\n}","parent":["syl6bi","equs5","sb2"],"children":["sb3b","dfsb1"]},{"name":"sb4OLD","content":"Obsolete as of 30-Jul-2023. Use ~ sb4b instead. One direction of a simplified definition of substitution when variables are distinct. (Contributed by NM, 14-May-1993.) Revise ~ df-sb . (Revised by Wolf Lammen, 25-Jul-2023.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sb4OLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wsb(s1, s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0))))\n} = {\n  biimpd(wn(wal(s0, wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  sb4b(s0, s1, w0)\n}","pretty":"thm sb4OLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s1 / s0]w0 → ∀(s0,(s0 = s1 → w0))))\n} = {\n  biimpd(¬ ∀(s0, s0 = s1), [s1 / s0]w0, ∀(s0,(s0 = s1 → w0)))\n  sb4b(s0, s1, w0)\n}","parent":["biimpd","sb4b"],"children":["sbequiOLD","sbi1OLD"]},{"name":"sb1","content":"One direction of a simplified definition of substitution. The converse requires either a disjoint variable condition ( ~ sb5 ) or a non-freeness hypothesis ( ~ sb5f ). (Contributed by NM, 13-May-1993.) Revise ~ df-sb . (Revised by Wolf Lammen, 29-Jul-2023.)","origin":"thm sb1(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n} = {\n  pm2.61i(wi(wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0))), wal(s1, wceq(cv(s1), cv(s0))))\n  sps(s1, wceq(cv(s1), cv(s0)), wi(wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0))))\n  syld(wceq(cv(s1), cv(s0)), wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)), w0)\n  sbequ2(s1, s0, w0)\n  ex(wceq(cv(s1), cv(s0)), w0, wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  19.8a(s1, wa(wceq(cv(s1), cv(s0)), w0))\n  syl6bi(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  sb4b(s1, s0, w0)\n  equs4(s1, s0, w0)\n}","pretty":"thm sb1(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∃(s1,(s1 = s0 ∧ w0)))\n} = {\n  pm2.61i(([s0 / s1]w0 → ∃(s1,(s1 = s0 ∧ w0))), ∀(s1, s1 = s0))\n  sps(s1, s1 = s0, ([s0 / s1]w0 → ∃(s1,(s1 = s0 ∧ w0))))\n  syld(s1 = s0, [s0 / s1]w0, ∃(s1,(s1 = s0 ∧ w0)), w0)\n  sbequ2(s1, s0, w0)\n  ex(s1 = s0, w0, ∃(s1,(s1 = s0 ∧ w0)))\n  19.8a(s1, (s1 = s0 ∧ w0))\n  syl6bi(¬ ∀(s1, s1 = s0), [s0 / s1]w0, ∃(s1,(s1 = s0 ∧ w0)), ∀(s1,(s1 = s0 → w0)))\n  sb4b(s1, s0, w0)\n  equs4(s1, s0, w0)\n}","parent":["pm2.61i","sps","syld","sbequ2","ex","19.8a","syl6bi","sb4b","equs4"],"children":["sb3b","dfsb1","spsbeOLDOLD","sb4vOLDOLD","sb4e"]},{"name":"sb3b","content":"Simplified definition of substitution when variables are distinct. This is the biconditional strengthening of ~ sb3 . (Contributed by BJ, 6-Oct-2018.)","origin":"thm sb3b(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s1, s0, w0), wex(s0, wa(wceq(cv(s0), cv(s1)), w0))))\n} = {\n  impbid2(wn(wal(s0, wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)))\n  sb1(s1, s0, w0)\n  sb3(s0, s1, w0)\n}","pretty":"thm sb3b(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s1 / s0]w0 ↔ ∃(s0,(s0 = s1 ∧ w0))))\n} = {\n  impbid2(¬ ∀(s0, s0 = s1), [s1 / s0]w0, ∃(s0,(s0 = s1 ∧ w0)))\n  sb1(s1, s0, w0)\n  sb3(s0, s1, w0)\n}","parent":["impbid2","sb1","sb3"],"children":[]},{"name":"sb4a","content":"A version of one implication of ~ sb4b that does not require a distinctor antecedent. (Contributed by NM, 2-Feb-2007.) Revise ~ df-sb . (Revised by Wolf Lammen, 28-Jul-2023.)","origin":"thm sb4a(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, wal(s0, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n} = {\n  pm2.61i(wi(wsb(s0, s1, wal(s0, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))), wal(s1, wceq(cv(s1), cv(s0))))\n  syld(wal(s1, wceq(cv(s1), cv(s0))), wsb(s0, s1, wal(s0, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wal(s0, w0))\n  sps(s1, wceq(cv(s1), cv(s0)), wi(wsb(s0, s1, wal(s0, w0)), wal(s0, w0)))\n  sbequ2(s1, s0, wal(s0, w0))\n  syl6(wal(s1, wceq(cv(s1), cv(s0))), wal(s0, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wal(s1, w0))\n  axc11r(s1, s0, w0)\n  ala1(s1, w0, wceq(cv(s1), cv(s0)))\n  syl6bi(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, wal(s0, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), wal(s0, w0))))\n  sb4b(s1, s0, wal(s0, w0))\n  alimi(s1, wi(wceq(cv(s1), cv(s0)), wal(s0, w0)), wi(wceq(cv(s1), cv(s0)), w0))\n  imim2i(wceq(cv(s1), cv(s0)), wal(s0, w0), w0)\n  sp(s0, w0)\n}","pretty":"thm sb4a(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]∀(s0, w0)→ ∀(s1,(s1 = s0 → w0)))\n} = {\n  pm2.61i(([s0 / s1]∀(s0, w0)→ ∀(s1,(s1 = s0 → w0))), ∀(s1, s1 = s0))\n  syld(∀(s1, s1 = s0), [s0 / s1]∀(s0, w0), ∀(s1,(s1 = s0 → w0)), ∀(s0, w0))\n  sps(s1, s1 = s0, ([s0 / s1]∀(s0, w0)→ ∀(s0, w0)))\n  sbequ2(s1, s0, ∀(s0, w0))\n  syl6(∀(s1, s1 = s0), ∀(s0, w0), ∀(s1,(s1 = s0 → w0)), ∀(s1, w0))\n  axc11r(s1, s0, w0)\n  ala1(s1, w0, s1 = s0)\n  syl6bi(¬ ∀(s1, s1 = s0), [s0 / s1]∀(s0, w0), ∀(s1,(s1 = s0 → w0)), ∀(s1,(s1 = s0 → ∀(s0, w0))))\n  sb4b(s1, s0, ∀(s0, w0))\n  alimi(s1, (s1 = s0 → ∀(s0, w0)), (s1 = s0 → w0))\n  imim2i(s1 = s0, ∀(s0, w0), w0)\n  sp(s0, w0)\n}","parent":["pm2.61i","syld","sps","sbequ2","syl6","axc11r","ala1","syl6bi","sb4b","alimi","imim2i","sp"],"children":["hbsb2a","sb6f","bj-hbsb2av"]},{"name":"dfsb1","content":"Alternate definition of substitution. Remark 9.1 in [Megill] p. 447 (p. 15 of the preprint). This was the original definition before ~ df-sb . Note that it does not require dummy variables in its definiens; this is done by having ` x ` free in the first conjunct and bound in the second. (Contributed by BJ, 9-Jul-2023.) Revise ~ df-sb . (Revised by Wolf Lammen, 29-Jul-2023.)","origin":"thm dfsb1(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wa(wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0))))\n} = {\n  impbii(wsb(s0, s1, w0), wa(wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0))))\n  jca(wsb(s0, s1, w0), wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  com12(wsb(s0, s1, w0), wceq(cv(s1), cv(s0)), w0)\n  sbequ2(s1, s0, w0)\n  sb1(s0, s1, w0)\n  pm2.61i(wi(wa(wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0))), wsb(s0, s1, w0)), wal(s1, wceq(cv(s1), cv(s0))))\n  adantrd(wal(s1, wceq(cv(s1), cv(s0))), wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)), wsb(s0, s1, w0))\n  sps(s1, wceq(cv(s1), cv(s0)), wi(wi(wceq(cv(s1), cv(s0)), w0), wsb(s0, s1, w0)))\n  embantd(wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(s0)), w0, wsb(s0, s1, w0))\n  id(wceq(cv(s1), cv(s0)))\n  sbequ1(s1, s0, w0)\n  adantld(wn(wal(s1, wceq(cv(s1), cv(s0)))), wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)), wsb(s0, s1, w0))\n  sb3(s1, s0, w0)\n}","pretty":"thm dfsb1(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔((s1 = s0 → w0)∧ ∃(s1,(s1 = s0 ∧ w0))))\n} = {\n  impbii([s0 / s1]w0, ((s1 = s0 → w0)∧ ∃(s1,(s1 = s0 ∧ w0))))\n  jca([s0 / s1]w0, (s1 = s0 → w0), ∃(s1,(s1 = s0 ∧ w0)))\n  com12([s0 / s1]w0, s1 = s0, w0)\n  sbequ2(s1, s0, w0)\n  sb1(s0, s1, w0)\n  pm2.61i((((s1 = s0 → w0)∧ ∃(s1,(s1 = s0 ∧ w0)))→[s0 / s1]w0), ∀(s1, s1 = s0))\n  adantrd(∀(s1, s1 = s0), (s1 = s0 → w0), ∃(s1,(s1 = s0 ∧ w0)), [s0 / s1]w0)\n  sps(s1, s1 = s0, ((s1 = s0 → w0)→[s0 / s1]w0))\n  embantd(s1 = s0, s1 = s0, w0, [s0 / s1]w0)\n  id(s1 = s0)\n  sbequ1(s1, s0, w0)\n  adantld(¬ ∀(s1, s1 = s0), (s1 = s0 → w0), ∃(s1,(s1 = s0 ∧ w0)), [s0 / s1]w0)\n  sb3(s1, s0, w0)\n}","parent":["impbii","jca","com12","sbequ2","sb1","pm2.61i","adantrd","sps","embantd","id","sbequ1","adantld","sb3"],"children":["sb2vOLDOLD","sbequ2OLD","sbimiOLD","sbimdvOLD","equsb1vOLDOLD","sbimdOLD","sbtvOLD","sbequ1OLD","drsb1","sbnOLD","subsym1","bj-dfsb2","frege55b"]},{"name":"spsbeOLDOLD","content":"Obsolete version of ~ spsbe as of 7-Jul-2023. A specialization theorem. (Contributed by NM, 29-Jun-1993.) (Proof shortened by Wolf Lammen, 3-May-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm spsbeOLDOLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, w0), wex(s1, w0))\n} = {\n  syl(wsb(s0, s1, w0), wex(s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  sb1(s0, s1, w0)\n  exsimpr(s1, wceq(cv(s1), cv(s0)), w0)\n}","pretty":"thm spsbeOLDOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∃(s1, w0))\n} = {\n  syl([s0 / s1]w0, ∃(s1, w0), ∃(s1,(s1 = s0 ∧ w0)))\n  sb1(s0, s1, w0)\n  exsimpr(s1, s1 = s0, w0)\n}","parent":["syl","sb1","exsimpr"],"children":[]},{"name":"sb2vOLDOLD","content":"Obsolete version of ~ sb2 as of 8-Jul-2023. Version of ~ sb2 with a disjoint variable condition, which does not require ~ ax-13 . (Contributed by BJ, 31-May-2019.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm sb2vOLDOLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0))\n  -| diffss(s0, s1)\n} = {\n  sylanbrc(wal(s0, wi(wceq(cv(s0), cv(s1)), w0)), wsb(s1, s0, w0), wi(wceq(cv(s0), cv(s1)), w0), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)))\n  sp(s0, wi(wceq(cv(s0), cv(s1)), w0))\n  equs4v(s0, s1, w0)\n  dfsb1(s1, s0, w0)\n}","pretty":"thm sb2vOLDOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,(s0 = s1 → w0))→[s1 / s0]w0)\n  ⊣ d(s0, s1)\n} = {\n  sylanbrc(∀(s0,(s0 = s1 → w0)), [s1 / s0]w0, (s0 = s1 → w0), ∃(s0,(s0 = s1 ∧ w0)))\n  sp(s0, (s0 = s1 → w0))\n  equs4v(s0, s1, w0)\n  dfsb1(s1, s0, w0)\n}","parent":["sylanbrc","sp","equs4v","dfsb1"],"children":[]},{"name":"sb4vOLDOLD","content":"Obsolete version of ~ sb4vOLD as of 8-Jul-2023. Version of ~ sb4OLD with a disjoint variable condition instead of a distinctor antecedent, which does not require ~ ax-13 . (Contributed by BJ, 23-Jun-2019.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sb4vOLDOLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  -| diffss(s0, s1)\n} = {\n  sylib(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  sb1(s0, s1, w0)\n  sb56(s1, s0, w0)\n  diffss.ex(s1, s0)\n}","pretty":"thm sb4vOLDOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∀(s1,(s1 = s0 → w0)))\n  ⊣ d(s0, s1)\n} = {\n  sylib([s0 / s1]w0, ∀(s1,(s1 = s0 → w0)), ∃(s1,(s1 = s0 ∧ w0)))\n  sb1(s0, s1, w0)\n  sb56(s1, s0, w0)\n  diffss.ex(s1, s0)\n}","parent":["sylib","sb1","sb56","diffss.ex"],"children":[]},{"name":"sbequ2OLD","content":"Obsolete version of ~ sbequ2 as of 8-Jul-2023. An equality theorem for substitution. (Contributed by NM, 16-May-1993.) (Proof shortened by Wolf Lammen, 25-Feb-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbequ2OLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wsb(s1, s0, w0), w0))\n} = {\n  com12(wceq(cv(s0), cv(s1)), wsb(s1, s0, w0), w0)\n  simplbi(wsb(s1, s0, w0), wi(wceq(cv(s0), cv(s1)), w0), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)))\n  dfsb1(s1, s0, w0)\n}","pretty":"thm sbequ2OLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (s0 = s1 →([s1 / s0]w0 → w0))\n} = {\n  com12(s0 = s1, [s1 / s0]w0, w0)\n  simplbi([s1 / s0]w0, (s0 = s1 → w0), ∃(s0,(s0 = s1 ∧ w0)))\n  dfsb1(s1, s0, w0)\n}","parent":["com12","simplbi","dfsb1"],"children":[]},{"name":"sbimiOLD","content":"Obsolete version of ~ sbimi as of 6-Jul-2023. Infer substitution into antecedent and consequent of an implication. (Contributed by NM, 25-Jun-1998.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbimiOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wsb(s0, s1, w0), wsb(s0, s1, w1))\n  -| wi(w0, w1)\n} = {\n  3imtr4i(wsb(s0, s1, w0), wsb(s0, s1, w1), wa(wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0))), wa(wi(wceq(cv(s1), cv(s0)), w1), wex(s1, wa(wceq(cv(s1), cv(s0)), w1))))\n  anim12i(wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)), wi(wceq(cv(s1), cv(s0)), w1), wex(s1, wa(wceq(cv(s1), cv(s0)), w1)))\n  imim2i(wceq(cv(s1), cv(s0)), w0, w1)\n  eximi(s1, wa(wceq(cv(s1), cv(s0)), w0), wa(wceq(cv(s1), cv(s0)), w1))\n  anim2i(wceq(cv(s1), cv(s0)), w0, w1)\n  dfsb1(s0, s1, w0)\n  dfsb1(s0, s1, w1)\n}","pretty":"thm sbimiOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1]w0 →[s0 / s1]w1)\n  ⊣ (w0 → w1)\n} = {\n  3imtr4i([s0 / s1]w0, [s0 / s1]w1, ((s1 = s0 → w0)∧ ∃(s1,(s1 = s0 ∧ w0))), ((s1 = s0 → w1)∧ ∃(s1,(s1 = s0 ∧ w1))))\n  anim12i((s1 = s0 → w0), ∃(s1,(s1 = s0 ∧ w0)), (s1 = s0 → w1), ∃(s1,(s1 = s0 ∧ w1)))\n  imim2i(s1 = s0, w0, w1)\n  eximi(s1, (s1 = s0 ∧ w0), (s1 = s0 ∧ w1))\n  anim2i(s1 = s0, w0, w1)\n  dfsb1(s0, s1, w0)\n  dfsb1(s0, s1, w1)\n}","parent":["3imtr4i","anim12i","imim2i","eximi","anim2i","dfsb1"],"children":[]},{"name":"sbimdvOLD","content":"Obsolete version of ~ sbimdv as of 6-Jul-2023. Deduction substituting both sides of an implication, with ` ph ` and ` x ` disjoint. See also ~ sbimd . (Contributed by Wolf Lammen, 6-May-2023.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbimdvOLD(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(wsb(s0, s1, w1), wsb(s0, s1, w2)))\n  -| wi(w0, wi(w1, w2))\n  -| diffsw(s1, w0)\n} = {\n  3imtr4g(w0, wsb(s0, s1, w1), wsb(s0, s1, w2), wa(wi(wceq(cv(s1), cv(s0)), w1), wex(s1, wa(wceq(cv(s1), cv(s0)), w1))), wa(wi(wceq(cv(s1), cv(s0)), w2), wex(s1, wa(wceq(cv(s1), cv(s0)), w2))))\n  anim12d(w0, wi(wceq(cv(s1), cv(s0)), w1), wex(s1, wa(wceq(cv(s1), cv(s0)), w1)), wi(wceq(cv(s1), cv(s0)), w2), wex(s1, wa(wceq(cv(s1), cv(s0)), w2)))\n  imim2d(w0, wceq(cv(s1), cv(s0)), w1, w2)\n  eximdv(s1, w0, wa(wceq(cv(s1), cv(s0)), w1), wa(wceq(cv(s1), cv(s0)), w2))\n  anim2d(w0, wceq(cv(s1), cv(s0)), w1, w2)\n  dfsb1(s0, s1, w1)\n  dfsb1(s0, s1, w2)\n}","pretty":"thm sbimdvOLD(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →([s0 / s1]w1 →[s0 / s1]w2))\n  ⊣ (w0 →(w1 → w2))\n  ⊣ d(s1, w0)\n} = {\n  3imtr4g(w0, [s0 / s1]w1, [s0 / s1]w2, ((s1 = s0 → w1)∧ ∃(s1,(s1 = s0 ∧ w1))), ((s1 = s0 → w2)∧ ∃(s1,(s1 = s0 ∧ w2))))\n  anim12d(w0, (s1 = s0 → w1), ∃(s1,(s1 = s0 ∧ w1)), (s1 = s0 → w2), ∃(s1,(s1 = s0 ∧ w2)))\n  imim2d(w0, s1 = s0, w1, w2)\n  eximdv(s1, w0, (s1 = s0 ∧ w1), (s1 = s0 ∧ w2))\n  anim2d(w0, s1 = s0, w1, w2)\n  dfsb1(s0, s1, w1)\n  dfsb1(s0, s1, w2)\n}","parent":["3imtr4g","anim12d","imim2d","eximdv","anim2d","dfsb1"],"children":[]},{"name":"sbbidvOLD","content":"Obsolete version of ~ sbbidv as of 6-Jul-2023. Deduction substituting both sides of a biconditional, with ` ph ` and ` x ` disjoint. See also ~ sbbid . (Contributed by Wolf Lammen, 6-May-2023.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbbidvOLD(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wsb(s0, s1, w1), wsb(s0, s1, w2)))\n  -| wi(w0, wb(w1, w2))\n  -| diffsw(s1, w0)\n} = {\n  impbid(w0, wsb(s0, s1, w1), wsb(s0, s1, w2))\n  sbimdv(s0, s1, w0, w1, w2)\n  biimpd(w0, w1, w2)\n  sbimdv(s0, s1, w0, w2, w1)\n  biimprd(w0, w2, w1)\n}","pretty":"thm sbbidvOLD(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →([s0 / s1]w1 ↔[s0 / s1]w2))\n  ⊣ (w0 →(w1 ↔ w2))\n  ⊣ d(s1, w0)\n} = {\n  impbid(w0, [s0 / s1]w1, [s0 / s1]w2)\n  sbimdv(s0, s1, w0, w1, w2)\n  biimpd(w0, w1, w2)\n  sbimdv(s0, s1, w0, w2, w1)\n  biimprd(w0, w2, w1)\n}","parent":["impbid","sbimdv","biimpd","biimprd"],"children":[]},{"name":"equsb1vOLDOLD","content":"Obsolete version of ~ equsb1v as of 19-Jun-2023. (Contributed by BJ, 11-Sep-2019.) Remove dependencies on axioms. (Revised by Wolf Lammen, 30-May-2023.) (Proof shortened by Steven Nguyen, 31-May-2023.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm equsb1vOLDOLD(setvar s0, setvar s1) {\n  |- wsb(s0, s1, wceq(cv(s1), cv(s0)))\n  -| diffss(s0, s1)\n} = {\n  mpbir2an(wsb(s0, s1, wceq(cv(s1), cv(s0))), wi(wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(s0))), wex(s1, wa(wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(s0)))))\n  eximii(s1, wa(wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(s0))), wceq(cv(s1), cv(s0)))\n  ax6ev(s1, s0)\n  ancli(wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(s0)))\n  id(wceq(cv(s1), cv(s0)))\n  dfsb1(s0, s1, wceq(cv(s1), cv(s0)))\n  diffss.ex(s1, s0)\n}","pretty":"thm equsb1vOLDOLD(setvar s0, setvar s1) {\n  ⊢ [s0 / s1]s1 = s0\n  ⊣ d(s0, s1)\n} = {\n  mpbir2an([s0 / s1]s1 = s0, (s1 = s0 → s1 = s0), ∃(s1,(s1 = s0 ∧ s1 = s0)))\n  eximii(s1, (s1 = s0 ∧ s1 = s0), s1 = s0)\n  ax6ev(s1, s0)\n  ancli(s1 = s0, s1 = s0)\n  id(s1 = s0)\n  dfsb1(s0, s1, s1 = s0)\n  diffss.ex(s1, s0)\n}","parent":["mpbir2an","eximii","ax6ev","ancli","id","dfsb1","diffss.ex"],"children":[]},{"name":"sbimdOLD","content":"Deduction substituting both sides of an implication. (Contributed by Wolf Lammen, 24-Nov-2022.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm sbimdOLD(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(wsb(s0, s1, w1), wsb(s0, s1, w2)))\n  -| wnf(s1, w0)\n  -| wi(w0, wi(w1, w2))\n} = {\n  3imtr4g(w0, wsb(s0, s1, w1), wsb(s0, s1, w2), wa(wi(wceq(cv(s1), cv(s0)), w1), wex(s1, wa(wceq(cv(s1), cv(s0)), w1))), wa(wi(wceq(cv(s1), cv(s0)), w2), wex(s1, wa(wceq(cv(s1), cv(s0)), w2))))\n  anim12d(w0, wi(wceq(cv(s1), cv(s0)), w1), wex(s1, wa(wceq(cv(s1), cv(s0)), w1)), wi(wceq(cv(s1), cv(s0)), w2), wex(s1, wa(wceq(cv(s1), cv(s0)), w2)))\n  imim2d(w0, wceq(cv(s1), cv(s0)), w1, w2)\n  eximd(s1, w0, wa(wceq(cv(s1), cv(s0)), w1), wa(wceq(cv(s1), cv(s0)), w2))\n  anim2d(w0, wceq(cv(s1), cv(s0)), w1, w2)\n  dfsb1(s0, s1, w1)\n  dfsb1(s0, s1, w2)\n}","pretty":"thm sbimdOLD(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →([s0 / s1]w1 →[s0 / s1]w2))\n  ⊣ F/(s1, w0)\n  ⊣ (w0 →(w1 → w2))\n} = {\n  3imtr4g(w0, [s0 / s1]w1, [s0 / s1]w2, ((s1 = s0 → w1)∧ ∃(s1,(s1 = s0 ∧ w1))), ((s1 = s0 → w2)∧ ∃(s1,(s1 = s0 ∧ w2))))\n  anim12d(w0, (s1 = s0 → w1), ∃(s1,(s1 = s0 ∧ w1)), (s1 = s0 → w2), ∃(s1,(s1 = s0 ∧ w2)))\n  imim2d(w0, s1 = s0, w1, w2)\n  eximd(s1, w0, (s1 = s0 ∧ w1), (s1 = s0 ∧ w2))\n  anim2d(w0, s1 = s0, w1, w2)\n  dfsb1(s0, s1, w1)\n  dfsb1(s0, s1, w2)\n}","parent":["3imtr4g","anim12d","imim2d","eximd","anim2d","dfsb1"],"children":[]},{"name":"sbtvOLD","content":"Obsolete version of ~ sbt as of 6-Jul-2023. A substitution into a theorem yields a theorem. See ~ sbt when ` x ` , ` y ` need not be disjoint. (Contributed by BJ, 31-May-2019.) Reduce axioms. (Revised by Steven Nguyen, 25-Apr-2023.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm sbtvOLD(setvar s0, setvar s1, wff w0) {\n  |- wsb(s0, s1, w0)\n  -| w0\n  -| diffss(s0, s1)\n} = {\n  mpbir2an(wsb(s0, s1, w0), wi(wceq(cv(s1), cv(s0)), w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  a1i(wceq(cv(s1), cv(s0)), w0)\n  exan(s1, wceq(cv(s1), cv(s0)), w0)\n  ax6ev(s1, s0)\n  dfsb1(s0, s1, w0)\n  diffss.ex(s1, s0)\n}","pretty":"thm sbtvOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ [s0 / s1]w0\n  ⊣ w0\n  ⊣ d(s0, s1)\n} = {\n  mpbir2an([s0 / s1]w0, (s1 = s0 → w0), ∃(s1,(s1 = s0 ∧ w0)))\n  a1i(s1 = s0, w0)\n  exan(s1, s1 = s0, w0)\n  ax6ev(s1, s0)\n  dfsb1(s0, s1, w0)\n  diffss.ex(s1, s0)\n}","parent":["mpbir2an","a1i","exan","ax6ev","dfsb1","diffss.ex"],"children":[]},{"name":"sbequ1OLD","content":"Obsolete version of ~ sbequ1 as of 8-Jul-2023. An equality theorem for substitution. (Contributed by NM, 16-May-1993.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbequ1OLD(setvar s0, setvar s1, wff w0) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(w0, wsb(s1, s0, w0)))\n} = {\n  ex(wceq(cv(s0), cv(s1)), w0, wsb(s1, s0, w0))\n  sylanbrc(wa(wceq(cv(s0), cv(s1)), w0), wsb(s1, s0, w0), wi(wceq(cv(s0), cv(s1)), w0), wex(s0, wa(wceq(cv(s0), cv(s1)), w0)))\n  pm3.4(wceq(cv(s0), cv(s1)), w0)\n  19.8a(s0, wa(wceq(cv(s0), cv(s1)), w0))\n  dfsb1(s1, s0, w0)\n}","pretty":"thm sbequ1OLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (s0 = s1 →(w0 →[s1 / s0]w0))\n} = {\n  ex(s0 = s1, w0, [s1 / s0]w0)\n  sylanbrc((s0 = s1 ∧ w0), [s1 / s0]w0, (s0 = s1 → w0), ∃(s0,(s0 = s1 ∧ w0)))\n  pm3.4(s0 = s1, w0)\n  19.8a(s0, (s0 = s1 ∧ w0))\n  dfsb1(s1, s0, w0)\n}","parent":["ex","sylanbrc","pm3.4","19.8a","dfsb1"],"children":[]},{"name":"hbsb2","content":"Bound-variable hypothesis builder for substitution. (Contributed by NM, 14-May-1993.)","origin":"thm hbsb2(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wsb(s1, s0, w0), wal(s0, wsb(s1, s0, w0))))\n} = {\n  syl6bi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wsb(s1, s0, w0)), wal(s0, wi(wceq(cv(s0), cv(s1)), w0)))\n  sb4b(s0, s1, w0)\n  axc4i(s0, wi(wceq(cv(s0), cv(s1)), w0), wsb(s1, s0, w0))\n  sb2(s0, s1, w0)\n}","pretty":"thm hbsb2(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s1 / s0]w0 → ∀(s0,[s1 / s0]w0)))\n} = {\n  syl6bi(¬ ∀(s0, s0 = s1), [s1 / s0]w0, ∀(s0,[s1 / s0]w0), ∀(s0,(s0 = s1 → w0)))\n  sb4b(s0, s1, w0)\n  axc4i(s0, (s0 = s1 → w0), [s1 / s0]w0)\n  sb2(s0, s1, w0)\n}","parent":["syl6bi","sb4b","axc4i","sb2"],"children":["nfsb2"]},{"name":"nfsb2","content":"Bound-variable hypothesis builder for substitution. (Contributed by Mario Carneiro, 4-Oct-2016.)","origin":"thm nfsb2(setvar s0, setvar s1, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wsb(s1, s0, w0)))\n} = {\n  nf5d(s0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0))\n  nfna1(s0, wceq(cv(s0), cv(s1)))\n  hbsb2(s0, s1, w0)\n}","pretty":"thm nfsb2(setvar s0, setvar s1, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0,[s1 / s0]w0))\n} = {\n  nf5d(s0, ¬ ∀(s0, s0 = s1), [s1 / s0]w0)\n  nfna1(s0, s0 = s1)\n  hbsb2(s0, s1, w0)\n}","parent":["nf5d","nfna1","hbsb2"],"children":["nfsb4t","sbco3","sb9","wl-nfs1t"]},{"name":"hbsb2a","content":"Special case of a bound-variable hypothesis builder for substitution. (Contributed by NM, 2-Feb-2007.)","origin":"thm hbsb2a(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, wal(s0, w0)), wal(s1, wsb(s0, s1, w0)))\n} = {\n  syl(wsb(s0, s1, wal(s0, w0)), wal(s1, wsb(s0, s1, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  sb4a(s0, s1, w0)\n  axc4i(s1, wi(wceq(cv(s1), cv(s0)), w0), wsb(s0, s1, w0))\n  sb2(s1, s0, w0)\n}","pretty":"thm hbsb2a(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]∀(s0, w0)→ ∀(s1,[s0 / s1]w0))\n} = {\n  syl([s0 / s1]∀(s0, w0), ∀(s1,[s0 / s1]w0), ∀(s1,(s1 = s0 → w0)))\n  sb4a(s0, s1, w0)\n  axc4i(s1, (s1 = s0 → w0), [s0 / s1]w0)\n  sb2(s1, s0, w0)\n}","parent":["syl","sb4a","axc4i","sb2"],"children":["hbsb3","bj-hbsb3t"]},{"name":"sb4e","content":"One direction of a simplified definition of substitution that unlike ~ sb4b does not require a distinctor antecedent. (Contributed by NM, 2-Feb-2007.)","origin":"thm sb4e(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), wex(s0, w0))))\n} = {\n  syl(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), wex(s0, w0))), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  sb1(s0, s1, w0)\n  equs5e(s1, s0, w0)\n}","pretty":"thm sb4e(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∀(s1,(s1 = s0 → ∃(s0, w0))))\n} = {\n  syl([s0 / s1]w0, ∀(s1,(s1 = s0 → ∃(s0, w0))), ∃(s1,(s1 = s0 ∧ w0)))\n  sb1(s0, s1, w0)\n  equs5e(s1, s0, w0)\n}","parent":["syl","sb1","equs5e"],"children":["hbsb2e"]},{"name":"hbsb2e","content":"Special case of a bound-variable hypothesis builder for substitution. (Contributed by NM, 2-Feb-2007.)","origin":"thm hbsb2e(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, w0), wal(s1, wsb(s0, s1, wex(s0, w0))))\n} = {\n  syl(wsb(s0, s1, w0), wal(s1, wsb(s0, s1, wex(s0, w0))), wal(s1, wi(wceq(cv(s1), cv(s0)), wex(s0, w0))))\n  sb4e(s0, s1, w0)\n  axc4i(s1, wi(wceq(cv(s1), cv(s0)), wex(s0, w0)), wsb(s0, s1, wex(s0, w0)))\n  sb2(s1, s0, wex(s0, w0))\n}","pretty":"thm hbsb2e(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∀(s1,[s0 / s1]∃(s0, w0)))\n} = {\n  syl([s0 / s1]w0, ∀(s1,[s0 / s1]∃(s0, w0)), ∀(s1,(s1 = s0 → ∃(s0, w0))))\n  sb4e(s0, s1, w0)\n  axc4i(s1, (s1 = s0 → ∃(s0, w0)), [s0 / s1]∃(s0, w0))\n  sb2(s1, s0, ∃(s0, w0))\n}","parent":["syl","sb4e","axc4i","sb2"],"children":[]},{"name":"hbsb3","content":"If ` y ` is not free in ` ph ` , ` x ` is not free in ` [ y / x ] ph ` . (Contributed by NM, 14-May-1993.)","origin":"thm hbsb3(setvar s0, setvar s1, wff w0) {\n  |- wi(wsb(s0, s1, w0), wal(s1, wsb(s0, s1, w0)))\n  -| wi(w0, wal(s0, w0))\n} = {\n  syl(wsb(s0, s1, w0), wal(s1, wsb(s0, s1, w0)), wsb(s0, s1, wal(s0, w0)))\n  sbimi(s0, s1, w0, wal(s0, w0))\n  hbsb2a(s0, s1, w0)\n}","pretty":"thm hbsb3(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∀(s1,[s0 / s1]w0))\n  ⊣ (w0 → ∀(s0, w0))\n} = {\n  syl([s0 / s1]w0, ∀(s1,[s0 / s1]w0), [s0 / s1]∀(s0, w0))\n  sbimi(s0, s1, w0, ∀(s0, w0))\n  hbsb2a(s0, s1, w0)\n}","parent":["syl","sbimi","hbsb2a"],"children":["nfs1","axc16ALT"]},{"name":"nfs1","content":"If ` y ` is not free in ` ph ` , ` x ` is not free in ` [ y / x ] ph ` . (Contributed by Mario Carneiro, 11-Aug-2016.)","origin":"thm nfs1(setvar s0, setvar s1, wff w0) {\n  |- wnf(s0, wsb(s1, s0, w0))\n  -| wnf(s1, w0)\n} = {\n  nf5i(s0, wsb(s1, s0, w0))\n  hbsb3(s1, s0, w0)\n  nf5ri(s1, w0)\n}","pretty":"thm nfs1(setvar s0, setvar s1, wff w0) {\n  ⊢ F/(s0,[s1 / s0]w0)\n  ⊣ F/(s1, w0)\n} = {\n  nf5i(s0, [s1 / s0]w0)\n  hbsb3(s1, s0, w0)\n  nf5ri(s1, w0)\n}","parent":["nf5i","hbsb3","nf5ri"],"children":["sb8","sb8e"]},{"name":"axc16ALT","content":"Alternate proof of ~ axc16 , shorter but requiring ~ ax-10 , ~ ax-11 , ~ ax-13 and using ~ df-nf and ~ df-sb . (Contributed by NM, 17-May-2008.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm axc16ALT(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wi(w0, wal(s0, w0)))\n  -| diffss(s0, s1)\n} = {\n  axc16i(s0, s1, hs0, w0, wsb(hs0, s0, w0))\n  sbequ12(s0, hs0, w0)\n  hbsb3(hs0, s0, w0)\n  ax-5(hs0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(w0)\n}","pretty":"thm axc16ALT(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→(w0 → ∀(s0, w0)))\n  ⊣ d(s0, s1)\n} = {\n  axc16i(s0, s1, hs0, w0, [hs0 / s0]w0)\n  sbequ12(s0, hs0, w0)\n  hbsb3(hs0, s0, w0)\n  ax-5(hs0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(w0)\n}","parent":["axc16i","sbequ12","hbsb3","ax-5","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["axc16gALT"]},{"name":"axc16gALT","content":"Alternate proof of ~ axc16g that uses ~ df-sb and requires ~ ax-10 , ~ ax-11 , ~ ax-13 . (Contributed by NM, 15-May-1993.) (Proof shortened by Andrew Salmon, 25-May-2011.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm axc16gALT(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wi(w0, wal(s2, w0)))\n  -| diffss(s0, s1)\n} = {\n  sylsyld(wal(s0, wceq(cv(s0), cv(s1))), w0, wal(s2, w0), wal(s2, wceq(cv(s2), cv(s0))), wal(s0, w0))\n  aev(s0, s1, s2, s2, s0)\n  axc16ALT(s0, s1, w0)\n  biimprd(wal(s2, wceq(cv(s2), cv(s0))), wal(s0, w0), wal(s2, w0))\n  dral1(s2, s0, w0, w0)\n  biidd(wal(s2, wceq(cv(s2), cv(s0))), w0)\n}","pretty":"thm axc16gALT(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→(w0 → ∀(s2, w0)))\n  ⊣ d(s0, s1)\n} = {\n  sylsyld(∀(s0, s0 = s1), w0, ∀(s2, w0), ∀(s2, s2 = s0), ∀(s0, w0))\n  aev(s0, s1, s2, s2, s0)\n  axc16ALT(s0, s1, w0)\n  biimprd(∀(s2, s2 = s0), ∀(s0, w0), ∀(s2, w0))\n  dral1(s2, s0, w0, w0)\n  biidd(∀(s2, s2 = s0), w0)\n}","parent":["sylsyld","aev","axc16ALT","biimprd","dral1","biidd"],"children":[]},{"name":"equsb1","content":"Substitution applied to an atomic wff. (Contributed by NM, 10-May-1993.)","origin":"thm equsb1(setvar s0, setvar s1) {\n  |- wsb(s0, s1, wceq(cv(s1), cv(s0)))\n} = {\n  mpg(s1, wsb(s0, s1, wceq(cv(s1), cv(s0))), wi(wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(s0))))\n  sb2(s1, s0, wceq(cv(s1), cv(s0)))\n  id(wceq(cv(s1), cv(s0)))\n}","pretty":"thm equsb1(setvar s0, setvar s1) {\n  ⊢ [s0 / s1]s1 = s0\n} = {\n  mpg(s1, [s0 / s1]s1 = s0, (s1 = s0 → s1 = s0))\n  sb2(s1, s0, s1 = s0)\n  id(s1 = s0)\n}","parent":["mpg","sb2","id"],"children":["sbequ8","sbie","pm13.183OLD","frege54cor1b","sb5ALT","sb5ALTVD"]},{"name":"equsb2","content":"Substitution applied to an atomic wff. (Contributed by NM, 10-May-1993.)","origin":"thm equsb2(setvar s0, setvar s1) {\n  |- wsb(s0, s1, wceq(cv(s0), cv(s1)))\n} = {\n  mpg(s1, wsb(s0, s1, wceq(cv(s0), cv(s1))), wi(wceq(cv(s1), cv(s0)), wceq(cv(s0), cv(s1))))\n  sb2(s1, s0, wceq(cv(s0), cv(s1)))\n  equcomi(s1, s0)\n}","pretty":"thm equsb2(setvar s0, setvar s1) {\n  ⊢ [s0 / s1]s0 = s1\n} = {\n  mpg(s1, [s0 / s1]s0 = s1, (s1 = s0 → s0 = s1))\n  sb2(s1, s0, s0 = s1)\n  equcomi(s1, s0)\n}","parent":["mpg","sb2","equcomi"],"children":["bj-sbidmOLD"]},{"name":"dfsb2","content":"An alternate definition of proper substitution that, like ~ dfsb1 , mixes free and bound variables to avoid distinct variable requirements. (Contributed by NM, 17-Feb-2005.)","origin":"thm dfsb2(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wo(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))))\n} = {\n  impbii(wsb(s0, s1, w0), wo(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))))\n  pm2.61i(wi(wsb(s0, s1, w0), wo(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))), wal(s1, wceq(cv(s1), cv(s0))))\n  syl6an(wal(s1, wceq(cv(s1), cv(s0))), wsb(s0, s1, w0), wo(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))), wceq(cv(s1), cv(s0)), w0)\n  sp(s1, wceq(cv(s1), cv(s0)))\n  sps(s1, wceq(cv(s1), cv(s0)), wi(wsb(s0, s1, w0), w0))\n  sbequ2(s1, s0, w0)\n  orc(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  syl6bi(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, w0), wo(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  sb4b(s1, s0, w0)\n  olc(wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wa(wceq(cv(s1), cv(s0)), w0))\n  jaoi(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wsb(s0, s1, w0))\n  imp(wceq(cv(s1), cv(s0)), w0, wsb(s0, s1, w0))\n  sbequ1(s1, s0, w0)\n  sb2(s1, s0, w0)\n}","pretty":"thm dfsb2(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔((s1 = s0 ∧ w0)∨ ∀(s1,(s1 = s0 → w0))))\n} = {\n  impbii([s0 / s1]w0, ((s1 = s0 ∧ w0)∨ ∀(s1,(s1 = s0 → w0))))\n  pm2.61i(([s0 / s1]w0 →((s1 = s0 ∧ w0)∨ ∀(s1,(s1 = s0 → w0)))), ∀(s1, s1 = s0))\n  syl6an(∀(s1, s1 = s0), [s0 / s1]w0, ((s1 = s0 ∧ w0)∨ ∀(s1,(s1 = s0 → w0))), s1 = s0, w0)\n  sp(s1, s1 = s0)\n  sps(s1, s1 = s0, ([s0 / s1]w0 → w0))\n  sbequ2(s1, s0, w0)\n  orc((s1 = s0 ∧ w0), ∀(s1,(s1 = s0 → w0)))\n  syl6bi(¬ ∀(s1, s1 = s0), [s0 / s1]w0, ((s1 = s0 ∧ w0)∨ ∀(s1,(s1 = s0 → w0))), ∀(s1,(s1 = s0 → w0)))\n  sb4b(s1, s0, w0)\n  olc(∀(s1,(s1 = s0 → w0)), (s1 = s0 ∧ w0))\n  jaoi((s1 = s0 ∧ w0), ∀(s1,(s1 = s0 → w0)), [s0 / s1]w0)\n  imp(s1 = s0, w0, [s0 / s1]w0)\n  sbequ1(s1, s0, w0)\n  sb2(s1, s0, w0)\n}","parent":["impbii","pm2.61i","syl6an","sp","sps","sbequ2","orc","syl6bi","sb4b","olc","jaoi","imp","sbequ1","sb2"],"children":["dfsb3"]},{"name":"dfsb3","content":"An alternate definition of proper substitution ~ df-sb that uses only primitive connectives (no defined terms) on the right-hand side. (Contributed by NM, 6-Mar-2007.)","origin":"thm dfsb3(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wi(wi(wceq(cv(s1), cv(s0)), wn(w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))))\n} = {\n  3bitr4i(wsb(s0, s1, w0), wi(wi(wceq(cv(s1), cv(s0)), wn(w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))), wo(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))), wi(wn(wa(wceq(cv(s1), cv(s0)), w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))))\n  df-or(wa(wceq(cv(s1), cv(s0)), w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  dfsb2(s0, s1, w0)\n  imbi1i(wi(wceq(cv(s1), cv(s0)), wn(w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wn(wa(wceq(cv(s1), cv(s0)), w0)))\n  imnan(wceq(cv(s1), cv(s0)), w0)\n}","pretty":"thm dfsb3(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔((s1 = s0 → ¬ w0)→ ∀(s1,(s1 = s0 → w0))))\n} = {\n  3bitr4i([s0 / s1]w0, ((s1 = s0 → ¬ w0)→ ∀(s1,(s1 = s0 → w0))), ((s1 = s0 ∧ w0)∨ ∀(s1,(s1 = s0 → w0))), (¬(s1 = s0 ∧ w0)→ ∀(s1,(s1 = s0 → w0))))\n  df-or((s1 = s0 ∧ w0), ∀(s1,(s1 = s0 → w0)))\n  dfsb2(s0, s1, w0)\n  imbi1i((s1 = s0 → ¬ w0), ∀(s1,(s1 = s0 → w0)), ¬(s1 = s0 ∧ w0))\n  imnan(s1 = s0, w0)\n}","parent":["3bitr4i","df-or","dfsb2","imbi1i","imnan"],"children":["sbnOLD"]},{"name":"sbequiOLD","content":"Obsolete proof of ~ sbequi as of 7-Jul-2023. An equality theorem for substitution. (Contributed by NM, 14-May-1993.) (Proof shortened by Wolf Lammen, 15-Sep-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbequiOLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wsb(s0, s2, w0), wsb(s1, s2, w0)))\n} = {\n  pm2.61i(wi(wceq(cv(s0), cv(s1)), wi(wsb(s0, s2, w0), wsb(s1, s2, w0))), wceq(cv(s2), cv(s0)))\n  syld(wceq(cv(s2), cv(s0)), wceq(cv(s0), cv(s1)), wi(wsb(s0, s2, w0), wsb(s1, s2, w0)), wceq(cv(s2), cv(s1)))\n  equtr(s2, s0, s1)\n  syl9(wceq(cv(s2), cv(s0)), wceq(cv(s2), cv(s1)), wsb(s0, s2, w0), wsb(s1, s2, w0), w0)\n  sbequ2(s2, s0, w0)\n  sbequ1(s2, s1, w0)\n  syld(wn(wceq(cv(s2), cv(s0))), wceq(cv(s0), cv(s1)), wi(wsb(s0, s2, w0), wsb(s1, s2, w0)), wal(s2, wceq(cv(s0), cv(s1))))\n  ax13(s2, s0, s1)\n  syl9(wn(wceq(cv(s2), cv(s0))), wal(s2, wceq(cv(s0), cv(s1))), wsb(s0, s2, w0), wsb(s1, s2, w0), wal(s2, wi(wceq(cv(s2), cv(s0)), w0)))\n  syl(wn(wceq(cv(s2), cv(s0))), wi(wsb(s0, s2, w0), wal(s2, wi(wceq(cv(s2), cv(s0)), w0))), wn(wal(s2, wceq(cv(s2), cv(s0)))))\n  con3i(wceq(cv(s2), cv(s0)), wal(s2, wceq(cv(s2), cv(s0))))\n  sp(s2, wceq(cv(s2), cv(s0)))\n  sb4OLD(s2, s0, w0)\n  syl6(wal(s2, wceq(cv(s0), cv(s1))), wal(s2, wi(wceq(cv(s2), cv(s0)), w0)), wsb(s1, s2, w0), wal(s2, wi(wceq(cv(s2), cv(s1)), w0)))\n  al2imi(s2, wceq(cv(s0), cv(s1)), wi(wceq(cv(s2), cv(s0)), w0), wi(wceq(cv(s2), cv(s1)), w0))\n  imim1d(wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s0)), w0, wceq(cv(s2), cv(s1)))\n  equeuclr(s0, s1, s2)\n  sb2(s2, s1, w0)\n}","pretty":"thm sbequiOLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (s0 = s1 →([s0 / s2]w0 →[s1 / s2]w0))\n} = {\n  pm2.61i((s0 = s1 →([s0 / s2]w0 →[s1 / s2]w0)), s2 = s0)\n  syld(s2 = s0, s0 = s1, ([s0 / s2]w0 →[s1 / s2]w0), s2 = s1)\n  equtr(s2, s0, s1)\n  syl9(s2 = s0, s2 = s1, [s0 / s2]w0, [s1 / s2]w0, w0)\n  sbequ2(s2, s0, w0)\n  sbequ1(s2, s1, w0)\n  syld(¬ s2 = s0, s0 = s1, ([s0 / s2]w0 →[s1 / s2]w0), ∀(s2, s0 = s1))\n  ax13(s2, s0, s1)\n  syl9(¬ s2 = s0, ∀(s2, s0 = s1), [s0 / s2]w0, [s1 / s2]w0, ∀(s2,(s2 = s0 → w0)))\n  syl(¬ s2 = s0, ([s0 / s2]w0 → ∀(s2,(s2 = s0 → w0))), ¬ ∀(s2, s2 = s0))\n  con3i(s2 = s0, ∀(s2, s2 = s0))\n  sp(s2, s2 = s0)\n  sb4OLD(s2, s0, w0)\n  syl6(∀(s2, s0 = s1), ∀(s2,(s2 = s0 → w0)), [s1 / s2]w0, ∀(s2,(s2 = s1 → w0)))\n  al2imi(s2, s0 = s1, (s2 = s0 → w0), (s2 = s1 → w0))\n  imim1d(s0 = s1, s2 = s0, w0, s2 = s1)\n  equeuclr(s0, s1, s2)\n  sb2(s2, s1, w0)\n}","parent":["pm2.61i","syld","equtr","syl9","sbequ2","sbequ1","ax13","syl","con3i","sp","sb4OLD","syl6","al2imi","imim1d","equeuclr","sb2"],"children":[]},{"name":"drsb1","content":"Formula-building lemma for use with the Distinctor Reduction Theorem. Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). (Contributed by NM, 2-Jun-1993.)","origin":"thm drsb1(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wsb(s2, s0, w0), wsb(s2, s1, w0)))\n} = {\n  3bitr4g(wal(s0, wceq(cv(s0), cv(s1))), wsb(s2, s0, w0), wsb(s2, s1, w0), wa(wi(wceq(cv(s0), cv(s2)), w0), wex(s0, wa(wceq(cv(s0), cv(s2)), w0))), wa(wi(wceq(cv(s1), cv(s2)), w0), wex(s1, wa(wceq(cv(s1), cv(s2)), w0))))\n  anbi12d(wal(s0, wceq(cv(s0), cv(s1))), wi(wceq(cv(s0), cv(s2)), w0), wex(s0, wa(wceq(cv(s0), cv(s2)), w0)), wi(wceq(cv(s1), cv(s2)), w0), wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))\n  imbi1d(wal(s0, wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(s2)), w0, wceq(cv(s1), cv(s2)))\n  drex1(s0, s1, wa(wceq(cv(s0), cv(s2)), w0), wa(wceq(cv(s1), cv(s2)), w0))\n  anbi1d(wal(s0, wceq(cv(s0), cv(s1))), wceq(cv(s0), cv(s2)), w0, wceq(cv(s1), cv(s2)))\n  sps(s0, wceq(cv(s0), cv(s1)), wb(wceq(cv(s0), cv(s2)), wceq(cv(s1), cv(s2))))\n  equequ1(s0, s1, s2)\n  dfsb1(s2, s0, w0)\n  dfsb1(s2, s1, w0)\n}","pretty":"thm drsb1(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→([s2 / s0]w0 ↔[s2 / s1]w0))\n} = {\n  3bitr4g(∀(s0, s0 = s1), [s2 / s0]w0, [s2 / s1]w0, ((s0 = s2 → w0)∧ ∃(s0,(s0 = s2 ∧ w0))), ((s1 = s2 → w0)∧ ∃(s1,(s1 = s2 ∧ w0))))\n  anbi12d(∀(s0, s0 = s1), (s0 = s2 → w0), ∃(s0,(s0 = s2 ∧ w0)), (s1 = s2 → w0), ∃(s1,(s1 = s2 ∧ w0)))\n  imbi1d(∀(s0, s0 = s1), s0 = s2, w0, s1 = s2)\n  drex1(s0, s1, (s0 = s2 ∧ w0), (s1 = s2 ∧ w0))\n  anbi1d(∀(s0, s0 = s1), s0 = s2, w0, s1 = s2)\n  sps(s0, s0 = s1, (s0 = s2 ↔ s1 = s2))\n  equequ1(s0, s1, s2)\n  dfsb1(s2, s0, w0)\n  dfsb1(s2, s1, w0)\n}","parent":["3bitr4g","anbi12d","imbi1d","drex1","anbi1d","sps","equequ1","dfsb1"],"children":["sb2ae","sbco3","iotaeq","wl-ich-lem1","wl-ich-lem1b","wl-ich-lem5"]},{"name":"sb2ae","content":"In the case of two successive substitutions for two always equal variables, the second substitution has no effect. (Contributed by BJ and WL, 9-Aug-2023.)","origin":"thm sb2ae(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wi(wal(s0, wceq(cv(s0), cv(s1))), wb(wsb(s2, s0, wsb(s3, s1, w0)), wsb(s3, s1, w0)))\n  -| diffss(s1, s3)\n} = {\n  syl6bb(wal(s0, wceq(cv(s0), cv(s1))), wsb(s2, s0, wsb(s3, s1, w0)), wsb(s3, s1, w0), wsb(s2, s1, wsb(s3, s1, w0)))\n  drsb1(s0, s1, s2, wsb(s3, s1, w0))\n  sbf(s2, s1, wsb(s3, s1, w0))\n  nfs1v(s1, s3, w0)\n}","pretty":"thm sb2ae(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ (∀(s0, s0 = s1)→([s2 / s0][s3 / s1]w0 ↔[s3 / s1]w0))\n  ⊣ d(s1, s3)\n} = {\n  syl6bb(∀(s0, s0 = s1), [s2 / s0][s3 / s1]w0, [s3 / s1]w0, [s2 / s1][s3 / s1]w0)\n  drsb1(s0, s1, s2, [s3 / s1]w0)\n  sbf(s2, s1, [s3 / s1]w0)\n  nfs1v(s1, s3, w0)\n}","parent":["syl6bb","drsb1","sbf","nfs1v"],"children":[]},{"name":"sb6f","content":"Equivalence for substitution when ` y ` is not free in ` ph ` . The implication \"to the left\" is ~ sb2 and does not require the non-freeness hypothesis. Theorem ~ sb6 replaces the non-freeness hypothesis with a disjoint variable condition. (Contributed by NM, 2-Jun-1993.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm sb6f(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  -| wnf(s0, w0)\n} = {\n  impbii(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  syl(wsb(s0, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wsb(s0, s1, wal(s0, w0)))\n  sbimi(s0, s1, w0, wal(s0, w0))\n  nf5ri(s0, w0)\n  sb4a(s0, s1, w0)\n  sb2(s1, s0, w0)\n}","pretty":"thm sb6f(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∀(s1,(s1 = s0 → w0)))\n  ⊣ F/(s0, w0)\n} = {\n  impbii([s0 / s1]w0, ∀(s1,(s1 = s0 → w0)))\n  syl([s0 / s1]w0, ∀(s1,(s1 = s0 → w0)), [s0 / s1]∀(s0, w0))\n  sbimi(s0, s1, w0, ∀(s0, w0))\n  nf5ri(s0, w0)\n  sb4a(s0, s1, w0)\n  sb2(s1, s0, w0)\n}","parent":["impbii","syl","sbimi","nf5ri","sb4a","sb2"],"children":["sb5f","bj-sbievv"]},{"name":"sb5f","content":"Equivalence for substitution when ` y ` is not free in ` ph ` . The implication \"to the right\" is ~ sb1 and does not require the non-freeness hypothesis. Theorem ~ sb5 replaces the non-freeness hypothesis with a disjoint variable condition. (Contributed by NM, 5-Aug-1993.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm sb5f(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)))\n  -| wnf(s0, w0)\n} = {\n  bitr4i(wsb(s0, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s0)), w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  sb6f(s0, s1, w0)\n  equs45f(s1, s0, w0)\n}","pretty":"thm sb5f(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∃(s1,(s1 = s0 ∧ w0)))\n  ⊣ F/(s0, w0)\n} = {\n  bitr4i([s0 / s1]w0, ∃(s1,(s1 = s0 ∧ w0)), ∀(s1,(s1 = s0 → w0)))\n  sb6f(s0, s1, w0)\n  equs45f(s1, s0, w0)\n}","parent":["bitr4i","sb6f","equs45f"],"children":["sb7f"]},{"name":"nfsb4t","content":"A variable not free in a proposition remains so after substitution in that proposition with a distinct variable (closed form of ~ nfsb4 ). (Contributed by NM, 7-Apr-2004.) (Revised by Mario Carneiro, 4-Oct-2016.) (Proof shortened by Wolf Lammen, 11-May-2018.)","origin":"thm nfsb4t(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wal(s0, wnf(s1, w0)), wi(wn(wal(s1, wceq(cv(s1), cv(s2)))), wnf(s1, wsb(s2, s0, w0))))\n} = {\n  pm2.61dan(wal(s0, wnf(s1, w0)), wi(wn(wal(s1, wceq(cv(s1), cv(s2)))), wnf(s1, wsb(s2, s0, w0))), wal(s0, wceq(cv(s0), cv(s2))))\n  a1d(wa(wal(s0, wnf(s1, w0)), wal(s0, wceq(cv(s0), cv(s2)))), wn(wal(s1, wceq(cv(s1), cv(s2)))), wnf(s1, wsb(s2, s0, w0)))\n  impcom(wal(s0, wnf(s1, w0)), wal(s0, wceq(cv(s0), cv(s2))), wnf(s1, wsb(s2, s0, w0)))\n  spsd(s0, wal(s0, wceq(cv(s0), cv(s2))), wnf(s1, w0), wnf(s1, wsb(s2, s0, w0)))\n  biimpd(wal(s0, wceq(cv(s0), cv(s2))), wnf(s1, w0), wnf(s1, wsb(s2, s0, w0)))\n  drnf2(s0, s2, s1, w0, wsb(s2, s0, w0))\n  sps(s0, wceq(cv(s0), cv(s2)), wb(w0, wsb(s2, s0, w0)))\n  dvelimdf(s1, s2, s0, wa(wal(s0, wnf(s1, w0)), wn(wal(s0, wceq(cv(s0), cv(s2))))), wsb(s2, s0, w0), w0)\n  nfan(s1, wal(s0, wnf(s1, w0)), wn(wal(s0, wceq(cv(s0), cv(s2)))))\n  nfal(s1, s0, wnf(s1, w0))\n  nfnf1(s1, w0)\n  nfnae(s1, s0, s2)\n  nfan(s0, wal(s0, wnf(s1, w0)), wn(wal(s0, wceq(cv(s0), cv(s2)))))\n  nfa1(s0, wnf(s1, w0))\n  nfnae(s0, s0, s2)\n  adantr(wal(s0, wnf(s1, w0)), wn(wal(s0, wceq(cv(s0), cv(s2)))), wnf(s1, w0))\n  sp(s0, wnf(s1, w0))\n  adantl(wal(s0, wnf(s1, w0)), wn(wal(s0, wceq(cv(s0), cv(s2)))), wnf(s0, wsb(s2, s0, w0)))\n  nfsb2(s0, s2, w0)\n  a1i(wa(wal(s0, wnf(s1, w0)), wn(wal(s0, wceq(cv(s0), cv(s2))))), wi(wceq(cv(s0), cv(s2)), wb(w0, wsb(s2, s0, w0))))\n  sbequ12(s0, s2, w0)\n}","pretty":"thm nfsb4t(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∀(s0, F/(s1, w0))→(¬ ∀(s1, s1 = s2)→ F/(s1,[s2 / s0]w0)))\n} = {\n  pm2.61dan(∀(s0, F/(s1, w0)), (¬ ∀(s1, s1 = s2)→ F/(s1,[s2 / s0]w0)), ∀(s0, s0 = s2))\n  a1d((∀(s0, F/(s1, w0))∧ ∀(s0, s0 = s2)), ¬ ∀(s1, s1 = s2), F/(s1,[s2 / s0]w0))\n  impcom(∀(s0, F/(s1, w0)), ∀(s0, s0 = s2), F/(s1,[s2 / s0]w0))\n  spsd(s0, ∀(s0, s0 = s2), F/(s1, w0), F/(s1,[s2 / s0]w0))\n  biimpd(∀(s0, s0 = s2), F/(s1, w0), F/(s1,[s2 / s0]w0))\n  drnf2(s0, s2, s1, w0, [s2 / s0]w0)\n  sps(s0, s0 = s2, (w0 ↔[s2 / s0]w0))\n  dvelimdf(s1, s2, s0, (∀(s0, F/(s1, w0))∧ ¬ ∀(s0, s0 = s2)), [s2 / s0]w0, w0)\n  nfan(s1, ∀(s0, F/(s1, w0)), ¬ ∀(s0, s0 = s2))\n  nfal(s1, s0, F/(s1, w0))\n  nfnf1(s1, w0)\n  nfnae(s1, s0, s2)\n  nfan(s0, ∀(s0, F/(s1, w0)), ¬ ∀(s0, s0 = s2))\n  nfa1(s0, F/(s1, w0))\n  nfnae(s0, s0, s2)\n  adantr(∀(s0, F/(s1, w0)), ¬ ∀(s0, s0 = s2), F/(s1, w0))\n  sp(s0, F/(s1, w0))\n  adantl(∀(s0, F/(s1, w0)), ¬ ∀(s0, s0 = s2), F/(s0,[s2 / s0]w0))\n  nfsb2(s0, s2, w0)\n  a1i((∀(s0, F/(s1, w0))∧ ¬ ∀(s0, s0 = s2)), (s0 = s2 →(w0 ↔[s2 / s0]w0)))\n  sbequ12(s0, s2, w0)\n}","parent":["pm2.61dan","a1d","impcom","spsd","biimpd","drnf2","sps","dvelimdf","nfan","nfal","nfnf1","nfnae","nfa1","adantr","sp","adantl","nfsb2","a1i","sbequ12"],"children":["nfsb4","nfsbd","wl-ich-lem1a"]},{"name":"nfsb4","content":"A variable not free in a proposition remains so after substitution in that proposition with a distinct variable. (Contributed by NM, 14-May-1993.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm nfsb4(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wsb(s1, s2, w0)))\n  -| wnf(s0, w0)\n} = {\n  mpg(s2, wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wsb(s1, s2, w0))), wnf(s0, w0))\n  nfsb4t(s2, s0, s1, w0)\n}","pretty":"thm nfsb4(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→ F/(s0,[s1 / s2]w0))\n  ⊣ F/(s0, w0)\n} = {\n  mpg(s2, (¬ ∀(s0, s0 = s1)→ F/(s0,[s1 / s2]w0)), F/(s0, w0))\n  nfsb4t(s2, s0, s1, w0)\n}","parent":["mpg","nfsb4t"],"children":["sbco2","nfsb"]},{"name":"sbnOLD","content":"Obsolete version of ~ sbn as of 8-Jul-2023. Negation inside and outside of substitution are equivalent. For a version requiring disjoint variables, but fewer axioms, see ~ sbnvOLD . (Contributed by NM, 14-May-1993.) (Proof shortened by Wolf Lammen, 30-Apr-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbnOLD(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, wn(w0)), wn(wsb(s0, s1, w0)))\n} = {\n  xchbinxr(wsb(s0, s1, wn(w0)), wsb(s0, s1, w0), wi(wi(wceq(cv(s1), cv(s0)), wn(w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0))))\n  3bitri(wsb(s0, s1, wn(w0)), wn(wi(wi(wceq(cv(s1), cv(s0)), wn(w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))), wa(wi(wceq(cv(s1), cv(s0)), wn(w0)), wex(s1, wa(wceq(cv(s1), cv(s0)), wn(w0)))), wa(wi(wceq(cv(s1), cv(s0)), wn(w0)), wn(wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))))\n  dfsb1(s0, s1, wn(w0))\n  anbi2i(wi(wceq(cv(s1), cv(s0)), wn(w0)), wex(s1, wa(wceq(cv(s1), cv(s0)), wn(w0))), wn(wal(s1, wi(wceq(cv(s1), cv(s0)), w0))))\n  exanali(s1, wceq(cv(s1), cv(s0)), w0)\n  annim(wi(wceq(cv(s1), cv(s0)), wn(w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  dfsb3(s0, s1, w0)\n}","pretty":"thm sbnOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]¬ w0 ↔ ¬[s0 / s1]w0)\n} = {\n  xchbinxr([s0 / s1]¬ w0, [s0 / s1]w0, ((s1 = s0 → ¬ w0)→ ∀(s1,(s1 = s0 → w0))))\n  3bitri([s0 / s1]¬ w0, ¬((s1 = s0 → ¬ w0)→ ∀(s1,(s1 = s0 → w0))), ((s1 = s0 → ¬ w0)∧ ∃(s1,(s1 = s0 ∧ ¬ w0))), ((s1 = s0 → ¬ w0)∧ ¬ ∀(s1,(s1 = s0 → w0))))\n  dfsb1(s0, s1, ¬ w0)\n  anbi2i((s1 = s0 → ¬ w0), ∃(s1,(s1 = s0 ∧ ¬ w0)), ¬ ∀(s1,(s1 = s0 → w0)))\n  exanali(s1, s1 = s0, w0)\n  annim((s1 = s0 → ¬ w0), ∀(s1,(s1 = s0 → w0)))\n  dfsb3(s0, s1, w0)\n}","parent":["xchbinxr","3bitri","dfsb1","anbi2i","exanali","annim","dfsb3"],"children":[]},{"name":"sbi1OLD","content":"Obsolete version of ~ sbi1 as of 24-Jul-2023. Removal of implication from substitution. (Contributed by NM, 14-May-1993.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm sbi1OLD(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n} = {\n  pm2.61i(wi(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1))), wal(s1, wceq(cv(s1), cv(s0))))\n  sps(s1, wceq(cv(s1), cv(s0)), wi(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1))))\n  syl6d(wceq(cv(s1), cv(s0)), wsb(s0, s1, wi(w0, w1)), wsb(s0, s1, w0), wsb(s0, s1, w1), w1)\n  syl5d(wceq(cv(s1), cv(s0)), wsb(s0, s1, wi(w0, w1)), wsb(s0, s1, w0), w1, w0)\n  sbequ2(s1, s0, w0)\n  sbequ2(s1, s0, wi(w0, w1))\n  sbequ1(s1, s0, w1)\n  syl5d(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, wi(w0, w1)), wsb(s0, s1, w0), wsb(s0, s1, w1), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)))\n  sb4OLD(s1, s0, w0)\n  syl6(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, wi(w0, w1)), wi(wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wsb(s0, s1, w1)), wal(s1, wi(wceq(cv(s1), cv(s0)), wi(w0, w1))))\n  sb4OLD(s1, s0, wi(w0, w1))\n  syl6(wal(s1, wi(wceq(cv(s1), cv(s0)), wi(w0, w1))), wal(s1, wi(wceq(cv(s1), cv(s0)), w0)), wsb(s0, s1, w1), wal(s1, wi(wceq(cv(s1), cv(s0)), w1)))\n  al2imi(s1, wi(wceq(cv(s1), cv(s0)), wi(w0, w1)), wi(wceq(cv(s1), cv(s0)), w0), wi(wceq(cv(s1), cv(s0)), w1))\n  ax-2(wceq(cv(s1), cv(s0)), w0, w1)\n  sb2(s1, s0, w1)\n}","pretty":"thm sbi1OLD(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 → w1)→([s0 / s1]w0 →[s0 / s1]w1))\n} = {\n  pm2.61i(([s0 / s1](w0 → w1)→([s0 / s1]w0 →[s0 / s1]w1)), ∀(s1, s1 = s0))\n  sps(s1, s1 = s0, ([s0 / s1](w0 → w1)→([s0 / s1]w0 →[s0 / s1]w1)))\n  syl6d(s1 = s0, [s0 / s1](w0 → w1), [s0 / s1]w0, [s0 / s1]w1, w1)\n  syl5d(s1 = s0, [s0 / s1](w0 → w1), [s0 / s1]w0, w1, w0)\n  sbequ2(s1, s0, w0)\n  sbequ2(s1, s0, (w0 → w1))\n  sbequ1(s1, s0, w1)\n  syl5d(¬ ∀(s1, s1 = s0), [s0 / s1](w0 → w1), [s0 / s1]w0, [s0 / s1]w1, ∀(s1,(s1 = s0 → w0)))\n  sb4OLD(s1, s0, w0)\n  syl6(¬ ∀(s1, s1 = s0), [s0 / s1](w0 → w1), (∀(s1,(s1 = s0 → w0))→[s0 / s1]w1), ∀(s1,(s1 = s0 →(w0 → w1))))\n  sb4OLD(s1, s0, (w0 → w1))\n  syl6(∀(s1,(s1 = s0 →(w0 → w1))), ∀(s1,(s1 = s0 → w0)), [s0 / s1]w1, ∀(s1,(s1 = s0 → w1)))\n  al2imi(s1, (s1 = s0 →(w0 → w1)), (s1 = s0 → w0), (s1 = s0 → w1))\n  ax-2(s1 = s0, w0, w1)\n  sb2(s1, s0, w1)\n}","parent":["pm2.61i","sps","syl6d","syl5d","sbequ2","sbequ1","sb4OLD","syl6","al2imi","ax-2","sb2"],"children":[]},{"name":"spsbimOLD","content":"Obsolete version of ~ spsbim as of 6-Jul-2023. Specialization of implication. (Contributed by NM, 5-Aug-1993.) (Proof shortened by Andrew Salmon, 25-May-2011.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm spsbimOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, wi(w0, w1)), wi(wsb(s1, s0, w0), wsb(s1, s0, w1)))\n} = {\n  syl(wal(s0, wi(w0, w1)), wi(wsb(s1, s0, w0), wsb(s1, s0, w1)), wsb(s1, s0, wi(w0, w1)))\n  stdpc4(s0, s1, wi(w0, w1))\n  sbi1(s1, s0, w0, w1)\n}","pretty":"thm spsbimOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0,(w0 → w1))→([s1 / s0]w0 →[s1 / s0]w1))\n} = {\n  syl(∀(s0,(w0 → w1)), ([s1 / s0]w0 →[s1 / s0]w1), [s1 / s0](w0 → w1))\n  stdpc4(s0, s1, (w0 → w1))\n  sbi1(s1, s0, w0, w1)\n}","parent":["syl","stdpc4","sbi1"],"children":[]},{"name":"sbim","content":"Implication inside and outside of a substitution are equivalent. (Contributed by NM, 14-May-1993.)","origin":"thm sbim(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n} = {\n  impbii(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n  sbi1(s0, s1, w0, w1)\n  sbi2(s0, s1, w0, w1)\n}","pretty":"thm sbim(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 → w1)↔([s0 / s1]w0 →[s0 / s1]w1))\n} = {\n  impbii([s0 / s1](w0 → w1), ([s0 / s1]w0 →[s0 / s1]w1))\n  sbi1(s0, s1, w0, w1)\n  sbi2(s0, s1, w0, w1)\n}","parent":["impbii","sbi1","sbi2"],"children":["sbrim","sblim","sbor","sban","sbbi","sbequ8","sbcimg","mo5f","iuninc","suppss2f","esumpfinvalf","bj-sbnf","wl-sbrimt","wl-sblimt","wl-dfrmosb","frege58bcor","frege60b","frege65b","ellimcabssub0"]},{"name":"sbrim","content":"Substitution in an implication with a variable not free in the antecedent affects only the consequent. (Contributed by NM, 2-Jun-1993.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm sbrim(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wi(w0, w1)), wi(w0, wsb(s0, s1, w1)))\n  -| wnf(s1, w0)\n} = {\n  bitri(wsb(s0, s1, wi(w0, w1)), wi(w0, wsb(s0, s1, w1)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n  sbim(s0, s1, w0, w1)\n  imbi1i(wsb(s0, s1, w0), wsb(s0, s1, w1), w0)\n  sbf(s0, s1, w0)\n}","pretty":"thm sbrim(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 → w1)↔(w0 →[s0 / s1]w1))\n  ⊣ F/(s1, w0)\n} = {\n  bitri([s0 / s1](w0 → w1), (w0 →[s0 / s1]w1), ([s0 / s1]w0 →[s0 / s1]w1))\n  sbim(s0, s1, w0, w1)\n  imbi1i([s0 / s1]w0, [s0 / s1]w1, w0)\n  sbf(s0, s1, w0)\n}","parent":["bitri","sbim","imbi1i","sbf"],"children":["sbied","sbco2d","2mos"]},{"name":"sblim","content":"Substitution in an implication with a variable not free in the consequent affects only the antecedent. (Contributed by NM, 14-Nov-2013.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm sblim(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), w1))\n  -| wnf(s1, w1)\n} = {\n  bitri(wsb(s0, s1, wi(w0, w1)), wi(wsb(s0, s1, w0), w1), wi(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n  sbim(s0, s1, w0, w1)\n  imbi2i(wsb(s0, s1, w0), wsb(s0, s1, w1), w1)\n  sbf(s0, s1, w1)\n}","pretty":"thm sblim(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 → w1)↔([s0 / s1]w0 → w1))\n  ⊣ F/(s1, w1)\n} = {\n  bitri([s0 / s1](w0 → w1), ([s0 / s1]w0 → w1), ([s0 / s1]w0 →[s0 / s1]w1))\n  sbim(s0, s1, w0, w1)\n  imbi2i([s0 / s1]w0, [s0 / s1]w1, w1)\n  sbf(s0, s1, w1)\n}","parent":["bitri","sbim","imbi2i","sbf"],"children":["sbmo"]},{"name":"sbor","content":"Disjunction inside and outside of a substitution are equivalent. (Contributed by NM, 29-Sep-2002.)","origin":"thm sbor(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wo(w0, w1)), wo(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n} = {\n  3bitr4i(wsb(s0, s1, wo(w0, w1)), wo(wsb(s0, s1, w0), wsb(s0, s1, w1)), wsb(s0, s1, wi(wn(w0), w1)), wi(wn(wsb(s0, s1, w0)), wsb(s0, s1, w1)))\n  bitri(wsb(s0, s1, wi(wn(w0), w1)), wi(wn(wsb(s0, s1, w0)), wsb(s0, s1, w1)), wi(wsb(s0, s1, wn(w0)), wsb(s0, s1, w1)))\n  sbim(s0, s1, wn(w0), w1)\n  imbi1i(wsb(s0, s1, wn(w0)), wsb(s0, s1, w1), wn(wsb(s0, s1, w0)))\n  sbn(s0, s1, w0)\n  sbbii(s0, s1, wo(w0, w1), wi(wn(w0), w1))\n  df-or(w0, w1)\n  df-or(wsb(s0, s1, w0), wsb(s0, s1, w1))\n}","pretty":"thm sbor(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 ∨ w1)↔([s0 / s1]w0 ∨[s0 / s1]w1))\n} = {\n  3bitr4i([s0 / s1](w0 ∨ w1), ([s0 / s1]w0 ∨[s0 / s1]w1), [s0 / s1](¬ w0 → w1), (¬[s0 / s1]w0 →[s0 / s1]w1))\n  bitri([s0 / s1](¬ w0 → w1), (¬[s0 / s1]w0 →[s0 / s1]w1), ([s0 / s1]¬ w0 →[s0 / s1]w1))\n  sbim(s0, s1, ¬ w0, w1)\n  imbi1i([s0 / s1]¬ w0, [s0 / s1]w1, ¬[s0 / s1]w0)\n  sbn(s0, s1, w0)\n  sbbii(s0, s1, (w0 ∨ w1), (¬ w0 → w1))\n  df-or(w0, w1)\n  df-or([s0 / s1]w0, [s0 / s1]w1)\n}","parent":["3bitr4i","bitri","sbim","imbi1i","sbn","sbbii","df-or"],"children":["sbcor","unab"]},{"name":"sban","content":"Conjunction inside and outside of a substitution are equivalent. For a version requiring disjoint variables, but fewer axioms, see ~ sbanvOLD . (Contributed by NM, 14-May-1993.)","origin":"thm sban(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wa(w0, w1)), wa(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n} = {\n  3bitr4i(wsb(s0, s1, wa(w0, w1)), wa(wsb(s0, s1, w0), wsb(s0, s1, w1)), wsb(s0, s1, wn(wi(w0, wn(w1)))), wn(wi(wsb(s0, s1, w0), wn(wsb(s0, s1, w1)))))\n  xchbinx(wsb(s0, s1, wn(wi(w0, wn(w1)))), wi(wsb(s0, s1, w0), wn(wsb(s0, s1, w1))), wsb(s0, s1, wi(w0, wn(w1))))\n  sbn(s0, s1, wi(w0, wn(w1)))\n  bitri(wsb(s0, s1, wi(w0, wn(w1))), wi(wsb(s0, s1, w0), wn(wsb(s0, s1, w1))), wi(wsb(s0, s1, w0), wsb(s0, s1, wn(w1))))\n  sbim(s0, s1, w0, wn(w1))\n  imbi2i(wsb(s0, s1, w0), wsb(s0, s1, wn(w1)), wn(wsb(s0, s1, w1)))\n  sbn(s0, s1, w1)\n  sbbii(s0, s1, wa(w0, w1), wn(wi(w0, wn(w1))))\n  df-an(w0, w1)\n  df-an(wsb(s0, s1, w0), wsb(s0, s1, w1))\n}","pretty":"thm sban(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 ∧ w1)↔([s0 / s1]w0 ∧[s0 / s1]w1))\n} = {\n  3bitr4i([s0 / s1](w0 ∧ w1), ([s0 / s1]w0 ∧[s0 / s1]w1), [s0 / s1]¬(w0 → ¬ w1), ¬([s0 / s1]w0 → ¬[s0 / s1]w1))\n  xchbinx([s0 / s1]¬(w0 → ¬ w1), ([s0 / s1]w0 → ¬[s0 / s1]w1), [s0 / s1](w0 → ¬ w1))\n  sbn(s0, s1, (w0 → ¬ w1))\n  bitri([s0 / s1](w0 → ¬ w1), ([s0 / s1]w0 → ¬[s0 / s1]w1), ([s0 / s1]w0 →[s0 / s1]¬ w1))\n  sbim(s0, s1, w0, ¬ w1)\n  imbi2i([s0 / s1]w0, [s0 / s1]¬ w1, ¬[s0 / s1]w1)\n  sbn(s0, s1, w1)\n  sbbii(s0, s1, (w0 ∧ w1), ¬(w0 → ¬ w1))\n  df-an(w0, w1)\n  df-an([s0 / s1]w0, [s0 / s1]w1)\n}","parent":["3bitr4i","xchbinx","sbn","bitri","sbim","imbi2i","sbbii","df-an"],"children":["sb3an","sbbi","sbabel","cbvreu","rmo3f","sbcan","rmo3","rmo3OLD","inab","difab","exss","inopab","mo5f","iuninc","suppss2f","fmptdF","disjdsct","esumpfinvalf","measiuns","ballotlemodife","wl-dfrabv","wl-dfrabf","sb5ALT","2uasbanh","2uasbanhVD","sb5ALTVD","ellimcabssub0","ichan"]},{"name":"sb3an","content":"Threefold conjunction inside and outside of a substitution are equivalent. (Contributed by NM, 14-Dec-2006.)","origin":"thm sb3an(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wb(wsb(s0, s1, w3a(w0, w1, w2)), w3a(wsb(s0, s1, w0), wsb(s0, s1, w1), wsb(s0, s1, w2)))\n} = {\n  3bitri(wsb(s0, s1, w3a(w0, w1, w2)), w3a(wsb(s0, s1, w0), wsb(s0, s1, w1), wsb(s0, s1, w2)), wsb(s0, s1, wa(wa(w0, w1), w2)), wa(wsb(s0, s1, wa(w0, w1)), wsb(s0, s1, w2)))\n  sbbii(s0, s1, w3a(w0, w1, w2), wa(wa(w0, w1), w2))\n  df-3an(w0, w1, w2)\n  sban(s0, s1, wa(w0, w1), w2)\n  bitr4i(wa(wsb(s0, s1, wa(w0, w1)), wsb(s0, s1, w2)), w3a(wsb(s0, s1, w0), wsb(s0, s1, w1), wsb(s0, s1, w2)), wa(wa(wsb(s0, s1, w0), wsb(s0, s1, w1)), wsb(s0, s1, w2)))\n  anbi1i(wsb(s0, s1, wa(w0, w1)), wsb(s0, s1, w2), wa(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n  sban(s0, s1, w0, w1)\n  df-3an(wsb(s0, s1, w0), wsb(s0, s1, w1), wsb(s0, s1, w2))\n}","pretty":"thm sb3an(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ ([s0 / s1](w0 ∧ w1 ∧ w2)↔([s0 / s1]w0 ∧[s0 / s1]w1 ∧[s0 / s1]w2))\n} = {\n  3bitri([s0 / s1](w0 ∧ w1 ∧ w2), ([s0 / s1]w0 ∧[s0 / s1]w1 ∧[s0 / s1]w2), [s0 / s1]((w0 ∧ w1)∧ w2), ([s0 / s1](w0 ∧ w1)∧[s0 / s1]w2))\n  sbbii(s0, s1, (w0 ∧ w1 ∧ w2), ((w0 ∧ w1)∧ w2))\n  df-3an(w0, w1, w2)\n  sban(s0, s1, (w0 ∧ w1), w2)\n  bitr4i(([s0 / s1](w0 ∧ w1)∧[s0 / s1]w2), ([s0 / s1]w0 ∧[s0 / s1]w1 ∧[s0 / s1]w2), (([s0 / s1]w0 ∧[s0 / s1]w1)∧[s0 / s1]w2))\n  anbi1i([s0 / s1](w0 ∧ w1), [s0 / s1]w2, ([s0 / s1]w0 ∧[s0 / s1]w1))\n  sban(s0, s1, w0, w1)\n  df-3an([s0 / s1]w0, [s0 / s1]w1, [s0 / s1]w2)\n}","parent":["3bitri","sbbii","df-3an","sban","bitr4i","anbi1i"],"children":[]},{"name":"sbbi","content":"Equivalence inside and outside of a substitution are equivalent. (Contributed by NM, 14-May-1993.)","origin":"thm sbbi(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wb(w0, w1)), wb(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n} = {\n  bitri(wsb(s0, s1, wb(w0, w1)), wb(wsb(s0, s1, w0), wsb(s0, s1, w1)), wsb(s0, s1, wa(wi(w0, w1), wi(w1, w0))))\n  sbbii(s0, s1, wb(w0, w1), wa(wi(w0, w1), wi(w1, w0)))\n  dfbi2(w0, w1)\n  3bitr4i(wsb(s0, s1, wa(wi(w0, w1), wi(w1, w0))), wb(wsb(s0, s1, w0), wsb(s0, s1, w1)), wa(wsb(s0, s1, wi(w0, w1)), wsb(s0, s1, wi(w1, w0))), wa(wi(wsb(s0, s1, w0), wsb(s0, s1, w1)), wi(wsb(s0, s1, w1), wsb(s0, s1, w0))))\n  anbi12i(wsb(s0, s1, wi(w0, w1)), wsb(s0, s1, wi(w1, w0)), wi(wsb(s0, s1, w0), wsb(s0, s1, w1)), wi(wsb(s0, s1, w1), wsb(s0, s1, w0)))\n  sbim(s0, s1, w0, w1)\n  sbim(s0, s1, w1, w0)\n  sban(s0, s1, wi(w0, w1), wi(w1, w0))\n  dfbi2(wsb(s0, s1, w0), wsb(s0, s1, w1))\n}","pretty":"thm sbbi(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1](w0 ↔ w1)↔([s0 / s1]w0 ↔[s0 / s1]w1))\n} = {\n  bitri([s0 / s1](w0 ↔ w1), ([s0 / s1]w0 ↔[s0 / s1]w1), [s0 / s1]((w0 → w1)∧(w1 → w0)))\n  sbbii(s0, s1, (w0 ↔ w1), ((w0 → w1)∧(w1 → w0)))\n  dfbi2(w0, w1)\n  3bitr4i([s0 / s1]((w0 → w1)∧(w1 → w0)), ([s0 / s1]w0 ↔[s0 / s1]w1), ([s0 / s1](w0 → w1)∧[s0 / s1](w1 → w0)), (([s0 / s1]w0 →[s0 / s1]w1)∧([s0 / s1]w1 →[s0 / s1]w0)))\n  anbi12i([s0 / s1](w0 → w1), [s0 / s1](w1 → w0), ([s0 / s1]w0 →[s0 / s1]w1), ([s0 / s1]w1 →[s0 / s1]w0))\n  sbim(s0, s1, w0, w1)\n  sbim(s0, s1, w1, w0)\n  sban(s0, s1, (w0 → w1), (w1 → w0))\n  dfbi2([s0 / s1]w0, [s0 / s1]w1)\n}","parent":["bitri","sbbii","dfbi2","3bitr4i","anbi12i","sbim","sban"],"children":["spsbbiOLD","sblbis","sbrbis","pm13.183","pm13.183OLD","sbcbig","sb8iota","bj-sbidmOLD"]},{"name":"spsbbiOLD","content":"Obsolete version of ~ spsbbi as of 6-Jul-2023. Specialization of biconditional. (Contributed by NM, 2-Jun-1993.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm spsbbiOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(wal(s0, wb(w0, w1)), wb(wsb(s1, s0, w0), wsb(s1, s0, w1)))\n} = {\n  sylib(wal(s0, wb(w0, w1)), wb(wsb(s1, s0, w0), wsb(s1, s0, w1)), wsb(s1, s0, wb(w0, w1)))\n  stdpc4(s0, s1, wb(w0, w1))\n  sbbi(s1, s0, w0, w1)\n}","pretty":"thm spsbbiOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0,(w0 ↔ w1))→([s1 / s0]w0 ↔[s1 / s0]w1))\n} = {\n  sylib(∀(s0,(w0 ↔ w1)), ([s1 / s0]w0 ↔[s1 / s0]w1), [s1 / s0](w0 ↔ w1))\n  stdpc4(s0, s1, (w0 ↔ w1))\n  sbbi(s1, s0, w0, w1)\n}","parent":["sylib","stdpc4","sbbi"],"children":[]},{"name":"sblbis","content":"Introduce left biconditional inside of a substitution. (Contributed by NM, 19-Aug-1993.)","origin":"thm sblbis(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wb(wsb(s0, s1, wb(w0, w1)), wb(wsb(s0, s1, w0), w2))\n  -| wb(wsb(s0, s1, w1), w2)\n} = {\n  bitri(wsb(s0, s1, wb(w0, w1)), wb(wsb(s0, s1, w0), w2), wb(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n  sbbi(s0, s1, w0, w1)\n  bibi2i(wsb(s0, s1, w0), wsb(s0, s1, w1), w2)\n}","pretty":"thm sblbis(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ ([s0 / s1](w0 ↔ w1)↔([s0 / s1]w0 ↔ w2))\n  ⊣ ([s0 / s1]w1 ↔ w2)\n} = {\n  bitri([s0 / s1](w0 ↔ w1), ([s0 / s1]w0 ↔ w2), ([s0 / s1]w0 ↔[s0 / s1]w1))\n  sbbi(s0, s1, w0, w1)\n  bibi2i([s0 / s1]w0, [s0 / s1]w1, w2)\n}","parent":["bitri","sbbi","bibi2i"],"children":["sbie","sb8eulem","sb8iota","wl-sb8eut"]},{"name":"sbrbis","content":"Introduce right biconditional inside of a substitution. (Contributed by NM, 18-Aug-1993.)","origin":"thm sbrbis(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wb(wsb(s0, s1, wb(w0, w1)), wb(w2, wsb(s0, s1, w1)))\n  -| wb(wsb(s0, s1, w0), w2)\n} = {\n  bitri(wsb(s0, s1, wb(w0, w1)), wb(w2, wsb(s0, s1, w1)), wb(wsb(s0, s1, w0), wsb(s0, s1, w1)))\n  sbbi(s0, s1, w0, w1)\n  bibi1i(wsb(s0, s1, w0), wsb(s0, s1, w1), w2)\n}","pretty":"thm sbrbis(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ ([s0 / s1](w0 ↔ w1)↔(w2 ↔[s0 / s1]w1))\n  ⊣ ([s0 / s1]w0 ↔ w2)\n} = {\n  bitri([s0 / s1](w0 ↔ w1), (w2 ↔[s0 / s1]w1), ([s0 / s1]w0 ↔[s0 / s1]w1))\n  sbbi(s0, s1, w0, w1)\n  bibi1i([s0 / s1]w0, [s0 / s1]w1, w2)\n}","parent":["bitri","sbbi","bibi1i"],"children":["sbrbif","sbabel"]},{"name":"sbrbif","content":"Introduce right biconditional inside of a substitution. (Contributed by NM, 18-Aug-1993.) (Revised by Mario Carneiro, 4-Oct-2016.)","origin":"thm sbrbif(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wb(wsb(s0, s1, wb(w0, w1)), wb(w2, w1))\n  -| wnf(s1, w1)\n  -| wb(wsb(s0, s1, w0), w2)\n} = {\n  bitri(wsb(s0, s1, wb(w0, w1)), wb(w2, w1), wb(w2, wsb(s0, s1, w1)))\n  sbrbis(s0, s1, w0, w1, w2)\n  bibi2i(w2, wsb(s0, s1, w1), w1)\n  sbf(s0, s1, w1)\n}","pretty":"thm sbrbif(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ ([s0 / s1](w0 ↔ w1)↔(w2 ↔ w1))\n  ⊣ F/(s1, w1)\n  ⊣ ([s0 / s1]w0 ↔ w2)\n} = {\n  bitri([s0 / s1](w0 ↔ w1), (w2 ↔ w1), (w2 ↔[s0 / s1]w1))\n  sbrbis(s0, s1, w0, w1, w2)\n  bibi2i(w2, [s0 / s1]w1, w1)\n  sbf(s0, s1, w1)\n}","parent":["bitri","sbrbis","bibi2i","sbf"],"children":[]},{"name":"sbequ8","content":"Elimination of equality from antecedent after substitution. (Contributed by NM, 5-Aug-1993.) Reduce dependencies on axioms. (Revised by Wolf Lammen, 28-Jul-2018.) Revise ~ df-sb . (Revised by Wolf Lammen, 28-Jul-2023.)","origin":"thm sbequ8(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, w0), wsb(s0, s1, wi(wceq(cv(s1), cv(s0)), w0)))\n} = {\n  bitr4i(wsb(s0, s1, w0), wsb(s0, s1, wi(wceq(cv(s1), cv(s0)), w0)), wi(wsb(s0, s1, wceq(cv(s1), cv(s0))), wsb(s0, s1, w0)))\n  a1bi(wsb(s0, s1, w0), wsb(s0, s1, wceq(cv(s1), cv(s0))))\n  equsb1(s0, s1)\n  sbim(s0, s1, wceq(cv(s1), cv(s0)), w0)\n}","pretty":"thm sbequ8(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔[s0 / s1](s1 = s0 → w0))\n} = {\n  bitr4i([s0 / s1]w0, [s0 / s1](s1 = s0 → w0), ([s0 / s1]s1 = s0 →[s0 / s1]w0))\n  a1bi([s0 / s1]w0, [s0 / s1]s1 = s0)\n  equsb1(s0, s1)\n  sbim(s0, s1, s1 = s0, w0)\n}","parent":["bitr4i","a1bi","equsb1","sbim"],"children":[]},{"name":"sbie","content":"Conversion of implicit substitution to explicit substitution. For versions requiring disjoint variables, but fewer axioms, see ~ sbiev and ~ sbievw . (Contributed by NM, 30-Jun-1994.) (Revised by Mario Carneiro, 4-Oct-2016.) (Proof shortened by Wolf Lammen, 13-Jul-2019.)","origin":"thm sbie(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, w0), w1)\n  -| wnf(s1, w1)\n  -| wi(wceq(cv(s1), cv(s0)), wb(w0, w1))\n} = {\n  mpbi(wb(wsb(s0, s1, w0), w1), wsb(s0, s1, wb(w0, w1)))\n  ax-mp(wsb(s0, s1, wb(w0, w1)), wsb(s0, s1, wceq(cv(s1), cv(s0))))\n  equsb1(s0, s1)\n  sbimi(s0, s1, wceq(cv(s1), cv(s0)), wb(w0, w1))\n  sblbis(s0, s1, w0, w1, w1)\n  sbf(s0, s1, w1)\n}","pretty":"thm sbie(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ ([s0 / s1]w0 ↔ w1)\n  ⊣ F/(s1, w1)\n  ⊣ (s1 = s0 →(w0 ↔ w1))\n} = {\n  mpbi(([s0 / s1]w0 ↔ w1), [s0 / s1](w0 ↔ w1))\n  ax-mp([s0 / s1](w0 ↔ w1), [s0 / s1]s1 = s0)\n  equsb1(s0, s1)\n  sbimi(s0, s1, s1 = s0, (w0 ↔ w1))\n  sblbis(s0, s1, w0, w1, w1)\n  sbf(s0, s1, w1)\n}","parent":["mpbi","ax-mp","equsb1","sbimi","sblbis","sbf"],"children":["sbied","2sbiev","mo4fOLD","cbvmo","cbveu","cbvab","clelsb3fOLD","cbvralf","cbvreu","sbralie","cbvrab","rmo4f","nfcdeq","sbcralt","sbcreu","cbvralcsf","cbvreucsf","cbvrabcsf","sbcel12","sbceqg","sbcbr123","cbvopab1","cbvmpt","wfis2fg","cbviota","cbvriota","tfis2f","tfinds","nd1","nd2","clwwlknonclwlknonf1o","clwwlknonclwlknonf1oOLD","dlwwlknondlwlknonf1o","dlwwlknondlwlknonf1oOLD","funcnv4mpt","nn0min","ballotlemodife","bnj1321","setinds2f","frins2fg","bj-sbeqALT","prtlem5","sbcrexgOLD"]},{"name":"sbied","content":"Conversion of implicit substitution to explicit substitution (deduction version of ~ sbie ). (Contributed by NM, 30-Jun-1994.) (Revised by Mario Carneiro, 4-Oct-2016.) (Proof shortened by Wolf Lammen, 24-Jun-2018.)","origin":"thm sbied(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wsb(s0, s1, w1), w2))\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s1, w2))\n  -| wi(w0, wi(wceq(cv(s1), cv(s0)), wb(w1, w2)))\n} = {\n  pm5.74ri(w0, wsb(s0, s1, w1), w2)\n  bitr3i(wi(w0, wsb(s0, s1, w1)), wi(w0, w2), wsb(s0, s1, wi(w0, w1)))\n  sbrim(s0, s1, w0, w1)\n  sbie(s0, s1, wi(w0, w1), wi(w0, w2))\n  nfim1(s1, w0, w2)\n  pm5.74d(wceq(cv(s1), cv(s0)), w0, w1, w2)\n  com12(wceq(cv(s1), cv(s0)), w0, wb(w1, w2))\n}","pretty":"thm sbied(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →([s0 / s1]w1 ↔ w2))\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s1, w2))\n  ⊣ (w0 →(s1 = s0 →(w1 ↔ w2)))\n} = {\n  pm5.74ri(w0, [s0 / s1]w1, w2)\n  bitr3i((w0 →[s0 / s1]w1), (w0 → w2), [s0 / s1](w0 → w1))\n  sbrim(s0, s1, w0, w1)\n  sbie(s0, s1, (w0 → w1), (w0 → w2))\n  nfim1(s1, w0, w2)\n  pm5.74d(s1 = s0, w0, w1, w2)\n  com12(s1 = s0, w0, (w1 ↔ w2))\n}","parent":["pm5.74ri","bitr3i","sbrim","sbie","nfim1","pm5.74d","com12"],"children":["sbiedv","sbco2","wl-equsb3"]},{"name":"sbiedv","content":"Conversion of implicit substitution to explicit substitution (deduction version of ~ sbie ). (Contributed by NM, 7-Jan-2017.)","origin":"thm sbiedv(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wsb(s0, s1, w1), w2))\n  -| wi(wa(w0, wceq(cv(s1), cv(s0))), wb(w1, w2))\n  -| diffsw(s1, w0)\n  -| diffsw(s1, w2)\n} = {\n  sbied(s0, s1, w0, w1, w2)\n  nfv(s1, w0)\n  nfvd(s1, w0, w2)\n  ex(w0, wceq(cv(s1), cv(s0)), wb(w1, w2))\n}","pretty":"thm sbiedv(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →([s0 / s1]w1 ↔ w2))\n  ⊣ ((w0 ∧ s1 = s0)→(w1 ↔ w2))\n  ⊣ d(s1, w0)\n  ⊣ d(s1, w2)\n} = {\n  sbied(s0, s1, w0, w1, w2)\n  nfv(s1, w0)\n  nfvd(s1, w0, w2)\n  ex(w0, s1 = s0, (w1 ↔ w2))\n}","parent":["sbied","nfv","nfvd","ex"],"children":["2sbiev","iscatd2","prtlem5"]},{"name":"2sbiev","content":"Conversion of double implicit substitution to explicit substitution. (Contributed by AV, 29-Jul-2023.)","origin":"thm 2sbiev(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wsb(s2, s3, w0)), w1)\n  -| wi(wa(wceq(cv(s1), cv(s0)), wceq(cv(s3), cv(s2))), wb(w0, w1))\n  -| diffss(s0, s3)\n  -| diffss(s1, s3)\n  -| diffsw(s1, w1)\n  -| diffsw(s3, w1)\n} = {\n  sbie(s0, s1, wsb(s2, s3, w0), w1)\n  nfv(s1, w1)\n  sbiedv(s2, s3, wceq(cv(s1), cv(s0)), w0, w1)\n  diff.wceq.s(s3, cv(s1), cv(s0))\n  diff.cv.s(s3, s1)\n  diffss.ex(s3, s1)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","pretty":"thm 2sbiev(setvar s0, setvar s1, setvar s2, setvar s3, wff w0, wff w1) {\n  ⊢ ([s0 / s1][s2 / s3]w0 ↔ w1)\n  ⊣ ((s1 = s0 ∧ s3 = s2)→(w0 ↔ w1))\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s3)\n  ⊣ d(s1, w1)\n  ⊣ d(s3, w1)\n} = {\n  sbie(s0, s1, [s2 / s3]w0, w1)\n  nfv(s1, w1)\n  sbiedv(s2, s3, s1 = s0, w0, w1)\n  diff.wceq.s(s3, s1, s0)\n  diff.cv.s(s3, s1)\n  diffss.ex(s3, s1)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","parent":["sbie","nfv","sbiedv","diff.wceq.s","diff.cv.s","diffss.ex"],"children":["ichbi12i"]},{"name":"sbcom3","content":"Substituting ` y ` for ` x ` and then ` z ` for ` y ` is equivalent to substituting ` z ` for both ` x ` and ` y ` . For a version requiring disjoint variables, but fewer axioms, see ~ sbcom3vv . (Contributed by Giovanni Mascellani, 8-Apr-2018.) Remove dependency on ~ ax-11 . (Revised by Wolf Lammen, 16-Sep-2018.) (Proof shortened by Wolf Lammen, 16-Sep-2018.)","origin":"thm sbcom3(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s1, wsb(s0, s2, w0)))\n} = {\n  pm2.61i(wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s1, wsb(s0, s2, w0))), wal(s1, wceq(cv(s1), cv(s0))))\n  sbbid(s0, s1, wal(s1, wceq(cv(s1), cv(s0))), wsb(s1, s2, w0), wsb(s0, s2, w0))\n  nfa1(s1, wceq(cv(s1), cv(s0)))\n  drsb2(s1, s0, s2, w0)\n  bitr4d(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s1, wsb(s0, s2, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), wsb(s0, s2, w0))))\n  syl6bb(wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s0, s1, wsb(s1, s2, w0)), wal(s1, wi(wceq(cv(s1), cv(s0)), wsb(s0, s2, w0))), wal(s1, wi(wceq(cv(s1), cv(s0)), wsb(s1, s2, w0))))\n  sb4b(s1, s0, wsb(s1, s2, w0))\n  albii(s1, wi(wceq(cv(s1), cv(s0)), wsb(s1, s2, w0)), wi(wceq(cv(s1), cv(s0)), wsb(s0, s2, w0)))\n  pm5.74i(wceq(cv(s1), cv(s0)), wsb(s1, s2, w0), wsb(s0, s2, w0))\n  sbequ(s1, s0, s2, w0)\n  sb4b(s1, s0, wsb(s0, s2, w0))\n}","pretty":"thm sbcom3(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1][s1 / s2]w0 ↔[s0 / s1][s0 / s2]w0)\n} = {\n  pm2.61i(([s0 / s1][s1 / s2]w0 ↔[s0 / s1][s0 / s2]w0), ∀(s1, s1 = s0))\n  sbbid(s0, s1, ∀(s1, s1 = s0), [s1 / s2]w0, [s0 / s2]w0)\n  nfa1(s1, s1 = s0)\n  drsb2(s1, s0, s2, w0)\n  bitr4d(¬ ∀(s1, s1 = s0), [s0 / s1][s1 / s2]w0, [s0 / s1][s0 / s2]w0, ∀(s1,(s1 = s0 →[s0 / s2]w0)))\n  syl6bb(¬ ∀(s1, s1 = s0), [s0 / s1][s1 / s2]w0, ∀(s1,(s1 = s0 →[s0 / s2]w0)), ∀(s1,(s1 = s0 →[s1 / s2]w0)))\n  sb4b(s1, s0, [s1 / s2]w0)\n  albii(s1, (s1 = s0 →[s1 / s2]w0), (s1 = s0 →[s0 / s2]w0))\n  pm5.74i(s1 = s0, [s1 / s2]w0, [s0 / s2]w0)\n  sbequ(s1, s0, s2, w0)\n  sb4b(s1, s0, [s0 / s2]w0)\n}","parent":["pm2.61i","sbbid","nfa1","drsb2","bitr4d","syl6bb","sb4b","albii","pm5.74i","sbequ"],"children":["sbco","sbidm","sbcom"]},{"name":"sbco","content":"A composition law for substitution. (Contributed by NM, 14-May-1993.) (Proof shortened by Wolf Lammen, 21-Sep-2018.)","origin":"thm sbco(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s1, s0, w0)), wsb(s0, s1, w0))\n} = {\n  bitri(wsb(s0, s1, wsb(s1, s0, w0)), wsb(s0, s1, w0), wsb(s0, s1, wsb(s0, s0, w0)))\n  sbcom3(s0, s1, s0, w0)\n  sbbii(s0, s1, wsb(s0, s0, w0), w0)\n  sbid(s0, w0)\n}","pretty":"thm sbco(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1][s1 / s0]w0 ↔[s0 / s1]w0)\n} = {\n  bitri([s0 / s1][s1 / s0]w0, [s0 / s1]w0, [s0 / s1][s0 / s0]w0)\n  sbcom3(s0, s1, s0, w0)\n  sbbii(s0, s1, [s0 / s0]w0, w0)\n  sbid(s0, w0)\n}","parent":["bitri","sbcom3","sbbii","sbid"],"children":["sbid2","sbco3"]},{"name":"sbid2","content":"An identity law for substitution. (Contributed by NM, 14-May-1993.) (Revised by Mario Carneiro, 6-Oct-2016.)","origin":"thm sbid2(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s1, s0, w0)), w0)\n  -| wnf(s1, w0)\n} = {\n  bitri(wsb(s0, s1, wsb(s1, s0, w0)), w0, wsb(s0, s1, w0))\n  sbco(s0, s1, w0)\n  sbf(s0, s1, w0)\n}","pretty":"thm sbid2(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1][s1 / s0]w0 ↔ w0)\n  ⊣ F/(s1, w0)\n} = {\n  bitri([s0 / s1][s1 / s0]w0, w0, [s0 / s1]w0)\n  sbco(s0, s1, w0)\n  sbf(s0, s1, w0)\n}","parent":["bitri","sbco","sbf"],"children":["sbid2v","sbtrt","sbbib"]},{"name":"sbid2v","content":"An identity law for substitution. Used in proof of Theorem 9.7 of [Megill] p. 449 (p. 16 of the preprint). (Contributed by NM, 5-Aug-1993.)","origin":"thm sbid2v(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s1, s0, w0)), w0)\n  -| diffsw(s1, w0)\n} = {\n  sbid2(s0, s1, w0)\n  nfv(s1, w0)\n}","pretty":"thm sbid2v(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1][s1 / s0]w0 ↔ w0)\n  ⊣ d(s1, w0)\n} = {\n  sbid2(s0, s1, w0)\n  nfv(s1, w0)\n}","parent":["sbid2","nfv"],"children":["sbco4lem","ichid","dfich2bi"]},{"name":"sbidm","content":"An idempotent law for substitution. (Contributed by NM, 30-Jun-1994.) (Proof shortened by Andrew Salmon, 25-May-2011.) (Proof shortened by Wolf Lammen, 13-Jul-2019.)","origin":"thm sbidm(setvar s0, setvar s1, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s0, s1, w0)), wsb(s0, s1, w0))\n} = {\n  bitr3i(wsb(s0, s1, wsb(s0, s1, w0)), wsb(s0, s1, w0), wsb(s0, s1, wsb(s1, s1, w0)))\n  sbcom3(s0, s1, s1, w0)\n  sbbii(s0, s1, wsb(s1, s1, w0), w0)\n  sbid(s1, w0)\n}","pretty":"thm sbidm(setvar s0, setvar s1, wff w0) {\n  ⊢ ([s0 / s1][s0 / s1]w0 ↔[s0 / s1]w0)\n} = {\n  bitr3i([s0 / s1][s0 / s1]w0, [s0 / s1]w0, [s0 / s1][s1 / s1]w0)\n  sbcom3(s0, s1, s1, w0)\n  sbbii(s0, s1, [s1 / s1]w0, w0)\n  sbid(s1, w0)\n}","parent":["bitr3i","sbcom3","sbbii","sbid"],"children":[]},{"name":"sbco2","content":"A composition law for substitution. For versions requiring fewer axioms, but more disjoint variable conditions, see ~ sbco2v and ~ sbco2vv . (Contributed by NM, 30-Jun-1994.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Wolf Lammen, 17-Sep-2018.)","origin":"thm sbco2(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, w0))\n  -| wnf(s1, w0)\n} = {\n  pm2.61i(wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, w0)), wal(s1, wceq(cv(s1), cv(s0))))\n  sps(s1, wceq(cv(s1), cv(s0)), wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, w0)))\n  bitr3d(wceq(cv(s1), cv(s0)), wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, w0), wsb(s1, s2, w0))\n  sbequ12(s1, s0, wsb(s1, s2, w0))\n  sbied(s0, s1, wn(wal(s1, wceq(cv(s1), cv(s0)))), wsb(s1, s2, w0), wsb(s0, s2, w0))\n  nfnae(s1, s1, s0)\n  nfsb4(s1, s0, s2, w0)\n  a1i(wn(wal(s1, wceq(cv(s1), cv(s0)))), wi(wceq(cv(s1), cv(s0)), wb(wsb(s1, s2, w0), wsb(s0, s2, w0))))\n  sbequ(s1, s0, s2, w0)\n}","pretty":"thm sbco2(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1][s1 / s2]w0 ↔[s0 / s2]w0)\n  ⊣ F/(s1, w0)\n} = {\n  pm2.61i(([s0 / s1][s1 / s2]w0 ↔[s0 / s2]w0), ∀(s1, s1 = s0))\n  sps(s1, s1 = s0, ([s0 / s1][s1 / s2]w0 ↔[s0 / s2]w0))\n  bitr3d(s1 = s0, [s0 / s1][s1 / s2]w0, [s0 / s2]w0, [s1 / s2]w0)\n  sbequ12(s1, s0, [s1 / s2]w0)\n  sbied(s0, s1, ¬ ∀(s1, s1 = s0), [s1 / s2]w0, [s0 / s2]w0)\n  nfnae(s1, s1, s0)\n  nfsb4(s1, s0, s2, w0)\n  a1i(¬ ∀(s1, s1 = s0), (s1 = s0 →([s1 / s2]w0 ↔[s0 / s2]w0)))\n  sbequ(s1, s0, s2, w0)\n}","parent":["pm2.61i","sps","bitr3d","sbequ12","sbied","nfnae","nfsb4","a1i","sbequ"],"children":["sbco2d","sb7f","sbco4lem","sbco4","cbvab","clelsb3f","clelsb3fOLD","sbralie","sbcco"]},{"name":"sbco2d","content":"A composition law for substitution. (Contributed by NM, 2-Jun-1993.) (Revised by Mario Carneiro, 6-Oct-2016.)","origin":"thm sbco2d(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(w0, wb(wsb(s0, s1, wsb(s1, s2, w1)), wsb(s0, s2, w1)))\n  -| wnf(s2, w0)\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s1, w1))\n} = {\n  pm5.74ri(w0, wsb(s0, s1, wsb(s1, s2, w1)), wsb(s0, s2, w1))\n  3bitr3i(wi(w0, wsb(s0, s1, wsb(s1, s2, w1))), wi(w0, wsb(s0, s2, w1)), wsb(s0, s1, wsb(s1, s2, wi(w0, w1))), wsb(s0, s2, wi(w0, w1)))\n  sbco2(s0, s1, s2, wi(w0, w1))\n  nfim1(s1, w0, w1)\n  bitri(wsb(s0, s1, wsb(s1, s2, wi(w0, w1))), wi(w0, wsb(s0, s1, wsb(s1, s2, w1))), wsb(s0, s1, wi(w0, wsb(s1, s2, w1))))\n  sbbii(s0, s1, wsb(s1, s2, wi(w0, w1)), wi(w0, wsb(s1, s2, w1)))\n  sbrim(s1, s2, w0, w1)\n  sbrim(s0, s1, w0, wsb(s1, s2, w1))\n  sbrim(s0, s2, w0, w1)\n}","pretty":"thm sbco2d(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (w0 →([s0 / s1][s1 / s2]w1 ↔[s0 / s2]w1))\n  ⊣ F/(s2, w0)\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s1, w1))\n} = {\n  pm5.74ri(w0, [s0 / s1][s1 / s2]w1, [s0 / s2]w1)\n  3bitr3i((w0 →[s0 / s1][s1 / s2]w1), (w0 →[s0 / s2]w1), [s0 / s1][s1 / s2](w0 → w1), [s0 / s2](w0 → w1))\n  sbco2(s0, s1, s2, (w0 → w1))\n  nfim1(s1, w0, w1)\n  bitri([s0 / s1][s1 / s2](w0 → w1), (w0 →[s0 / s1][s1 / s2]w1), [s0 / s1](w0 →[s1 / s2]w1))\n  sbbii(s0, s1, [s1 / s2](w0 → w1), (w0 →[s1 / s2]w1))\n  sbrim(s1, s2, w0, w1)\n  sbrim(s0, s1, w0, [s1 / s2]w1)\n  sbrim(s0, s2, w0, w1)\n}","parent":["pm5.74ri","3bitr3i","sbco2","nfim1","bitri","sbbii","sbrim"],"children":["sbco3","wl-clelsb3df"]},{"name":"sbco3","content":"A composition law for substitution. (Contributed by NM, 2-Jun-1993.) (Proof shortened by Wolf Lammen, 18-Sep-2018.)","origin":"thm sbco3(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, wsb(s2, s1, w0)))\n} = {\n  pm2.61i(wb(wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, wsb(s2, s1, w0))), wal(s2, wceq(cv(s2), cv(s1))))\n  bitr3d(wal(s2, wceq(cv(s2), cv(s1))), wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, wsb(s2, s1, w0)), wsb(s0, s2, wsb(s1, s2, w0)))\n  drsb1(s2, s1, s0, wsb(s1, s2, w0))\n  sbbid(s0, s2, wal(s2, wceq(cv(s2), cv(s1))), wsb(s1, s2, w0), wsb(s2, s1, w0))\n  nfae(s2, s2, s1)\n  sps(s2, wceq(cv(s2), cv(s1)), wb(wsb(s1, s2, w0), wsb(s2, s1, w0)))\n  sbequ12a(s2, s1, w0)\n  syl5rbbr(wn(wal(s2, wceq(cv(s2), cv(s1)))), wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, wsb(s2, s1, w0)), wsb(s0, s2, wsb(s2, s1, wsb(s1, s2, w0))))\n  sbbii(s0, s2, wsb(s2, s1, wsb(s1, s2, w0)), wsb(s2, s1, w0))\n  sbco(s2, s1, w0)\n  sbco2d(s0, s2, s1, wn(wal(s2, wceq(cv(s2), cv(s1)))), wsb(s1, s2, w0))\n  nfnae(s1, s2, s1)\n  nfnae(s2, s2, s1)\n  nfsb2(s2, s1, w0)\n}","pretty":"thm sbco3(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1][s1 / s2]w0 ↔[s0 / s2][s2 / s1]w0)\n} = {\n  pm2.61i(([s0 / s1][s1 / s2]w0 ↔[s0 / s2][s2 / s1]w0), ∀(s2, s2 = s1))\n  bitr3d(∀(s2, s2 = s1), [s0 / s1][s1 / s2]w0, [s0 / s2][s2 / s1]w0, [s0 / s2][s1 / s2]w0)\n  drsb1(s2, s1, s0, [s1 / s2]w0)\n  sbbid(s0, s2, ∀(s2, s2 = s1), [s1 / s2]w0, [s2 / s1]w0)\n  nfae(s2, s2, s1)\n  sps(s2, s2 = s1, ([s1 / s2]w0 ↔[s2 / s1]w0))\n  sbequ12a(s2, s1, w0)\n  syl5rbbr(¬ ∀(s2, s2 = s1), [s0 / s1][s1 / s2]w0, [s0 / s2][s2 / s1]w0, [s0 / s2][s2 / s1][s1 / s2]w0)\n  sbbii(s0, s2, [s2 / s1][s1 / s2]w0, [s2 / s1]w0)\n  sbco(s2, s1, w0)\n  sbco2d(s0, s2, s1, ¬ ∀(s2, s2 = s1), [s1 / s2]w0)\n  nfnae(s1, s2, s1)\n  nfnae(s2, s2, s1)\n  nfsb2(s2, s1, w0)\n}","parent":["pm2.61i","bitr3d","drsb1","sbbid","nfae","sps","sbequ12a","syl5rbbr","sbbii","sbco","sbco2d","nfnae","nfsb2"],"children":["sbcom"]},{"name":"sbcom","content":"A commutativity law for substitution. (Contributed by NM, 27-May-1997.) (Proof shortened by Wolf Lammen, 20-Sep-2018.)","origin":"thm sbcom(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s0, s2, w0)), wsb(s0, s2, wsb(s0, s1, w0)))\n} = {\n  3bitr3i(wsb(s0, s1, wsb(s0, s2, w0)), wsb(s0, s2, wsb(s0, s1, w0)), wsb(s0, s1, wsb(s1, s2, w0)), wsb(s0, s2, wsb(s2, s1, w0)))\n  sbco3(s0, s1, s2, w0)\n  sbcom3(s0, s1, s2, w0)\n  sbcom3(s0, s2, s1, w0)\n}","pretty":"thm sbcom(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1][s0 / s2]w0 ↔[s0 / s2][s0 / s1]w0)\n} = {\n  3bitr3i([s0 / s1][s0 / s2]w0, [s0 / s2][s0 / s1]w0, [s0 / s1][s1 / s2]w0, [s0 / s2][s2 / s1]w0)\n  sbco3(s0, s1, s2, w0)\n  sbcom3(s0, s1, s2, w0)\n  sbcom3(s0, s2, s1, w0)\n}","parent":["3bitr3i","sbco3","sbcom3"],"children":[]},{"name":"sbtrt","content":"Partially closed form of ~ sbtr . (Contributed by BJ, 4-Jun-2019.)","origin":"thm sbtrt(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wsb(s0, s1, w0)), w0)\n  -| wnf(s0, w0)\n} = {\n  sylib(wal(s0, wsb(s0, s1, w0)), w0, wsb(s1, s0, wsb(s0, s1, w0)))\n  stdpc4(s0, s1, wsb(s0, s1, w0))\n  sbid2(s1, s0, w0)\n}","pretty":"thm sbtrt(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,[s0 / s1]w0)→ w0)\n  ⊣ F/(s0, w0)\n} = {\n  sylib(∀(s0,[s0 / s1]w0), w0, [s1 / s0][s0 / s1]w0)\n  stdpc4(s0, s1, [s0 / s1]w0)\n  sbid2(s1, s0, w0)\n}","parent":["sylib","stdpc4","sbid2"],"children":["sbtr"]},{"name":"sbtr","content":"A partial converse to ~ sbt . If the substitution of a variable for a non-free one in a wff gives a theorem, then the original wff is a theorem. (Contributed by BJ, 15-Sep-2018.)","origin":"thm sbtr(setvar s0, setvar s1, wff w0) {\n  |- w0\n  -| wnf(s0, w0)\n  -| wsb(s0, s1, w0)\n} = {\n  mpg(s0, w0, wsb(s0, s1, w0))\n  sbtrt(s0, s1, w0)\n}","pretty":"thm sbtr(setvar s0, setvar s1, wff w0) {\n  ⊢ w0\n  ⊣ F/(s0, w0)\n  ⊣ [s0 / s1]w0\n} = {\n  mpg(s0, w0, [s0 / s1]w0)\n  sbtrt(s0, s1, w0)\n}","parent":["mpg","sbtrt"],"children":[]},{"name":"sb8","content":"Substitution of variable in universal quantifier. For a version requiring disjoint variables, but fewer axioms, see ~ sb8v . (Contributed by NM, 16-May-1993.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Jim Kingdon, 15-Jan-2018.)","origin":"thm sb8(setvar s0, setvar s1, wff w0) {\n  |- wb(wal(s0, w0), wal(s1, wsb(s1, s0, w0)))\n  -| wnf(s1, w0)\n} = {\n  cbval(s0, s1, w0, wsb(s1, s0, w0))\n  nfs1(s0, s1, w0)\n  sbequ12(s0, s1, w0)\n}","pretty":"thm sb8(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0, w0)↔ ∀(s1,[s1 / s0]w0))\n  ⊣ F/(s1, w0)\n} = {\n  cbval(s0, s1, w0, [s1 / s0]w0)\n  nfs1(s0, s1, w0)\n  sbequ12(s0, s1, w0)\n}","parent":["cbval","nfs1","sbequ12"],"children":["sbhb","sb8iota","mo5f","ax11-pm2","bj-nfcf","wl-sb8eut","sbcalf"]},{"name":"sb8e","content":"Substitution of variable in existential quantifier. For a version requiring disjoint variables, but fewer axioms, see ~ sb8ev . (Contributed by NM, 12-Aug-1993.) (Revised by Mario Carneiro, 6-Oct-2016.) (Proof shortened by Jim Kingdon, 15-Jan-2018.)","origin":"thm sb8e(setvar s0, setvar s1, wff w0) {\n  |- wb(wex(s0, w0), wex(s1, wsb(s1, s0, w0)))\n  -| wnf(s1, w0)\n} = {\n  cbvex(s0, s1, w0, wsb(s1, s0, w0))\n  nfs1(s0, s1, w0)\n  sbequ12(s0, s1, w0)\n}","pretty":"thm sb8e(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃(s0, w0)↔ ∃(s1,[s1 / s0]w0))\n  ⊣ F/(s1, w0)\n} = {\n  cbvex(s0, s1, w0, [s1 / s0]w0)\n  nfs1(s0, s1, w0)\n  sbequ12(s0, s1, w0)\n}","parent":["cbvex","nfs1","sbequ12"],"children":["2sb8e","mo3OLD","sb8mo","bnj985","sbcexf","exlimddvfi","pm11.58"]},{"name":"sb9","content":"Commutation of quantification and substitution variables. (Contributed by NM, 5-Aug-1993.) Allow a shortening of ~ sb9i . (Revised by Wolf Lammen, 15-Jun-2019.)","origin":"thm sb9(setvar s0, setvar s1, wff w0) {\n  |- wb(wal(s0, wsb(s0, s1, w0)), wal(s1, wsb(s1, s0, w0)))\n} = {\n  pm2.61i(wb(wal(s0, wsb(s0, s1, w0)), wal(s1, wsb(s1, s0, w0))), wal(s0, wceq(cv(s0), cv(s1))))\n  dral1(s0, s1, wsb(s0, s1, w0), wsb(s1, s0, w0))\n  sps(s0, wceq(cv(s0), cv(s1)), wb(wsb(s0, s1, w0), wsb(s1, s0, w0)))\n  cbv2(s0, s1, wn(wal(s0, wceq(cv(s0), cv(s1)))), wsb(s0, s1, w0), wsb(s1, s0, w0))\n  nfnae(s0, s0, s1)\n  nfnae(s1, s0, s1)\n  naecoms(s0, s1, wnf(s1, wsb(s0, s1, w0)))\n  nfsb2(s1, s0, w0)\n  nfsb2(s0, s1, w0)\n  a1i(wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s0), cv(s1)), wb(wsb(s0, s1, w0), wsb(s1, s0, w0))))\n  equcoms(s0, s1, wb(wsb(s0, s1, w0), wsb(s1, s0, w0)))\n  sbequ12a(s1, s0, w0)\n}","pretty":"thm sb9(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,[s0 / s1]w0)↔ ∀(s1,[s1 / s0]w0))\n} = {\n  pm2.61i((∀(s0,[s0 / s1]w0)↔ ∀(s1,[s1 / s0]w0)), ∀(s0, s0 = s1))\n  dral1(s0, s1, [s0 / s1]w0, [s1 / s0]w0)\n  sps(s0, s0 = s1, ([s0 / s1]w0 ↔[s1 / s0]w0))\n  cbv2(s0, s1, ¬ ∀(s0, s0 = s1), [s0 / s1]w0, [s1 / s0]w0)\n  nfnae(s0, s0, s1)\n  nfnae(s1, s0, s1)\n  naecoms(s0, s1, F/(s1,[s0 / s1]w0))\n  nfsb2(s1, s0, w0)\n  nfsb2(s0, s1, w0)\n  a1i(¬ ∀(s0, s0 = s1), (s0 = s1 →([s0 / s1]w0 ↔[s1 / s0]w0)))\n  equcoms(s0, s1, ([s0 / s1]w0 ↔[s1 / s0]w0))\n  sbequ12a(s1, s0, w0)\n}","parent":["pm2.61i","dral1","sps","cbv2","nfnae","naecoms","nfsb2","a1i","equcoms","sbequ12a"],"children":["sb9i"]},{"name":"sb9i","content":"Commutation of quantification and substitution variables. (Contributed by NM, 5-Aug-1993.) (Proof shortened by Wolf Lammen, 15-Jun-2019.)","origin":"thm sb9i(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wsb(s0, s1, w0)), wal(s1, wsb(s1, s0, w0)))\n} = {\n  biimpi(wal(s0, wsb(s0, s1, w0)), wal(s1, wsb(s1, s0, w0)))\n  sb9(s0, s1, w0)\n}","pretty":"thm sb9i(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,[s0 / s1]w0)→ ∀(s1,[s1 / s0]w0))\n} = {\n  biimpi(∀(s0,[s0 / s1]w0), ∀(s1,[s1 / s0]w0))\n  sb9(s0, s1, w0)\n}","parent":["biimpi","sb9"],"children":[]},{"name":"sbhb","content":"Two ways of expressing \" ` x ` is (effectively) not free in ` ph ` \". (Contributed by NM, 29-May-2009.)","origin":"thm sbhb(setvar s0, setvar s1, wff w0) {\n  |- wb(wi(w0, wal(s0, w0)), wal(s1, wi(w0, wsb(s1, s0, w0))))\n  -| diffsw(s1, w0)\n} = {\n  bitr4i(wi(w0, wal(s0, w0)), wal(s1, wi(w0, wsb(s1, s0, w0))), wi(w0, wal(s1, wsb(s1, s0, w0))))\n  imbi2i(w0, wal(s0, w0), wal(s1, wsb(s1, s0, w0)))\n  sb8(s0, s1, w0)\n  nfv(s1, w0)\n  19.21v(s1, w0, wsb(s1, s0, w0))\n}","pretty":"thm sbhb(setvar s0, setvar s1, wff w0) {\n  ⊢ ((w0 → ∀(s0, w0))↔ ∀(s1,(w0 →[s1 / s0]w0)))\n  ⊣ d(s1, w0)\n} = {\n  bitr4i((w0 → ∀(s0, w0)), ∀(s1,(w0 →[s1 / s0]w0)), (w0 → ∀(s1,[s1 / s0]w0)))\n  imbi2i(w0, ∀(s0, w0), ∀(s1,[s1 / s0]w0))\n  sb8(s0, s1, w0)\n  nfv(s1, w0)\n  19.21v(s1, w0, [s1 / s0]w0)\n}","parent":["bitr4i","imbi2i","sb8","nfv","19.21v"],"children":[]},{"name":"nfsb","content":"If ` z ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` when ` y ` and ` z ` are distinct. For a version requiring more disjoint variables, but fewer axioms, see ~ nfsbv . (Contributed by Mario Carneiro, 11-Aug-2016.)","origin":"thm nfsb(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wnf(s0, wsb(s1, s2, w0))\n  -| wnf(s0, w0)\n  -| diffss(s0, s1)\n} = {\n  pm2.61i(wnf(s0, wsb(s1, s2, w0)), wal(s0, wceq(cv(s0), cv(s1))))\n  axc16nf(s0, s1, s0, wsb(s1, s2, w0))\n  nfsb4(s0, s1, s2, w0)\n}","pretty":"thm nfsb(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ F/(s0,[s1 / s2]w0)\n  ⊣ F/(s0, w0)\n  ⊣ d(s0, s1)\n} = {\n  pm2.61i(F/(s0,[s1 / s2]w0), ∀(s0, s0 = s1))\n  axc16nf(s0, s1, s0, [s1 / s2]w0)\n  nfsb4(s0, s1, s2, w0)\n}","parent":["pm2.61i","axc16nf","nfsb4"],"children":["hbsb","sb10f","2sb8e","sb8eu","cbvralf","cbvreu","cbvralsv","cbvrexsv","cbvrab","cbvreucsf","cbvrabcsf","cbvopab1","cbvmptf","cbvmpt","ralxpf","cbviota","sb8iota","cbvriota","dfoprab4f","mo5f","ax11-pm2","wl-ich-lem1d","2sb5nd","dfich2ai","dfich2","ichbi12i"]},{"name":"hbsb","content":"If ` z ` is not free in ` ph ` , it is not free in ` [ y / x ] ph ` when ` y ` and ` z ` are distinct. (Contributed by NM, 12-Aug-1993.)","origin":"thm hbsb(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wsb(s0, s1, w0), wal(s2, wsb(s0, s1, w0)))\n  -| wi(w0, wal(s2, w0))\n  -| diffss(s0, s2)\n} = {\n  nf5ri(s2, wsb(s0, s1, w0))\n  nfsb(s2, s0, s1, w0)\n  nf5i(s2, w0)\n  diffss.ex(s2, s0)\n}","pretty":"thm hbsb(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]w0 → ∀(s2,[s0 / s1]w0))\n  ⊣ (w0 → ∀(s2, w0))\n  ⊣ d(s0, s2)\n} = {\n  nf5ri(s2, [s0 / s1]w0)\n  nfsb(s2, s0, s1, w0)\n  nf5i(s2, w0)\n  diffss.ex(s2, s0)\n}","parent":["nf5ri","nfsb","nf5i","diffss.ex"],"children":["hbab","hblem"]},{"name":"nfsbd","content":"Deduction version of ~ nfsb . (Contributed by NM, 15-Feb-2013.)","origin":"thm nfsbd(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wi(w0, wnf(s0, wsb(s1, s2, w1)))\n  -| wnf(s2, w0)\n  -| wi(w0, wnf(s0, w1))\n  -| diffss(s0, s1)\n} = {\n  pm2.61d2(w0, wnf(s0, wsb(s1, s2, w1)), wal(s0, wceq(cv(s0), cv(s1))))\n  syl(w0, wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wsb(s1, s2, w1))), wal(s2, wnf(s0, w1)))\n  alrimi(s2, w0, wnf(s0, w1))\n  nfsb4t(s2, s0, s1, w1)\n  axc16nf(s0, s1, s0, wsb(s1, s2, w1))\n}","pretty":"thm nfsbd(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ (w0 → F/(s0,[s1 / s2]w1))\n  ⊣ F/(s2, w0)\n  ⊣ (w0 → F/(s0, w1))\n  ⊣ d(s0, s1)\n} = {\n  pm2.61d2(w0, F/(s0,[s1 / s2]w1), ∀(s0, s0 = s1))\n  syl(w0, (¬ ∀(s0, s0 = s1)→ F/(s0,[s1 / s2]w1)), ∀(s2, F/(s0, w1)))\n  alrimi(s2, w0, F/(s0, w1))\n  nfsb4t(s2, s0, s1, w1)\n  axc16nf(s0, s1, s0, [s1 / s2]w1)\n}","parent":["pm2.61d2","syl","alrimi","nfsb4t","axc16nf"],"children":["nfabd","nfabd2OLD","wl-sb8eut"]},{"name":"sb7f","content":"This version of ~ dfsb7 does not require that ` ph ` and ` z ` be distinct. This permits it to be used as a definition for substitution in a formalization that omits the logically redundant axiom ~ ax-5 i.e. that doesn't have the concept of a variable not occurring in a wff. ( ~ df-sb is also suitable, but its mixing of free and bound variables is distasteful to some logicians.) (Contributed by NM, 26-Jul-2006.) (Revised by Mario Carneiro, 6-Oct-2016.)","origin":"thm sb7f(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, w0), wex(s2, wa(wceq(cv(s2), cv(s0)), wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))))\n  -| wnf(s2, w0)\n  -| diffss(s0, s2)\n} = {\n  3bitr3i(wsb(s0, s1, w0), wex(s2, wa(wceq(cv(s2), cv(s0)), wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))), wsb(s0, s2, wsb(s2, s1, w0)), wsb(s0, s2, wex(s1, wa(wceq(cv(s1), cv(s2)), w0))))\n  sbbii(s0, s2, wsb(s2, s1, w0), wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))\n  sb5f(s2, s1, w0)\n  sbco2(s0, s2, s1, w0)\n  sb5(s0, s2, wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))\n}","pretty":"thm sb7f(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∃(s2,(s2 = s0 ∧ ∃(s1,(s1 = s2 ∧ w0)))))\n  ⊣ F/(s2, w0)\n  ⊣ d(s0, s2)\n} = {\n  3bitr3i([s0 / s1]w0, ∃(s2,(s2 = s0 ∧ ∃(s1,(s1 = s2 ∧ w0)))), [s0 / s2][s2 / s1]w0, [s0 / s2]∃(s1,(s1 = s2 ∧ w0)))\n  sbbii(s0, s2, [s2 / s1]w0, ∃(s1,(s1 = s2 ∧ w0)))\n  sb5f(s2, s1, w0)\n  sbco2(s0, s2, s1, w0)\n  sb5(s0, s2, ∃(s1,(s1 = s2 ∧ w0)))\n}","parent":["3bitr3i","sbbii","sb5f","sbco2","sb5"],"children":["sb7h","dfsb7OLD"]},{"name":"sb7h","content":"This version of ~ dfsb7 does not require that ` ph ` and ` z ` be distinct. This permits it to be used as a definition for substitution in a formalization that omits the logically redundant axiom ~ ax-5 i.e. that doesn't have the concept of a variable not occurring in a wff. ( ~ df-sb is also suitable, but its mixing of free and bound variables is distasteful to some logicians.) (Contributed by NM, 26-Jul-2006.) (Proof shortened by Andrew Salmon, 25-May-2011.)","origin":"thm sb7h(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, w0), wex(s2, wa(wceq(cv(s2), cv(s0)), wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))))\n  -| wi(w0, wal(s2, w0))\n  -| diffss(s0, s2)\n} = {\n  sb7f(s0, s1, s2, w0)\n  nf5i(s2, w0)\n}","pretty":"thm sb7h(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∃(s2,(s2 = s0 ∧ ∃(s1,(s1 = s2 ∧ w0)))))\n  ⊣ (w0 → ∀(s2, w0))\n  ⊣ d(s0, s2)\n} = {\n  sb7f(s0, s1, s2, w0)\n  nf5i(s2, w0)\n}","parent":["sb7f","nf5i"],"children":[]},{"name":"dfsb7OLD","content":"Obsolete version of ~ dfsb7 as of 8-Jul-2023. An alternate definition of proper substitution ~ df-sb . By introducing a dummy variable ` z ` in the definiens, we are able to eliminate any distinct variable restrictions among the variables ` x ` , ` y ` , and ` ph ` of the definiendum. No distinct variable conflicts arise because ` z ` effectively insulates ` x ` from ` y ` . To achieve this, we use a chain of two substitutions in the form of ~ sb5 , first ` z ` for ` x ` then ` y ` for ` z ` . Compare Definition 2.1'' of [Quine] p. 17, which is obtained from this theorem by applying ~ df-clab . Theorem ~ sb7h provides a version where ` ph ` and ` z ` don't have to be distinct. (Contributed by NM, 28-Jan-2004.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm dfsb7OLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, w0), wex(s2, wa(wceq(cv(s2), cv(s0)), wex(s1, wa(wceq(cv(s1), cv(s2)), w0)))))\n  -| diffss(s0, s2)\n  -| diffsw(s2, w0)\n} = {\n  sb7f(s0, s1, s2, w0)\n  nfv(s2, w0)\n}","pretty":"thm dfsb7OLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∃(s2,(s2 = s0 ∧ ∃(s1,(s1 = s2 ∧ w0)))))\n  ⊣ d(s0, s2)\n  ⊣ d(s2, w0)\n} = {\n  sb7f(s0, s1, s2, w0)\n  nfv(s2, w0)\n}","parent":["sb7f","nfv"],"children":[]},{"name":"sb10f","content":"Hao Wang's identity axiom P6 in Irving Copi, _Symbolic Logic_ (5th ed., 1979), p. 328. In traditional predicate calculus, this is a sole axiom for identity from which the usual ones can be derived. (Contributed by NM, 9-May-2005.) (Revised by Mario Carneiro, 6-Oct-2016.)","origin":"thm sb10f(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, w0), wex(s2, wa(wceq(cv(s2), cv(s0)), wsb(s2, s1, w0))))\n  -| wnf(s2, w0)\n  -| diffss(s0, s2)\n} = {\n  bicomi(wsb(s0, s1, w0), wex(s2, wa(wceq(cv(s2), cv(s0)), wsb(s2, s1, w0))))\n  equsexv(s2, s0, wsb(s2, s1, w0), wsb(s0, s1, w0))\n  nfsb(s2, s0, s1, w0)\n  sbequ(s2, s0, s1, w0)\n  diffss.ex(s2, s0)\n}","pretty":"thm sb10f(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]w0 ↔ ∃(s2,(s2 = s0 ∧[s2 / s1]w0)))\n  ⊣ F/(s2, w0)\n  ⊣ d(s0, s2)\n} = {\n  bicomi([s0 / s1]w0, ∃(s2,(s2 = s0 ∧[s2 / s1]w0)))\n  equsexv(s2, s0, [s2 / s1]w0, [s0 / s1]w0)\n  nfsb(s2, s0, s1, w0)\n  sbequ(s2, s0, s1, w0)\n  diffss.ex(s2, s0)\n}","parent":["bicomi","equsexv","nfsb","sbequ","diffss.ex"],"children":[]},{"name":"sbelx","content":"Elimination of substitution. Also see ~ sbel2x . (Contributed by NM, 5-Aug-1993.) Avoid ~ ax-13 . (Revised by Wolf Lammen, 6-Aug-2023.)","origin":"thm sbelx(setvar s0, setvar s1, wff w0) {\n  |- wb(w0, wex(s0, wa(wceq(cv(s0), cv(s1)), wsb(s0, s1, w0))))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w0)\n} = {\n  bitr3i(w0, wex(s0, wa(wceq(cv(s0), cv(s1)), wsb(s0, s1, w0))), wsb(s1, s0, wsb(s0, s1, w0)))\n  sbid2vw(s1, s0, w0)\n  sb5(s1, s0, wsb(s0, s1, w0))\n  diffss.ex(s1, s0)\n}","pretty":"thm sbelx(setvar s0, setvar s1, wff w0) {\n  ⊢ (w0 ↔ ∃(s0,(s0 = s1 ∧[s0 / s1]w0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w0)\n} = {\n  bitr3i(w0, ∃(s0,(s0 = s1 ∧[s0 / s1]w0)), [s1 / s0][s0 / s1]w0)\n  sbid2vw(s1, s0, w0)\n  sb5(s1, s0, [s0 / s1]w0)\n  diffss.ex(s1, s0)\n}","parent":["bitr3i","sbid2vw","sb5","diffss.ex"],"children":["pm13.196a"]},{"name":"sbal1","content":"A theorem used in elimination of disjoint variable restriction on ` x ` and ` y ` by replacing it with a distinctor ` -. A. x x = z ` . (Contributed by NM, 15-May-1993.) (Proof shortened by Wolf Lammen, 3-Oct-2018.)","origin":"thm sbal1(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s1, s2, wal(s0, w0)), wal(s0, wsb(s1, s2, w0))))\n  -| diffss(s0, s2)\n} = {\n  pm2.61d2(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s1, s2, wal(s0, w0)), wal(s0, wsb(s1, s2, w0))), wal(s2, wceq(cv(s2), cv(s1))))\n  ex(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s2, wceq(cv(s2), cv(s1)))), wb(wsb(s1, s2, wal(s0, w0)), wal(s0, wsb(s1, s2, w0))))\n  bitr4d(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s2, wceq(cv(s2), cv(s1))))), wsb(s1, s2, wal(s0, w0)), wal(s0, wsb(s1, s2, w0)), wal(s2, wal(s0, wi(wceq(cv(s2), cv(s1)), w0))))\n  sylan9bbr(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s2, wceq(cv(s2), cv(s1)))), wsb(s1, s2, wal(s0, w0)), wal(s2, wal(s0, wi(wceq(cv(s2), cv(s1)), w0))), wal(s2, wi(wceq(cv(s2), cv(s1)), wal(s0, w0))))\n  sb4b(s2, s1, wal(s0, w0))\n  albid(s2, wn(wal(s0, wceq(cv(s0), cv(s1)))), wi(wceq(cv(s2), cv(s1)), wal(s0, w0)), wal(s0, wi(wceq(cv(s2), cv(s1)), w0)))\n  nfnae(s2, s0, s1)\n  syl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wi(wceq(cv(s2), cv(s1)), wal(s0, w0)), wal(s0, wi(wceq(cv(s2), cv(s1)), w0))), wnf(s0, wceq(cv(s2), cv(s1))))\n  nfeqf2(s0, s1, s2)\n  bicomd(wnf(s0, wceq(cv(s2), cv(s1))), wi(wceq(cv(s2), cv(s1)), wal(s0, w0)), wal(s0, wi(wceq(cv(s2), cv(s1)), w0)))\n  19.21t(s0, wceq(cv(s2), cv(s1)), w0)\n  adantl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s2, wceq(cv(s2), cv(s1)))), wb(wal(s0, wsb(s1, s2, w0)), wal(s2, wal(s0, wi(wceq(cv(s2), cv(s1)), w0)))))\n  syl6bb(wn(wal(s2, wceq(cv(s2), cv(s1)))), wal(s0, wsb(s1, s2, w0)), wal(s2, wal(s0, wi(wceq(cv(s2), cv(s1)), w0))), wal(s0, wal(s2, wi(wceq(cv(s2), cv(s1)), w0))))\n  albid(s0, wn(wal(s2, wceq(cv(s2), cv(s1)))), wsb(s1, s2, w0), wal(s2, wi(wceq(cv(s2), cv(s1)), w0)))\n  nfnae(s0, s2, s1)\n  sb4b(s2, s1, w0)\n  alcom(s0, s2, wi(wceq(cv(s2), cv(s1)), w0))\n  bitr3d(wal(s2, wceq(cv(s2), cv(s1))), wsb(s1, s2, wal(s0, w0)), wal(s0, wsb(s1, s2, w0)), wal(s0, w0))\n  sps(s2, wceq(cv(s2), cv(s1)), wb(wal(s0, w0), wsb(s1, s2, wal(s0, w0))))\n  sbequ12(s2, s1, wal(s0, w0))\n  dral2(s2, s1, s0, w0, wsb(s1, s2, w0))\n  sps(s2, wceq(cv(s2), cv(s1)), wb(w0, wsb(s1, s2, w0)))\n  sbequ12(s2, s1, w0)\n}","pretty":"thm sbal1(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s1 / s2]∀(s0, w0)↔ ∀(s0,[s1 / s2]w0)))\n  ⊣ d(s0, s2)\n} = {\n  pm2.61d2(¬ ∀(s0, s0 = s1), ([s1 / s2]∀(s0, w0)↔ ∀(s0,[s1 / s2]w0)), ∀(s2, s2 = s1))\n  ex(¬ ∀(s0, s0 = s1), ¬ ∀(s2, s2 = s1), ([s1 / s2]∀(s0, w0)↔ ∀(s0,[s1 / s2]w0)))\n  bitr4d((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s2, s2 = s1)), [s1 / s2]∀(s0, w0), ∀(s0,[s1 / s2]w0), ∀(s2, ∀(s0,(s2 = s1 → w0))))\n  sylan9bbr(¬ ∀(s0, s0 = s1), ¬ ∀(s2, s2 = s1), [s1 / s2]∀(s0, w0), ∀(s2, ∀(s0,(s2 = s1 → w0))), ∀(s2,(s2 = s1 → ∀(s0, w0))))\n  sb4b(s2, s1, ∀(s0, w0))\n  albid(s2, ¬ ∀(s0, s0 = s1), (s2 = s1 → ∀(s0, w0)), ∀(s0,(s2 = s1 → w0)))\n  nfnae(s2, s0, s1)\n  syl(¬ ∀(s0, s0 = s1), ((s2 = s1 → ∀(s0, w0))↔ ∀(s0,(s2 = s1 → w0))), F/(s0, s2 = s1))\n  nfeqf2(s0, s1, s2)\n  bicomd(F/(s0, s2 = s1), (s2 = s1 → ∀(s0, w0)), ∀(s0,(s2 = s1 → w0)))\n  19.21t(s0, s2 = s1, w0)\n  adantl(¬ ∀(s0, s0 = s1), ¬ ∀(s2, s2 = s1), (∀(s0,[s1 / s2]w0)↔ ∀(s2, ∀(s0,(s2 = s1 → w0)))))\n  syl6bb(¬ ∀(s2, s2 = s1), ∀(s0,[s1 / s2]w0), ∀(s2, ∀(s0,(s2 = s1 → w0))), ∀(s0, ∀(s2,(s2 = s1 → w0))))\n  albid(s0, ¬ ∀(s2, s2 = s1), [s1 / s2]w0, ∀(s2,(s2 = s1 → w0)))\n  nfnae(s0, s2, s1)\n  sb4b(s2, s1, w0)\n  alcom(s0, s2, (s2 = s1 → w0))\n  bitr3d(∀(s2, s2 = s1), [s1 / s2]∀(s0, w0), ∀(s0,[s1 / s2]w0), ∀(s0, w0))\n  sps(s2, s2 = s1, (∀(s0, w0)↔[s1 / s2]∀(s0, w0)))\n  sbequ12(s2, s1, ∀(s0, w0))\n  dral2(s2, s1, s0, w0, [s1 / s2]w0)\n  sps(s2, s2 = s1, (w0 ↔[s1 / s2]w0))\n  sbequ12(s2, s1, w0)\n}","parent":["pm2.61d2","ex","bitr4d","sylan9bbr","sb4b","albid","nfnae","syl","nfeqf2","bicomd","19.21t","adantl","syl6bb","alcom","bitr3d","sps","sbequ12","dral2"],"children":["sbal"]},{"name":"sbal2","content":"Move quantifier in and out of substitution. (Contributed by NM, 2-Jan-2002.) Remove a distinct variable constraint. (Revised by Wolf Lammen, 24-Dec-2022.)","origin":"thm sbal2(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0))))\n  -| diffss(s0, s2)\n} = {\n  pm2.61dan(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0))), wal(s1, wceq(cv(s1), cv(s2))))\n  adantl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wal(s1, wceq(cv(s1), cv(s2))), wb(wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0))))\n  bitr3d(wal(s1, wceq(cv(s1), cv(s2))), wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0)), wal(s0, w0))\n  syl5bbr(wal(s1, wceq(cv(s1), cv(s2))), wal(s0, w0), wsb(s2, s1, wal(s0, w0)), wsb(s1, s1, wal(s0, w0)))\n  sbid(s1, wal(s0, w0))\n  drsb2(s1, s2, s1, wal(s0, w0))\n  dral2(s1, s2, s0, w0, wsb(s2, s1, w0))\n  syl5bbr(wal(s1, wceq(cv(s1), cv(s2))), w0, wsb(s2, s1, w0), wsb(s1, s1, w0))\n  sbid(s1, w0)\n  drsb2(s1, s2, s1, w0)\n  bitr4d(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2))))), wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0)), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0))))\n  adantl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0)))))\n  sb4b(s1, s2, wal(s0, w0))\n  sylan9bbr(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2)))), wal(s0, wsb(s2, s1, w0)), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0))), wal(s1, wal(s0, wi(wceq(cv(s1), cv(s2)), w0))))\n  syl6bb(wn(wal(s1, wceq(cv(s1), cv(s2)))), wal(s0, wsb(s2, s1, w0)), wal(s1, wal(s0, wi(wceq(cv(s1), cv(s2)), w0))), wal(s0, wal(s1, wi(wceq(cv(s1), cv(s2)), w0))))\n  albid(s0, wn(wal(s1, wceq(cv(s1), cv(s2)))), wsb(s2, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s2)), w0)))\n  nfnae(s0, s1, s2)\n  sb4b(s1, s2, w0)\n  alcom(s0, s1, wi(wceq(cv(s1), cv(s2)), w0))\n  albid(s1, wn(wal(s0, wceq(cv(s0), cv(s1)))), wal(s0, wi(wceq(cv(s1), cv(s2)), w0)), wi(wceq(cv(s1), cv(s2)), wal(s0, w0)))\n  nfnae(s1, s0, s1)\n  syl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wal(s0, wi(wceq(cv(s1), cv(s2)), w0)), wi(wceq(cv(s1), cv(s2)), wal(s0, w0))), wnf(s0, wceq(cv(s1), cv(s2))))\n  nfeqf1(s0, s1, s2)\n  19.21t(s0, wceq(cv(s1), cv(s2)), w0)\n}","pretty":"thm sbal2(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s2 / s1]∀(s0, w0)↔ ∀(s0,[s2 / s1]w0)))\n  ⊣ d(s0, s2)\n} = {\n  pm2.61dan(¬ ∀(s0, s0 = s1), ([s2 / s1]∀(s0, w0)↔ ∀(s0,[s2 / s1]w0)), ∀(s1, s1 = s2))\n  adantl(¬ ∀(s0, s0 = s1), ∀(s1, s1 = s2), ([s2 / s1]∀(s0, w0)↔ ∀(s0,[s2 / s1]w0)))\n  bitr3d(∀(s1, s1 = s2), [s2 / s1]∀(s0, w0), ∀(s0,[s2 / s1]w0), ∀(s0, w0))\n  syl5bbr(∀(s1, s1 = s2), ∀(s0, w0), [s2 / s1]∀(s0, w0), [s1 / s1]∀(s0, w0))\n  sbid(s1, ∀(s0, w0))\n  drsb2(s1, s2, s1, ∀(s0, w0))\n  dral2(s1, s2, s0, w0, [s2 / s1]w0)\n  syl5bbr(∀(s1, s1 = s2), w0, [s2 / s1]w0, [s1 / s1]w0)\n  sbid(s1, w0)\n  drsb2(s1, s2, s1, w0)\n  bitr4d((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s1, s1 = s2)), [s2 / s1]∀(s0, w0), ∀(s0,[s2 / s1]w0), ∀(s1,(s1 = s2 → ∀(s0, w0))))\n  adantl(¬ ∀(s0, s0 = s1), ¬ ∀(s1, s1 = s2), ([s2 / s1]∀(s0, w0)↔ ∀(s1,(s1 = s2 → ∀(s0, w0)))))\n  sb4b(s1, s2, ∀(s0, w0))\n  sylan9bbr(¬ ∀(s0, s0 = s1), ¬ ∀(s1, s1 = s2), ∀(s0,[s2 / s1]w0), ∀(s1,(s1 = s2 → ∀(s0, w0))), ∀(s1, ∀(s0,(s1 = s2 → w0))))\n  syl6bb(¬ ∀(s1, s1 = s2), ∀(s0,[s2 / s1]w0), ∀(s1, ∀(s0,(s1 = s2 → w0))), ∀(s0, ∀(s1,(s1 = s2 → w0))))\n  albid(s0, ¬ ∀(s1, s1 = s2), [s2 / s1]w0, ∀(s1,(s1 = s2 → w0)))\n  nfnae(s0, s1, s2)\n  sb4b(s1, s2, w0)\n  alcom(s0, s1, (s1 = s2 → w0))\n  albid(s1, ¬ ∀(s0, s0 = s1), ∀(s0,(s1 = s2 → w0)), (s1 = s2 → ∀(s0, w0)))\n  nfnae(s1, s0, s1)\n  syl(¬ ∀(s0, s0 = s1), (∀(s0,(s1 = s2 → w0))↔(s1 = s2 → ∀(s0, w0))), F/(s0, s1 = s2))\n  nfeqf1(s0, s1, s2)\n  19.21t(s0, s1 = s2, w0)\n}","parent":["pm2.61dan","adantl","bitr3d","syl5bbr","sbid","drsb2","dral2","bitr4d","sb4b","sylan9bbr","syl6bb","albid","nfnae","alcom","syl","nfeqf1","19.21t"],"children":["2sb5ndVD","2sb5ndALT"]},{"name":"sbal2OLD","content":"Obsolete version of ~ sbal2 as of 24-Dec-2022. (Contributed by NM, 2-Jan-2002.) Remove a distinct variable constraint. (Revised by Wolf Lammen, 3-Oct-2018.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sbal2OLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wi(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0))))\n  -| diffss(s0, s2)\n} = {\n  pm2.61d2(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0))), wal(s1, wceq(cv(s1), cv(s2))))\n  ex(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0))))\n  bitr4d(wa(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2))))), wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0)), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0))))\n  adantl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2)))), wb(wsb(s2, s1, wal(s0, w0)), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0)))))\n  sb4b(s1, s2, wal(s0, w0))\n  sylan9bbr(wn(wal(s0, wceq(cv(s0), cv(s1)))), wn(wal(s1, wceq(cv(s1), cv(s2)))), wal(s0, wsb(s2, s1, w0)), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0))), wal(s0, wal(s1, wi(wceq(cv(s1), cv(s2)), w0))))\n  albid(s0, wn(wal(s1, wceq(cv(s1), cv(s2)))), wsb(s2, s1, w0), wal(s1, wi(wceq(cv(s1), cv(s2)), w0)))\n  nfnae(s0, s1, s2)\n  sb4b(s1, s2, w0)\n  syl5bb(wn(wal(s0, wceq(cv(s0), cv(s1)))), wal(s0, wal(s1, wi(wceq(cv(s1), cv(s2)), w0))), wal(s1, wi(wceq(cv(s1), cv(s2)), wal(s0, w0))), wal(s1, wal(s0, wi(wceq(cv(s1), cv(s2)), w0))))\n  alcom(s0, s1, wi(wceq(cv(s1), cv(s2)), w0))\n  albid(s1, wn(wal(s0, wceq(cv(s0), cv(s1)))), wal(s0, wi(wceq(cv(s1), cv(s2)), w0)), wi(wceq(cv(s1), cv(s2)), wal(s0, w0)))\n  nfnae(s1, s0, s1)\n  syl(wn(wal(s0, wceq(cv(s0), cv(s1)))), wb(wal(s0, wi(wceq(cv(s1), cv(s2)), w0)), wi(wceq(cv(s1), cv(s2)), wal(s0, w0))), wnf(s0, wceq(cv(s1), cv(s2))))\n  nfeqf1(s0, s1, s2)\n  19.21t(s0, wceq(cv(s1), cv(s2)), w0)\n  bitr3d(wal(s1, wceq(cv(s1), cv(s2))), wsb(s2, s1, wal(s0, w0)), wal(s0, wsb(s2, s1, w0)), wal(s0, w0))\n  syl5bbr(wal(s1, wceq(cv(s1), cv(s2))), wal(s0, w0), wsb(s2, s1, wal(s0, w0)), wsb(s1, s1, wal(s0, w0)))\n  sbid(s1, wal(s0, w0))\n  drsb2(s1, s2, s1, wal(s0, w0))\n  dral2(s1, s2, s0, w0, wsb(s2, s1, w0))\n  syl5bbr(wal(s1, wceq(cv(s1), cv(s2))), w0, wsb(s2, s1, w0), wsb(s1, s1, w0))\n  sbid(s1, w0)\n  drsb2(s1, s2, s1, w0)\n}","pretty":"thm sbal2OLD(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (¬ ∀(s0, s0 = s1)→([s2 / s1]∀(s0, w0)↔ ∀(s0,[s2 / s1]w0)))\n  ⊣ d(s0, s2)\n} = {\n  pm2.61d2(¬ ∀(s0, s0 = s1), ([s2 / s1]∀(s0, w0)↔ ∀(s0,[s2 / s1]w0)), ∀(s1, s1 = s2))\n  ex(¬ ∀(s0, s0 = s1), ¬ ∀(s1, s1 = s2), ([s2 / s1]∀(s0, w0)↔ ∀(s0,[s2 / s1]w0)))\n  bitr4d((¬ ∀(s0, s0 = s1)∧ ¬ ∀(s1, s1 = s2)), [s2 / s1]∀(s0, w0), ∀(s0,[s2 / s1]w0), ∀(s1,(s1 = s2 → ∀(s0, w0))))\n  adantl(¬ ∀(s0, s0 = s1), ¬ ∀(s1, s1 = s2), ([s2 / s1]∀(s0, w0)↔ ∀(s1,(s1 = s2 → ∀(s0, w0)))))\n  sb4b(s1, s2, ∀(s0, w0))\n  sylan9bbr(¬ ∀(s0, s0 = s1), ¬ ∀(s1, s1 = s2), ∀(s0,[s2 / s1]w0), ∀(s1,(s1 = s2 → ∀(s0, w0))), ∀(s0, ∀(s1,(s1 = s2 → w0))))\n  albid(s0, ¬ ∀(s1, s1 = s2), [s2 / s1]w0, ∀(s1,(s1 = s2 → w0)))\n  nfnae(s0, s1, s2)\n  sb4b(s1, s2, w0)\n  syl5bb(¬ ∀(s0, s0 = s1), ∀(s0, ∀(s1,(s1 = s2 → w0))), ∀(s1,(s1 = s2 → ∀(s0, w0))), ∀(s1, ∀(s0,(s1 = s2 → w0))))\n  alcom(s0, s1, (s1 = s2 → w0))\n  albid(s1, ¬ ∀(s0, s0 = s1), ∀(s0,(s1 = s2 → w0)), (s1 = s2 → ∀(s0, w0)))\n  nfnae(s1, s0, s1)\n  syl(¬ ∀(s0, s0 = s1), (∀(s0,(s1 = s2 → w0))↔(s1 = s2 → ∀(s0, w0))), F/(s0, s1 = s2))\n  nfeqf1(s0, s1, s2)\n  19.21t(s0, s1 = s2, w0)\n  bitr3d(∀(s1, s1 = s2), [s2 / s1]∀(s0, w0), ∀(s0,[s2 / s1]w0), ∀(s0, w0))\n  syl5bbr(∀(s1, s1 = s2), ∀(s0, w0), [s2 / s1]∀(s0, w0), [s1 / s1]∀(s0, w0))\n  sbid(s1, ∀(s0, w0))\n  drsb2(s1, s2, s1, ∀(s0, w0))\n  dral2(s1, s2, s0, w0, [s2 / s1]w0)\n  syl5bbr(∀(s1, s1 = s2), w0, [s2 / s1]w0, [s1 / s1]w0)\n  sbid(s1, w0)\n  drsb2(s1, s2, s1, w0)\n}","parent":["pm2.61d2","ex","bitr4d","adantl","sb4b","sylan9bbr","albid","nfnae","syl5bb","alcom","syl","nfeqf1","19.21t","bitr3d","syl5bbr","sbid","drsb2","dral2"],"children":[]},{"name":"sbal","content":"Move universal quantifier in and out of substitution. (Contributed by NM, 16-May-1993.) (Proof shortened by Wolf Lammen, 29-Sep-2018.)","origin":"thm sbal(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, wal(s2, w0)), wal(s2, wsb(s0, s1, w0)))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  pm2.61i(wb(wsb(s0, s1, wal(s2, w0)), wal(s2, wsb(s0, s1, w0))), wal(s2, wceq(cv(s2), cv(s0))))\n  bitr3d(wal(s2, wceq(cv(s2), cv(s0))), wsb(s0, s1, wal(s2, w0)), wal(s2, wsb(s0, s1, w0)), wsb(s0, s1, w0))\n  sbbid(s0, s1, wal(s2, wceq(cv(s2), cv(s0))), w0, wal(s2, w0))\n  nfae(s1, s2, s0)\n  axc16gb(s2, s0, s2, w0)\n  axc16gb(s2, s0, s2, wsb(s0, s1, w0))\n  sbal1(s2, s0, s1, w0)\n  diffss.ex(s2, s0)\n  diffss.ex(s2, s1)\n}","pretty":"thm sbal(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]∀(s2, w0)↔ ∀(s2,[s0 / s1]w0))\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  pm2.61i(([s0 / s1]∀(s2, w0)↔ ∀(s2,[s0 / s1]w0)), ∀(s2, s2 = s0))\n  bitr3d(∀(s2, s2 = s0), [s0 / s1]∀(s2, w0), ∀(s2,[s0 / s1]w0), [s0 / s1]w0)\n  sbbid(s0, s1, ∀(s2, s2 = s0), w0, ∀(s2, w0))\n  nfae(s1, s2, s0)\n  axc16gb(s2, s0, s2, w0)\n  axc16gb(s2, s0, s2, [s0 / s1]w0)\n  sbal1(s2, s0, s1, w0)\n  diffss.ex(s2, s0)\n  diffss.ex(s2, s1)\n}","parent":["pm2.61i","bitr3d","sbbid","nfae","axc16gb","sbal1","diffss.ex"],"children":["sbex","sbalv","sbcal","ax11-pm2","bj-sbnf"]},{"name":"sbex","content":"Move existential quantifier in and out of substitution. (Contributed by NM, 27-Sep-2003.)","origin":"thm sbex(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wsb(s0, s1, wex(s2, w0)), wex(s2, wsb(s0, s1, w0)))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  3bitr4i(wsb(s0, s1, wex(s2, w0)), wex(s2, wsb(s0, s1, w0)), wsb(s0, s1, wn(wal(s2, wn(w0)))), wn(wal(s2, wn(wsb(s0, s1, w0)))))\n  xchbinx(wsb(s0, s1, wn(wal(s2, wn(w0)))), wal(s2, wn(wsb(s0, s1, w0))), wsb(s0, s1, wal(s2, wn(w0))))\n  sbn(s0, s1, wal(s2, wn(w0)))\n  bitri(wsb(s0, s1, wal(s2, wn(w0))), wal(s2, wn(wsb(s0, s1, w0))), wal(s2, wsb(s0, s1, wn(w0))))\n  sbal(s0, s1, s2, wn(w0))\n  albii(s2, wsb(s0, s1, wn(w0)), wn(wsb(s0, s1, w0)))\n  sbn(s0, s1, w0)\n  sbbii(s0, s1, wex(s2, w0), wn(wal(s2, wn(w0))))\n  df-ex(s2, w0)\n  df-ex(s2, wsb(s0, s1, w0))\n}","pretty":"thm sbex(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ([s0 / s1]∃(s2, w0)↔ ∃(s2,[s0 / s1]w0))\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  3bitr4i([s0 / s1]∃(s2, w0), ∃(s2,[s0 / s1]w0), [s0 / s1]¬ ∀(s2, ¬ w0), ¬ ∀(s2, ¬[s0 / s1]w0))\n  xchbinx([s0 / s1]¬ ∀(s2, ¬ w0), ∀(s2, ¬[s0 / s1]w0), [s0 / s1]∀(s2, ¬ w0))\n  sbn(s0, s1, ∀(s2, ¬ w0))\n  bitri([s0 / s1]∀(s2, ¬ w0), ∀(s2, ¬[s0 / s1]w0), ∀(s2,[s0 / s1]¬ w0))\n  sbal(s0, s1, s2, ¬ w0)\n  albii(s2, [s0 / s1]¬ w0, ¬[s0 / s1]w0)\n  sbn(s0, s1, w0)\n  sbbii(s0, s1, ∃(s2, w0), ¬ ∀(s2, ¬ w0))\n  df-ex(s2, w0)\n  df-ex(s2, [s0 / s1]w0)\n}","parent":["3bitr4i","xchbinx","sbn","bitri","sbal","albii","sbbii","df-ex"],"children":["sbmo","sbabel","sbcex2"]},{"name":"sbalv","content":"Quantify with new variable inside substitution. (Contributed by NM, 18-Aug-1993.)","origin":"thm sbalv(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  |- wb(wsb(s0, s1, wal(s2, w0)), wal(s2, w1))\n  -| wb(wsb(s0, s1, w0), w1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  bitri(wsb(s0, s1, wal(s2, w0)), wal(s2, w1), wal(s2, wsb(s0, s1, w0)))\n  sbal(s0, s1, s2, w0)\n  albii(s2, wsb(s0, s1, w0), w1)\n}","pretty":"thm sbalv(setvar s0, setvar s1, setvar s2, wff w0, wff w1) {\n  ⊢ ([s0 / s1]∀(s2, w0)↔ ∀(s2, w1))\n  ⊣ ([s0 / s1]w0 ↔ w1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  bitri([s0 / s1]∀(s2, w0), ∀(s2, w1), ∀(s2,[s0 / s1]w0))\n  sbal(s0, s1, s2, w0)\n  albii(s2, [s0 / s1]w0, w1)\n}","parent":["bitri","sbal","albii"],"children":["sbmo","sbabel","mo5f"]},{"name":"sbco4lem","content":"Lemma for ~ sbco4 . It replaces the temporary variable ` v ` with another temporary variable ` w ` . (Contributed by Jim Kingdon, 26-Sep-2018.)","origin":"thm sbco4lem(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s2, s0, wsb(s1, s2, w0))), wsb(s0, s3, wsb(s2, s0, wsb(s3, s2, w0))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n  -| diffsw(s1, w0)\n  -| diffsw(s3, w0)\n} = {\n  3bitr3i(wsb(s0, s1, wsb(s2, s0, wsb(s1, s2, w0))), wsb(s0, s3, wsb(s2, s0, wsb(s3, s2, w0))), wsb(s0, s3, wsb(s3, s1, wsb(s2, s0, wsb(s1, s3, wsb(s3, s2, w0))))), wsb(s0, s3, wsb(s2, s0, wsb(s3, s1, wsb(s1, s3, wsb(s3, s2, w0))))))\n  sbbii(s0, s3, wsb(s3, s1, wsb(s2, s0, wsb(s1, s3, wsb(s3, s2, w0)))), wsb(s2, s0, wsb(s3, s1, wsb(s1, s3, wsb(s3, s2, w0)))))\n  sbcom2(s3, s1, s2, s0, wsb(s1, s3, wsb(s3, s2, w0)))\n  bitri(wsb(s0, s3, wsb(s3, s1, wsb(s2, s0, wsb(s1, s3, wsb(s3, s2, w0))))), wsb(s0, s1, wsb(s2, s0, wsb(s1, s2, w0))), wsb(s0, s3, wsb(s3, s1, wsb(s2, s0, wsb(s1, s2, w0)))))\n  sbbii(s0, s3, wsb(s3, s1, wsb(s2, s0, wsb(s1, s3, wsb(s3, s2, w0)))), wsb(s3, s1, wsb(s2, s0, wsb(s1, s2, w0))))\n  sbbii(s3, s1, wsb(s2, s0, wsb(s1, s3, wsb(s3, s2, w0))), wsb(s2, s0, wsb(s1, s2, w0)))\n  sbbii(s2, s0, wsb(s1, s3, wsb(s3, s2, w0)), wsb(s1, s2, w0))\n  sbco2(s1, s3, s2, w0)\n  nfv(s3, w0)\n  sbco2(s0, s3, s1, wsb(s2, s0, wsb(s1, s2, w0)))\n  nfv(s3, wsb(s2, s0, wsb(s1, s2, w0)))\n  sbbii(s0, s3, wsb(s2, s0, wsb(s3, s1, wsb(s1, s3, wsb(s3, s2, w0)))), wsb(s2, s0, wsb(s3, s2, w0)))\n  sbbii(s2, s0, wsb(s3, s1, wsb(s1, s3, wsb(s3, s2, w0))), wsb(s3, s2, w0))\n  sbid2v(s3, s1, wsb(s3, s2, w0))\n  diffss.ex(s1, s0)\n  diff.wsb.s(s3, s2, s0, wsb(s1, s2, w0))\n  diffss.ex(s3, s0)\n  diff.wsb.s(s3, s1, s2, w0)\n  diffss.ex(s3, s1)\n  diffss.ex(s3, s2)\n  diff.wsb.s(s1, s3, s2, w0)\n}","pretty":"thm sbco4lem(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ ([s0 / s1][s2 / s0][s1 / s2]w0 ↔[s0 / s3][s2 / s0][s3 / s2]w0)\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s2, s3)\n  ⊣ d(s1, w0)\n  ⊣ d(s3, w0)\n} = {\n  3bitr3i([s0 / s1][s2 / s0][s1 / s2]w0, [s0 / s3][s2 / s0][s3 / s2]w0, [s0 / s3][s3 / s1][s2 / s0][s1 / s3][s3 / s2]w0, [s0 / s3][s2 / s0][s3 / s1][s1 / s3][s3 / s2]w0)\n  sbbii(s0, s3, [s3 / s1][s2 / s0][s1 / s3][s3 / s2]w0, [s2 / s0][s3 / s1][s1 / s3][s3 / s2]w0)\n  sbcom2(s3, s1, s2, s0, [s1 / s3][s3 / s2]w0)\n  bitri([s0 / s3][s3 / s1][s2 / s0][s1 / s3][s3 / s2]w0, [s0 / s1][s2 / s0][s1 / s2]w0, [s0 / s3][s3 / s1][s2 / s0][s1 / s2]w0)\n  sbbii(s0, s3, [s3 / s1][s2 / s0][s1 / s3][s3 / s2]w0, [s3 / s1][s2 / s0][s1 / s2]w0)\n  sbbii(s3, s1, [s2 / s0][s1 / s3][s3 / s2]w0, [s2 / s0][s1 / s2]w0)\n  sbbii(s2, s0, [s1 / s3][s3 / s2]w0, [s1 / s2]w0)\n  sbco2(s1, s3, s2, w0)\n  nfv(s3, w0)\n  sbco2(s0, s3, s1, [s2 / s0][s1 / s2]w0)\n  nfv(s3, [s2 / s0][s1 / s2]w0)\n  sbbii(s0, s3, [s2 / s0][s3 / s1][s1 / s3][s3 / s2]w0, [s2 / s0][s3 / s2]w0)\n  sbbii(s2, s0, [s3 / s1][s1 / s3][s3 / s2]w0, [s3 / s2]w0)\n  sbid2v(s3, s1, [s3 / s2]w0)\n  diffss.ex(s1, s0)\n  diff.wsb.s(s3, s2, s0, [s1 / s2]w0)\n  diffss.ex(s3, s0)\n  diff.wsb.s(s3, s1, s2, w0)\n  diffss.ex(s3, s1)\n  diffss.ex(s3, s2)\n  diff.wsb.s(s1, s3, s2, w0)\n}","parent":["3bitr3i","sbbii","sbcom2","bitri","sbco2","nfv","sbid2v","diffss.ex","diff.wsb.s"],"children":["sbco4"]},{"name":"sbco4","content":"Two ways of exchanging two variables. Both sides of the biconditional exchange ` x ` and ` y ` , either via two temporary variables ` u ` and ` v ` , or a single temporary ` w ` . (Contributed by Jim Kingdon, 25-Sep-2018.)","origin":"thm sbco4(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, wff w0) {\n  |- wb(wsb(s0, s1, wsb(s2, s3, wsb(s1, s2, wsb(s3, s0, w0)))), wsb(s2, s4, wsb(s0, s2, wsb(s4, s0, w0))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s3)\n  -| diffss(s0, s4)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n  -| diffss(s2, s4)\n  -| diffsw(s1, w0)\n  -| diffsw(s3, w0)\n  -| diffsw(s4, w0)\n} = {\n  3bitri(wsb(s0, s1, wsb(s2, s3, wsb(s1, s2, wsb(s3, s0, w0)))), wsb(s2, s4, wsb(s0, s2, wsb(s4, s0, w0))), wsb(s2, s3, wsb(s0, s2, wsb(s3, s0, w0))), wsb(s2, hs0, wsb(s0, s2, wsb(hs0, s0, w0))))\n  bitr3i(wsb(s0, s1, wsb(s2, s3, wsb(s1, s2, wsb(s3, s0, w0)))), wsb(s2, s3, wsb(s0, s2, wsb(s3, s0, w0))), wsb(s2, s3, wsb(s0, s1, wsb(s1, s2, wsb(s3, s0, w0)))))\n  sbcom2(s2, s3, s0, s1, wsb(s1, s2, wsb(s3, s0, w0)))\n  sbbii(s2, s3, wsb(s0, s1, wsb(s1, s2, wsb(s3, s0, w0))), wsb(s0, s2, wsb(s3, s0, w0)))\n  sbco2(s0, s1, s2, wsb(s3, s0, w0))\n  nfv(s1, wsb(s3, s0, w0))\n  sbco4lem(s2, s3, s0, hs0, w0)\n  sbco4lem(s2, hs0, s0, s4, w0)\n  diffss.ex(s2, s1)\n  diffss.ex(s3, s0)\n  diffss.ex(s3, s1)\n  diff.wsb.s(s1, s3, s0, w0)\n  diffss.ex(s1, s0)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diffss.ex(s3, hs0)\n  diff.hs0.s(s3)\n  diffss.ex(s0, hs0)\n  diff.hs0.w(w0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s4)\n}","pretty":"thm sbco4(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, wff w0) {\n  ⊢ ([s0 / s1][s2 / s3][s1 / s2][s3 / s0]w0 ↔[s2 / s4][s0 / s2][s4 / s0]w0)\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s3)\n  ⊣ d(s0, s4)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s2, s3)\n  ⊣ d(s2, s4)\n  ⊣ d(s1, w0)\n  ⊣ d(s3, w0)\n  ⊣ d(s4, w0)\n} = {\n  3bitri([s0 / s1][s2 / s3][s1 / s2][s3 / s0]w0, [s2 / s4][s0 / s2][s4 / s0]w0, [s2 / s3][s0 / s2][s3 / s0]w0, [s2 / hs0][s0 / s2][hs0 / s0]w0)\n  bitr3i([s0 / s1][s2 / s3][s1 / s2][s3 / s0]w0, [s2 / s3][s0 / s2][s3 / s0]w0, [s2 / s3][s0 / s1][s1 / s2][s3 / s0]w0)\n  sbcom2(s2, s3, s0, s1, [s1 / s2][s3 / s0]w0)\n  sbbii(s2, s3, [s0 / s1][s1 / s2][s3 / s0]w0, [s0 / s2][s3 / s0]w0)\n  sbco2(s0, s1, s2, [s3 / s0]w0)\n  nfv(s1, [s3 / s0]w0)\n  sbco4lem(s2, s3, s0, hs0, w0)\n  sbco4lem(s2, hs0, s0, s4, w0)\n  diffss.ex(s2, s1)\n  diffss.ex(s3, s0)\n  diffss.ex(s3, s1)\n  diff.wsb.s(s1, s3, s0, w0)\n  diffss.ex(s1, s0)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diffss.ex(s3, hs0)\n  diff.hs0.s(s3)\n  diffss.ex(s0, hs0)\n  diff.hs0.w(w0)\n  diff.hs0.s(s0)\n  diff.hs0.s(s4)\n}","parent":["3bitri","bitr3i","sbcom2","sbbii","sbco2","nfv","sbco4lem","diffss.ex","diff.wsb.s","diff.hs0.s","diff.hs0.w"],"children":["wl-ich","dfich2ai","dfich2bi"]},{"name":"2sb8e","content":"An equivalent expression for double existence. For a version requiring more disjoint variables, but fewer axioms, see ~ 2sb8ev . (Contributed by Wolf Lammen, 2-Nov-2019.)","origin":"thm 2sb8e(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  |- wb(wex(s0, wex(s1, w0)), wex(s2, wex(s3, wsb(s2, s0, wsb(s3, s1, w0)))))\n  -| diffss(s2, s3)\n  -| diffsw(s2, w0)\n  -| diffsw(s3, w0)\n} = {\n  3bitri(wex(s0, wex(s1, w0)), wex(s2, wex(s3, wsb(s2, s0, wsb(s3, s1, w0)))), wex(s3, wex(s0, wsb(s3, s1, w0))), wex(s3, wex(s2, wsb(s2, s0, wsb(s3, s1, w0)))))\n  bitri(wex(s0, wex(s1, w0)), wex(s3, wex(s0, wsb(s3, s1, w0))), wex(s0, wex(s3, wsb(s3, s1, w0))))\n  exbii(s0, wex(s1, w0), wex(s3, wsb(s3, s1, w0)))\n  sb8e(s1, s3, w0)\n  nfv(s3, w0)\n  excom(s0, s3, wsb(s3, s1, w0))\n  exbii(s3, wex(s0, wsb(s3, s1, w0)), wex(s2, wsb(s2, s0, wsb(s3, s1, w0))))\n  sb8e(s0, s2, wsb(s3, s1, w0))\n  nfsb(s2, s3, s1, w0)\n  nfv(s2, w0)\n  excom(s3, s2, wsb(s2, s0, wsb(s3, s1, w0)))\n}","pretty":"thm 2sb8e(setvar s0, setvar s1, setvar s2, setvar s3, wff w0) {\n  ⊢ (∃(s0, ∃(s1, w0))↔ ∃(s2, ∃(s3,[s2 / s0][s3 / s1]w0)))\n  ⊣ d(s2, s3)\n  ⊣ d(s2, w0)\n  ⊣ d(s3, w0)\n} = {\n  3bitri(∃(s0, ∃(s1, w0)), ∃(s2, ∃(s3,[s2 / s0][s3 / s1]w0)), ∃(s3, ∃(s0,[s3 / s1]w0)), ∃(s3, ∃(s2,[s2 / s0][s3 / s1]w0)))\n  bitri(∃(s0, ∃(s1, w0)), ∃(s3, ∃(s0,[s3 / s1]w0)), ∃(s0, ∃(s3,[s3 / s1]w0)))\n  exbii(s0, ∃(s1, w0), ∃(s3,[s3 / s1]w0))\n  sb8e(s1, s3, w0)\n  nfv(s3, w0)\n  excom(s0, s3, [s3 / s1]w0)\n  exbii(s3, ∃(s0,[s3 / s1]w0), ∃(s2,[s2 / s0][s3 / s1]w0))\n  sb8e(s0, s2, [s3 / s1]w0)\n  nfsb(s2, s3, s1, w0)\n  nfv(s2, w0)\n  excom(s3, s2, [s2 / s0][s3 / s1]w0)\n}","parent":["3bitri","bitri","exbii","sb8e","nfv","excom","nfsb"],"children":[]},{"name":"sbbib","content":"Reversal of substitution. (Contributed by AV, 6-Aug-2023.)","origin":"thm sbbib(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, wb(wsb(s0, s1, w0), w1)), wal(s1, wb(w0, wsb(s1, s0, w1))))\n  -| wnf(s0, w0)\n  -| wnf(s1, w1)\n  -| diffss(s0, s1)\n} = {\n  impbii(wal(s0, wb(wsb(s0, s1, w0), w1)), wal(s1, wb(w0, wsb(s1, s0, w1))))\n  alrimi(s1, wal(s0, wb(wsb(s0, s1, w0), w1)), wb(w0, wsb(s1, s0, w1)))\n  nfal(s1, s0, wb(wsb(s0, s1, w0), w1))\n  nfbi(s1, wsb(s0, s1, w0), w1)\n  nfs1v(s1, s0, w0)\n  syl5bbr(wal(s0, wb(wsb(s0, s1, w0), w1)), w0, wsb(s1, s0, w1), wsb(s1, s0, wsb(s0, s1, w0)))\n  sbid2(s1, s0, w0)\n  spsbbi(s0, s1, wsb(s0, s1, w0), w1)\n  alrimi(s0, wal(s1, wb(w0, wsb(s1, s0, w1))), wb(wsb(s0, s1, w0), w1))\n  nfal(s0, s1, wb(w0, wsb(s1, s0, w1)))\n  nfbi(s0, w0, wsb(s1, s0, w1))\n  nfs1v(s0, s1, w1)\n  syl6bb(wal(s1, wb(w0, wsb(s1, s0, w1))), wsb(s0, s1, w0), w1, wsb(s0, s1, wsb(s1, s0, w1)))\n  spsbbi(s1, s0, w0, wsb(s1, s0, w1))\n  sbid2(s0, s1, w1)\n  diffss.ex(s1, s0)\n}","pretty":"thm sbbib(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0,([s0 / s1]w0 ↔ w1))↔ ∀(s1,(w0 ↔[s1 / s0]w1)))\n  ⊣ F/(s0, w0)\n  ⊣ F/(s1, w1)\n  ⊣ d(s0, s1)\n} = {\n  impbii(∀(s0,([s0 / s1]w0 ↔ w1)), ∀(s1,(w0 ↔[s1 / s0]w1)))\n  alrimi(s1, ∀(s0,([s0 / s1]w0 ↔ w1)), (w0 ↔[s1 / s0]w1))\n  nfal(s1, s0, ([s0 / s1]w0 ↔ w1))\n  nfbi(s1, [s0 / s1]w0, w1)\n  nfs1v(s1, s0, w0)\n  syl5bbr(∀(s0,([s0 / s1]w0 ↔ w1)), w0, [s1 / s0]w1, [s1 / s0][s0 / s1]w0)\n  sbid2(s1, s0, w0)\n  spsbbi(s0, s1, [s0 / s1]w0, w1)\n  alrimi(s0, ∀(s1,(w0 ↔[s1 / s0]w1)), ([s0 / s1]w0 ↔ w1))\n  nfal(s0, s1, (w0 ↔[s1 / s0]w1))\n  nfbi(s0, w0, [s1 / s0]w1)\n  nfs1v(s0, s1, w1)\n  syl6bb(∀(s1,(w0 ↔[s1 / s0]w1)), [s0 / s1]w0, w1, [s0 / s1][s1 / s0]w1)\n  spsbbi(s1, s0, w0, [s1 / s0]w1)\n  sbid2(s0, s1, w1)\n  diffss.ex(s1, s0)\n}","parent":["impbii","alrimi","nfal","nfbi","nfs1v","syl5bbr","sbid2","spsbbi","syl6bb","diffss.ex"],"children":["sbbibvv","dfich2ai"]},{"name":"sbbibvv","content":"Reversal of substitution. (Contributed by AV, 6-Aug-2023.)","origin":"thm sbbibvv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, wb(wsb(s0, s1, w0), w1)), wal(s1, wb(w0, wsb(s1, s0, w1))))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w0)\n  -| diffsw(s1, w1)\n} = {\n  sbbib(s0, s1, w0, w1)\n  nfv(s0, w0)\n  nfv(s1, w1)\n}","pretty":"thm sbbibvv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0,([s0 / s1]w0 ↔ w1))↔ ∀(s1,(w0 ↔[s1 / s0]w1)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w0)\n  ⊣ d(s1, w1)\n} = {\n  sbbib(s0, s1, w0, w1)\n  nfv(s0, w0)\n  nfv(s1, w1)\n}","parent":["sbbib","nfv"],"children":[]}]}