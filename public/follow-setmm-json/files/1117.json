{"index":1117,"title":"Adding ax-5","content":"","blocks":[{"name":"bj-ax12wlem","content":"A lemma used to prove a weak version of the axiom of substitution ~ ax-12 . (Temporary comment: The general statement that ~ ax12wlem proves.) (Contributed by BJ, 20-Mar-2020.)","origin":"thm bj-ax12wlem(setvar s0, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(w1, wal(s0, wi(w0, w1))))\n  -| wi(w0, wb(w1, w2))\n  -| diffsw(s0, w2)\n} = {\n  bj-ax12i(s0, w0, w1, w2)\n  ax-5(s0, w2)\n}","pretty":"thm bj-ax12wlem(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(w1 → ∀(s0,(w0 → w1))))\n  ⊣ (w0 →(w1 ↔ w2))\n  ⊣ d(s0, w2)\n} = {\n  bj-ax12i(s0, w0, w1, w2)\n  ax-5(s0, w2)\n}","parent":["bj-ax12i","ax-5"],"children":["bj-ax12w"]},{"name":"bj-cbvalim","content":"A lemma used to prove a justification of ~ df-bj-mo in a weak axiomatization. (Contributed by BJ, 12-Mar-2023.) (Proof modification is discouraged.)","origin":"thm bj-cbvalim(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(wal(s0, wex(s1, w0)), wi(wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wal(s1, w1), wal(s0, w2))))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w2)\n} = {\n  mp2(wi(wal(s0, wex(s1, w0)), wi(wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wal(s1, w1), wal(s0, w2)))), wal(s0, wi(wex(s1, w2), w2)), wi(wal(s1, w1), wal(s0, wal(s1, w1))))\n  ax-gen(s0, wi(wex(s1, w2), w2))\n  ax5e(s1, w2)\n  ax-5(s0, wal(s1, w1))\n  com14(wal(s0, wi(wex(s1, w2), w2)), wi(wal(s1, w1), wal(s0, wal(s1, w1))), wal(s0, wex(s1, w0)), wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wal(s1, w1), wal(s0, w2)))\n  com3l(wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wal(s1, w1), wal(s0, wal(s1, w1))), wal(s0, wex(s1, w0)), wi(wal(s0, wi(wex(s1, w2), w2)), wi(wal(s1, w1), wal(s0, w2))))\n  bj-cbvalimt(s0, s1, w0, w1, w2)\n  diff.wal.s(s0, s1, w1)\n}","pretty":"thm bj-cbvalim(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (∀(s0, ∃(s1, w0))→(∀(s0, ∀(s1,(w0 →(w1 → w2))))→(∀(s1, w1)→ ∀(s0, w2))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w2)\n} = {\n  mp2((∀(s0, ∃(s1, w0))→(∀(s0, ∀(s1,(w0 →(w1 → w2))))→(∀(s1, w1)→ ∀(s0, w2)))), ∀(s0,(∃(s1, w2)→ w2)), (∀(s1, w1)→ ∀(s0, ∀(s1, w1))))\n  ax-gen(s0, (∃(s1, w2)→ w2))\n  ax5e(s1, w2)\n  ax-5(s0, ∀(s1, w1))\n  com14(∀(s0,(∃(s1, w2)→ w2)), (∀(s1, w1)→ ∀(s0, ∀(s1, w1))), ∀(s0, ∃(s1, w0)), ∀(s0, ∀(s1,(w0 →(w1 → w2)))), (∀(s1, w1)→ ∀(s0, w2)))\n  com3l(∀(s0, ∀(s1,(w0 →(w1 → w2)))), (∀(s1, w1)→ ∀(s0, ∀(s1, w1))), ∀(s0, ∃(s1, w0)), (∀(s0,(∃(s1, w2)→ w2))→(∀(s1, w1)→ ∀(s0, w2))))\n  bj-cbvalimt(s0, s1, w0, w1, w2)\n  diff.wal.s(s0, s1, w1)\n}","parent":["mp2","ax-gen","ax5e","ax-5","com14","com3l","bj-cbvalimt","diff.wal.s"],"children":["bj-cbvalimi"]},{"name":"bj-cbvexim","content":"A lemma used to prove justification theorems in a weak axiomatization. (Contributed by BJ, 12-Mar-2023.) (Proof modification is discouraged.)","origin":"thm bj-cbvexim(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(wal(s0, wex(s1, w0)), wi(wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wex(s0, w1), wex(s1, w2))))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w2)\n  -| diffsw(s1, w1)\n} = {\n  mp2(wi(wal(s0, wex(s1, w0)), wi(wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wex(s0, w1), wex(s1, w2)))), wi(wex(s0, wex(s1, w2)), wex(s1, w2)), wal(s0, wi(w1, wal(s1, w1))))\n  ax5e(s0, wex(s1, w2))\n  ax-gen(s0, wi(w1, wal(s1, w1)))\n  ax-5(s1, w1)\n  com14(wi(wex(s0, wex(s1, w2)), wex(s1, w2)), wal(s0, wi(w1, wal(s1, w1))), wal(s0, wex(s1, w0)), wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wi(wex(s0, w1), wex(s1, w2)))\n  com3l(wal(s0, wal(s1, wi(w0, wi(w1, w2)))), wal(s0, wi(w1, wal(s1, w1))), wal(s0, wex(s1, w0)), wi(wi(wex(s0, wex(s1, w2)), wex(s1, w2)), wi(wex(s0, w1), wex(s1, w2))))\n  bj-cbveximt(s0, s1, w0, w1, w2)\n  diff.wex.s(s0, s1, w2)\n}","pretty":"thm bj-cbvexim(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (∀(s0, ∃(s1, w0))→(∀(s0, ∀(s1,(w0 →(w1 → w2))))→(∃(s0, w1)→ ∃(s1, w2))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w2)\n  ⊣ d(s1, w1)\n} = {\n  mp2((∀(s0, ∃(s1, w0))→(∀(s0, ∀(s1,(w0 →(w1 → w2))))→(∃(s0, w1)→ ∃(s1, w2)))), (∃(s0, ∃(s1, w2))→ ∃(s1, w2)), ∀(s0,(w1 → ∀(s1, w1))))\n  ax5e(s0, ∃(s1, w2))\n  ax-gen(s0, (w1 → ∀(s1, w1)))\n  ax-5(s1, w1)\n  com14((∃(s0, ∃(s1, w2))→ ∃(s1, w2)), ∀(s0,(w1 → ∀(s1, w1))), ∀(s0, ∃(s1, w0)), ∀(s0, ∀(s1,(w0 →(w1 → w2)))), (∃(s0, w1)→ ∃(s1, w2)))\n  com3l(∀(s0, ∀(s1,(w0 →(w1 → w2)))), ∀(s0,(w1 → ∀(s1, w1))), ∀(s0, ∃(s1, w0)), ((∃(s0, ∃(s1, w2))→ ∃(s1, w2))→(∃(s0, w1)→ ∃(s1, w2))))\n  bj-cbveximt(s0, s1, w0, w1, w2)\n  diff.wex.s(s0, s1, w2)\n}","parent":["mp2","ax5e","ax-gen","ax-5","com14","com3l","bj-cbveximt","diff.wex.s"],"children":["bj-cbveximi"]},{"name":"bj-cbvalimi","content":"An equality-free general instance of one half of a precise form of ~ bj-cbval . (Contributed by BJ, 12-Mar-2023.) (Proof modification is discouraged.)","origin":"thm bj-cbvalimi(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(wal(s0, w0), wal(s1, w1))\n  -| wi(w2, wi(w0, w1))\n  -| wal(s1, wex(s0, w2))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  mp2(wi(wal(s0, w0), wal(s1, w1)), wal(s1, wex(s0, w2)), wal(s1, wal(s0, wi(w2, wi(w0, w1)))))\n  gen2(s1, s0, wi(w2, wi(w0, w1)))\n  bj-cbvalim(s1, s0, w2, w0, w1)\n  diffss.ex(s1, s0)\n}","pretty":"thm bj-cbvalimi(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (∀(s0, w0)→ ∀(s1, w1))\n  ⊣ (w2 →(w0 → w1))\n  ⊣ ∀(s1, ∃(s0, w2))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  mp2((∀(s0, w0)→ ∀(s1, w1)), ∀(s1, ∃(s0, w2)), ∀(s1, ∀(s0,(w2 →(w0 → w1)))))\n  gen2(s1, s0, (w2 →(w0 → w1)))\n  bj-cbvalim(s1, s0, w2, w0, w1)\n  diffss.ex(s1, s0)\n}","parent":["mp2","gen2","bj-cbvalim","diffss.ex"],"children":["bj-cbval"]},{"name":"bj-cbveximi","content":"An equality-free general instance of one half of a precise form of ~ bj-cbvex . (Contributed by BJ, 12-Mar-2023.) (Proof modification is discouraged.)","origin":"thm bj-cbveximi(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  |- wi(wex(s0, w0), wex(s1, w1))\n  -| wi(w2, wi(w0, w1))\n  -| wal(s0, wex(s1, w2))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  mp2(wi(wex(s0, w0), wex(s1, w1)), wal(s0, wex(s1, w2)), wal(s0, wal(s1, wi(w2, wi(w0, w1)))))\n  gen2(s0, s1, wi(w2, wi(w0, w1)))\n  bj-cbvexim(s0, s1, w2, w0, w1)\n}","pretty":"thm bj-cbveximi(setvar s0, setvar s1, wff w0, wff w1, wff w2) {\n  ⊢ (∃(s0, w0)→ ∃(s1, w1))\n  ⊣ (w2 →(w0 → w1))\n  ⊣ ∀(s0, ∃(s1, w2))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  mp2((∃(s0, w0)→ ∃(s1, w1)), ∀(s0, ∃(s1, w2)), ∀(s0, ∀(s1,(w2 →(w0 → w1)))))\n  gen2(s0, s1, (w2 →(w0 → w1)))\n  bj-cbvexim(s0, s1, w2, w0, w1)\n}","parent":["mp2","gen2","bj-cbvexim"],"children":["bj-cbvex"]},{"name":"bj-cbval","content":"Changing a bound variable (universal quantification case) in a weak axiomatization, assuming that all variables denote (which is valid in inclusive free logic) and that equality is symmetric. (Contributed by BJ, 12-Mar-2023.) (Proof modification is discouraged.)","origin":"thm bj-cbval(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wal(s0, w0), wal(s1, w1))\n  -| wal(s1, wex(s0, wceq(cv(s0), cv(s1))))\n  -| wal(s0, wex(s1, wceq(cv(s1), cv(s0))))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| wi(wceq(cv(s1), cv(s0)), wceq(cv(s0), cv(s1)))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  impbii(wal(s0, w0), wal(s1, w1))\n  bj-cbvalimi(s0, s1, w0, w1, wceq(cv(s0), cv(s1)))\n  biimpd(wceq(cv(s0), cv(s1)), w0, w1)\n  bj-cbvalimi(s1, s0, w1, w0, wceq(cv(s1), cv(s0)))\n  syl(wceq(cv(s1), cv(s0)), wi(w1, w0), wceq(cv(s0), cv(s1)))\n  biimprd(wceq(cv(s0), cv(s1)), w1, w0)\n  diffss.ex(s1, s0)\n}","pretty":"thm bj-cbval(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∀(s0, w0)↔ ∀(s1, w1))\n  ⊣ ∀(s1, ∃(s0, s0 = s1))\n  ⊣ ∀(s0, ∃(s1, s1 = s0))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ (s1 = s0 → s0 = s1)\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  impbii(∀(s0, w0), ∀(s1, w1))\n  bj-cbvalimi(s0, s1, w0, w1, s0 = s1)\n  biimpd(s0 = s1, w0, w1)\n  bj-cbvalimi(s1, s0, w1, w0, s1 = s0)\n  syl(s1 = s0, (w1 → w0), s0 = s1)\n  biimprd(s0 = s1, w1, w0)\n  diffss.ex(s1, s0)\n}","parent":["impbii","bj-cbvalimi","biimpd","syl","biimprd","diffss.ex"],"children":[]},{"name":"bj-cbvex","content":"Changing a bound variable (existential quantification case) in a weak axiomatization, assuming that all variables denote (which is valid in inclusive free logic) and that equality is symmetric. (Contributed by BJ, 12-Mar-2023.) (Proof modification is discouraged.)","origin":"thm bj-cbvex(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wex(s0, w0), wex(s1, w1))\n  -| wal(s1, wex(s0, wceq(cv(s0), cv(s1))))\n  -| wal(s0, wex(s1, wceq(cv(s1), cv(s0))))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| wi(wceq(cv(s1), cv(s0)), wceq(cv(s0), cv(s1)))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  impbii(wex(s0, w0), wex(s1, w1))\n  bj-cbveximi(s0, s1, w0, w1, wceq(cv(s1), cv(s0)))\n  syl(wceq(cv(s1), cv(s0)), wi(w0, w1), wceq(cv(s0), cv(s1)))\n  biimpd(wceq(cv(s0), cv(s1)), w0, w1)\n  bj-cbveximi(s1, s0, w1, w0, wceq(cv(s0), cv(s1)))\n  biimprd(wceq(cv(s0), cv(s1)), w1, w0)\n  diffss.ex(s1, s0)\n}","pretty":"thm bj-cbvex(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃(s0, w0)↔ ∃(s1, w1))\n  ⊣ ∀(s1, ∃(s0, s0 = s1))\n  ⊣ ∀(s0, ∃(s1, s1 = s0))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ (s1 = s0 → s0 = s1)\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  impbii(∃(s0, w0), ∃(s1, w1))\n  bj-cbveximi(s0, s1, w0, w1, s1 = s0)\n  syl(s1 = s0, (w0 → w1), s0 = s1)\n  biimpd(s0 = s1, w0, w1)\n  bj-cbveximi(s1, s0, w1, w0, s0 = s1)\n  biimprd(s0 = s1, w1, w0)\n  diffss.ex(s1, s0)\n}","parent":["impbii","bj-cbveximi","syl","biimpd","biimprd","diffss.ex"],"children":[]},{"name":"wmoo","content":"Syntax for BJ's version of the uniqueness quantifier.","origin":"prop wff wmoo(setvar s0, wff w0) { ∃**(s0, w0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wmoo.s","content":"","origin":"axiom diff.wmoo.s(setvar sBase, setvar s0, wff w0) {\n  |- diffsw(sBase, wmoo(s0, w0))\n  -| diffss(sBase, s0)\n  -| diffsw(sBase, w0)\n}","pretty":"axiom diff.wmoo.s(setvar sBase, setvar s0, wff w0) {\n  ⊢ d(sBase, ∃**(s0, w0))\n  ⊣ d(sBase, s0)\n  ⊣ d(sBase, w0)\n}","parent":[],"children":[]},{"name":"diff.wmoo.c","content":"","origin":"axiom diff.wmoo.c(class cBase, setvar s0, wff w0) {\n  |- diffcw(cBase, wmoo(s0, w0))\n  -| diffsc(s0, cBase)\n  -| diffcw(cBase, w0)\n}","pretty":"axiom diff.wmoo.c(class cBase, setvar s0, wff w0) {\n  ⊢ d(cBase, ∃**(s0, w0))\n  ⊣ d(s0, cBase)\n  ⊣ d(cBase, w0)\n}","parent":[],"children":[]},{"name":"diff.wmoo.w","content":"","origin":"axiom diff.wmoo.w(wff wBase, setvar s0, wff w0) {\n  |- diffww(wBase, wmoo(s0, w0))\n  -| diffsw(s0, wBase)\n  -| diffww(wBase, w0)\n}","pretty":"axiom diff.wmoo.w(wff wBase, setvar s0, wff w0) {\n  ⊢ d(wBase, ∃**(s0, w0))\n  ⊣ d(s0, wBase)\n  ⊣ d(wBase, w0)\n}","parent":[],"children":[]},{"name":"df-bj-mo","content":"Definition of the uniqueness quantifier which is correct on the empty domain. Instead of the fresh variable ` z ` , one could save a dummy variable by using ` x ` or ` y ` at the cost of having nested quantifiers on the same variable. (Contributed by BJ, 12-Mar-2023.)","origin":"axiom df-bj-mo(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wmoo(s0, w0), wal(s1, wex(s2, wal(s0, wi(w0, wceq(cv(s0), cv(s2)))))))\n  -| diffss(s0, s2)\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffsw(s2, w0)\n  -| diffsw(s1, w0)\n}","pretty":"axiom df-bj-mo(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∃**(s0, w0)↔ ∀(s1, ∃(s2, ∀(s0,(w0 → s0 = s2)))))\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n  ⊣ d(s2, w0)\n  ⊣ d(s1, w0)\n}","parent":[],"children":[""]}]}