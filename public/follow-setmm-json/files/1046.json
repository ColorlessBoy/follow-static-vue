{"index":1046,"title":"Epsilon induction","content":"","blocks":[{"name":"setinds","content":"Principle of ` _E ` induction (set induction). If a property passes from all elements of ` x ` to ` x ` itself, then it holds for all ` x ` . (Contributed by Scott Fenton, 10-Mar-2011.)","origin":"thm setinds(setvar s0, setvar s1, wff w0) {\n  |- w0\n  -| wi(wral(s0, cv(s1), wsbc(s1, cv(s0), w0)), w0)\n  -| diffss(s0, s1)\n  -| diffsw(s0, w0)\n} = {\n  mpbi(w0, wcel(cv(s1), universe))\n  vex(s1)\n  abeq2i(s1, universe, w0)\n  eqcomi(universe, cab(s1, w0))\n  mpg(hs0, wceq(cab(s1, w0), universe), wi(wss(cv(hs0), cab(s1, w0)), wcel(cv(hs0), cab(s1, w0))))\n  setind(hs0, cab(s1, w0))\n  sylib(wss(cv(hs0), cab(s1, w0)), wcel(cv(hs0), cab(s1, w0)), wsbc(s1, cv(hs0), w0))\n  sylbi(wss(cv(hs0), cab(s1, w0)), wsbc(s1, cv(hs0), w0), wral(s0, cv(hs0), wcel(cv(s0), cab(s1, w0))))\n  dfss3(s0, cv(hs0), cab(s1, w0))\n  sylbir(wral(s0, cv(hs0), wcel(cv(s0), cab(s1, w0))), wsbc(s1, cv(hs0), w0), wral(s0, cv(hs0), wsbc(s1, cv(s0), w0)))\n  ralbii(s0, cv(hs0), wsbc(s1, cv(s0), w0), wcel(cv(s0), cab(s1, w0)))\n  df-sbc(s1, cv(s0), w0)\n  chvar(s1, hs0, wi(wral(s0, cv(hs0), wsbc(s1, cv(s0), w0)), wsbc(s1, cv(hs0), w0)), wi(wral(s0, cv(s1), wsbc(s1, cv(s0), w0)), w0))\n  nfim(s1, wral(s0, cv(hs0), wsbc(s1, cv(s0), w0)), wsbc(s1, cv(hs0), w0))\n  nfral(s1, s0, cv(hs0), wsbc(s1, cv(s0), w0))\n  nfcv(s1, cv(hs0))\n  nfsbc1v(s1, cv(s0), w0)\n  nfsbc1v(s1, cv(hs0), w0)\n  imbi12d(wceq(cv(s1), cv(hs0)), wral(s0, cv(s1), wsbc(s1, cv(s0), w0)), w0, wral(s0, cv(hs0), wsbc(s1, cv(s0), w0)), wsbc(s1, cv(hs0), w0))\n  raleq(s0, cv(s1), cv(hs0), wsbc(s1, cv(s0), w0))\n  sbceq1a(s1, cv(hs0), w0)\n  df-sbc(s1, cv(hs0), w0)\n  diff.hs0.c(cab(s1, w0))\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cab.s(s0, s1, w0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s0, s1)\n}","pretty":"thm setinds(setvar s0, setvar s1, wff w0) {\n  ‚ä¢ w0\n  ‚ä£ (‚àÄ(s0 ‚àà s1,[s0 / s1]w0)‚Üí w0)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s0, w0)\n} = {\n  mpbi(w0, s1 ‚àà ùïå)\n  vex(s1)\n  abeq2i(s1, universe, w0)\n  eqcomi(universe, { s1 | w0 })\n  mpg(hs0, { s1 | w0 } = ùïå, (hs0 ‚äÜ { s1 | w0 } ‚Üí hs0 ‚àà { s1 | w0 }))\n  setind(hs0, { s1 | w0 })\n  sylib(hs0 ‚äÜ { s1 | w0 }, hs0 ‚àà { s1 | w0 }, [hs0 / s1]w0)\n  sylbi(hs0 ‚äÜ { s1 | w0 }, [hs0 / s1]w0, ‚àÄ(s0 ‚àà hs0, s0 ‚àà { s1 | w0 }))\n  dfss3(s0, hs0, { s1 | w0 })\n  sylbir(‚àÄ(s0 ‚àà hs0, s0 ‚àà { s1 | w0 }), [hs0 / s1]w0, ‚àÄ(s0 ‚àà hs0,[s0 / s1]w0))\n  ralbii(s0, hs0, [s0 / s1]w0, s0 ‚àà { s1 | w0 })\n  df-sbc(s1, s0, w0)\n  chvar(s1, hs0, (‚àÄ(s0 ‚àà hs0,[s0 / s1]w0)‚Üí[hs0 / s1]w0), (‚àÄ(s0 ‚àà s1,[s0 / s1]w0)‚Üí w0))\n  nfim(s1, ‚àÄ(s0 ‚àà hs0,[s0 / s1]w0), [hs0 / s1]w0)\n  nfral(s1, s0, hs0, [s0 / s1]w0)\n  nfcv(s1, hs0)\n  nfsbc1v(s1, s0, w0)\n  nfsbc1v(s1, hs0, w0)\n  imbi12d(s1 = hs0, ‚àÄ(s0 ‚àà s1,[s0 / s1]w0), w0, ‚àÄ(s0 ‚àà hs0,[s0 / s1]w0), [hs0 / s1]w0)\n  raleq(s0, s1, hs0, [s0 / s1]w0)\n  sbceq1a(s1, hs0, w0)\n  df-sbc(s1, hs0, w0)\n  diff.hs0.c({ s1 | w0 })\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cab.s(s0, s1, w0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s0, s1)\n}","parent":["mpbi","vex","abeq2i","eqcomi","mpg","setind","sylib","sylbi","dfss3","sylbir","ralbii","df-sbc","chvar","nfim","nfral","nfcv","nfsbc1v","imbi12d","raleq","sbceq1a","diff.hs0.c","diff.cv.s","diffss.ex","diff.hs0.s","diff.cab.s"],"children":["setinds2f"]},{"name":"setinds2f","content":"` _E ` induction schema, using implicit substitution. (Contributed by Scott Fenton, 10-Mar-2011.) (Revised by Mario Carneiro, 11-Dec-2016.)","origin":"thm setinds2f(setvar s0, setvar s1, wff w0, wff w1) {\n  |- w0\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| wi(wral(s1, cv(s0), w1), w0)\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n} = {\n  setinds(s1, s0, w0)\n  sylbi(wral(s1, cv(s0), wsbc(s0, cv(s1), w0)), w0, wral(s1, cv(s0), w1))\n  ralbii(s1, cv(s0), wsbc(s0, cv(s1), w0), w1)\n  bitr3i(wsbc(s0, cv(s1), w0), w1, wsb(s1, s0, w0))\n  sbsbc(s1, s0, w0)\n  sbie(s1, s0, w0, w1)\n  diffss.ex(s1, s0)\n}","pretty":"thm setinds2f(setvar s0, setvar s1, wff w0, wff w1) {\n  ‚ä¢ w0\n  ‚ä£ F/(s0, w1)\n  ‚ä£ (s0 = s1 ‚Üí(w0 ‚Üî w1))\n  ‚ä£ (‚àÄ(s1 ‚àà s0, w1)‚Üí w0)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, w0)\n} = {\n  setinds(s1, s0, w0)\n  sylbi(‚àÄ(s1 ‚àà s0,[s1 / s0]w0), w0, ‚àÄ(s1 ‚àà s0, w1))\n  ralbii(s1, s0, [s1 / s0]w0, w1)\n  bitr3i([s1 / s0]w0, w1, [s1 / s0]w0)\n  sbsbc(s1, s0, w0)\n  sbie(s1, s0, w0, w1)\n  diffss.ex(s1, s0)\n}","parent":["setinds","sylbi","ralbii","bitr3i","sbsbc","sbie","diffss.ex"],"children":["setinds2"]},{"name":"setinds2","content":"` _E ` induction schema, using implicit substitution. (Contributed by Scott Fenton, 10-Mar-2011.)","origin":"thm setinds2(setvar s0, setvar s1, wff w0, wff w1) {\n  |- w0\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| wi(wral(s1, cv(s0), w1), w0)\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  setinds2f(s0, s1, w0, w1)\n  nfv(s0, w1)\n}","pretty":"thm setinds2(setvar s0, setvar s1, wff w0, wff w1) {\n  ‚ä¢ w0\n  ‚ä£ (s0 = s1 ‚Üí(w0 ‚Üî w1))\n  ‚ä£ (‚àÄ(s1 ‚àà s0, w1)‚Üí w0)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s0, w1)\n  ‚ä£ d(s1, w0)\n} = {\n  setinds2f(s0, s1, w0, w1)\n  nfv(s0, w1)\n}","parent":["setinds2f","nfv"],"children":[]}]}