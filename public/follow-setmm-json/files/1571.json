{"index":1571,"title":"Greater than, greater than or equal to.","content":"As a stylistic issue, set.mm prefers 'less than' instead of 'greater than' to reduce the number of conversion steps. Here we formally define the widely-used relations 'greater than' and 'greater than or equal to', so that we have formal definitions of them, as well as a few related theorems.","blocks":[{"name":"cge-real","content":"Extend wff notation to include the 'greater than or equal to' relation, see ~ df-gte .","origin":"const class cge-real { ≥ }","pretty":"","parent":[],"children":[]},{"name":"diff.cge-real.s","content":"","origin":"axiom diff.cge-real.s(setvar s0) {\n  |- diffsc(s0, cge-real)\n}","pretty":"axiom diff.cge-real.s(setvar s0) {\n  ⊢ d(s0, ≥)\n}","parent":[],"children":[]},{"name":"diff.cge-real.c","content":"","origin":"axiom diff.cge-real.c(class c0) {\n  |- diffcc(cge-real, c0)\n}","pretty":"axiom diff.cge-real.c(class c0) {\n  ⊢ d(≥, c0)\n}","parent":[],"children":[]},{"name":"diff.cge-real.w","content":"","origin":"axiom diff.cge-real.w(wff w0) {\n  |- diffcw(cge-real, w0)\n}","pretty":"axiom diff.cge-real.w(wff w0) {\n  ⊢ d(≥, w0)\n}","parent":[],"children":[]},{"name":"cgt","content":"Extend wff notation to include the 'greater than' relation, see ~ df-gt .","origin":"const class cgt { > }","pretty":"","parent":[],"children":[]},{"name":"diff.cgt.s","content":"","origin":"axiom diff.cgt.s(setvar s0) {\n  |- diffsc(s0, cgt)\n}","pretty":"axiom diff.cgt.s(setvar s0) {\n  ⊢ d(s0, >)\n}","parent":[],"children":[]},{"name":"diff.cgt.c","content":"","origin":"axiom diff.cgt.c(class c0) {\n  |- diffcc(cgt, c0)\n}","pretty":"axiom diff.cgt.c(class c0) {\n  ⊢ d(>, c0)\n}","parent":[],"children":[]},{"name":"diff.cgt.w","content":"","origin":"axiom diff.cgt.w(wff w0) {\n  |- diffcw(cgt, w0)\n}","pretty":"axiom diff.cgt.w(wff w0) {\n  ⊢ d(>, w0)\n}","parent":[],"children":[]},{"name":"df-gte","content":"Define the 'greater than or equal' predicate over the reals. Defined in ISO 80000-2:2009(E) operation 2-7.10. It is used as a primitive in the \"NIST Digital Library of Mathematical Functions\" , front introduction, \"Common Notations and Definitions\" section at ~ http://dlmf.nist.gov/front/introduction#Sx4 . This relation is merely the converse of the 'less than or equal to' relation defined by ~ df-le . We do not write this as ` ( x >_ y <-> y <_ x ) ` , and similarly we do not write `` > `` as ` ( x > y <-> y < x ) ` , because these are not definitional axioms as understood by mmj2 (those definitions will be flagged as being \"potentially non-conservative\"). We could write them this way: ` |- > = { <. x , y >. | ( ( x e. RR* /\\ y e. RR* ) /\\ y < x ) } ` and ` |- >_ = { <. x , y >. | ( ( x e. RR* /\\ y e. RR* ) /\\ y <_ x ) } ` but these are very complicated. This definition of ` >_ ` , and the similar one for ` > ` ( ~ df-gt ), are a bit strange when you see them for the first time, but these definitions are much simpler for us to process and are clearly conservative definitions. (My thanks to Mario Carneiro for pointing out this simpler approach.) See ~ gte-lte for a more conventional expression of the relationship between ` < ` and ` > ` . As a stylistic issue, set.mm prefers 'less than' instead of 'greater than' to reduce the number of conversion steps. Thus, we discourage its use, but include its definition so that there _is_ a formal definition of this symbol. (Contributed by David A. Wheeler, 10-May-2015.) (New usage is discouraged.)","origin":"axiom df-gte() {\n  |- wceq(cge-real, ccnv(cle))\n}","pretty":"axiom df-gte() {\n  ⊢ ≥ = `' ≤\n}","parent":[],"children":["gte-lte","gte-lteh"]},{"name":"df-gt","content":"The 'greater than' relation is merely the converse of the 'less than or equal to' relation defined by ~ df-lt . Defined in ISO 80000-2:2009(E) operation 2-7.12. See ~ df-gte for a discussion on why this approach is used for the definition. See ~ gt-lt and ~ gt-lth for more conventional expression of the relationship between ` < ` and ` > ` . As a stylistic issue, set.mm prefers 'less than or equal' instead of 'greater than or equal' to reduce the number of conversion steps. Thus, we discourage its use, but include its definition so that there _is_ a formal definition of this symbol. (Contributed by David A. Wheeler, 19-Apr-2015.) (New usage is discouraged.)","origin":"axiom df-gt() {\n  |- wceq(cgt, ccnv(clt))\n}","pretty":"axiom df-gt() {\n  ⊢ > = `' <\n}","parent":[],"children":["gt-lt","gt-lth"]},{"name":"gte-lte","content":"Simple relationship between ` <_ ` and ` >_ ` . (Contributed by David A. Wheeler, 10-May-2015.) (New usage is discouraged.)","origin":"thm gte-lte(class c0, class c1) {\n  |- wi(wa(wcel(c0, universe), wcel(c1, universe)), wb(wbr(c0, cge-real, c1), wbr(c1, cle, c0)))\n} = {\n  syl5bb(wa(wcel(c0, universe), wcel(c1, universe)), wbr(c0, cge-real, c1), wbr(c1, cle, c0), wbr(c0, ccnv(cle), c1))\n  breqi(c0, cge-real, c1, ccnv(cle))\n  df-gte()\n  brcnvg(c0, universe, c1, universe, cle)\n}","pretty":"thm gte-lte(class c0, class c1) {\n  ⊢ ((c0 ∈ 𝕌 ∧ c1 ∈ 𝕌)→(c0[≥]c1 ↔ c1[≤]c0))\n} = {\n  syl5bb((c0 ∈ 𝕌 ∧ c1 ∈ 𝕌), c0[≥]c1, c1[≤]c0, c0[`' ≤]c1)\n  breqi(c0, cge-real, c1, `' ≤)\n  df-gte()\n  brcnvg(c0, universe, c1, universe, cle)\n}","parent":["syl5bb","breqi","df-gte","brcnvg"],"children":[]},{"name":"gt-lt","content":"Simple relationship between ` < ` and ` > ` . (Contributed by David A. Wheeler, 19-Apr-2015.) (New usage is discouraged.)","origin":"thm gt-lt(class c0, class c1) {\n  |- wi(wa(wcel(c0, universe), wcel(c1, universe)), wb(wbr(c0, cgt, c1), wbr(c1, clt, c0)))\n} = {\n  syl5bb(wa(wcel(c0, universe), wcel(c1, universe)), wbr(c0, cgt, c1), wbr(c1, clt, c0), wbr(c0, ccnv(clt), c1))\n  breqi(c0, cgt, c1, ccnv(clt))\n  df-gt()\n  brcnvg(c0, universe, c1, universe, clt)\n}","pretty":"thm gt-lt(class c0, class c1) {\n  ⊢ ((c0 ∈ 𝕌 ∧ c1 ∈ 𝕌)→(c0[>]c1 ↔ c1[<]c0))\n} = {\n  syl5bb((c0 ∈ 𝕌 ∧ c1 ∈ 𝕌), c0[>]c1, c1[<]c0, c0[`' <]c1)\n  breqi(c0, cgt, c1, `' <)\n  df-gt()\n  brcnvg(c0, universe, c1, universe, clt)\n}","parent":["syl5bb","breqi","df-gt","brcnvg"],"children":[]},{"name":"gte-lteh","content":"Relationship between ` <_ ` and ` >_ ` using hypotheses. (Contributed by David A. Wheeler, 10-May-2015.) (New usage is discouraged.)","origin":"thm gte-lteh(class c0, class c1) {\n  |- wb(wbr(c0, cge-real, c1), wbr(c1, cle, c0))\n  -| wcel(c0, universe)\n  -| wcel(c1, universe)\n} = {\n  bitri(wbr(c0, cge-real, c1), wbr(c1, cle, c0), wbr(c0, ccnv(cle), c1))\n  breqi(c0, cge-real, c1, ccnv(cle))\n  df-gte()\n  brcnv(c0, cle, c1)\n}","pretty":"thm gte-lteh(class c0, class c1) {\n  ⊢ (c0[≥]c1 ↔ c1[≤]c0)\n  ⊣ c0 ∈ 𝕌\n  ⊣ c1 ∈ 𝕌\n} = {\n  bitri(c0[≥]c1, c1[≤]c0, c0[`' ≤]c1)\n  breqi(c0, cge-real, c1, `' ≤)\n  df-gte()\n  brcnv(c0, cle, c1)\n}","parent":["bitri","breqi","df-gte","brcnv"],"children":["ex-gte"]},{"name":"gt-lth","content":"Relationship between ` < ` and ` > ` using hypotheses. (Contributed by David A. Wheeler, 19-Apr-2015.) (New usage is discouraged.)","origin":"thm gt-lth(class c0, class c1) {\n  |- wb(wbr(c0, cgt, c1), wbr(c1, clt, c0))\n  -| wcel(c0, universe)\n  -| wcel(c1, universe)\n} = {\n  bitri(wbr(c0, cgt, c1), wbr(c1, clt, c0), wbr(c0, ccnv(clt), c1))\n  breqi(c0, cgt, c1, ccnv(clt))\n  df-gt()\n  brcnv(c0, clt, c1)\n}","pretty":"thm gt-lth(class c0, class c1) {\n  ⊢ (c0[>]c1 ↔ c1[<]c0)\n  ⊣ c0 ∈ 𝕌\n  ⊣ c1 ∈ 𝕌\n} = {\n  bitri(c0[>]c1, c1[<]c0, c0[`' <]c1)\n  breqi(c0, cgt, c1, `' <)\n  df-gt()\n  brcnv(c0, clt, c1)\n}","parent":["bitri","breqi","df-gt","brcnv"],"children":["ex-gt"]},{"name":"ex-gt","content":"Simple example of ` > ` , in this case, 0 is not greater than 0. This is useful as an example, and helps us gain confidence that we've correctly defined the symbol. (Contributed by David A. Wheeler, 1-Jan-2017.) (New usage is discouraged.)","origin":"thm ex-gt() {\n  |- wn(wbr(nat0, cgt, nat0))\n} = {\n  mtbir(wbr(nat0, cgt, nat0), wbr(nat0, clt, nat0))\n  ltnri(nat0)\n  0re()\n  gt-lth(nat0, nat0)\n  c0ex()\n}","pretty":"thm ex-gt() {\n  ⊢ ¬ 0[>]0\n} = {\n  mtbir(0[>]0, 0[<]0)\n  ltnri(nat0)\n  0re()\n  gt-lth(nat0, nat0)\n  c0ex()\n}","parent":["mtbir","ltnri","0re","gt-lth","c0ex"],"children":[]},{"name":"ex-gte","content":"Simple example of ` >_ ` , in this case, 0 is greater than or equal to 0. This is useful as an example, and helps us gain confidence that we've correctly defined the symbol. (Contributed by David A. Wheeler, 1-Jan-2017.) (New usage is discouraged.)","origin":"thm ex-gte() {\n  |- wbr(nat0, cge-real, nat0)\n} = {\n  mpbir(wbr(nat0, cge-real, nat0), wbr(nat0, cle, nat0))\n  0le0()\n  gte-lteh(nat0, nat0)\n  c0ex()\n}","pretty":"thm ex-gte() {\n  ⊢ 0[≥]0\n} = {\n  mpbir(0[≥]0, 0[≤]0)\n  0le0()\n  gte-lteh(nat0, nat0)\n  c0ex()\n}","parent":["mpbir","0le0","gte-lteh","c0ex"],"children":[]}]}