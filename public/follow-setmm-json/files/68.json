{"index":68,"title":"Uniqueness: the at-most-one quantifier","content":"","blocks":[{"name":"wmo","content":"Extend wff definition to include the at-most-one quantifier (\"there exists at most one ` x ` such that ` ph ` \").","origin":"prop wff wmo(setvar s0, wff w0) { ∃*(s0, w0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wmo.s","content":"","origin":"axiom diff.wmo.s(setvar sBase, setvar s0, wff w0) {\n  |- diffsw(sBase, wmo(s0, w0))\n  -| diffss(sBase, s0)\n  -| diffsw(sBase, w0)\n}","pretty":"axiom diff.wmo.s(setvar sBase, setvar s0, wff w0) {\n  ⊢ d(sBase, ∃*(s0, w0))\n  ⊣ d(sBase, s0)\n  ⊣ d(sBase, w0)\n}","parent":[],"children":[]},{"name":"diff.wmo.c","content":"","origin":"axiom diff.wmo.c(class cBase, setvar s0, wff w0) {\n  |- diffcw(cBase, wmo(s0, w0))\n  -| diffsc(s0, cBase)\n  -| diffcw(cBase, w0)\n}","pretty":"axiom diff.wmo.c(class cBase, setvar s0, wff w0) {\n  ⊢ d(cBase, ∃*(s0, w0))\n  ⊣ d(s0, cBase)\n  ⊣ d(cBase, w0)\n}","parent":[],"children":[]},{"name":"diff.wmo.w","content":"","origin":"axiom diff.wmo.w(wff wBase, setvar s0, wff w0) {\n  |- diffww(wBase, wmo(s0, w0))\n  -| diffsw(s0, wBase)\n  -| diffww(wBase, w0)\n}","pretty":"axiom diff.wmo.w(wff wBase, setvar s0, wff w0) {\n  ⊢ d(wBase, ∃*(s0, w0))\n  ⊣ d(s0, wBase)\n  ⊣ d(wBase, w0)\n}","parent":[],"children":[]},{"name":"mojust","content":"Soundness justification theorem for ~ df-mo (note that ` y ` and ` z ` need not be disjoint, although the weaker theorem with that disjoint variable condition added would be enough to justify the soundness of the definition). (Contributed by NM, 11-Mar-2010.) Added this theorem by adapting the proof of ~ eujust . (Revised by BJ, 30-Sep-2022.)","origin":"thm mojust(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wb(wex(s0, wal(s1, wi(w0, wceq(cv(s1), cv(s0))))), wex(s2, wal(s1, wi(w0, wceq(cv(s1), cv(s2))))))\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffsw(s0, w0)\n  -| diffsw(s2, w0)\n} = {\n  bitri(wex(s0, wal(s1, wi(w0, wceq(cv(s1), cv(s0))))), wex(s2, wal(s1, wi(w0, wceq(cv(s1), cv(s2))))), wex(hs0, wal(s1, wi(w0, wceq(cv(s1), cv(hs0))))))\n  cbvexvw(s0, hs0, wal(s1, wi(w0, wceq(cv(s1), cv(s0)))), wal(s1, wi(w0, wceq(cv(s1), cv(hs0)))))\n  albidv(s1, wceq(cv(s0), cv(hs0)), wi(w0, wceq(cv(s1), cv(s0))), wi(w0, wceq(cv(s1), cv(hs0))))\n  imbi2d(wceq(cv(s0), cv(hs0)), w0, wceq(cv(s1), cv(s0)), wceq(cv(s1), cv(hs0)))\n  equequ2(s0, hs0, s1)\n  cbvexvw(hs0, s2, wal(s1, wi(w0, wceq(cv(s1), cv(hs0)))), wal(s1, wi(w0, wceq(cv(s1), cv(s2)))))\n  albidv(s1, wceq(cv(hs0), cv(s2)), wi(w0, wceq(cv(s1), cv(hs0))), wi(w0, wceq(cv(s1), cv(s2))))\n  imbi2d(wceq(cv(hs0), cv(s2)), w0, wceq(cv(s1), cv(hs0)), wceq(cv(s1), cv(s2)))\n  equequ2(hs0, s2, s1)\n  diff.wal.s(s0, s1, wi(w0, wceq(cv(s1), cv(hs0))))\n  diff.wi.s(s0, w0, wceq(cv(s1), cv(hs0)))\n  diff.wceq.s(s0, cv(s1), cv(hs0))\n  diff.cv.s(s0, s1)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(wal(s1, wi(w0, wceq(cv(s1), cv(s0)))))\n  diff.wceq.s(s1, cv(s0), cv(hs0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.hs0.w(wal(s1, wi(w0, wceq(cv(s1), cv(s2)))))\n  diff.wal.s(s2, s1, wi(w0, wceq(cv(s1), cv(hs0))))\n  diff.wi.s(s2, w0, wceq(cv(s1), cv(hs0)))\n  diff.wceq.s(s2, cv(s1), cv(hs0))\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n  diff.cv.s(s2, hs0)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diff.wceq.s(s1, cv(hs0), cv(s2))\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s2)\n}","pretty":"thm mojust(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ (∃(s0, ∀(s1,(w0 → s1 = s0)))↔ ∃(s2, ∀(s1,(w0 → s1 = s2))))\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, w0)\n  ⊣ d(s2, w0)\n} = {\n  bitri(∃(s0, ∀(s1,(w0 → s1 = s0))), ∃(s2, ∀(s1,(w0 → s1 = s2))), ∃(hs0, ∀(s1,(w0 → s1 = hs0))))\n  cbvexvw(s0, hs0, ∀(s1,(w0 → s1 = s0)), ∀(s1,(w0 → s1 = hs0)))\n  albidv(s1, s0 = hs0, (w0 → s1 = s0), (w0 → s1 = hs0))\n  imbi2d(s0 = hs0, w0, s1 = s0, s1 = hs0)\n  equequ2(s0, hs0, s1)\n  cbvexvw(hs0, s2, ∀(s1,(w0 → s1 = hs0)), ∀(s1,(w0 → s1 = s2)))\n  albidv(s1, hs0 = s2, (w0 → s1 = hs0), (w0 → s1 = s2))\n  imbi2d(hs0 = s2, w0, s1 = hs0, s1 = s2)\n  equequ2(hs0, s2, s1)\n  diff.wal.s(s0, s1, (w0 → s1 = hs0))\n  diff.wi.s(s0, w0, s1 = hs0)\n  diff.wceq.s(s0, s1, hs0)\n  diff.cv.s(s0, s1)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(∀(s1,(w0 → s1 = s0)))\n  diff.wceq.s(s1, s0, hs0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.hs0.w(∀(s1,(w0 → s1 = s2)))\n  diff.wal.s(s2, s1, (w0 → s1 = hs0))\n  diff.wi.s(s2, w0, s1 = hs0)\n  diff.wceq.s(s2, s1, hs0)\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n  diff.cv.s(s2, hs0)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diff.wceq.s(s1, hs0, s2)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.cv.s(s1, s2)\n}","parent":["bitri","cbvexvw","albidv","imbi2d","equequ2","diff.wal.s","diff.wi.s","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":[]},{"name":"df-mo","content":"Define the at-most-one quantifier. The expression ` E* x ph ` is read \"there exists at most one ` x ` such that ` ph ` \". This is also called the \"uniqueness quantifier\" but that expression is also used for the unique existential quantifier ~ df-eu , therefore we avoid that ambiguous name. Notation of [BellMachover] p. 460, whose definition we show as ~ mo3 . For other possible definitions see ~ moeu and ~ mo4 . (Contributed by Wolf Lammen, 27-May-2019.) Make this the definition (which used to be ~ moeu , while this definition was then proved as ~ dfmo ). (Revised by BJ, 30-Sep-2022.)","origin":"axiom df-mo(setvar s0, setvar s1, wff w0) {\n  |- wb(wmo(s0, w0), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))))\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n}","pretty":"axiom df-mo(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃*(s0, w0)↔ ∃(s1, ∀(s0,(w0 → s0 = s1))))\n  ⊣ d(s0, s1)\n  ⊣ d(s1, w0)\n}","parent":[],"children":["nexmo","nexmoOLD","moim","moimi","mobiOLD","mobiOLDOLD","mobidOLD","nfmo1","nfmod2","nfmodv","mof","mofOLD","mo3","mo3OLD","eu3v","eu6OLD","sbmo","mopick","2mo2","mo2icl","moabex","dffun3","dffun6f","grothprim","mobidvALT","wl-cbvmotv","wl-moteq","wl-moae","wl-mo2df","wl-mo2t","wl-mo3t","wl-dfrmosb","wl-dfrmov","wl-dfrmof","dffrege115"]},{"name":"nexmo","content":"Nonexistence implies uniqueness. (Contributed by BJ, 30-Sep-2022.) Avoid ~ ax-11 . (Revised by Wolf Lammen, 16-Oct-2022.)","origin":"thm nexmo(setvar s0, wff w0) {\n  |- wi(wn(wex(s0, w0)), wmo(s0, w0))\n} = {\n  3imtr4i(wn(wex(s0, w0)), wmo(s0, w0), wal(s0, wn(w0)), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  19.2d(hs0, wal(s0, wn(w0)), wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))))\n  alrimiv(hs0, wal(s0, wn(w0)), wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))))\n  alimi(s0, wn(w0), wi(w0, wceq(cv(s0), cv(hs0))))\n  pm2.21(w0, wceq(cv(s0), cv(hs0)))\n  bicomi(wn(wex(s0, w0)), wal(s0, wn(w0)))\n  alnex(s0, w0)\n  df-mo(s0, hs0, w0)\n  diff.hs0.w(wal(s0, wn(w0)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm nexmo(setvar s0, wff w0) {\n  ⊢ (¬ ∃(s0, w0)→ ∃*(s0, w0))\n} = {\n  3imtr4i(¬ ∃(s0, w0), ∃*(s0, w0), ∀(s0, ¬ w0), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  19.2d(hs0, ∀(s0, ¬ w0), ∀(s0,(w0 → s0 = hs0)))\n  alrimiv(hs0, ∀(s0, ¬ w0), ∀(s0,(w0 → s0 = hs0)))\n  alimi(s0, ¬ w0, (w0 → s0 = hs0))\n  pm2.21(w0, s0 = hs0)\n  bicomi(¬ ∃(s0, w0), ∀(s0, ¬ w0))\n  alnex(s0, w0)\n  df-mo(s0, hs0, w0)\n  diff.hs0.w(∀(s0, ¬ w0))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["3imtr4i","19.2d","alrimiv","alimi","pm2.21","bicomi","alnex","df-mo","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":["exmo","moabs","exmoeu","moeuOLD","moanimlem","moexex","mo2icl","mosubopt","dff3","disjALTV0"]},{"name":"nexmoOLD","content":"Obsolete version of ~ nexmo as of 16-Oct-2022. (Contributed by BJ, 30-Sep-2022.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm nexmoOLD(setvar s0, wff w0) {\n  |- wi(wn(wex(s0, w0)), wmo(s0, w0))\n} = {\n  sylbir(wn(wex(s0, w0)), wmo(s0, w0), wal(s0, wn(w0)))\n  alnex(s0, w0)\n  sylibr(wal(s0, wn(w0)), wmo(s0, w0), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  19.2d(hs0, wal(s0, wn(w0)), wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))))\n  sylib(wal(s0, wn(w0)), wal(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))), wal(s0, wal(hs0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  alimi(s0, wn(w0), wal(hs0, wi(w0, wceq(cv(s0), cv(hs0)))))\n  alrimiv(hs0, wn(w0), wi(w0, wceq(cv(s0), cv(hs0))))\n  pm2.21(w0, wceq(cv(s0), cv(hs0)))\n  alcom(s0, hs0, wi(w0, wceq(cv(s0), cv(hs0))))\n  df-mo(s0, hs0, w0)\n  diff.hs0.w(wn(w0))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm nexmoOLD(setvar s0, wff w0) {\n  ⊢ (¬ ∃(s0, w0)→ ∃*(s0, w0))\n} = {\n  sylbir(¬ ∃(s0, w0), ∃*(s0, w0), ∀(s0, ¬ w0))\n  alnex(s0, w0)\n  sylibr(∀(s0, ¬ w0), ∃*(s0, w0), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  19.2d(hs0, ∀(s0, ¬ w0), ∀(s0,(w0 → s0 = hs0)))\n  sylib(∀(s0, ¬ w0), ∀(hs0, ∀(s0,(w0 → s0 = hs0))), ∀(s0, ∀(hs0,(w0 → s0 = hs0))))\n  alimi(s0, ¬ w0, ∀(hs0,(w0 → s0 = hs0)))\n  alrimiv(hs0, ¬ w0, (w0 → s0 = hs0))\n  pm2.21(w0, s0 = hs0)\n  alcom(s0, hs0, (w0 → s0 = hs0))\n  df-mo(s0, hs0, w0)\n  diff.hs0.w(¬ w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["sylbir","alnex","sylibr","19.2d","sylib","alimi","alrimiv","pm2.21","alcom","df-mo","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":[]},{"name":"exmo","content":"Any proposition holds for some ` x ` or holds for at most one ` x ` . (Contributed by NM, 8-Mar-1995.) Shorten proof and avoid ~ df-eu . (Revised by BJ, 14-Oct-2022.)","origin":"thm exmo(setvar s0, wff w0) {\n  |- wo(wex(s0, w0), wmo(s0, w0))\n} = {\n  orri(wex(s0, w0), wmo(s0, w0))\n  nexmo(s0, w0)\n}","pretty":"thm exmo(setvar s0, wff w0) {\n  ⊢ (∃(s0, w0)∨ ∃*(s0, w0))\n} = {\n  orri(∃(s0, w0), ∃*(s0, w0))\n  nexmo(s0, w0)\n}","parent":["orri","nexmo"],"children":["exmoeuOLD","brdom3","mofal"]},{"name":"moabs","content":"Absorption of existence condition by uniqueness. (Contributed by NM, 4-Nov-2002.) Shorten proof and avoid ~ df-eu . (Revised by BJ, 14-Oct-2022.)","origin":"thm moabs(setvar s0, wff w0) {\n  |- wb(wmo(s0, w0), wi(wex(s0, w0), wmo(s0, w0)))\n} = {\n  impbii(wmo(s0, w0), wi(wex(s0, w0), wmo(s0, w0)))\n  ax-1(wmo(s0, w0), wex(s0, w0))\n  ja(wex(s0, w0), wmo(s0, w0), wmo(s0, w0))\n  nexmo(s0, w0)\n  id(wmo(s0, w0))\n}","pretty":"thm moabs(setvar s0, wff w0) {\n  ⊢ (∃*(s0, w0)↔(∃(s0, w0)→ ∃*(s0, w0)))\n} = {\n  impbii(∃*(s0, w0), (∃(s0, w0)→ ∃*(s0, w0)))\n  ax-1(∃*(s0, w0), ∃(s0, w0))\n  ja(∃(s0, w0), ∃*(s0, w0), ∃*(s0, w0))\n  nexmo(s0, w0)\n  id(∃*(s0, w0))\n}","parent":["impbii","ax-1","ja","nexmo","id"],"children":["mo3","mo3OLD","moeu","dffun7","wl-mo3t"]},{"name":"moim","content":"The at-most-one quantifier reverses implication. (Contributed by NM, 22-Apr-1995.)","origin":"thm moim(setvar s0, wff w0, wff w1) {\n  |- wi(wal(s0, wi(w0, w1)), wi(wmo(s0, w1), wmo(s0, w0)))\n} = {\n  3imtr4g(wal(s0, wi(w0, w1)), wmo(s0, w1), wmo(s0, w0), wex(hs0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  eximdv(hs0, wal(s0, wi(w0, w1)), wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))))\n  al2imi(s0, wi(w0, w1), wi(w1, wceq(cv(s0), cv(hs0))), wi(w0, wceq(cv(s0), cv(hs0))))\n  imim1(w0, w1, wceq(cv(s0), cv(hs0)))\n  df-mo(s0, hs0, w1)\n  df-mo(s0, hs0, w0)\n  diff.hs0.w(wal(s0, wi(w0, w1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w1)\n  diff.hs0.w(w0)\n}","pretty":"thm moim(setvar s0, wff w0, wff w1) {\n  ⊢ (∀(s0,(w0 → w1))→(∃*(s0, w1)→ ∃*(s0, w0)))\n} = {\n  3imtr4g(∀(s0,(w0 → w1)), ∃*(s0, w1), ∃*(s0, w0), ∃(hs0, ∀(s0,(w1 → s0 = hs0))), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  eximdv(hs0, ∀(s0,(w0 → w1)), ∀(s0,(w1 → s0 = hs0)), ∀(s0,(w0 → s0 = hs0)))\n  al2imi(s0, (w0 → w1), (w1 → s0 = hs0), (w0 → s0 = hs0))\n  imim1(w0, w1, s0 = hs0)\n  df-mo(s0, hs0, w1)\n  df-mo(s0, hs0, w0)\n  diff.hs0.w(∀(s0,(w0 → w1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w1)\n  diff.hs0.w(w0)\n}","parent":["3imtr4g","eximdv","al2imi","imim1","df-mo","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":["moimiOLD","moimdv","mobi","euimmo","moexex","rmoim","rmoimi2","ssrmof","disjss3","funmo","uptx","taylf"]},{"name":"moimi","content":"The at-most-one quantifier reverses implication. (Contributed by NM, 15-Feb-2006.) Remove use of ~ ax-5 . (Revised by Steven Nguyen, 9-May-2023.)","origin":"thm moimi(setvar s0, wff w0, wff w1) {\n  |- wi(wmo(s0, w0), wmo(s0, w1))\n  -| wi(w1, w0)\n} = {\n  3imtr4i(wmo(s0, w0), wmo(s0, w1), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))), wex(hs0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))))\n  eximi(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))))\n  alimi(s0, wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0))))\n  imim1i(w0, wceq(cv(s0), cv(hs0)), w1)\n  df-mo(s0, hs0, w0)\n  df-mo(s0, hs0, w1)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(w1)\n}","pretty":"thm moimi(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)→ ∃*(s0, w1))\n  ⊣ (w1 → w0)\n} = {\n  3imtr4i(∃*(s0, w0), ∃*(s0, w1), ∃(hs0, ∀(s0,(w0 → s0 = hs0))), ∃(hs0, ∀(s0,(w1 → s0 = hs0))))\n  eximi(hs0, ∀(s0,(w0 → s0 = hs0)), ∀(s0,(w1 → s0 = hs0)))\n  alimi(s0, (w0 → s0 = hs0), (w1 → s0 = hs0))\n  imim1i(w0, s0 = hs0, w1)\n  df-mo(s0, hs0, w0)\n  df-mo(s0, hs0, w1)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(w1)\n}","parent":["3imtr4i","eximi","alimi","imim1i","df-mo","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["moa1","moan","moor","mooran1","mooran2","moaneu","2moex","2euex","2exeu","sndisj","disjxsn","fununmo","funcnvsn","nfunsn","caovmo","iunmapdisj","brdom3","brdom5","brdom4","nqerf","shftfn","2ndcdisj2","plyexmo","ajfuni","funadj","cnlnadjeui","funressnvmo","funressnvmoOLD"]},{"name":"moimiOLD","content":"Obsolete version of ~ moimi as of 9-May-2023. The at-most-one quantifier reverses implication. (Contributed by NM, 15-Feb-2006.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm moimiOLD(setvar s0, wff w0, wff w1) {\n  |- wi(wmo(s0, w0), wmo(s0, w1))\n  -| wi(w1, w0)\n} = {\n  mpg(s0, wi(wmo(s0, w0), wmo(s0, w1)), wi(w1, w0))\n  moim(s0, w1, w0)\n}","pretty":"thm moimiOLD(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)→ ∃*(s0, w1))\n  ⊣ (w1 → w0)\n} = {\n  mpg(s0, (∃*(s0, w0)→ ∃*(s0, w1)), (w1 → w0))\n  moim(s0, w1, w0)\n}","parent":["mpg","moim"],"children":[]},{"name":"moimdv","content":"The at-most-one quantifier reverses implication, deduction form. (Contributed by Thierry Arnoux, 25-Feb-2017.)","origin":"thm moimdv(setvar s0, wff w0, wff w1, wff w2) {\n  |- wi(w0, wi(wmo(s0, w1), wmo(s0, w2)))\n  -| wi(w0, wi(w2, w1))\n  -| diffsw(s0, w0)\n} = {\n  syl(w0, wi(wmo(s0, w1), wmo(s0, w2)), wal(s0, wi(w2, w1)))\n  alrimiv(s0, w0, wi(w2, w1))\n  moim(s0, w2, w1)\n}","pretty":"thm moimdv(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∃*(s0, w1)→ ∃*(s0, w2)))\n  ⊣ (w0 →(w2 → w1))\n  ⊣ d(s0, w0)\n} = {\n  syl(w0, (∃*(s0, w1)→ ∃*(s0, w2)), ∀(s0,(w2 → w1)))\n  alrimiv(s0, w0, (w2 → w1))\n  moim(s0, w2, w1)\n}","parent":["syl","alrimiv","moim"],"children":["disjss1","brdom6disj","funressnfv","funressnvmo","funressnvmoOLD"]},{"name":"mobi","content":"Equivalence theorem for the at-most-one quantifier. (Contributed by BJ, 7-Oct-2022.) (Proof shortened by Wolf Lammen, 18-Feb-2023.)","origin":"thm mobi(setvar s0, wff w0, wff w1) {\n  |- wi(wal(s0, wb(w0, w1)), wb(wmo(s0, w0), wmo(s0, w1)))\n} = {\n  sylbi(wal(s0, wb(w0, w1)), wb(wmo(s0, w0), wmo(s0, w1)), wa(wal(s0, wi(w0, w1)), wal(s0, wi(w1, w0))))\n  albiim(s0, w0, w1)\n  imp(wal(s0, wi(w0, w1)), wal(s0, wi(w1, w0)), wb(wmo(s0, w0), wmo(s0, w1)))\n  impbid21d(wal(s0, wi(w0, w1)), wal(s0, wi(w1, w0)), wmo(s0, w0), wmo(s0, w1))\n  moim(s0, w1, w0)\n  moim(s0, w0, w1)\n}","pretty":"thm mobi(setvar s0, wff w0, wff w1) {\n  ⊢ (∀(s0,(w0 ↔ w1))→(∃*(s0, w0)↔ ∃*(s0, w1)))\n} = {\n  sylbi(∀(s0,(w0 ↔ w1)), (∃*(s0, w0)↔ ∃*(s0, w1)), (∀(s0,(w0 → w1))∧ ∀(s0,(w1 → w0))))\n  albiim(s0, w0, w1)\n  imp(∀(s0,(w0 → w1)), ∀(s0,(w1 → w0)), (∃*(s0, w0)↔ ∃*(s0, w1)))\n  impbid21d(∀(s0,(w0 → w1)), ∀(s0,(w1 → w0)), ∃*(s0, w0), ∃*(s0, w1))\n  moim(s0, w1, w0)\n  moim(s0, w0, w1)\n}","parent":["sylbi","albiim","imp","impbid21d","moim"],"children":["mobii","mobidv","mobid","eubi"]},{"name":"mobiOLD","content":"Obsolete version of ~ mobi as of 18-Feb-2023. (Contributed by BJ, 7-Oct-2022.) (Proof shortened by Wolf Lammen, 16-Oct-2022.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm mobiOLD(setvar s0, wff w0, wff w1) {\n  |- wi(wal(s0, wb(w0, w1)), wb(wmo(s0, w0), wmo(s0, w1)))\n} = {\n  3bitr4g(wal(s0, wb(w0, w1)), wmo(s0, w0), wmo(s0, w1), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))), wex(hs0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))))\n  exbidv(hs0, wal(s0, wb(w0, w1)), wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))))\n  syl(wal(s0, wb(w0, w1)), wb(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))), wal(s0, wb(wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0))))))\n  alimi(s0, wb(w0, w1), wb(wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0)))))\n  imbi1(w0, w1, wceq(cv(s0), cv(hs0)))\n  albi(s0, wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0))))\n  df-mo(s0, hs0, w0)\n  df-mo(s0, hs0, w1)\n  diff.hs0.w(wal(s0, wb(w0, w1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(w1)\n}","pretty":"thm mobiOLD(setvar s0, wff w0, wff w1) {\n  ⊢ (∀(s0,(w0 ↔ w1))→(∃*(s0, w0)↔ ∃*(s0, w1)))\n} = {\n  3bitr4g(∀(s0,(w0 ↔ w1)), ∃*(s0, w0), ∃*(s0, w1), ∃(hs0, ∀(s0,(w0 → s0 = hs0))), ∃(hs0, ∀(s0,(w1 → s0 = hs0))))\n  exbidv(hs0, ∀(s0,(w0 ↔ w1)), ∀(s0,(w0 → s0 = hs0)), ∀(s0,(w1 → s0 = hs0)))\n  syl(∀(s0,(w0 ↔ w1)), (∀(s0,(w0 → s0 = hs0))↔ ∀(s0,(w1 → s0 = hs0))), ∀(s0,((w0 → s0 = hs0)↔(w1 → s0 = hs0))))\n  alimi(s0, (w0 ↔ w1), ((w0 → s0 = hs0)↔(w1 → s0 = hs0)))\n  imbi1(w0, w1, s0 = hs0)\n  albi(s0, (w0 → s0 = hs0), (w1 → s0 = hs0))\n  df-mo(s0, hs0, w0)\n  df-mo(s0, hs0, w1)\n  diff.hs0.w(∀(s0,(w0 ↔ w1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(w1)\n}","parent":["3bitr4g","exbidv","syl","alimi","imbi1","albi","df-mo","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":[]},{"name":"mobiOLDOLD","content":"Obsolete proof of ~ mobi as of 15-Oct-2022. (Contributed by BJ, 7-Oct-2022.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm mobiOLDOLD(setvar s0, wff w0, wff w1) {\n  |- wi(wal(s0, wb(w0, w1)), wb(wmo(s0, w0), wmo(s0, w1)))\n} = {\n  3bitr4g(wal(s0, wb(w0, w1)), wmo(s0, w0), wmo(s0, w1), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))), wex(hs0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))))\n  syl(wal(s0, wb(w0, w1)), wb(wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))), wex(hs0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))))), wal(hs0, wb(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))))))\n  alrimiv(hs0, wal(s0, wb(w0, w1)), wb(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))))\n  syl(wal(s0, wb(w0, w1)), wb(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))), wal(s0, wb(wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0))))))\n  alimi(s0, wb(w0, w1), wb(wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0)))))\n  imbi1(w0, w1, wceq(cv(s0), cv(hs0)))\n  albi(s0, wi(w0, wceq(cv(s0), cv(hs0))), wi(w1, wceq(cv(s0), cv(hs0))))\n  exbi(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))))\n  df-mo(s0, hs0, w0)\n  df-mo(s0, hs0, w1)\n  diff.hs0.w(wal(s0, wb(w0, w1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(w1)\n}","pretty":"thm mobiOLDOLD(setvar s0, wff w0, wff w1) {\n  ⊢ (∀(s0,(w0 ↔ w1))→(∃*(s0, w0)↔ ∃*(s0, w1)))\n} = {\n  3bitr4g(∀(s0,(w0 ↔ w1)), ∃*(s0, w0), ∃*(s0, w1), ∃(hs0, ∀(s0,(w0 → s0 = hs0))), ∃(hs0, ∀(s0,(w1 → s0 = hs0))))\n  syl(∀(s0,(w0 ↔ w1)), (∃(hs0, ∀(s0,(w0 → s0 = hs0)))↔ ∃(hs0, ∀(s0,(w1 → s0 = hs0)))), ∀(hs0,(∀(s0,(w0 → s0 = hs0))↔ ∀(s0,(w1 → s0 = hs0)))))\n  alrimiv(hs0, ∀(s0,(w0 ↔ w1)), (∀(s0,(w0 → s0 = hs0))↔ ∀(s0,(w1 → s0 = hs0))))\n  syl(∀(s0,(w0 ↔ w1)), (∀(s0,(w0 → s0 = hs0))↔ ∀(s0,(w1 → s0 = hs0))), ∀(s0,((w0 → s0 = hs0)↔(w1 → s0 = hs0))))\n  alimi(s0, (w0 ↔ w1), ((w0 → s0 = hs0)↔(w1 → s0 = hs0)))\n  imbi1(w0, w1, s0 = hs0)\n  albi(s0, (w0 → s0 = hs0), (w1 → s0 = hs0))\n  exbi(hs0, ∀(s0,(w0 → s0 = hs0)), ∀(s0,(w1 → s0 = hs0)))\n  df-mo(s0, hs0, w0)\n  df-mo(s0, hs0, w1)\n  diff.hs0.w(∀(s0,(w0 ↔ w1)))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(w1)\n}","parent":["3bitr4g","syl","alrimiv","alimi","imbi1","albi","exbi","df-mo","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":[]},{"name":"mobii","content":"Formula-building rule for the at-most-one quantifier (inference form). (Contributed by NM, 9-Mar-1995.) (Revised by Mario Carneiro, 17-Oct-2016.)","origin":"thm mobii(setvar s0, wff w0, wff w1) {\n  |- wb(wmo(s0, w0), wmo(s0, w1))\n  -| wb(w0, w1)\n} = {\n  mpg(s0, wb(wmo(s0, w0), wmo(s0, w1)), wb(w0, w1))\n  mobi(s0, w0, w1)\n}","pretty":"thm mobii(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)↔ ∃*(s0, w1))\n  ⊣ (w0 ↔ w1)\n} = {\n  mpg(s0, (∃*(s0, w0)↔ ∃*(s0, w1)), (w0 ↔ w1))\n  mobi(s0, w0, w1)\n}","parent":["mpg","mobi"],"children":["cbvmo","moanmo","2moswap","nulmo","nulmoOLD","rmoanid","rmobiia","rmov","euxfr2","rmoan","reuxfr3d","2reu5lem2","2rmoswap","dffun9","funopab","funcnv2","funcnv","fun2cnv","fncnv","imadif","fnres","ov3","oprabex3","brdom6disj","grothprim","axaddf","axmulf","funcnvmpt","alrmomorn","cosscnvssid4","dfeldisj4","euabsneu"]},{"name":"mobidv","content":"Formula-building rule for the at-most-one quantifier (deduction form). (Contributed by Mario Carneiro, 7-Oct-2016.) Reduce axiom dependencies and shorten proof. (Revised by BJ, 7-Oct-2022.)","origin":"thm mobidv(setvar s0, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wmo(s0, w1), wmo(s0, w2)))\n  -| wi(w0, wb(w1, w2))\n  -| diffsw(s0, w0)\n} = {\n  syl(w0, wb(wmo(s0, w1), wmo(s0, w2)), wal(s0, wb(w1, w2)))\n  alrimiv(s0, w0, wb(w1, w2))\n  mobi(s0, w1, w2)\n}","pretty":"thm mobidv(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∃*(s0, w1)↔ ∃*(s0, w2)))\n  ⊣ (w0 →(w1 ↔ w2))\n  ⊣ d(s0, w0)\n} = {\n  syl(w0, (∃*(s0, w1)↔ ∃*(s0, w2)), ∀(s0,(w1 ↔ w2)))\n  alrimiv(s0, w0, (w1 ↔ w2))\n  mobi(s0, w1, w2)\n}","parent":["syl","alrimiv","mobi"],"children":["moanimv","rmoeq1","mosubopt","dffun6f","funmo","caovmo","1stconst","2ndconst","brdom3","brdom6disj","imasaddfnlem","imasvscafn","hausflim","hausflf","cnextfun","haustsms","limcmo","perfdvf","phpreu","alrmomodm","funressnfv","funressnmo"]},{"name":"mobid","content":"Formula-building rule for the at-most-one quantifier (deduction form). (Contributed by NM, 8-Mar-1995.) Remove dependency on ~ ax-10 , ~ ax-11 , ~ ax-13 . (Revised by BJ, 14-Oct-2022.) (Proof shortened by Wolf Lammen, 18-Feb-2023.)","origin":"thm mobid(setvar s0, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wmo(s0, w1), wmo(s0, w2)))\n  -| wnf(s0, w0)\n  -| wi(w0, wb(w1, w2))\n} = {\n  syl(w0, wb(wmo(s0, w1), wmo(s0, w2)), wal(s0, wb(w1, w2)))\n  alrimi(s0, w0, wb(w1, w2))\n  mobi(s0, w1, w2)\n}","pretty":"thm mobid(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∃*(s0, w1)↔ ∃*(s0, w2)))\n  ⊣ F/(s0, w0)\n  ⊣ (w0 →(w1 ↔ w2))\n} = {\n  syl(w0, (∃*(s0, w1)↔ ∃*(s0, w2)), ∀(s0,(w1 ↔ w2)))\n  alrimi(s0, w0, (w1 ↔ w2))\n  mobi(s0, w1, w2)\n}","parent":["syl","alrimi","mobi"],"children":["eubidOLD","mobidvOLD","moanim","rmobida","rmoeq1f","funcnvmpt"]},{"name":"mobidOLD","content":"Obsolete version of ~ mobid as of 18-Feb-2023. (Contributed by NM, 8-Mar-1995.) Remove dependency on ~ ax-10 , ~ ax-11 , ~ ax-13 . (Revised by BJ, 14-Oct-2022.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm mobidOLD(setvar s0, wff w0, wff w1, wff w2) {\n  |- wi(w0, wb(wmo(s0, w1), wmo(s0, w2)))\n  -| wnf(s0, w0)\n  -| wi(w0, wb(w1, w2))\n} = {\n  3bitr4g(w0, wmo(s0, w1), wmo(s0, w2), wex(hs0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0))))), wex(hs0, wal(s0, wi(w2, wceq(cv(s0), cv(hs0))))))\n  exbidv(hs0, w0, wal(s0, wi(w1, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w2, wceq(cv(s0), cv(hs0)))))\n  albid(s0, w0, wi(w1, wceq(cv(s0), cv(hs0))), wi(w2, wceq(cv(s0), cv(hs0))))\n  imbi1d(w0, w1, wceq(cv(s0), cv(hs0)), w2)\n  df-mo(s0, hs0, w1)\n  df-mo(s0, hs0, w2)\n  diff.hs0.w(w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w1)\n  diff.hs0.w(w2)\n}","pretty":"thm mobidOLD(setvar s0, wff w0, wff w1, wff w2) {\n  ⊢ (w0 →(∃*(s0, w1)↔ ∃*(s0, w2)))\n  ⊣ F/(s0, w0)\n  ⊣ (w0 →(w1 ↔ w2))\n} = {\n  3bitr4g(w0, ∃*(s0, w1), ∃*(s0, w2), ∃(hs0, ∀(s0,(w1 → s0 = hs0))), ∃(hs0, ∀(s0,(w2 → s0 = hs0))))\n  exbidv(hs0, w0, ∀(s0,(w1 → s0 = hs0)), ∀(s0,(w2 → s0 = hs0)))\n  albid(s0, w0, (w1 → s0 = hs0), (w2 → s0 = hs0))\n  imbi1d(w0, w1, s0 = hs0, w2)\n  df-mo(s0, hs0, w1)\n  df-mo(s0, hs0, w2)\n  diff.hs0.w(w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w1)\n  diff.hs0.w(w2)\n}","parent":["3bitr4g","exbidv","albid","imbi1d","df-mo","diff.hs0.w","diffss.ex","diff.hs0.s"],"children":[]},{"name":"moa1","content":"If an implication holds for at most one value, then its consequent holds for at most one value. See also ~ ala1 and ~ exa1 . (Contributed by NM, 28-Jul-1995.) (Proof shortened by Wolf Lammen, 22-Dec-2018.) (Revised by BJ, 29-Mar-2021.)","origin":"thm moa1(setvar s0, wff w0, wff w1) {\n  |- wi(wmo(s0, wi(w0, w1)), wmo(s0, w1))\n} = {\n  moimi(s0, wi(w0, w1), w1)\n  ax-1(w1, w0)\n}","pretty":"thm moa1(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0,(w0 → w1))→ ∃*(s0, w1))\n} = {\n  moimi(s0, (w0 → w1), w1)\n  ax-1(w1, w0)\n}","parent":["moimi","ax-1"],"children":[]},{"name":"moan","content":"\"At most one\" is still the case when a conjunct is added. (Contributed by NM, 22-Apr-1995.)","origin":"thm moan(setvar s0, wff w0, wff w1) {\n  |- wi(wmo(s0, w0), wmo(s0, wa(w1, w0)))\n} = {\n  moimi(s0, w0, wa(w1, w0))\n  simpr(w1, w0)\n}","pretty":"thm moan(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)→ ∃*(s0,(w1 ∧ w0)))\n} = {\n  moimi(s0, w0, (w1 ∧ w0))\n  simpr(w1, w0)\n}","parent":["moimi","simpr"],"children":["moani","mooran1","moanimlem","mormo","rmoan"]},{"name":"moani","content":"\"At most one\" is still true when a conjunct is added. (Contributed by NM, 9-Mar-1995.)","origin":"thm moani(setvar s0, wff w0, wff w1) {\n  |- wmo(s0, wa(w0, w1))\n  -| wmo(s0, w1)\n} = {\n  ax-mp(wmo(s0, wa(w0, w1)), wmo(s0, w1))\n  moan(s0, w1, w0)\n}","pretty":"thm moani(setvar s0, wff w0, wff w1) {\n  ⊢ ∃*(s0,(w0 ∧ w1))\n  ⊣ ∃*(s0, w1)\n} = {\n  ax-mp(∃*(s0,(w0 ∧ w1)), ∃*(s0, w1))\n  moan(s0, w1, w0)\n}","parent":["ax-mp","moan"],"children":["euxfr2","rmoeq","reuxfr3d","fvopab6","1stconst","2ndconst","iunmapdisj","axaddf","axmulf","joinval","meetval"]},{"name":"moor","content":"\"At most one\" is still the case when a disjunct is removed. (Contributed by NM, 5-Apr-2004.)","origin":"thm moor(setvar s0, wff w0, wff w1) {\n  |- wi(wmo(s0, wo(w0, w1)), wmo(s0, w0))\n} = {\n  moimi(s0, wo(w0, w1), w0)\n  orc(w0, w1)\n}","pretty":"thm moor(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0,(w0 ∨ w1))→ ∃*(s0, w0))\n} = {\n  moimi(s0, (w0 ∨ w1), w0)\n  orc(w0, w1)\n}","parent":["moimi","orc"],"children":["mooran2"]},{"name":"mooran1","content":"\"At most one\" imports disjunction to conjunction. (Contributed by NM, 5-Apr-2004.) (Proof shortened by Andrew Salmon, 9-Jul-2011.)","origin":"thm mooran1(setvar s0, wff w0, wff w1) {\n  |- wi(wo(wmo(s0, w0), wmo(s0, w1)), wmo(s0, wa(w0, w1)))\n} = {\n  jaoi(wmo(s0, w0), wmo(s0, w1), wmo(s0, wa(w0, w1)))\n  moimi(s0, w0, wa(w0, w1))\n  simpl(w0, w1)\n  moan(s0, w1, w0)\n}","pretty":"thm mooran1(setvar s0, wff w0, wff w1) {\n  ⊢ ((∃*(s0, w0)∨ ∃*(s0, w1))→ ∃*(s0,(w0 ∧ w1)))\n} = {\n  jaoi(∃*(s0, w0), ∃*(s0, w1), ∃*(s0,(w0 ∧ w1)))\n  moimi(s0, w0, (w0 ∧ w1))\n  simpl(w0, w1)\n  moan(s0, w1, w0)\n}","parent":["jaoi","moimi","simpl","moan"],"children":[]},{"name":"mooran2","content":"\"At most one\" exports disjunction to conjunction. (Contributed by NM, 5-Apr-2004.) (Proof shortened by Andrew Salmon, 9-Jul-2011.)","origin":"thm mooran2(setvar s0, wff w0, wff w1) {\n  |- wi(wmo(s0, wo(w0, w1)), wa(wmo(s0, w0), wmo(s0, w1)))\n} = {\n  jca(wmo(s0, wo(w0, w1)), wmo(s0, w0), wmo(s0, w1))\n  moor(s0, w0, w1)\n  moimi(s0, wo(w0, w1), w1)\n  olc(w1, w0)\n}","pretty":"thm mooran2(setvar s0, wff w0, wff w1) {\n  ⊢ (∃*(s0,(w0 ∨ w1))→(∃*(s0, w0)∧ ∃*(s0, w1)))\n} = {\n  jca(∃*(s0,(w0 ∨ w1)), ∃*(s0, w0), ∃*(s0, w1))\n  moor(s0, w0, w1)\n  moimi(s0, (w0 ∨ w1), w1)\n  olc(w1, w0)\n}","parent":["jca","moor","moimi","olc"],"children":[]},{"name":"nfmo1","content":"Bound-variable hypothesis builder for the at-most-one quantifier. (Contributed by NM, 8-Mar-1995.) (Revised by Mario Carneiro, 7-Oct-2016.) Adapt to new definition. (Revised by BJ, 1-Oct-2022.)","origin":"thm nfmo1(setvar s0, wff w0) {\n  |- wnf(s0, wmo(s0, w0))\n} = {\n  nfxfr(s0, wmo(s0, w0), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  df-mo(s0, hs0, w0)\n  nfex(s0, hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))))\n  nfa1(s0, wi(w0, wceq(cv(s0), cv(hs0))))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm nfmo1(setvar s0, wff w0) {\n  ⊢ F/(s0, ∃*(s0, w0))\n} = {\n  nfxfr(s0, ∃*(s0, w0), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  df-mo(s0, hs0, w0)\n  nfex(s0, hs0, ∀(s0,(w0 → s0 = hs0)))\n  nfa1(s0, (w0 → s0 = hs0))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["nfxfr","df-mo","nfex","nfa1","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["mo3","mo3OLD","nfeu1ALT","moanmo","mopick2","moexex","2mo","2eu3","2eu3OLD","nfrmo1","mob","morex","wl-mo3t"]},{"name":"nfmod2","content":"Bound-variable hypothesis builder for the at-most-one quantifier. (Contributed by Mario Carneiro, 14-Nov-2016.) Avoid ~ df-eu . (Revised by BJ, 14-Oct-2022.)","origin":"thm nfmod2(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wnf(s0, wmo(s1, w1)))\n  -| wnf(s1, w0)\n  -| wi(wa(w0, wn(wal(s0, wceq(cv(s0), cv(s1))))), wnf(s0, w1))\n} = {\n  nfxfrd(s0, w0, wmo(s1, w1), wex(hs0, wal(s1, wi(w1, wceq(cv(s1), cv(hs0))))))\n  df-mo(s1, hs0, w1)\n  nfexd(s0, hs0, w0, wal(s1, wi(w1, wceq(cv(s1), cv(hs0)))))\n  nfv(hs0, w0)\n  nfald2(s0, s1, w0, wi(w1, wceq(cv(s1), cv(hs0))))\n  nfimd(s0, wa(w0, wn(wal(s0, wceq(cv(s0), cv(s1))))), w1, wceq(cv(s1), cv(hs0)))\n  adantl(w0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, wceq(cv(s1), cv(hs0))))\n  nfeqf1(s0, s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(w1)\n  diff.hs0.w(w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm nfmod2(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → F/(s0, ∃*(s1, w1)))\n  ⊣ F/(s1, w0)\n  ⊣ ((w0 ∧ ¬ ∀(s0, s0 = s1))→ F/(s0, w1))\n} = {\n  nfxfrd(s0, w0, ∃*(s1, w1), ∃(hs0, ∀(s1,(w1 → s1 = hs0))))\n  df-mo(s1, hs0, w1)\n  nfexd(s0, hs0, w0, ∀(s1,(w1 → s1 = hs0)))\n  nfv(hs0, w0)\n  nfald2(s0, s1, w0, (w1 → s1 = hs0))\n  nfimd(s0, (w0 ∧ ¬ ∀(s0, s0 = s1)), w1, s1 = hs0)\n  adantl(w0, ¬ ∀(s0, s0 = s1), F/(s0, s1 = hs0))\n  nfeqf1(s0, s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(w1)\n  diff.hs0.w(w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["nfxfrd","df-mo","nfexd","nfv","nfald2","nfimd","adantl","nfeqf1","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["nfmod","nfeud2","nfrmod","nfrmo","nfdisj"]},{"name":"nfmodv","content":"Bound-variable hypothesis builder for the at-most-one quantifier. See ~ nfmod for a version without disjoint variable conditions but requiring ~ ax-13 . (Contributed by BJ, 28-Jan-2023.)","origin":"thm nfmodv(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wnf(s0, wmo(s1, w1)))\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s0, w1))\n  -| diffss(s0, s1)\n} = {\n  nfxfrd(s0, w0, wmo(s1, w1), wex(hs0, wal(s1, wi(w1, wceq(cv(s1), cv(hs0))))))\n  df-mo(s1, hs0, w1)\n  nfexd(s0, hs0, w0, wal(s1, wi(w1, wceq(cv(s1), cv(hs0)))))\n  nfv(hs0, w0)\n  nfald(s0, s1, w0, wi(w1, wceq(cv(s1), cv(hs0))))\n  nfimd(s0, w0, w1, wceq(cv(s1), cv(hs0)))\n  nfvd(s0, w0, wceq(cv(s1), cv(hs0)))\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(w1)\n  diff.hs0.w(w0)\n  diff.wceq.s(s0, cv(s1), cv(hs0))\n  diff.cv.s(s0, s1)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm nfmodv(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → F/(s0, ∃*(s1, w1)))\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s0, w1))\n  ⊣ d(s0, s1)\n} = {\n  nfxfrd(s0, w0, ∃*(s1, w1), ∃(hs0, ∀(s1,(w1 → s1 = hs0))))\n  df-mo(s1, hs0, w1)\n  nfexd(s0, hs0, w0, ∀(s1,(w1 → s1 = hs0)))\n  nfv(hs0, w0)\n  nfald(s0, s1, w0, (w1 → s1 = hs0))\n  nfimd(s0, w0, w1, s1 = hs0)\n  nfvd(s0, w0, s1 = hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(w1)\n  diff.hs0.w(w0)\n  diff.wceq.s(s0, s1, hs0)\n  diff.cv.s(s0, s1)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["nfxfrd","df-mo","nfexd","nfv","nfald","nfimd","nfvd","diffss.ex","diff.hs0.s","diff.hs0.w","diff.wceq.s","diff.cv.s"],"children":["mo3","2mo","reusv1","reusv2lem1"]},{"name":"nfmod","content":"Bound-variable hypothesis builder for the at-most-one quantifier. Deduction version of ~ nfmo . (Contributed by Mario Carneiro, 14-Nov-2016.)","origin":"thm nfmod(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wi(w0, wnf(s0, wmo(s1, w1)))\n  -| wnf(s1, w0)\n  -| wi(w0, wnf(s0, w1))\n} = {\n  nfmod2(s0, s1, w0, w1)\n  adantr(w0, wn(wal(s0, wceq(cv(s0), cv(s1)))), wnf(s0, w1))\n}","pretty":"thm nfmod(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (w0 → F/(s0, ∃*(s1, w1)))\n  ⊣ F/(s1, w0)\n  ⊣ (w0 → F/(s0, w1))\n} = {\n  nfmod2(s0, s1, w0, w1)\n  adantr(w0, ¬ ∀(s0, s0 = s1), F/(s0, w1))\n}","parent":["nfmod2","adantr"],"children":["nfmo","wl-mo3t"]},{"name":"nfmo","content":"Bound-variable hypothesis builder for the at-most-one quantifier. Note that ` x ` and ` y ` need not be disjoint. (Contributed by NM, 9-Mar-1995.)","origin":"thm nfmo(setvar s0, setvar s1, wff w0) {\n  |- wnf(s0, wmo(s1, w0))\n  -| wnf(s0, w0)\n} = {\n  mptru(wnf(s0, wmo(s1, w0)))\n  nfmod(s0, s1, wtru, w0)\n  nftru(s1)\n  a1i(wtru, wnf(s0, w0))\n}","pretty":"thm nfmo(setvar s0, setvar s1, wff w0) {\n  ⊢ F/(s0, ∃*(s1, w0))\n  ⊣ F/(s0, w0)\n} = {\n  mptru(F/(s0, ∃*(s1, w0)))\n  nfmod(s0, s1, wtru, w0)\n  nftru(s1)\n  a1i(wtru, F/(s0, w0))\n}","parent":["mptru","nfmod","nftru","a1i"],"children":["mo3OLD","moexex","2moex","2euex","mosubopt","dffun6f"]},{"name":"mof","content":"Version of ~ df-mo with disjoint variable condition replaced by nonfreeness hypothesis. (Contributed by NM, 8-Mar-1995.) Extract ~ dfmo from this proof, and prove ~ mof from it (as of 30-Sep-2022, directly from ~ df-mo ). (Revised by Wolf Lammen, 28-May-2019.) Avoid ~ ax-13 . (Revised by Wolf Lammen, 16-Oct-2022.)","origin":"thm mof(setvar s0, setvar s1, wff w0) {\n  |- wb(wmo(s0, w0), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))))\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  bitri(wmo(s0, w0), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  df-mo(s0, hs0, w0)\n  cbvexv1(hs0, s1, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  nfal(s1, s0, wi(w0, wceq(cv(s0), cv(hs0))))\n  nfim(s1, w0, wceq(cv(s0), cv(hs0)))\n  nfv(s1, wceq(cv(s0), cv(hs0)))\n  nfv(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  albidv(s0, wceq(cv(hs0), cv(s1)), wi(w0, wceq(cv(s0), cv(hs0))), wi(w0, wceq(cv(s0), cv(s1))))\n  imbi2d(wceq(cv(hs0), cv(s1)), w0, wceq(cv(s0), cv(hs0)), wceq(cv(s0), cv(s1)))\n  equequ2(hs0, s1, s0)\n  diff.hs0.w(w0)\n  diff.wceq.s(s1, cv(s0), cv(hs0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  diff.wceq.s(s0, cv(hs0), cv(s1))\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cv.s(s0, s1)\n}","pretty":"thm mof(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃*(s0, w0)↔ ∃(s1, ∀(s0,(w0 → s0 = s1))))\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  bitri(∃*(s0, w0), ∃(s1, ∀(s0,(w0 → s0 = s1))), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  df-mo(s0, hs0, w0)\n  cbvexv1(hs0, s1, ∀(s0,(w0 → s0 = hs0)), ∀(s0,(w0 → s0 = s1)))\n  nfal(s1, s0, (w0 → s0 = hs0))\n  nfim(s1, w0, s0 = hs0)\n  nfv(s1, s0 = hs0)\n  nfv(hs0, ∀(s0,(w0 → s0 = s1)))\n  albidv(s0, hs0 = s1, (w0 → s0 = hs0), (w0 → s0 = s1))\n  imbi2d(hs0 = s1, w0, s0 = hs0, s0 = s1)\n  equequ2(hs0, s1, s0)\n  diff.hs0.w(w0)\n  diff.wceq.s(s1, s0, hs0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(∀(s0,(w0 → s0 = s1)))\n  diff.wceq.s(s0, hs0, s1)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cv.s(s0, s1)\n}","parent":["bitri","df-mo","cbvexv1","nfal","nfim","nfv","albidv","imbi2d","equequ2","diff.hs0.w","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs0.s"],"children":["mo3","mo3OLD","mo","rmo2","nmo","bj-eu3f","dffun3f"]},{"name":"mofOLD","content":"Obsolete version of ~ mof as of 16-Oct-2022. (Contributed by NM, 8-Mar-1995.) Extract ~ dfmo from this proof, and prove ~ mof from it (as of 30-Sep-2022, directly from ~ df-mo ). (Revised by Wolf Lammen, 28-May-2019.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm mofOLD(setvar s0, setvar s1, wff w0) {\n  |- wb(wmo(s0, w0), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))))\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  bitri(wmo(s0, w0), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  df-mo(s0, hs0, w0)\n  cbvex(hs0, s1, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  nfal(s1, s0, wi(w0, wceq(cv(s0), cv(hs0))))\n  nfim(s1, w0, wceq(cv(s0), cv(hs0)))\n  nfv(s1, wceq(cv(s0), cv(hs0)))\n  nfv(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  albidv(s0, wceq(cv(hs0), cv(s1)), wi(w0, wceq(cv(s0), cv(hs0))), wi(w0, wceq(cv(s0), cv(s1))))\n  imbi2d(wceq(cv(hs0), cv(s1)), w0, wceq(cv(s0), cv(hs0)), wceq(cv(s0), cv(s1)))\n  equequ2(hs0, s1, s0)\n  diff.hs0.w(w0)\n  diff.wceq.s(s1, cv(s0), cv(hs0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  diff.wceq.s(s0, cv(hs0), cv(s1))\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cv.s(s0, s1)\n}","pretty":"thm mofOLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃*(s0, w0)↔ ∃(s1, ∀(s0,(w0 → s0 = s1))))\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  bitri(∃*(s0, w0), ∃(s1, ∀(s0,(w0 → s0 = s1))), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  df-mo(s0, hs0, w0)\n  cbvex(hs0, s1, ∀(s0,(w0 → s0 = hs0)), ∀(s0,(w0 → s0 = s1)))\n  nfal(s1, s0, (w0 → s0 = hs0))\n  nfim(s1, w0, s0 = hs0)\n  nfv(s1, s0 = hs0)\n  nfv(hs0, ∀(s0,(w0 → s0 = s1)))\n  albidv(s0, hs0 = s1, (w0 → s0 = hs0), (w0 → s0 = s1))\n  imbi2d(hs0 = s1, w0, s0 = hs0, s0 = s1)\n  equequ2(hs0, s1, s0)\n  diff.hs0.w(w0)\n  diff.wceq.s(s1, s0, hs0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diff.hs0.w(∀(s0,(w0 → s0 = s1)))\n  diff.wceq.s(s0, hs0, s1)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.cv.s(s0, s1)\n}","parent":["bitri","df-mo","cbvex","nfal","nfim","nfv","albidv","imbi2d","equequ2","diff.hs0.w","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs0.s"],"children":[]},{"name":"mo3","content":"Alternate definition of the at-most-one quantifier. Definition of [BellMachover] p. 460, except that definition has the side condition that ` y ` not occur in ` ph ` in place of our hypothesis. (Contributed by NM, 8-Mar-1995.) (Proof shortened by Wolf Lammen, 18-Aug-2019.) Remove dependency on ~ ax-13 . (Revised by BJ and WL, 29-Jan-2023.)","origin":"thm mo3(setvar s0, setvar s1, wff w0) {\n  |- wb(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))))\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  impbii(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))))\n  alrimi(s0, wmo(s0, w0), wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)))))\n  nfmo1(s0, w0)\n  alrimi(s1, wmo(s0, w0), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))\n  mptru(wnf(s1, wmo(s0, w0)))\n  nfmodv(s1, s0, wtru, w0)\n  nfv(s0, wtru)\n  a1i(wtru, wnf(s1, w0))\n  sylbi(wmo(s0, w0), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  df-mo(s0, hs0, w0)\n  exlimiv(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))\n  syl6(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)), wa(wceq(cv(s0), cv(hs0)), wceq(cv(s1), cv(hs0))))\n  anim12d(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), w0, wsb(s1, s0, w0), wceq(cv(s0), cv(hs0)), wceq(cv(s1), cv(hs0)))\n  sp(s0, wi(w0, wceq(cv(s0), cv(hs0))))\n  syl6ib(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wsb(s1, s0, w0), wceq(cv(s1), cv(hs0)), wsb(s1, s0, wceq(cv(s0), cv(hs0))))\n  spsbim(s0, s1, w0, wceq(cv(s0), cv(hs0)))\n  equsb3(s1, s0, hs0)\n  equtr2(s0, hs0, s1)\n  alcoms(s0, s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wmo(s0, w0))\n  sylibr(wal(s1, wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))), wmo(s0, w0), wi(wex(s0, w0), wmo(s0, w0)))\n  3imtr4g(wal(s1, wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))), wex(s0, w0), wmo(s0, w0), wex(s1, wsb(s1, s0, w0)), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))))\n  aleximi(s1, wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  com12(wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  alimd(s0, wsb(s1, s0, w0), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wi(w0, wceq(cv(s0), cv(s1))))\n  nfs1v(s0, s1, w0)\n  imim1d(wsb(s1, s0, w0), wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)), w0)\n  pm3.21(wsb(s1, s0, w0), w0)\n  sb8ev(s0, s1, w0)\n  mof(s0, s1, w0)\n  moabs(s0, w0)\n  diffss.ex(s1, s0)\n  diff.wtru.s(s0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))\n}","pretty":"thm mo3(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃*(s0, w0)↔ ∀(s0, ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1))))\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  impbii(∃*(s0, w0), ∀(s0, ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1))))\n  alrimi(s0, ∃*(s0, w0), ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1)))\n  nfmo1(s0, w0)\n  alrimi(s1, ∃*(s0, w0), ((w0 ∧[s1 / s0]w0)→ s0 = s1))\n  mptru(F/(s1, ∃*(s0, w0)))\n  nfmodv(s1, s0, wtru, w0)\n  nfv(s0, wtru)\n  a1i(wtru, F/(s1, w0))\n  sylbi(∃*(s0, w0), ((w0 ∧[s1 / s0]w0)→ s0 = s1), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  df-mo(s0, hs0, w0)\n  exlimiv(hs0, ∀(s0,(w0 → s0 = hs0)), ((w0 ∧[s1 / s0]w0)→ s0 = s1))\n  syl6(∀(s0,(w0 → s0 = hs0)), (w0 ∧[s1 / s0]w0), s0 = s1, (s0 = hs0 ∧ s1 = hs0))\n  anim12d(∀(s0,(w0 → s0 = hs0)), w0, [s1 / s0]w0, s0 = hs0, s1 = hs0)\n  sp(s0, (w0 → s0 = hs0))\n  syl6ib(∀(s0,(w0 → s0 = hs0)), [s1 / s0]w0, s1 = hs0, [s1 / s0]s0 = hs0)\n  spsbim(s0, s1, w0, s0 = hs0)\n  equsb3(s1, s0, hs0)\n  equtr2(s0, hs0, s1)\n  alcoms(s0, s1, ((w0 ∧[s1 / s0]w0)→ s0 = s1), ∃*(s0, w0))\n  sylibr(∀(s1, ∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1))), ∃*(s0, w0), (∃(s0, w0)→ ∃*(s0, w0)))\n  3imtr4g(∀(s1, ∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1))), ∃(s0, w0), ∃*(s0, w0), ∃(s1,[s1 / s0]w0), ∃(s1, ∀(s0,(w0 → s0 = s1))))\n  aleximi(s1, ∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1)), [s1 / s0]w0, ∀(s0,(w0 → s0 = s1)))\n  com12(∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1)), [s1 / s0]w0, ∀(s0,(w0 → s0 = s1)))\n  alimd(s0, [s1 / s0]w0, ((w0 ∧[s1 / s0]w0)→ s0 = s1), (w0 → s0 = s1))\n  nfs1v(s0, s1, w0)\n  imim1d([s1 / s0]w0, (w0 ∧[s1 / s0]w0), s0 = s1, w0)\n  pm3.21([s1 / s0]w0, w0)\n  sb8ev(s0, s1, w0)\n  mof(s0, s1, w0)\n  moabs(s0, w0)\n  diffss.ex(s1, s0)\n  diff.wtru.s(s0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(((w0 ∧[s1 / s0]w0)→ s0 = s1))\n}","parent":["impbii","alrimi","nfmo1","mptru","nfmodv","nfv","a1i","sylbi","df-mo","exlimiv","syl6","anim12d","sp","syl6ib","spsbim","equsb3","equtr2","alcoms","sylibr","3imtr4g","aleximi","com12","alimd","nfs1v","imim1d","pm3.21","sb8ev","mof","moabs","diffss.ex","diff.wtru.s","diff.hs0.s","diff.hs0.w"],"children":["mo","mo4f","eu2","2mo","rmo3f","rmo3","rmo3OLD","isarep2","mo5f","bnj580","pm14.12"]},{"name":"mo3OLD","content":"Obsolete version of ~ mo3 as of 29-Jan-2023. (Contributed by NM, 8-Mar-1995.) (Proof shortened by Wolf Lammen, 18-Aug-2019.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm mo3OLD(setvar s0, setvar s1, wff w0) {\n  |- wb(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))))\n  -| wnf(s1, w0)\n  -| diffss(s0, s1)\n} = {\n  impbii(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))))\n  alrimi(s0, wmo(s0, w0), wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)))))\n  nfmo1(s0, w0)\n  alrimi(s1, wmo(s0, w0), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))\n  nfmo(s1, s0, w0)\n  sylbi(wmo(s0, w0), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wex(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0))))))\n  df-mo(s0, hs0, w0)\n  exlimiv(hs0, wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))\n  syl6(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)), wa(wceq(cv(s0), cv(hs0)), wceq(cv(s1), cv(hs0))))\n  anim12d(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), w0, wsb(s1, s0, w0), wceq(cv(s0), cv(hs0)), wceq(cv(s1), cv(hs0)))\n  sp(s0, wi(w0, wceq(cv(s0), cv(hs0))))\n  syl6ib(wal(s0, wi(w0, wceq(cv(s0), cv(hs0)))), wsb(s1, s0, w0), wceq(cv(s1), cv(hs0)), wsb(s1, s0, wceq(cv(s0), cv(hs0))))\n  spsbim(s0, s1, w0, wceq(cv(s0), cv(hs0)))\n  equsb3(s1, s0, hs0)\n  equtr2(s0, hs0, s1)\n  alcoms(s0, s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wmo(s0, w0))\n  sylibr(wal(s1, wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))), wmo(s0, w0), wi(wex(s0, w0), wmo(s0, w0)))\n  3imtr4g(wal(s1, wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))), wex(s0, w0), wmo(s0, w0), wex(s1, wsb(s1, s0, w0)), wex(s1, wal(s0, wi(w0, wceq(cv(s0), cv(s1))))))\n  aleximi(s1, wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  com12(wal(s0, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)))), wsb(s1, s0, w0), wal(s0, wi(w0, wceq(cv(s0), cv(s1)))))\n  alimd(s0, wsb(s1, s0, w0), wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wi(w0, wceq(cv(s0), cv(s1))))\n  nfs1v(s0, s1, w0)\n  imim1d(wsb(s1, s0, w0), wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)), w0)\n  pm3.21(wsb(s1, s0, w0), w0)\n  sb8e(s0, s1, w0)\n  mof(s0, s1, w0)\n  moabs(s0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))\n}","pretty":"thm mo3OLD(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃*(s0, w0)↔ ∀(s0, ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1))))\n  ⊣ F/(s1, w0)\n  ⊣ d(s0, s1)\n} = {\n  impbii(∃*(s0, w0), ∀(s0, ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1))))\n  alrimi(s0, ∃*(s0, w0), ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1)))\n  nfmo1(s0, w0)\n  alrimi(s1, ∃*(s0, w0), ((w0 ∧[s1 / s0]w0)→ s0 = s1))\n  nfmo(s1, s0, w0)\n  sylbi(∃*(s0, w0), ((w0 ∧[s1 / s0]w0)→ s0 = s1), ∃(hs0, ∀(s0,(w0 → s0 = hs0))))\n  df-mo(s0, hs0, w0)\n  exlimiv(hs0, ∀(s0,(w0 → s0 = hs0)), ((w0 ∧[s1 / s0]w0)→ s0 = s1))\n  syl6(∀(s0,(w0 → s0 = hs0)), (w0 ∧[s1 / s0]w0), s0 = s1, (s0 = hs0 ∧ s1 = hs0))\n  anim12d(∀(s0,(w0 → s0 = hs0)), w0, [s1 / s0]w0, s0 = hs0, s1 = hs0)\n  sp(s0, (w0 → s0 = hs0))\n  syl6ib(∀(s0,(w0 → s0 = hs0)), [s1 / s0]w0, s1 = hs0, [s1 / s0]s0 = hs0)\n  spsbim(s0, s1, w0, s0 = hs0)\n  equsb3(s1, s0, hs0)\n  equtr2(s0, hs0, s1)\n  alcoms(s0, s1, ((w0 ∧[s1 / s0]w0)→ s0 = s1), ∃*(s0, w0))\n  sylibr(∀(s1, ∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1))), ∃*(s0, w0), (∃(s0, w0)→ ∃*(s0, w0)))\n  3imtr4g(∀(s1, ∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1))), ∃(s0, w0), ∃*(s0, w0), ∃(s1,[s1 / s0]w0), ∃(s1, ∀(s0,(w0 → s0 = s1))))\n  aleximi(s1, ∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1)), [s1 / s0]w0, ∀(s0,(w0 → s0 = s1)))\n  com12(∀(s0,((w0 ∧[s1 / s0]w0)→ s0 = s1)), [s1 / s0]w0, ∀(s0,(w0 → s0 = s1)))\n  alimd(s0, [s1 / s0]w0, ((w0 ∧[s1 / s0]w0)→ s0 = s1), (w0 → s0 = s1))\n  nfs1v(s0, s1, w0)\n  imim1d([s1 / s0]w0, (w0 ∧[s1 / s0]w0), s0 = s1, w0)\n  pm3.21([s1 / s0]w0, w0)\n  sb8e(s0, s1, w0)\n  mof(s0, s1, w0)\n  moabs(s0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n  diff.hs0.w(((w0 ∧[s1 / s0]w0)→ s0 = s1))\n}","parent":["impbii","alrimi","nfmo1","nfmo","sylbi","df-mo","exlimiv","syl6","anim12d","sp","syl6ib","spsbim","equsb3","equtr2","alcoms","sylibr","3imtr4g","aleximi","com12","alimd","nfs1v","imim1d","pm3.21","sb8e","mof","moabs","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["mo4fOLD"]},{"name":"mo","content":"Equivalent definitions of \"there exists at most one\". (Contributed by NM, 7-Aug-1994.) (Revised by Mario Carneiro, 7-Oct-2016.) (Proof shortened by Wolf Lammen, 2-Dec-2018.)","origin":"thm mo(setvar s0, setvar s1, wff w0) {\n  |- wb(wex(s0, wal(s1, wi(w0, wceq(cv(s1), cv(s0))))), wal(s1, wal(s0, wi(wa(w0, wsb(s0, s1, w0)), wceq(cv(s1), cv(s0))))))\n  -| wnf(s0, w0)\n  -| diffss(s0, s1)\n} = {\n  bitr3i(wex(s0, wal(s1, wi(w0, wceq(cv(s1), cv(s0))))), wal(s1, wal(s0, wi(wa(w0, wsb(s0, s1, w0)), wceq(cv(s1), cv(s0))))), wmo(s1, w0))\n  mof(s1, s0, w0)\n  mo3(s1, s0, w0)\n  diffss.ex(s1, s0)\n}","pretty":"thm mo(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃(s0, ∀(s1,(w0 → s1 = s0)))↔ ∀(s1, ∀(s0,((w0 ∧[s0 / s1]w0)→ s1 = s0))))\n  ⊣ F/(s0, w0)\n  ⊣ d(s0, s1)\n} = {\n  bitr3i(∃(s0, ∀(s1,(w0 → s1 = s0))), ∀(s1, ∀(s0,((w0 ∧[s0 / s1]w0)→ s1 = s0))), ∃*(s1, w0))\n  mof(s1, s0, w0)\n  mo3(s1, s0, w0)\n  diffss.ex(s1, s0)\n}","parent":["bitr3i","mof","mo3","diffss.ex"],"children":["bj-snsetex"]},{"name":"mo4f","content":"At-most-one quantifier expressed using implicit substitution. Note that the disjoint variable condition on ` y , ph ` can be replaced by the nonfreeness hypothesis ` |- F/ y ph ` with essentially the same proof. (Contributed by NM, 10-Apr-2004.) Remove dependency on ~ ax-13 . (Revised by Wolf Lammen, 19-Jan-2023.)","origin":"thm mo4f(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, w1), wceq(cv(s0), cv(s1))))))\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n} = {\n  bitri(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, w1), wceq(cv(s0), cv(s1))))), wal(s0, wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))))\n  mo3(s0, s1, w0)\n  nfv(s1, w0)\n  2albii(s0, s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wi(wa(w0, w1), wceq(cv(s0), cv(s1))))\n  imbi1i(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)), wa(w0, w1))\n  anbi2i(w0, wsb(s1, s0, w0), w1)\n  sbiev(s1, s0, w0, w1)\n  diffss.ex(s1, s0)\n}","pretty":"thm mo4f(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)↔ ∀(s0, ∀(s1,((w0 ∧ w1)→ s0 = s1))))\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s1, w0)\n} = {\n  bitri(∃*(s0, w0), ∀(s0, ∀(s1,((w0 ∧ w1)→ s0 = s1))), ∀(s0, ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1))))\n  mo3(s0, s1, w0)\n  nfv(s1, w0)\n  2albii(s0, s1, ((w0 ∧[s1 / s0]w0)→ s0 = s1), ((w0 ∧ w1)→ s0 = s1))\n  imbi1i((w0 ∧[s1 / s0]w0), s0 = s1, (w0 ∧ w1))\n  anbi2i(w0, [s1 / s0]w0, w1)\n  sbiev(s1, s0, w0, w1)\n  diffss.ex(s1, s0)\n}","parent":["bitri","mo3","nfv","2albii","imbi1i","anbi2i","sbiev","diffss.ex"],"children":["mo4","axextmo","bm1.1OLD","mob2","moop2"]},{"name":"mo4fOLD","content":"Obsolete version of ~ mo4f as of 19-Jan-2023. (Contributed by NM, 10-Apr-2004.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm mo4fOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, w1), wceq(cv(s0), cv(s1))))))\n  -| wnf(s0, w1)\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n} = {\n  bitri(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, w1), wceq(cv(s0), cv(s1))))), wal(s0, wal(s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))))))\n  mo3OLD(s0, s1, w0)\n  nfv(s1, w0)\n  2albii(s0, s1, wi(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1))), wi(wa(w0, w1), wceq(cv(s0), cv(s1))))\n  imbi1i(wa(w0, wsb(s1, s0, w0)), wceq(cv(s0), cv(s1)), wa(w0, w1))\n  anbi2i(w0, wsb(s1, s0, w0), w1)\n  sbie(s1, s0, w0, w1)\n}","pretty":"thm mo4fOLD(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)↔ ∀(s0, ∀(s1,((w0 ∧ w1)→ s0 = s1))))\n  ⊣ F/(s0, w1)\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s1, w0)\n} = {\n  bitri(∃*(s0, w0), ∀(s0, ∀(s1,((w0 ∧ w1)→ s0 = s1))), ∀(s0, ∀(s1,((w0 ∧[s1 / s0]w0)→ s0 = s1))))\n  mo3OLD(s0, s1, w0)\n  nfv(s1, w0)\n  2albii(s0, s1, ((w0 ∧[s1 / s0]w0)→ s0 = s1), ((w0 ∧ w1)→ s0 = s1))\n  imbi1i((w0 ∧[s1 / s0]w0), s0 = s1, (w0 ∧ w1))\n  anbi2i(w0, [s1 / s0]w0, w1)\n  sbie(s1, s0, w0, w1)\n}","parent":["bitri","mo3OLD","nfv","2albii","imbi1i","anbi2i","sbie"],"children":[]},{"name":"mo4","content":"At-most-one quantifier expressed using implicit substitution. (Contributed by NM, 26-Jul-1995.)","origin":"thm mo4(setvar s0, setvar s1, wff w0, wff w1) {\n  |- wb(wmo(s0, w0), wal(s0, wal(s1, wi(wa(w0, w1), wceq(cv(s0), cv(s1))))))\n  -| wi(wceq(cv(s0), cv(s1)), wb(w0, w1))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w1)\n  -| diffsw(s1, w0)\n} = {\n  mo4f(s0, s1, w0, w1)\n  nfv(s0, w1)\n}","pretty":"thm mo4(setvar s0, setvar s1, wff w0, wff w1) {\n  ⊢ (∃*(s0, w0)↔ ∀(s0, ∀(s1,((w0 ∧ w1)→ s0 = s1))))\n  ⊣ (s0 = s1 →(w0 ↔ w1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w1)\n  ⊣ d(s1, w0)\n} = {\n  mo4f(s0, s1, w0, w1)\n  nfv(s0, w1)\n}","parent":["mo4f","nfv"],"children":["eu4","moeq","rmo4","mosneq","dffun3","fun11","brprcneu","dff13","mpt2fun","caovmo","wemoiso","wemoiso2","addsrmo","mulsrmo","summo","prodmo","hausflimi","vitalilem3","plyexmo","tglineintmo","ajmoi","pjhthmo","adjmo","moel","noprefixmo","funtransport","funray","funline","lineintmo","cossssid4","dffrege115"]}]}