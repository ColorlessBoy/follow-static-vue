{"index":15,"title":"Logical \"nand\" (Sheffer stroke)","content":"","blocks":[{"name":"wnan","content":"Extend wff definition to include alternative denial (\"nand\").","origin":"prop wff wnan(wff w0, wff w1) { (w0 ⊼ w1) }","pretty":"","parent":[],"children":[]},{"name":"diff.wnan.s","content":"","origin":"axiom diff.wnan.s(setvar sBase, wff w0, wff w1) {\n  |- diffsw(sBase, wnan(w0, w1))\n  -| diffsw(sBase, w0)\n  -| diffsw(sBase, w1)\n}","pretty":"axiom diff.wnan.s(setvar sBase, wff w0, wff w1) {\n  ⊢ d(sBase,(w0 ⊼ w1))\n  ⊣ d(sBase, w0)\n  ⊣ d(sBase, w1)\n}","parent":[],"children":[]},{"name":"diff.wnan.c","content":"","origin":"axiom diff.wnan.c(class cBase, wff w0, wff w1) {\n  |- diffcw(cBase, wnan(w0, w1))\n  -| diffcw(cBase, w0)\n  -| diffcw(cBase, w1)\n}","pretty":"axiom diff.wnan.c(class cBase, wff w0, wff w1) {\n  ⊢ d(cBase,(w0 ⊼ w1))\n  ⊣ d(cBase, w0)\n  ⊣ d(cBase, w1)\n}","parent":[],"children":[]},{"name":"diff.wnan.w","content":"","origin":"axiom diff.wnan.w(wff wBase, wff w0, wff w1) {\n  |- diffww(wBase, wnan(w0, w1))\n  -| diffww(wBase, w0)\n  -| diffww(wBase, w1)\n}","pretty":"axiom diff.wnan.w(wff wBase, wff w0, wff w1) {\n  ⊢ d(wBase,(w0 ⊼ w1))\n  ⊣ d(wBase, w0)\n  ⊣ d(wBase, w1)\n}","parent":[],"children":[]},{"name":"df-nan","content":"Define incompatibility, or alternative denial (\"not-and\" or \"nand\"). This is also called the Sheffer stroke, represented by a vertical bar, but we use a different symbol to avoid ambiguity with other uses of the vertical bar. In the second edition of Principia Mathematica (1927), Russell and Whitehead used the Sheffer stroke and suggested it as a replacement for the \"or\" and \"not\" operations of the first edition. However, in practice, \"or\" and \"not\" are more widely used. After we define the constant true ` T. ` ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we will be able to prove these truth table values: ` ( ( T. -/\\ T. ) <-> F. ) ` ( ~ trunantru ), ` ( ( T. -/\\ F. ) <-> T. ) ` ( ~ trunanfal ), ` ( ( F. -/\\ T. ) <-> T. ) ` ( ~ falnantru ), and ` ( ( F. -/\\ F. ) <-> T. ) ` ( ~ falnanfal ). Contrast with ` /\\ ` ( ~ df-an ), ` \\/ ` ( ~ df-or ), ` -> ` ( ~ wi ), and ` \\/_ ` ( ~ df-xor ). (Contributed by Jeff Hoffman, 19-Nov-2007.)","origin":"axiom df-nan(wff w0, wff w1) {\n  |- wb(wnan(w0, w1), wn(wa(w0, w1)))\n}","pretty":"axiom df-nan(wff w0, wff w1) {\n  ⊢ ((w0 ⊼ w1)↔ ¬(w0 ∧ w1))\n}","parent":[],"children":["nanan","nanimn","nanor","nancomOLD","nannanOLD","nannotOLD","nanbi","nanbi1OLD","xornan2","trunanfal","nic-mpALT","nic-ax","nic-axALT","nfnan","naim1","naim2","df3nandALT1","imnand2","waj-ax","lukshef-ax2","arg-ax","nandsym1","tsna1","tsna2","tsna3","ifpdfnan","ifpnannanb","nanorxor","undisjrab"]},{"name":"nanan","content":"Conjunction in terms of alternative denial. (Contributed by Mario Carneiro, 9-May-2015.)","origin":"thm nanan(wff w0, wff w1) {\n  |- wb(wa(w0, w1), wn(wnan(w0, w1)))\n} = {\n  con2bii(wa(w0, w1), wnan(w0, w1))\n  df-nan(w0, w1)\n}","pretty":"thm nanan(wff w0, wff w1) {\n  ⊢ ((w0 ∧ w1)↔ ¬(w0 ⊼ w1))\n} = {\n  con2bii((w0 ∧ w1), (w0 ⊼ w1))\n  df-nan(w0, w1)\n}","parent":["con2bii","df-nan"],"children":["nannan","nannanOLD","nanass"]},{"name":"nanimn","content":"Alternative denial in terms of our primitive connectives (implication and negation). (Contributed by WL, 26-Jun-2020.)","origin":"thm nanimn(wff w0, wff w1) {\n  |- wb(wnan(w0, w1), wi(w0, wn(w1)))\n} = {\n  bitr4i(wnan(w0, w1), wi(w0, wn(w1)), wn(wa(w0, w1)))\n  df-nan(w0, w1)\n  imnan(w0, w1)\n}","pretty":"thm nanimn(wff w0, wff w1) {\n  ⊢ ((w0 ⊼ w1)↔(w0 → ¬ w1))\n} = {\n  bitr4i((w0 ⊼ w1), (w0 → ¬ w1), ¬(w0 ∧ w1))\n  df-nan(w0, w1)\n  imnan(w0, w1)\n}","parent":["bitr4i","df-nan","imnan"],"children":["nancom","nannan","nannot","nanbi1"]},{"name":"nanor","content":"Alternative denial in terms of disjunction and negation. This explains the name \"alternative denial\". (Contributed by BJ, 19-Oct-2022.)","origin":"thm nanor(wff w0, wff w1) {\n  |- wb(wnan(w0, w1), wo(wn(w0), wn(w1)))\n} = {\n  bitri(wnan(w0, w1), wo(wn(w0), wn(w1)), wn(wa(w0, w1)))\n  df-nan(w0, w1)\n  ianor(w0, w1)\n}","pretty":"thm nanor(wff w0, wff w1) {\n  ⊢ ((w0 ⊼ w1)↔(¬ w0 ∨ ¬ w1))\n} = {\n  bitri((w0 ⊼ w1), (¬ w0 ∨ ¬ w1), ¬(w0 ∧ w1))\n  df-nan(w0, w1)\n  ianor(w0, w1)\n}","parent":["bitri","df-nan","ianor"],"children":[]},{"name":"nancom","content":"Alternative denial is commutative. Remark: alternative denial is not associative, see ~ nanass . (Contributed by Mario Carneiro, 9-May-2015.) (Proof shortened by Wolf Lammen, 26-Jun-2020.)","origin":"thm nancom(wff w0, wff w1) {\n  |- wb(wnan(w0, w1), wnan(w1, w0))\n} = {\n  3bitr4i(wnan(w0, w1), wnan(w1, w0), wi(w0, wn(w1)), wi(w1, wn(w0)))\n  con2b(w0, w1)\n  nanimn(w0, w1)\n  nanimn(w1, w0)\n}","pretty":"thm nancom(wff w0, wff w1) {\n  ⊢ ((w0 ⊼ w1)↔(w1 ⊼ w0))\n} = {\n  3bitr4i((w0 ⊼ w1), (w1 ⊼ w0), (w0 → ¬ w1), (w1 → ¬ w0))\n  con2b(w0, w1)\n  nanimn(w0, w1)\n  nanimn(w1, w0)\n}","parent":["3bitr4i","con2b","nanimn"],"children":["nanbi2","nanass","nanassOLD","falnantru"]},{"name":"nancomOLD","content":"Obsolete proof of ~ nancom as of 19-Oct-2022. (Contributed by Mario Carneiro, 9-May-2015.) (Proof shortened by Wolf Lammen, 7-Mar-2020.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm nancomOLD(wff w0, wff w1) {\n  |- wb(wnan(w0, w1), wnan(w1, w0))\n} = {\n  bitr4i(wnan(w0, w1), wnan(w1, w0), wn(wa(w1, w0)))\n  xchbinx(wnan(w0, w1), wa(w1, w0), wa(w0, w1))\n  df-nan(w0, w1)\n  ancom(w0, w1)\n  df-nan(w1, w0)\n}","pretty":"thm nancomOLD(wff w0, wff w1) {\n  ⊢ ((w0 ⊼ w1)↔(w1 ⊼ w0))\n} = {\n  bitr4i((w0 ⊼ w1), (w1 ⊼ w0), ¬(w1 ∧ w0))\n  xchbinx((w0 ⊼ w1), (w1 ∧ w0), (w0 ∧ w1))\n  df-nan(w0, w1)\n  ancom(w0, w1)\n  df-nan(w1, w0)\n}","parent":["bitr4i","xchbinx","df-nan","ancom"],"children":[]},{"name":"nannan","content":"Nested alternative denials. (Contributed by Jeff Hoffman, 19-Nov-2007.) (Proof shortened by Wolf Lammen, 26-Jun-2020.)","origin":"thm nannan(wff w0, wff w1, wff w2) {\n  |- wb(wnan(w0, wnan(w1, w2)), wi(w0, wa(w1, w2)))\n} = {\n  bitr4i(wnan(w0, wnan(w1, w2)), wi(w0, wa(w1, w2)), wi(w0, wn(wnan(w1, w2))))\n  nanimn(w0, wnan(w1, w2))\n  imbi2i(w0, wa(w1, w2), wn(wnan(w1, w2)))\n  nanan(w1, w2)\n}","pretty":"thm nannan(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ⊼(w1 ⊼ w2))↔(w0 →(w1 ∧ w2)))\n} = {\n  bitr4i((w0 ⊼(w1 ⊼ w2)), (w0 →(w1 ∧ w2)), (w0 → ¬(w1 ⊼ w2)))\n  nanimn(w0, (w1 ⊼ w2))\n  imbi2i(w0, (w1 ∧ w2), ¬(w1 ⊼ w2))\n  nanan(w1, w2)\n}","parent":["bitr4i","nanimn","imbi2i","nanan"],"children":["nanim","nanbi","nanass","nanassOLD","nic-mp","nic-ax","waj-ax","lukshef-ax2","arg-ax"]},{"name":"nannanOLD","content":"Obsolete proof of ~ nannan as of 19-Oct-2022. (Contributed by Jeff Hoffman, 19-Nov-2007.) (Proof shortened by Wolf Lammen, 7-Mar-2020.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm nannanOLD(wff w0, wff w1, wff w2) {\n  |- wb(wnan(w0, wnan(w1, w2)), wi(w0, wa(w1, w2)))\n} = {\n  3bitr4ri(wnan(w0, wnan(w1, w2)), wi(w0, wa(w1, w2)), wi(w0, wn(wnan(w1, w2))), wn(wa(w0, wnan(w1, w2))))\n  imnan(w0, wnan(w1, w2))\n  imbi2i(w0, wa(w1, w2), wn(wnan(w1, w2)))\n  nanan(w1, w2)\n  df-nan(w0, wnan(w1, w2))\n}","pretty":"thm nannanOLD(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ⊼(w1 ⊼ w2))↔(w0 →(w1 ∧ w2)))\n} = {\n  3bitr4ri((w0 ⊼(w1 ⊼ w2)), (w0 →(w1 ∧ w2)), (w0 → ¬(w1 ⊼ w2)), ¬(w0 ∧(w1 ⊼ w2)))\n  imnan(w0, (w1 ⊼ w2))\n  imbi2i(w0, (w1 ∧ w2), ¬(w1 ⊼ w2))\n  nanan(w1, w2)\n  df-nan(w0, (w1 ⊼ w2))\n}","parent":["3bitr4ri","imnan","imbi2i","nanan","df-nan"],"children":[]},{"name":"nanim","content":"Implication in terms of alternative denial. (Contributed by Jeff Hoffman, 19-Nov-2007.)","origin":"thm nanim(wff w0, wff w1) {\n  |- wb(wi(w0, w1), wnan(w0, wnan(w1, w1)))\n} = {\n  bitr2i(wi(w0, w1), wnan(w0, wnan(w1, w1)), wi(w0, wa(w1, w1)))\n  nannan(w0, w1, w1)\n  anidmdbi(w0, w1)\n}","pretty":"thm nanim(wff w0, wff w1) {\n  ⊢ ((w0 → w1)↔(w0 ⊼(w1 ⊼ w1)))\n} = {\n  bitr2i((w0 → w1), (w0 ⊼(w1 ⊼ w1)), (w0 →(w1 ∧ w1)))\n  nannan(w0, w1, w1)\n  anidmdbi(w0, w1)\n}","parent":["bitr2i","nannan","anidmdbi"],"children":["nic-dfim","nic-ax","waj-ax","lukshef-ax2"]},{"name":"nannot","content":"Negation in terms of alternative denial. (Contributed by Jeff Hoffman, 19-Nov-2007.) (Revised by Wolf Lammen, 26-Jun-2020.)","origin":"thm nannot(wff w0) {\n  |- wb(wn(w0), wnan(w0, w0))\n} = {\n  bitr2i(wn(w0), wnan(w0, w0), wi(w0, wn(w0)))\n  nanimn(w0, w0)\n  pm4.8(w0)\n}","pretty":"thm nannot(wff w0) {\n  ⊢ (¬ w0 ↔(w0 ⊼ w0))\n} = {\n  bitr2i(¬ w0, (w0 ⊼ w0), (w0 → ¬ w0))\n  nanimn(w0, w0)\n  pm4.8(w0)\n}","parent":["bitr2i","nanimn","pm4.8"],"children":["nanbi","trunantru","falnanfal","nic-dfneg","andnand1","imnand2"]},{"name":"nannotOLD","content":"Obsolete proof of ~ nannot as of 19-Oct-2022. (Contributed by Jeff Hoffman, 19-Nov-2007.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm nannotOLD(wff w0) {\n  |- wb(wn(w0), wnan(w0, w0))\n} = {\n  bicomi(wn(w0), wnan(w0, w0))\n  xchbinx(wnan(w0, w0), w0, wa(w0, w0))\n  df-nan(w0, w0)\n  anidm(w0)\n}","pretty":"thm nannotOLD(wff w0) {\n  ⊢ (¬ w0 ↔(w0 ⊼ w0))\n} = {\n  bicomi(¬ w0, (w0 ⊼ w0))\n  xchbinx((w0 ⊼ w0), w0, (w0 ∧ w0))\n  df-nan(w0, w0)\n  anidm(w0)\n}","parent":["bicomi","xchbinx","df-nan","anidm"],"children":[]},{"name":"nanbi","content":"Biconditional in terms of alternative denial. (Contributed by Jeff Hoffman, 19-Nov-2007.) (Proof shortened by Wolf Lammen, 27-Jun-2020.)","origin":"thm nanbi(wff w0, wff w1) {\n  |- wb(wb(w0, w1), wnan(wnan(w0, w1), wnan(wnan(w0, w0), wnan(w1, w1))))\n} = {\n  bitr4i(wb(w0, w1), wnan(wnan(w0, w1), wnan(wnan(w0, w0), wnan(w1, w1))), wi(wnan(w0, w1), wa(wnan(w0, w0), wnan(w1, w1))))\n  3bitri(wb(w0, w1), wi(wnan(w0, w1), wa(wnan(w0, w0), wnan(w1, w1))), wo(wa(w0, w1), wa(wn(w0), wn(w1))), wi(wn(wa(w0, w1)), wa(wn(w0), wn(w1))))\n  dfbi3(w0, w1)\n  df-or(wa(w0, w1), wa(wn(w0), wn(w1)))\n  imbi12i(wn(wa(w0, w1)), wa(wn(w0), wn(w1)), wnan(w0, w1), wa(wnan(w0, w0), wnan(w1, w1)))\n  bicomi(wn(wa(w0, w1)), wnan(w0, w1))\n  df-nan(w0, w1)\n  anbi12i(wn(w0), wn(w1), wnan(w0, w0), wnan(w1, w1))\n  nannot(w0)\n  nannot(w1)\n  nannan(wnan(w0, w1), wnan(w0, w0), wnan(w1, w1))\n}","pretty":"thm nanbi(wff w0, wff w1) {\n  ⊢ ((w0 ↔ w1)↔((w0 ⊼ w1)⊼((w0 ⊼ w0)⊼(w1 ⊼ w1))))\n} = {\n  bitr4i((w0 ↔ w1), ((w0 ⊼ w1)⊼((w0 ⊼ w0)⊼(w1 ⊼ w1))), ((w0 ⊼ w1)→((w0 ⊼ w0)∧(w1 ⊼ w1))))\n  3bitri((w0 ↔ w1), ((w0 ⊼ w1)→((w0 ⊼ w0)∧(w1 ⊼ w1))), ((w0 ∧ w1)∨(¬ w0 ∧ ¬ w1)), (¬(w0 ∧ w1)→(¬ w0 ∧ ¬ w1)))\n  dfbi3(w0, w1)\n  df-or((w0 ∧ w1), (¬ w0 ∧ ¬ w1))\n  imbi12i(¬(w0 ∧ w1), (¬ w0 ∧ ¬ w1), (w0 ⊼ w1), ((w0 ⊼ w0)∧(w1 ⊼ w1)))\n  bicomi(¬(w0 ∧ w1), (w0 ⊼ w1))\n  df-nan(w0, w1)\n  anbi12i(¬ w0, ¬ w1, (w0 ⊼ w0), (w1 ⊼ w1))\n  nannot(w0)\n  nannot(w1)\n  nannan((w0 ⊼ w1), (w0 ⊼ w0), (w1 ⊼ w1))\n}","parent":["bitr4i","3bitri","dfbi3","df-or","imbi12i","bicomi","df-nan","anbi12i","nannot","nannan"],"children":["nic-dfim","nic-dfneg"]},{"name":"nanbi1","content":"Introduce a right anti-conjunct to both sides of a logical equivalence. (Contributed by Anthony Hart, 1-Sep-2011.) (Proof shortened by Wolf Lammen, 27-Jun-2020.)","origin":"thm nanbi1(wff w0, wff w1, wff w2) {\n  |- wi(wb(w0, w1), wb(wnan(w0, w2), wnan(w1, w2)))\n} = {\n  3bitr4g(wb(w0, w1), wnan(w0, w2), wnan(w1, w2), wi(w0, wn(w2)), wi(w1, wn(w2)))\n  imbi1(w0, w1, wn(w2))\n  nanimn(w0, w2)\n  nanimn(w1, w2)\n}","pretty":"thm nanbi1(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ↔ w1)→((w0 ⊼ w2)↔(w1 ⊼ w2)))\n} = {\n  3bitr4g((w0 ↔ w1), (w0 ⊼ w2), (w1 ⊼ w2), (w0 → ¬ w2), (w1 → ¬ w2))\n  imbi1(w0, w1, ¬ w2)\n  nanimn(w0, w2)\n  nanimn(w1, w2)\n}","parent":["3bitr4g","imbi1","nanimn"],"children":["nanbi2","nanbi12","nanbi1i","nanbi1d"]},{"name":"nanbi1OLD","content":"Obsolete proof of ~ nanbi1 as of 19-Oct-2022. (Contributed by Anthony Hart, 1-Sep-2011.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm nanbi1OLD(wff w0, wff w1, wff w2) {\n  |- wi(wb(w0, w1), wb(wnan(w0, w2), wnan(w1, w2)))\n} = {\n  3bitr4g(wb(w0, w1), wnan(w0, w2), wnan(w1, w2), wn(wa(w0, w2)), wn(wa(w1, w2)))\n  notbid(wb(w0, w1), wa(w0, w2), wa(w1, w2))\n  anbi1(w0, w1, w2)\n  df-nan(w0, w2)\n  df-nan(w1, w2)\n}","pretty":"thm nanbi1OLD(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ↔ w1)→((w0 ⊼ w2)↔(w1 ⊼ w2)))\n} = {\n  3bitr4g((w0 ↔ w1), (w0 ⊼ w2), (w1 ⊼ w2), ¬(w0 ∧ w2), ¬(w1 ∧ w2))\n  notbid((w0 ↔ w1), (w0 ∧ w2), (w1 ∧ w2))\n  anbi1(w0, w1, w2)\n  df-nan(w0, w2)\n  df-nan(w1, w2)\n}","parent":["3bitr4g","notbid","anbi1","df-nan"],"children":[]},{"name":"nanbi2","content":"Introduce a left anti-conjunct to both sides of a logical equivalence. (Contributed by Anthony Hart, 1-Sep-2011.) (Proof shortened by SF, 2-Jan-2018.)","origin":"thm nanbi2(wff w0, wff w1, wff w2) {\n  |- wi(wb(w0, w1), wb(wnan(w2, w0), wnan(w2, w1)))\n} = {\n  3bitr4g(wb(w0, w1), wnan(w2, w0), wnan(w2, w1), wnan(w0, w2), wnan(w1, w2))\n  nanbi1(w0, w1, w2)\n  nancom(w2, w0)\n  nancom(w2, w1)\n}","pretty":"thm nanbi2(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ↔ w1)→((w2 ⊼ w0)↔(w2 ⊼ w1)))\n} = {\n  3bitr4g((w0 ↔ w1), (w2 ⊼ w0), (w2 ⊼ w1), (w0 ⊼ w2), (w1 ⊼ w2))\n  nanbi1(w0, w1, w2)\n  nancom(w2, w0)\n  nancom(w2, w1)\n}","parent":["3bitr4g","nanbi1","nancom"],"children":["nanbi12","nanbi2i","nanbi2d","nanass","nanassOLD"]},{"name":"nanbi12","content":"Join two logical equivalences with anti-conjunction. (Contributed by SF, 2-Jan-2018.)","origin":"thm nanbi12(wff w0, wff w1, wff w2, wff w3) {\n  |- wi(wa(wb(w0, w1), wb(w2, w3)), wb(wnan(w0, w2), wnan(w1, w3)))\n} = {\n  sylan9bb(wb(w0, w1), wb(w2, w3), wnan(w0, w2), wnan(w1, w3), wnan(w1, w2))\n  nanbi1(w0, w1, w2)\n  nanbi2(w2, w3, w1)\n}","pretty":"thm nanbi12(wff w0, wff w1, wff w2, wff w3) {\n  ⊢ (((w0 ↔ w1)∧(w2 ↔ w3))→((w0 ⊼ w2)↔(w1 ⊼ w3)))\n} = {\n  sylan9bb((w0 ↔ w1), (w2 ↔ w3), (w0 ⊼ w2), (w1 ⊼ w3), (w1 ⊼ w2))\n  nanbi1(w0, w1, w2)\n  nanbi2(w2, w3, w1)\n}","parent":["sylan9bb","nanbi1","nanbi2"],"children":["nanbi12i","nanbi12d"]},{"name":"nanbi1i","content":"Introduce a right anti-conjunct to both sides of a logical equivalence. (Contributed by SF, 2-Jan-2018.)","origin":"thm nanbi1i(wff w0, wff w1, wff w2) {\n  |- wb(wnan(w0, w1), wnan(w2, w1))\n  -| wb(w0, w2)\n} = {\n  ax-mp(wb(wnan(w0, w1), wnan(w2, w1)), wb(w0, w2))\n  nanbi1(w0, w2, w1)\n}","pretty":"thm nanbi1i(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ⊼ w1)↔(w2 ⊼ w1))\n  ⊣ (w0 ↔ w2)\n} = {\n  ax-mp(((w0 ⊼ w1)↔(w2 ⊼ w1)), (w0 ↔ w2))\n  nanbi1(w0, w2, w1)\n}","parent":["ax-mp","nanbi1"],"children":["nabi1i"]},{"name":"nanbi2i","content":"Introduce a left anti-conjunct to both sides of a logical equivalence. (Contributed by SF, 2-Jan-2018.)","origin":"thm nanbi2i(wff w0, wff w1, wff w2) {\n  |- wb(wnan(w0, w1), wnan(w0, w2))\n  -| wb(w1, w2)\n} = {\n  ax-mp(wb(wnan(w0, w1), wnan(w0, w2)), wb(w1, w2))\n  nanbi2(w1, w2, w0)\n}","pretty":"thm nanbi2i(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ⊼ w1)↔(w0 ⊼ w2))\n  ⊣ (w1 ↔ w2)\n} = {\n  ax-mp(((w0 ⊼ w1)↔(w0 ⊼ w2)), (w1 ↔ w2))\n  nanbi2(w1, w2, w0)\n}","parent":["ax-mp","nanbi2"],"children":["nanass","nanassOLD","nabi2i"]},{"name":"nanbi12i","content":"Join two logical equivalences with anti-conjunction. (Contributed by SF, 2-Jan-2018.)","origin":"thm nanbi12i(wff w0, wff w1, wff w2, wff w3) {\n  |- wb(wnan(w0, w1), wnan(w2, w3))\n  -| wb(w0, w2)\n  -| wb(w1, w3)\n} = {\n  mp2an(wb(wnan(w0, w1), wnan(w2, w3)), wb(w0, w2), wb(w1, w3))\n  nanbi12(w0, w2, w1, w3)\n}","pretty":"thm nanbi12i(wff w0, wff w1, wff w2, wff w3) {\n  ⊢ ((w0 ⊼ w1)↔(w2 ⊼ w3))\n  ⊣ (w0 ↔ w2)\n  ⊣ (w1 ↔ w3)\n} = {\n  mp2an(((w0 ⊼ w1)↔(w2 ⊼ w3)), (w0 ↔ w2), (w1 ↔ w3))\n  nanbi12(w0, w2, w1, w3)\n}","parent":["mp2an","nanbi12"],"children":[]},{"name":"nanbi1d","content":"Introduce a right anti-conjunct to both sides of a logical equivalence. (Contributed by SF, 2-Jan-2018.)","origin":"thm nanbi1d(wff w0, wff w1, wff w2, wff w3) {\n  |- wi(w0, wb(wnan(w1, w2), wnan(w3, w2)))\n  -| wi(w0, wb(w1, w3))\n} = {\n  syl(w0, wb(wnan(w1, w2), wnan(w3, w2)), wb(w1, w3))\n  nanbi1(w1, w3, w2)\n}","pretty":"thm nanbi1d(wff w0, wff w1, wff w2, wff w3) {\n  ⊢ (w0 →((w1 ⊼ w2)↔(w3 ⊼ w2)))\n  ⊣ (w0 →(w1 ↔ w3))\n} = {\n  syl(w0, ((w1 ⊼ w2)↔(w3 ⊼ w2)), (w1 ↔ w3))\n  nanbi1(w1, w3, w2)\n}","parent":["syl","nanbi1"],"children":[]},{"name":"nanbi2d","content":"Introduce a left anti-conjunct to both sides of a logical equivalence. (Contributed by SF, 2-Jan-2018.)","origin":"thm nanbi2d(wff w0, wff w1, wff w2, wff w3) {\n  |- wi(w0, wb(wnan(w1, w2), wnan(w1, w3)))\n  -| wi(w0, wb(w2, w3))\n} = {\n  syl(w0, wb(wnan(w1, w2), wnan(w1, w3)), wb(w2, w3))\n  nanbi2(w2, w3, w1)\n}","pretty":"thm nanbi2d(wff w0, wff w1, wff w2, wff w3) {\n  ⊢ (w0 →((w1 ⊼ w2)↔(w1 ⊼ w3)))\n  ⊣ (w0 →(w2 ↔ w3))\n} = {\n  syl(w0, ((w1 ⊼ w2)↔(w1 ⊼ w3)), (w2 ↔ w3))\n  nanbi2(w2, w3, w1)\n}","parent":["syl","nanbi2"],"children":[]},{"name":"nanbi12d","content":"Join two logical equivalences with anti-conjunction. (Contributed by Scott Fenton, 2-Jan-2018.)","origin":"thm nanbi12d(wff w0, wff w1, wff w2, wff w3, wff w4) {\n  |- wi(w0, wb(wnan(w1, w2), wnan(w3, w4)))\n  -| wi(w0, wb(w1, w3))\n  -| wi(w0, wb(w2, w4))\n} = {\n  syl2anc(w0, wb(wnan(w1, w2), wnan(w3, w4)), wb(w1, w3), wb(w2, w4))\n  nanbi12(w1, w3, w2, w4)\n}","pretty":"thm nanbi12d(wff w0, wff w1, wff w2, wff w3, wff w4) {\n  ⊢ (w0 →((w1 ⊼ w2)↔(w3 ⊼ w4)))\n  ⊣ (w0 →(w1 ↔ w3))\n  ⊣ (w0 →(w2 ↔ w4))\n} = {\n  syl2anc(w0, ((w1 ⊼ w2)↔(w3 ⊼ w4)), (w1 ↔ w3), (w2 ↔ w4))\n  nanbi12(w1, w3, w2, w4)\n}","parent":["syl2anc","nanbi12"],"children":["nanass","nanassOLD"]},{"name":"nanass","content":"A characterization of when an expression involving alternative denials associates. Remark: alternative denial is commutative, see ~ nancom . (Contributed by Richard Penner, 29-Feb-2020.) (Proof shortened by Wolf Lammen, 23-Oct-2022.)","origin":"thm nanass(wff w0, wff w1, wff w2) {\n  |- wb(wb(w0, w1), wb(wnan(wnan(w0, w2), w1), wnan(w0, wnan(w2, w1))))\n} = {\n  bitri(wb(w0, w1), wb(wnan(wnan(w0, w2), w1), wnan(w0, wnan(w2, w1))), wb(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1))))\n  impbii(wb(w0, w1), wb(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1))))\n  nanbi12d(wb(w0, w1), w1, wnan(w2, w0), w0, wnan(w2, w1))\n  bicom1(w0, w1)\n  nanbi2(w0, w1, w2)\n  bija(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1)), wb(w0, w1))\n  impbid21d(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1)), w0, w1)\n  sylbi(wnan(w0, wnan(w2, w1)), wi(w0, w1), wi(w0, wa(w2, w1)))\n  nannan(w0, w2, w1)\n  imim2i(w0, wa(w2, w1), w1)\n  simpr(w2, w1)\n  sylbi(wnan(w1, wnan(w2, w0)), wi(w1, w0), wi(w1, wa(w2, w0)))\n  nannan(w1, w2, w0)\n  imim2i(w1, wa(w2, w0), w0)\n  simpr(w2, w0)\n  syl2imc(wn(wnan(w1, wnan(w2, w0))), wn(wnan(w0, wnan(w2, w1))), wb(w0, w1), w0, w1)\n  sylbir(wn(wnan(w0, wnan(w2, w1))), w0, wa(w0, wnan(w2, w1)))\n  nanan(w0, wnan(w2, w1))\n  simpl(w0, wnan(w2, w1))\n  sylbir(wn(wnan(w1, wnan(w2, w0))), w1, wa(w1, wnan(w2, w0)))\n  nanan(w1, wnan(w2, w0))\n  simpl(w1, wnan(w2, w0))\n  pm5.1im(w0, w1)\n  bibi1i(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1)), wnan(wnan(w0, w2), w1))\n  bitri(wnan(w1, wnan(w2, w0)), wnan(wnan(w0, w2), w1), wnan(w1, wnan(w0, w2)))\n  nanbi2i(w1, wnan(w2, w0), wnan(w0, w2))\n  nancom(w2, w0)\n  nancom(w1, wnan(w0, w2))\n}","pretty":"thm nanass(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ↔ w1)↔(((w0 ⊼ w2)⊼ w1)↔(w0 ⊼(w2 ⊼ w1))))\n} = {\n  bitri((w0 ↔ w1), (((w0 ⊼ w2)⊼ w1)↔(w0 ⊼(w2 ⊼ w1))), ((w1 ⊼(w2 ⊼ w0))↔(w0 ⊼(w2 ⊼ w1))))\n  impbii((w0 ↔ w1), ((w1 ⊼(w2 ⊼ w0))↔(w0 ⊼(w2 ⊼ w1))))\n  nanbi12d((w0 ↔ w1), w1, (w2 ⊼ w0), w0, (w2 ⊼ w1))\n  bicom1(w0, w1)\n  nanbi2(w0, w1, w2)\n  bija((w1 ⊼(w2 ⊼ w0)), (w0 ⊼(w2 ⊼ w1)), (w0 ↔ w1))\n  impbid21d((w1 ⊼(w2 ⊼ w0)), (w0 ⊼(w2 ⊼ w1)), w0, w1)\n  sylbi((w0 ⊼(w2 ⊼ w1)), (w0 → w1), (w0 →(w2 ∧ w1)))\n  nannan(w0, w2, w1)\n  imim2i(w0, (w2 ∧ w1), w1)\n  simpr(w2, w1)\n  sylbi((w1 ⊼(w2 ⊼ w0)), (w1 → w0), (w1 →(w2 ∧ w0)))\n  nannan(w1, w2, w0)\n  imim2i(w1, (w2 ∧ w0), w0)\n  simpr(w2, w0)\n  syl2imc(¬(w1 ⊼(w2 ⊼ w0)), ¬(w0 ⊼(w2 ⊼ w1)), (w0 ↔ w1), w0, w1)\n  sylbir(¬(w0 ⊼(w2 ⊼ w1)), w0, (w0 ∧(w2 ⊼ w1)))\n  nanan(w0, (w2 ⊼ w1))\n  simpl(w0, (w2 ⊼ w1))\n  sylbir(¬(w1 ⊼(w2 ⊼ w0)), w1, (w1 ∧(w2 ⊼ w0)))\n  nanan(w1, (w2 ⊼ w0))\n  simpl(w1, (w2 ⊼ w0))\n  pm5.1im(w0, w1)\n  bibi1i((w1 ⊼(w2 ⊼ w0)), (w0 ⊼(w2 ⊼ w1)), ((w0 ⊼ w2)⊼ w1))\n  bitri((w1 ⊼(w2 ⊼ w0)), ((w0 ⊼ w2)⊼ w1), (w1 ⊼(w0 ⊼ w2)))\n  nanbi2i(w1, (w2 ⊼ w0), (w0 ⊼ w2))\n  nancom(w2, w0)\n  nancom(w1, (w0 ⊼ w2))\n}","parent":["bitri","impbii","nanbi12d","bicom1","nanbi2","bija","impbid21d","sylbi","nannan","imim2i","simpr","syl2imc","sylbir","nanan","simpl","pm5.1im","bibi1i","nanbi2i","nancom"],"children":[]},{"name":"nanassOLD","content":"Obsolete proof of ~ nanass as of 23-Oct-2022. (Contributed by Richard Penner, 29-Feb-2020.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm nanassOLD(wff w0, wff w1, wff w2) {\n  |- wb(wb(w0, w1), wb(wnan(wnan(w0, w2), w1), wnan(w0, wnan(w2, w1))))\n} = {\n  bitri(wb(w0, w1), wb(wnan(wnan(w0, w2), w1), wnan(w0, wnan(w2, w1))), wb(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1))))\n  impbii(wb(w0, w1), wb(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1))))\n  nanbi12d(wb(w0, w1), w1, wnan(w2, w0), w0, wnan(w2, w1))\n  bicom1(w0, w1)\n  nanbi2(w0, w1, w2)\n  bija(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1)), wb(w0, w1))\n  impbid21d(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1)), w0, w1)\n  sylbi(wnan(w0, wnan(w2, w1)), wi(w0, w1), wi(w0, wa(w2, w1)))\n  imim2i(w0, wa(w2, w1), w1)\n  simpr(w2, w1)\n  sylbi(wnan(w1, wnan(w2, w0)), wi(w1, w0), wi(w1, wa(w2, w0)))\n  imim2i(w1, wa(w2, w0), w0)\n  simpr(w2, w0)\n  ex(wn(wnan(w1, wnan(w2, w0))), wn(wnan(w0, wnan(w2, w1))), wb(w0, w1))\n  syl2anb(wn(wnan(w1, wnan(w2, w0))), wn(wnan(w0, wnan(w2, w1))), wb(w0, w1), wa(w1, wo(wn(w2), wn(w0))), wa(w0, wo(wn(w2), wn(w1))))\n  3bitri(wn(wnan(w1, wnan(w2, w0))), wa(w1, wo(wn(w2), wn(w0))), wn(wi(w1, wa(w2, w0))), wa(w1, wn(wa(w2, w0))))\n  notbii(wnan(w1, wnan(w2, w0)), wi(w1, wa(w2, w0)))\n  nannan(w1, w2, w0)\n  pm4.61(w1, wa(w2, w0))\n  anbi2i(w1, wn(wa(w2, w0)), wo(wn(w2), wn(w0)))\n  ianor(w2, w0)\n  3bitri(wn(wnan(w0, wnan(w2, w1))), wa(w0, wo(wn(w2), wn(w1))), wn(wi(w0, wa(w2, w1))), wa(w0, wn(wa(w2, w1))))\n  notbii(wnan(w0, wnan(w2, w1)), wi(w0, wa(w2, w1)))\n  nannan(w0, w2, w1)\n  pm4.61(w0, wa(w2, w1))\n  anbi2i(w0, wn(wa(w2, w1)), wo(wn(w2), wn(w1)))\n  ianor(w2, w1)\n  ad2ant2r(w1, wo(wn(w2), wn(w0)), w0, wo(wn(w2), wn(w1)), wb(w0, w1))\n  ancoms(w1, w0, wb(w0, w1))\n  pm5.1(w0, w1)\n  bibi1i(wnan(w1, wnan(w2, w0)), wnan(w0, wnan(w2, w1)), wnan(wnan(w0, w2), w1))\n  bitri(wnan(w1, wnan(w2, w0)), wnan(wnan(w0, w2), w1), wnan(w1, wnan(w0, w2)))\n  nanbi2i(w1, wnan(w2, w0), wnan(w0, w2))\n  nancom(w2, w0)\n  nancom(w1, wnan(w0, w2))\n}","pretty":"thm nanassOLD(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 ↔ w1)↔(((w0 ⊼ w2)⊼ w1)↔(w0 ⊼(w2 ⊼ w1))))\n} = {\n  bitri((w0 ↔ w1), (((w0 ⊼ w2)⊼ w1)↔(w0 ⊼(w2 ⊼ w1))), ((w1 ⊼(w2 ⊼ w0))↔(w0 ⊼(w2 ⊼ w1))))\n  impbii((w0 ↔ w1), ((w1 ⊼(w2 ⊼ w0))↔(w0 ⊼(w2 ⊼ w1))))\n  nanbi12d((w0 ↔ w1), w1, (w2 ⊼ w0), w0, (w2 ⊼ w1))\n  bicom1(w0, w1)\n  nanbi2(w0, w1, w2)\n  bija((w1 ⊼(w2 ⊼ w0)), (w0 ⊼(w2 ⊼ w1)), (w0 ↔ w1))\n  impbid21d((w1 ⊼(w2 ⊼ w0)), (w0 ⊼(w2 ⊼ w1)), w0, w1)\n  sylbi((w0 ⊼(w2 ⊼ w1)), (w0 → w1), (w0 →(w2 ∧ w1)))\n  imim2i(w0, (w2 ∧ w1), w1)\n  simpr(w2, w1)\n  sylbi((w1 ⊼(w2 ⊼ w0)), (w1 → w0), (w1 →(w2 ∧ w0)))\n  imim2i(w1, (w2 ∧ w0), w0)\n  simpr(w2, w0)\n  ex(¬(w1 ⊼(w2 ⊼ w0)), ¬(w0 ⊼(w2 ⊼ w1)), (w0 ↔ w1))\n  syl2anb(¬(w1 ⊼(w2 ⊼ w0)), ¬(w0 ⊼(w2 ⊼ w1)), (w0 ↔ w1), (w1 ∧(¬ w2 ∨ ¬ w0)), (w0 ∧(¬ w2 ∨ ¬ w1)))\n  3bitri(¬(w1 ⊼(w2 ⊼ w0)), (w1 ∧(¬ w2 ∨ ¬ w0)), ¬(w1 →(w2 ∧ w0)), (w1 ∧ ¬(w2 ∧ w0)))\n  notbii((w1 ⊼(w2 ⊼ w0)), (w1 →(w2 ∧ w0)))\n  nannan(w1, w2, w0)\n  pm4.61(w1, (w2 ∧ w0))\n  anbi2i(w1, ¬(w2 ∧ w0), (¬ w2 ∨ ¬ w0))\n  ianor(w2, w0)\n  3bitri(¬(w0 ⊼(w2 ⊼ w1)), (w0 ∧(¬ w2 ∨ ¬ w1)), ¬(w0 →(w2 ∧ w1)), (w0 ∧ ¬(w2 ∧ w1)))\n  notbii((w0 ⊼(w2 ⊼ w1)), (w0 →(w2 ∧ w1)))\n  nannan(w0, w2, w1)\n  pm4.61(w0, (w2 ∧ w1))\n  anbi2i(w0, ¬(w2 ∧ w1), (¬ w2 ∨ ¬ w1))\n  ianor(w2, w1)\n  ad2ant2r(w1, (¬ w2 ∨ ¬ w0), w0, (¬ w2 ∨ ¬ w1), (w0 ↔ w1))\n  ancoms(w1, w0, (w0 ↔ w1))\n  pm5.1(w0, w1)\n  bibi1i((w1 ⊼(w2 ⊼ w0)), (w0 ⊼(w2 ⊼ w1)), ((w0 ⊼ w2)⊼ w1))\n  bitri((w1 ⊼(w2 ⊼ w0)), ((w0 ⊼ w2)⊼ w1), (w1 ⊼(w0 ⊼ w2)))\n  nanbi2i(w1, (w2 ⊼ w0), (w0 ⊼ w2))\n  nancom(w2, w0)\n  nancom(w1, (w0 ⊼ w2))\n}","parent":["bitri","impbii","nanbi12d","bicom1","nanbi2","bija","impbid21d","sylbi","imim2i","simpr","ex","syl2anb","3bitri","notbii","nannan","pm4.61","anbi2i","ianor","ad2ant2r","ancoms","pm5.1","bibi1i","nanbi2i","nancom"],"children":[]}]}