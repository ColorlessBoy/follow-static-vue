{"index":1509,"title":"Laws for internal binary operations","content":"In this subsection, the \"laws\" applicable for \"binary operations\" according to the definition in [Hall] p. 1 and [BourbakiAlg1] p. 1, p. 4 and p. 7 are defined. These laws are called \"internal laws\" in [BourbakiAlg1] p. xxi.","blocks":[{"name":"ccllaw","content":"Extend class notation for the closure law.","origin":"const class ccllaw { clLaw }","pretty":"","parent":[],"children":[]},{"name":"diff.ccllaw.s","content":"","origin":"axiom diff.ccllaw.s(setvar s0) {\n  |- diffsc(s0, ccllaw)\n}","pretty":"axiom diff.ccllaw.s(setvar s0) {\n  ⊢ d(s0, clLaw)\n}","parent":[],"children":[]},{"name":"diff.ccllaw.c","content":"","origin":"axiom diff.ccllaw.c(class c0) {\n  |- diffcc(ccllaw, c0)\n}","pretty":"axiom diff.ccllaw.c(class c0) {\n  ⊢ d(clLaw, c0)\n}","parent":[],"children":[]},{"name":"diff.ccllaw.w","content":"","origin":"axiom diff.ccllaw.w(wff w0) {\n  |- diffcw(ccllaw, w0)\n}","pretty":"axiom diff.ccllaw.w(wff w0) {\n  ⊢ d(clLaw, w0)\n}","parent":[],"children":[]},{"name":"casslaw","content":"Extend class notation for the associative law.","origin":"const class casslaw { assLaw }","pretty":"","parent":[],"children":[]},{"name":"diff.casslaw.s","content":"","origin":"axiom diff.casslaw.s(setvar s0) {\n  |- diffsc(s0, casslaw)\n}","pretty":"axiom diff.casslaw.s(setvar s0) {\n  ⊢ d(s0, assLaw)\n}","parent":[],"children":[]},{"name":"diff.casslaw.c","content":"","origin":"axiom diff.casslaw.c(class c0) {\n  |- diffcc(casslaw, c0)\n}","pretty":"axiom diff.casslaw.c(class c0) {\n  ⊢ d(assLaw, c0)\n}","parent":[],"children":[]},{"name":"diff.casslaw.w","content":"","origin":"axiom diff.casslaw.w(wff w0) {\n  |- diffcw(casslaw, w0)\n}","pretty":"axiom diff.casslaw.w(wff w0) {\n  ⊢ d(assLaw, w0)\n}","parent":[],"children":[]},{"name":"ccomlaw","content":"Extend class notation for the commutative law.","origin":"const class ccomlaw { comLaw }","pretty":"","parent":[],"children":[]},{"name":"diff.ccomlaw.s","content":"","origin":"axiom diff.ccomlaw.s(setvar s0) {\n  |- diffsc(s0, ccomlaw)\n}","pretty":"axiom diff.ccomlaw.s(setvar s0) {\n  ⊢ d(s0, comLaw)\n}","parent":[],"children":[]},{"name":"diff.ccomlaw.c","content":"","origin":"axiom diff.ccomlaw.c(class c0) {\n  |- diffcc(ccomlaw, c0)\n}","pretty":"axiom diff.ccomlaw.c(class c0) {\n  ⊢ d(comLaw, c0)\n}","parent":[],"children":[]},{"name":"diff.ccomlaw.w","content":"","origin":"axiom diff.ccomlaw.w(wff w0) {\n  |- diffcw(ccomlaw, w0)\n}","pretty":"axiom diff.ccomlaw.w(wff w0) {\n  ⊢ d(comLaw, w0)\n}","parent":[],"children":[]},{"name":"df-cllaw","content":"The closure law for binary operations, see definitions of laws A0. and M0. in section 1.1 of [Hall] p. 1, or definition 1 in [BourbakiAlg1] p. 1: the value of a binary operation applied to two operands of a given sets is an element of this set. By this definition, the closure law is expressed as binary relation: a binary operation is related to a set by ` clLaw ` if the closure law holds for this binary operation regarding this set. Note that the binary operation needs not to be a function. (Contributed by AV, 7-Jan-2020.)","origin":"axiom df-cllaw(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wceq(ccllaw, copab(s0, s1, wral(s2, cv(s1), wral(s3, cv(s1), wcel(co(cv(s2), cv(s0), cv(s3)), cv(s1))))))\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s2, s3)\n}","pretty":"axiom df-cllaw(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ clLaw = { < s0, s1 > | ∀(s2 ∈ s1, ∀(s3 ∈ s1,(s2[s0]s3)∈ s1))}\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s2, s3)\n}","parent":[],"children":["iscllaw","clcllaw"]},{"name":"df-comlaw","content":"The commutative law for binary operations, see definitions of laws A2. and M2. in section 1.1 of [Hall] p. 1, or definition 8 in [BourbakiAlg1] p. 7: the value of a binary operation applied to two operands equals the value of a binary operation applied to the two operands in reversed order. By this definition, the commutative law is expressed as binary relation: a binary operation is related to a set by ` comLaw ` if the commutative law holds for this binary operation regarding this set. Note that the binary operation needs neither to be closed nor to be a function. (Contributed by AV, 7-Jan-2020.)","origin":"axiom df-comlaw(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wceq(ccomlaw, copab(s0, s1, wral(s2, cv(s1), wral(s3, cv(s1), wceq(co(cv(s2), cv(s0), cv(s3)), co(cv(s3), cv(s0), cv(s2)))))))\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s2, s3)\n}","pretty":"axiom df-comlaw(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ comLaw = { < s0, s1 > | ∀(s2 ∈ s1, ∀(s3 ∈ s1,(s2[s0]s3)=(s3[s0]s2)))}\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s2, s3)\n}","parent":[],"children":["iscomlaw"]},{"name":"df-asslaw","content":"The associative law for binary operations, see definitions of laws A1. and M1. in section 1.1 of [Hall] p. 1, or definition 5 in [BourbakiAlg1] p. 4: the value of a binary operation applied the value of the binary operation applied to two operands and a third operand equals the value of the binary operation applied to the first operand and the value of the binary operation applied to the second and third operand. By this definition, the associative law is expressed as binary relation: a binary operation is related to a set by ` assLaw ` if the associative law holds for this binary operation regarding this set. Note that the binary operation needs neither to be closed nor to be a function. (Contributed by FL, 1-Nov-2009.) (Revised by AV, 13-Jan-2020.)","origin":"axiom df-asslaw(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4) {\n  |- wceq(casslaw, copab(s0, s1, wral(s2, cv(s1), wral(s3, cv(s1), wral(s4, cv(s1), wceq(co(co(cv(s2), cv(s0), cv(s3)), cv(s0), cv(s4)), co(cv(s2), cv(s0), co(cv(s3), cv(s0), cv(s4)))))))))\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s1, s4)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s0, s4)\n  -| diffss(s2, s3)\n  -| diffss(s2, s4)\n  -| diffss(s3, s4)\n}","pretty":"axiom df-asslaw(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4) {\n  ⊢ assLaw = { < s0, s1 > | ∀(s2 ∈ s1, ∀(s3 ∈ s1, ∀(s4 ∈ s1,((s2[s0]s3)[s0]s4)=(s2[s0](s3[s0]s4)))))}\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s1, s4)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s0, s4)\n  ⊣ d(s2, s3)\n  ⊣ d(s2, s4)\n  ⊣ d(s3, s4)\n}","parent":[],"children":["isasslaw","asslawass"]},{"name":"iscllaw","content":"The predicate \"is a closed operation\". (Contributed by AV, 13-Jan-2020.)","origin":"thm iscllaw(setvar s0, setvar s1, class c0, class c1, class c2, class c3) {\n  |- wi(wa(wcel(c0, c1), wcel(c2, c3)), wb(wbr(c0, ccllaw, c2), wral(s0, c2, wral(s1, c2, wcel(co(cv(s0), c0, cv(s1)), c2)))))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s0, c2)\n  -| diffsc(s1, c0)\n  -| diffsc(s1, c2)\n} = {\n  brabga(hs0, hs1, c0, c1, c2, c3, ccllaw, wral(s0, c2, wral(s1, c2, wcel(co(cv(s0), c0, cv(s1)), c2))), wral(s0, cv(hs1), wral(s1, cv(hs1), wcel(co(cv(s0), cv(hs0), cv(s1)), cv(hs1)))))\n  raleqbidv(s0, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wral(s1, cv(hs1), wcel(co(cv(s0), cv(hs0), cv(s1)), cv(hs1))), wral(s1, c2, wcel(co(cv(s0), c0, cv(s1)), c2)))\n  raleqbidv(s1, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wcel(co(cv(s0), cv(hs0), cv(s1)), cv(hs1)), wcel(co(cv(s0), c0, cv(s1)), c2))\n  eleq12d(co(cv(s0), cv(hs0), cv(s1)), cv(hs1), co(cv(s0), c0, cv(s1)), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)))\n  adantr(wceq(cv(hs0), c0), wceq(cv(hs1), c2), wceq(co(cv(s0), cv(hs0), cv(s1)), co(cv(s0), c0, cv(s1))))\n  oveq(cv(hs0), c0, cv(s0), cv(s1))\n  simpr(wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  df-cllaw(hs0, hs1, s0, s1)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c2)\n  diff.hs1.c(c0)\n  diff.hs1.c(c2)\n  diff.hs0.w(wral(s0, c2, wral(s1, c2, wcel(co(cv(s0), c0, cv(s1)), c2))))\n  diff.hs1.w(wral(s0, c2, wral(s1, c2, wcel(co(cv(s0), c0, cv(s1)), c2))))\n  diff.wa.s(s0, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s0, cv(hs0), c0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.wceq.s(s0, cv(hs1), c2)\n  diff.cv.s(s0, hs1)\n  diffss.ex(s0, hs1)\n  diff.wa.s(s1, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s1, cv(hs0), c0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.wceq.s(s1, cv(hs1), c2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n}","pretty":"thm iscllaw(setvar s0, setvar s1, class c0, class c1, class c2, class c3) {\n  ⊢ ((c0 ∈ c1 ∧ c2 ∈ c3)→(c0[clLaw]c2 ↔ ∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)∈ c2))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s0, c2)\n  ⊣ d(s1, c0)\n  ⊣ d(s1, c2)\n} = {\n  brabga(hs0, hs1, c0, c1, c2, c3, ccllaw, ∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)∈ c2)), ∀(s0 ∈ hs1, ∀(s1 ∈ hs1,(s0[hs0]s1)∈ hs1)))\n  raleqbidv(s0, hs1, c2, (hs0 = c0 ∧ hs1 = c2), ∀(s1 ∈ hs1,(s0[hs0]s1)∈ hs1), ∀(s1 ∈ c2,(s0[c0]s1)∈ c2))\n  raleqbidv(s1, hs1, c2, (hs0 = c0 ∧ hs1 = c2), (s0[hs0]s1)∈ hs1, (s0[c0]s1)∈ c2)\n  eleq12d((s0[hs0]s1), hs1, (s0[c0]s1), c2, (hs0 = c0 ∧ hs1 = c2))\n  adantr(hs0 = c0, hs1 = c2, (s0[hs0]s1)=(s0[c0]s1))\n  oveq(hs0, c0, s0, s1)\n  simpr(hs0 = c0, hs1 = c2)\n  df-cllaw(hs0, hs1, s0, s1)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c2)\n  diff.hs1.c(c0)\n  diff.hs1.c(c2)\n  diff.hs0.w(∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)∈ c2)))\n  diff.hs1.w(∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)∈ c2)))\n  diff.wa.s(s0, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s0, hs0, c0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.wceq.s(s0, hs1, c2)\n  diff.cv.s(s0, hs1)\n  diffss.ex(s0, hs1)\n  diff.wa.s(s1, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s1, hs0, c0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.wceq.s(s1, hs1, c2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n}","parent":["brabga","raleqbidv","eleq12d","adantr","oveq","simpr","df-cllaw","diff.hs0.s","diff.hs0.c","diff.hs1.c","diff.hs0.w","diff.hs1.w","diff.wa.s","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs1.s"],"children":["clcllaw","mgmplusgiopALT","clintopcllaw","mgm2mgm"]},{"name":"iscomlaw","content":"The predicate \"is a commutative operation\". (Contributed by AV, 20-Jan-2020.)","origin":"thm iscomlaw(setvar s0, setvar s1, class c0, class c1, class c2, class c3) {\n  |- wi(wa(wcel(c0, c1), wcel(c2, c3)), wb(wbr(c0, ccomlaw, c2), wral(s0, c2, wral(s1, c2, wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0)))))))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s0, c2)\n  -| diffsc(s1, c0)\n  -| diffsc(s1, c2)\n} = {\n  brabga(hs0, hs1, c0, c1, c2, c3, ccomlaw, wral(s0, c2, wral(s1, c2, wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0))))), wral(s0, cv(hs1), wral(s1, cv(hs1), wceq(co(cv(s0), cv(hs0), cv(s1)), co(cv(s1), cv(hs0), cv(s0))))))\n  raleqbidv(s0, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wral(s1, cv(hs1), wceq(co(cv(s0), cv(hs0), cv(s1)), co(cv(s1), cv(hs0), cv(s0)))), wral(s1, c2, wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0)))))\n  raleqbidv(s1, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wceq(co(cv(s0), cv(hs0), cv(s1)), co(cv(s1), cv(hs0), cv(s0))), wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0))))\n  simpr(wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  adantr(wceq(cv(hs0), c0), wceq(cv(hs1), c2), wb(wceq(co(cv(s0), cv(hs0), cv(s1)), co(cv(s1), cv(hs0), cv(s0))), wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0)))))\n  eqeq12d(co(cv(s0), cv(hs0), cv(s1)), co(cv(s1), cv(hs0), cv(s0)), co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0)), wceq(cv(hs0), c0))\n  oveq(cv(hs0), c0, cv(s0), cv(s1))\n  oveq(cv(hs0), c0, cv(s1), cv(s0))\n  df-comlaw(hs0, hs1, s0, s1)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c2)\n  diff.hs1.c(c0)\n  diff.hs1.c(c2)\n  diff.hs0.w(wral(s0, c2, wral(s1, c2, wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0))))))\n  diff.hs1.w(wral(s0, c2, wral(s1, c2, wceq(co(cv(s0), c0, cv(s1)), co(cv(s1), c0, cv(s0))))))\n  diff.wa.s(s0, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s0, cv(hs0), c0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.wceq.s(s0, cv(hs1), c2)\n  diff.cv.s(s0, hs1)\n  diffss.ex(s0, hs1)\n  diff.wa.s(s1, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s1, cv(hs0), c0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.wceq.s(s1, cv(hs1), c2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n}","pretty":"thm iscomlaw(setvar s0, setvar s1, class c0, class c1, class c2, class c3) {\n  ⊢ ((c0 ∈ c1 ∧ c2 ∈ c3)→(c0[comLaw]c2 ↔ ∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)=(s1[c0]s0)))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s0, c2)\n  ⊣ d(s1, c0)\n  ⊣ d(s1, c2)\n} = {\n  brabga(hs0, hs1, c0, c1, c2, c3, ccomlaw, ∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)=(s1[c0]s0))), ∀(s0 ∈ hs1, ∀(s1 ∈ hs1,(s0[hs0]s1)=(s1[hs0]s0))))\n  raleqbidv(s0, hs1, c2, (hs0 = c0 ∧ hs1 = c2), ∀(s1 ∈ hs1,(s0[hs0]s1)=(s1[hs0]s0)), ∀(s1 ∈ c2,(s0[c0]s1)=(s1[c0]s0)))\n  raleqbidv(s1, hs1, c2, (hs0 = c0 ∧ hs1 = c2), (s0[hs0]s1)=(s1[hs0]s0), (s0[c0]s1)=(s1[c0]s0))\n  simpr(hs0 = c0, hs1 = c2)\n  adantr(hs0 = c0, hs1 = c2, ((s0[hs0]s1)=(s1[hs0]s0)↔(s0[c0]s1)=(s1[c0]s0)))\n  eqeq12d((s0[hs0]s1), (s1[hs0]s0), (s0[c0]s1), (s1[c0]s0), hs0 = c0)\n  oveq(hs0, c0, s0, s1)\n  oveq(hs0, c0, s1, s0)\n  df-comlaw(hs0, hs1, s0, s1)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c2)\n  diff.hs1.c(c0)\n  diff.hs1.c(c2)\n  diff.hs0.w(∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)=(s1[c0]s0))))\n  diff.hs1.w(∀(s0 ∈ c2, ∀(s1 ∈ c2,(s0[c0]s1)=(s1[c0]s0))))\n  diff.wa.s(s0, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s0, hs0, c0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.wceq.s(s0, hs1, c2)\n  diff.cv.s(s0, hs1)\n  diffss.ex(s0, hs1)\n  diff.wa.s(s1, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s1, hs0, c0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.wceq.s(s1, hs1, c2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n}","parent":["brabga","raleqbidv","simpr","adantr","eqeq12d","oveq","df-comlaw","diff.hs0.s","diff.hs0.c","diff.hs1.c","diff.hs0.w","diff.hs1.w","diff.wa.s","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs1.s"],"children":[]},{"name":"clcllaw","content":"Closure of a closed operation. (Contributed by FL, 14-Sep-2010.) (Revised by AV, 21-Jan-2020.)","origin":"thm clcllaw(class c0, class c1, class c2, class c3) {\n  |- wi(w3a(wbr(c0, ccllaw, c1), wcel(c2, c1), wcel(c3, c1)), wcel(co(c2, c0, c3), c1))\n} = {\n  3impib(wbr(c0, ccllaw, c1), wcel(c2, c1), wcel(c3, c1), wcel(co(c2, c0, c3), c1))\n  mpcom(wbr(c0, ccllaw, c1), wi(wa(wcel(c2, c1), wcel(c3, c1)), wcel(co(c2, c0, c3), c1)), wa(wcel(c0, universe), wcel(c1, universe)))\n  bropaex12(hs2, hs3, c0, ccllaw, c1, wral(hs0, cv(hs3), wral(hs1, cv(hs3), wcel(co(cv(hs0), cv(hs2), cv(hs1)), cv(hs3)))))\n  df-cllaw(hs2, hs3, hs0, hs1)\n  syl6bi(wa(wcel(c0, universe), wcel(c1, universe)), wbr(c0, ccllaw, c1), wi(wa(wcel(c2, c1), wcel(c3, c1)), wcel(co(c2, c0, c3), c1)), wral(hs0, c1, wral(hs1, c1, wcel(co(cv(hs0), c0, cv(hs1)), c1))))\n  iscllaw(hs0, hs1, c0, universe, c1, universe)\n  expcom(wral(hs0, c1, wral(hs1, c1, wcel(co(cv(hs0), c0, cv(hs1)), c1))), wa(wcel(c2, c1), wcel(c3, c1)), wcel(co(c2, c0, c3), c1))\n  ovrspc2v(hs0, hs1, c2, c1, c3, c1, c0, c1)\n  diff.hs2.s(hs3)\n  diff.hs2.c(c0)\n  diff.hs2.c(c1)\n  diff.hs3.c(c0)\n  diff.hs3.c(c1)\n  diff.hs3.s(hs0)\n  diff.hs3.s(hs1)\n  diff.hs2.s(hs0)\n  diff.hs2.s(hs1)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c1)\n  diff.hs1.c(c0)\n  diff.hs1.c(c1)\n  diff.hs0.c(c2)\n  diff.hs1.c(c2)\n  diff.hs1.c(c3)\n}","pretty":"thm clcllaw(class c0, class c1, class c2, class c3) {\n  ⊢ ((c0[clLaw]c1 ∧ c2 ∈ c1 ∧ c3 ∈ c1)→(c2[c0]c3)∈ c1)\n} = {\n  3impib(c0[clLaw]c1, c2 ∈ c1, c3 ∈ c1, (c2[c0]c3)∈ c1)\n  mpcom(c0[clLaw]c1, ((c2 ∈ c1 ∧ c3 ∈ c1)→(c2[c0]c3)∈ c1), (c0 ∈ 𝕌 ∧ c1 ∈ 𝕌))\n  bropaex12(hs2, hs3, c0, ccllaw, c1, ∀(hs0 ∈ hs3, ∀(hs1 ∈ hs3,(hs0[hs2]hs1)∈ hs3)))\n  df-cllaw(hs2, hs3, hs0, hs1)\n  syl6bi((c0 ∈ 𝕌 ∧ c1 ∈ 𝕌), c0[clLaw]c1, ((c2 ∈ c1 ∧ c3 ∈ c1)→(c2[c0]c3)∈ c1), ∀(hs0 ∈ c1, ∀(hs1 ∈ c1,(hs0[c0]hs1)∈ c1)))\n  iscllaw(hs0, hs1, c0, universe, c1, universe)\n  expcom(∀(hs0 ∈ c1, ∀(hs1 ∈ c1,(hs0[c0]hs1)∈ c1)), (c2 ∈ c1 ∧ c3 ∈ c1), (c2[c0]c3)∈ c1)\n  ovrspc2v(hs0, hs1, c2, c1, c3, c1, c0, c1)\n  diff.hs2.s(hs3)\n  diff.hs2.c(c0)\n  diff.hs2.c(c1)\n  diff.hs3.c(c0)\n  diff.hs3.c(c1)\n  diff.hs3.s(hs0)\n  diff.hs3.s(hs1)\n  diff.hs2.s(hs0)\n  diff.hs2.s(hs1)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c1)\n  diff.hs1.c(c0)\n  diff.hs1.c(c1)\n  diff.hs0.c(c2)\n  diff.hs1.c(c2)\n  diff.hs1.c(c3)\n}","parent":["3impib","mpcom","bropaex12","df-cllaw","syl6bi","iscllaw","expcom","ovrspc2v","diff.hs2.s","diff.hs2.c","diff.hs3.c","diff.hs3.s","diff.hs0.s","diff.hs0.c","diff.hs1.c"],"children":[]},{"name":"isasslaw","content":"The predicate \"is an associative operation\". (Contributed by FL, 1-Nov-2009.) (Revised by AV, 13-Jan-2020.)","origin":"thm isasslaw(setvar s0, setvar s1, setvar s2, class c0, class c1, class c2, class c3) {\n  |- wi(wa(wcel(c0, c1), wcel(c2, c3)), wb(wbr(c0, casslaw, c2), wral(s0, c2, wral(s1, c2, wral(s2, c2, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2)))))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s0, c2)\n  -| diffsc(s1, c0)\n  -| diffsc(s1, c2)\n  -| diffsc(s2, c0)\n  -| diffsc(s2, c2)\n} = {\n  brabga(hs0, hs1, c0, c1, c2, c3, casslaw, wral(s0, c2, wral(s1, c2, wral(s2, c2, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))), wral(s0, cv(hs1), wral(s1, cv(hs1), wral(s2, cv(hs1), wceq(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2))))))))\n  raleqbidv(s0, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wral(s1, cv(hs1), wral(s2, cv(hs1), wceq(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2)))))), wral(s1, c2, wral(s2, c2, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2)))))))\n  raleqbidv(s1, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wral(s2, cv(hs1), wceq(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2))))), wral(s2, c2, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))\n  raleqbidv(s2, cv(hs1), c2, wa(wceq(cv(hs0), c0), wceq(cv(hs1), c2)), wceq(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2)))), wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2)))))\n  simpr(wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  adantr(wceq(cv(hs0), c0), wceq(cv(hs1), c2), wb(wceq(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2)))), wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))\n  eqeq12d(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2))), co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))), wceq(cv(hs0), c0))\n  oveq123d(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2), co(cv(s0), c0, cv(s1)), c0, cv(s2), wceq(cv(hs0), c0))\n  oveq(cv(hs0), c0, cv(s0), cv(s1))\n  eqidd(cv(s2), wceq(cv(hs0), c0))\n  oveq123d(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2)), cv(s0), c0, co(cv(s1), c0, cv(s2)), wceq(cv(hs0), c0))\n  id(wceq(cv(hs0), c0))\n  eqidd(cv(s0), wceq(cv(hs0), c0))\n  oveq(cv(hs0), c0, cv(s1), cv(s2))\n  df-asslaw(hs0, hs1, s0, s1, s2)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c2)\n  diff.hs1.c(c0)\n  diff.hs1.c(c2)\n  diff.hs0.w(wral(s0, c2, wral(s1, c2, wral(s2, c2, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))))\n  diff.hs1.w(wral(s0, c2, wral(s1, c2, wral(s2, c2, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))))\n  diff.wa.s(s0, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s0, cv(hs0), c0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.wceq.s(s0, cv(hs1), c2)\n  diff.cv.s(s0, hs1)\n  diffss.ex(s0, hs1)\n  diff.wa.s(s1, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s1, cv(hs0), c0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.wceq.s(s1, cv(hs1), c2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.wa.s(s2, wceq(cv(hs0), c0), wceq(cv(hs1), c2))\n  diff.wceq.s(s2, cv(hs0), c0)\n  diff.cv.s(s2, hs0)\n  diffss.ex(s2, hs0)\n  diff.wceq.s(s2, cv(hs1), c2)\n  diff.cv.s(s2, hs1)\n  diffss.ex(s2, hs1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs1.s(s2)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.s(s2)\n}","pretty":"thm isasslaw(setvar s0, setvar s1, setvar s2, class c0, class c1, class c2, class c3) {\n  ⊢ ((c0 ∈ c1 ∧ c2 ∈ c3)→(c0[assLaw]c2 ↔ ∀(s0 ∈ c2, ∀(s1 ∈ c2, ∀(s2 ∈ c2,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2)))))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s0, c2)\n  ⊣ d(s1, c0)\n  ⊣ d(s1, c2)\n  ⊣ d(s2, c0)\n  ⊣ d(s2, c2)\n} = {\n  brabga(hs0, hs1, c0, c1, c2, c3, casslaw, ∀(s0 ∈ c2, ∀(s1 ∈ c2, ∀(s2 ∈ c2,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))), ∀(s0 ∈ hs1, ∀(s1 ∈ hs1, ∀(s2 ∈ hs1,((s0[hs0]s1)[hs0]s2)=(s0[hs0](s1[hs0]s2))))))\n  raleqbidv(s0, hs1, c2, (hs0 = c0 ∧ hs1 = c2), ∀(s1 ∈ hs1, ∀(s2 ∈ hs1,((s0[hs0]s1)[hs0]s2)=(s0[hs0](s1[hs0]s2)))), ∀(s1 ∈ c2, ∀(s2 ∈ c2,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2)))))\n  raleqbidv(s1, hs1, c2, (hs0 = c0 ∧ hs1 = c2), ∀(s2 ∈ hs1,((s0[hs0]s1)[hs0]s2)=(s0[hs0](s1[hs0]s2))), ∀(s2 ∈ c2,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))\n  raleqbidv(s2, hs1, c2, (hs0 = c0 ∧ hs1 = c2), ((s0[hs0]s1)[hs0]s2)=(s0[hs0](s1[hs0]s2)), ((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2)))\n  simpr(hs0 = c0, hs1 = c2)\n  adantr(hs0 = c0, hs1 = c2, (((s0[hs0]s1)[hs0]s2)=(s0[hs0](s1[hs0]s2))↔((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))\n  eqeq12d(((s0[hs0]s1)[hs0]s2), (s0[hs0](s1[hs0]s2)), ((s0[c0]s1)[c0]s2), (s0[c0](s1[c0]s2)), hs0 = c0)\n  oveq123d((s0[hs0]s1), hs0, s2, (s0[c0]s1), c0, s2, hs0 = c0)\n  oveq(hs0, c0, s0, s1)\n  eqidd(s2, hs0 = c0)\n  oveq123d(s0, hs0, (s1[hs0]s2), s0, c0, (s1[c0]s2), hs0 = c0)\n  id(hs0 = c0)\n  eqidd(s0, hs0 = c0)\n  oveq(hs0, c0, s1, s2)\n  df-asslaw(hs0, hs1, s0, s1, s2)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c2)\n  diff.hs1.c(c0)\n  diff.hs1.c(c2)\n  diff.hs0.w(∀(s0 ∈ c2, ∀(s1 ∈ c2, ∀(s2 ∈ c2,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))))\n  diff.hs1.w(∀(s0 ∈ c2, ∀(s1 ∈ c2, ∀(s2 ∈ c2,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))))\n  diff.wa.s(s0, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s0, hs0, c0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.wceq.s(s0, hs1, c2)\n  diff.cv.s(s0, hs1)\n  diffss.ex(s0, hs1)\n  diff.wa.s(s1, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s1, hs0, c0)\n  diff.cv.s(s1, hs0)\n  diffss.ex(s1, hs0)\n  diff.wceq.s(s1, hs1, c2)\n  diff.cv.s(s1, hs1)\n  diffss.ex(s1, hs1)\n  diff.wa.s(s2, hs0 = c0, hs1 = c2)\n  diff.wceq.s(s2, hs0, c0)\n  diff.cv.s(s2, hs0)\n  diffss.ex(s2, hs0)\n  diff.wceq.s(s2, hs1, c2)\n  diff.cv.s(s2, hs1)\n  diffss.ex(s2, hs1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs1.s(s2)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.s(s2)\n}","parent":["brabga","raleqbidv","simpr","adantr","eqeq12d","oveq123d","oveq","eqidd","id","df-asslaw","diff.hs0.s","diff.hs0.c","diff.hs1.c","diff.hs0.w","diff.hs1.w","diff.wa.s","diff.wceq.s","diff.cv.s","diffss.ex","diff.hs1.s"],"children":["asslawass","sgrpplusgaopALT","isassintop","assintopass","sgrp2sgrp"]},{"name":"asslawass","content":"Associativity of an associative operation. (Contributed by FL, 2-Nov-2009.) (Revised by AV, 21-Jan-2020.)","origin":"thm asslawass(setvar s0, setvar s1, setvar s2, class c0, class c1) {\n  |- wi(wbr(c0, casslaw, c1), wral(s0, c1, wral(s1, c1, wral(s2, c1, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s0, c1)\n  -| diffsc(s1, c0)\n  -| diffsc(s1, c1)\n  -| diffsc(s2, c0)\n  -| diffsc(s2, c1)\n} = {\n  ibi(wbr(c0, casslaw, c1), wral(s0, c1, wral(s1, c1, wral(s2, c1, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2))))))))\n  syl(wbr(c0, casslaw, c1), wb(wbr(c0, casslaw, c1), wral(s0, c1, wral(s1, c1, wral(s2, c1, wceq(co(co(cv(s0), c0, cv(s1)), c0, cv(s2)), co(cv(s0), c0, co(cv(s1), c0, cv(s2)))))))), wa(wcel(c0, universe), wcel(c1, universe)))\n  bropaex12(hs0, hs1, c0, casslaw, c1, wral(s0, cv(hs1), wral(s1, cv(hs1), wral(s2, cv(hs1), wceq(co(co(cv(s0), cv(hs0), cv(s1)), cv(hs0), cv(s2)), co(cv(s0), cv(hs0), co(cv(s1), cv(hs0), cv(s2))))))))\n  df-asslaw(hs0, hs1, s0, s1, s2)\n  isasslaw(s0, s1, s2, c0, universe, c1, universe)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c1)\n  diff.hs1.c(c0)\n  diff.hs1.c(c1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs1.s(s2)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.s(s2)\n}","pretty":"thm asslawass(setvar s0, setvar s1, setvar s2, class c0, class c1) {\n  ⊢ (c0[assLaw]c1 → ∀(s0 ∈ c1, ∀(s1 ∈ c1, ∀(s2 ∈ c1,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s0, c1)\n  ⊣ d(s1, c0)\n  ⊣ d(s1, c1)\n  ⊣ d(s2, c0)\n  ⊣ d(s2, c1)\n} = {\n  ibi(c0[assLaw]c1, ∀(s0 ∈ c1, ∀(s1 ∈ c1, ∀(s2 ∈ c1,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2))))))\n  syl(c0[assLaw]c1, (c0[assLaw]c1 ↔ ∀(s0 ∈ c1, ∀(s1 ∈ c1, ∀(s2 ∈ c1,((s0[c0]s1)[c0]s2)=(s0[c0](s1[c0]s2)))))), (c0 ∈ 𝕌 ∧ c1 ∈ 𝕌))\n  bropaex12(hs0, hs1, c0, casslaw, c1, ∀(s0 ∈ hs1, ∀(s1 ∈ hs1, ∀(s2 ∈ hs1,((s0[hs0]s1)[hs0]s2)=(s0[hs0](s1[hs0]s2))))))\n  df-asslaw(hs0, hs1, s0, s1, s2)\n  isasslaw(s0, s1, s2, c0, universe, c1, universe)\n  diff.hs0.s(hs1)\n  diff.hs0.c(c0)\n  diff.hs0.c(c1)\n  diff.hs1.c(c0)\n  diff.hs1.c(c1)\n  diff.hs1.s(s0)\n  diff.hs1.s(s1)\n  diff.hs1.s(s2)\n  diff.hs0.s(s0)\n  diff.hs0.s(s1)\n  diff.hs0.s(s2)\n}","parent":["ibi","syl","bropaex12","df-asslaw","isasslaw","diff.hs0.s","diff.hs0.c","diff.hs1.c","diff.hs1.s"],"children":[]},{"name":"mgmplusgiopALT","content":"Slot 2 (group operation) of a magma as extensible structure is a closed operation on the base set. (Contributed by AV, 13-Jan-2020.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm mgmplusgiopALT(class c0) {\n  |- wi(wcel(c0, cmgm), wbr(cfv(cplusg, c0), ccllaw, cfv(cbs, c0)))\n} = {\n  mpbird(wcel(c0, cmgm), wbr(cfv(cplusg, c0), ccllaw, cfv(cbs, c0)), wral(hs0, cfv(cbs, c0), wral(hs1, cfv(cbs, c0), wcel(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cbs, c0)))))\n  ralrimivva(hs0, hs1, cfv(cbs, c0), cfv(cbs, c0), wcel(c0, cmgm), wcel(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cbs, c0)))\n  3expb(wcel(c0, cmgm), wcel(cv(hs0), cfv(cbs, c0)), wcel(cv(hs1), cfv(cbs, c0)), wcel(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cbs, c0)))\n  mgmcl(c0, cv(hs0), cfv(cbs, c0), cv(hs1), cfv(cplusg, c0))\n  eqid(cfv(cbs, c0))\n  eqid(cfv(cplusg, c0))\n  mp1i(wcel(c0, cmgm), wb(wbr(cfv(cplusg, c0), ccllaw, cfv(cbs, c0)), wral(hs0, cfv(cbs, c0), wral(hs1, cfv(cbs, c0), wcel(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cbs, c0))))), wa(wcel(cfv(cplusg, c0), universe), wcel(cfv(cbs, c0), universe)))\n  pm3.2i(wcel(cfv(cplusg, c0), universe), wcel(cfv(cbs, c0), universe))\n  fvex(cplusg, c0)\n  fvex(cbs, c0)\n  iscllaw(hs0, hs1, cfv(cplusg, c0), universe, cfv(cbs, c0), universe)\n  diff.hs0.s(hs1)\n  diff.hs1.c(cfv(cbs, c0))\n  diff.hs0.w(wcel(c0, cmgm))\n  diff.hs1.w(wcel(c0, cmgm))\n  diff.hs0.c(cfv(cplusg, c0))\n  diff.hs0.c(cfv(cbs, c0))\n  diff.hs1.c(cfv(cplusg, c0))\n}","pretty":"thm mgmplusgiopALT(class c0) {\n  ⊢ (c0 ∈ Mgm →(+ ` c0)[clLaw](Base ` c0))\n} = {\n  mpbird(c0 ∈ Mgm, (+ ` c0)[clLaw](Base ` c0), ∀(hs0 ∈(Base ` c0), ∀(hs1 ∈(Base ` c0),(hs0[(+ ` c0)]hs1)∈(Base ` c0))))\n  ralrimivva(hs0, hs1, (Base ` c0), (Base ` c0), c0 ∈ Mgm, (hs0[(+ ` c0)]hs1)∈(Base ` c0))\n  3expb(c0 ∈ Mgm, hs0 ∈(Base ` c0), hs1 ∈(Base ` c0), (hs0[(+ ` c0)]hs1)∈(Base ` c0))\n  mgmcl(c0, hs0, (Base ` c0), hs1, (+ ` c0))\n  eqid((Base ` c0))\n  eqid((+ ` c0))\n  mp1i(c0 ∈ Mgm, ((+ ` c0)[clLaw](Base ` c0)↔ ∀(hs0 ∈(Base ` c0), ∀(hs1 ∈(Base ` c0),(hs0[(+ ` c0)]hs1)∈(Base ` c0)))), ((+ ` c0)∈ 𝕌 ∧(Base ` c0)∈ 𝕌))\n  pm3.2i((+ ` c0)∈ 𝕌, (Base ` c0)∈ 𝕌)\n  fvex(cplusg, c0)\n  fvex(cbs, c0)\n  iscllaw(hs0, hs1, (+ ` c0), universe, (Base ` c0), universe)\n  diff.hs0.s(hs1)\n  diff.hs1.c((Base ` c0))\n  diff.hs0.w(c0 ∈ Mgm)\n  diff.hs1.w(c0 ∈ Mgm)\n  diff.hs0.c((+ ` c0))\n  diff.hs0.c((Base ` c0))\n  diff.hs1.c((+ ` c0))\n}","parent":["mpbird","ralrimivva","3expb","mgmcl","eqid","mp1i","pm3.2i","fvex","iscllaw","diff.hs0.s","diff.hs1.c","diff.hs0.w","diff.hs1.w","diff.hs0.c"],"children":["mgm2mgm"]},{"name":"sgrpplusgaopALT","content":"Slot 2 (group operation) of a semigroup as extensible structure is an associative operation on the base set. (Contributed by AV, 13-Jan-2020.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm sgrpplusgaopALT(class c0) {\n  |- wi(wcel(c0, csgrp), wbr(cfv(cplusg, c0), casslaw, cfv(cbs, c0)))\n} = {\n  3imtr4i(wcel(c0, csgrp), wbr(cfv(cplusg, c0), casslaw, cfv(cbs, c0)), wa(wcel(c0, cmgm), wral(hs0, cfv(cbs, c0), wral(hs1, cfv(cbs, c0), wral(hs2, cfv(cbs, c0), wceq(co(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cplusg, c0), cv(hs2)), co(cv(hs0), cfv(cplusg, c0), co(cv(hs1), cfv(cplusg, c0), cv(hs2)))))))), wral(hs0, cfv(cbs, c0), wral(hs1, cfv(cbs, c0), wral(hs2, cfv(cbs, c0), wceq(co(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cplusg, c0), cv(hs2)), co(cv(hs0), cfv(cplusg, c0), co(cv(hs1), cfv(cplusg, c0), cv(hs2))))))))\n  simpr(wcel(c0, cmgm), wral(hs0, cfv(cbs, c0), wral(hs1, cfv(cbs, c0), wral(hs2, cfv(cbs, c0), wceq(co(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cplusg, c0), cv(hs2)), co(cv(hs0), cfv(cplusg, c0), co(cv(hs1), cfv(cplusg, c0), cv(hs2))))))))\n  issgrp(hs0, hs1, hs2, c0, cfv(cbs, c0), cfv(cplusg, c0))\n  eqid(cfv(cbs, c0))\n  eqid(cfv(cplusg, c0))\n  mp2an(wb(wbr(cfv(cplusg, c0), casslaw, cfv(cbs, c0)), wral(hs0, cfv(cbs, c0), wral(hs1, cfv(cbs, c0), wral(hs2, cfv(cbs, c0), wceq(co(co(cv(hs0), cfv(cplusg, c0), cv(hs1)), cfv(cplusg, c0), cv(hs2)), co(cv(hs0), cfv(cplusg, c0), co(cv(hs1), cfv(cplusg, c0), cv(hs2)))))))), wcel(cfv(cplusg, c0), universe), wcel(cfv(cbs, c0), universe))\n  fvex(cplusg, c0)\n  fvex(cbs, c0)\n  isasslaw(hs0, hs1, hs2, cfv(cplusg, c0), universe, cfv(cbs, c0), universe)\n  diff.hs0.s(hs1)\n  diff.hs0.s(hs2)\n  diff.hs1.s(hs2)\n  diff.hs0.c(c0)\n  diff.hs0.c(cfv(cbs, c0))\n  diff.hs0.c(cfv(cplusg, c0))\n  diff.hs1.c(c0)\n  diff.hs1.c(cfv(cbs, c0))\n  diff.hs1.c(cfv(cplusg, c0))\n  diff.hs2.c(c0)\n  diff.hs2.c(cfv(cbs, c0))\n  diff.hs2.c(cfv(cplusg, c0))\n}","pretty":"thm sgrpplusgaopALT(class c0) {\n  ⊢ (c0 ∈ SGrp →(+ ` c0)[assLaw](Base ` c0))\n} = {\n  3imtr4i(c0 ∈ SGrp, (+ ` c0)[assLaw](Base ` c0), (c0 ∈ Mgm ∧ ∀(hs0 ∈(Base ` c0), ∀(hs1 ∈(Base ` c0), ∀(hs2 ∈(Base ` c0),((hs0[(+ ` c0)]hs1)[(+ ` c0)]hs2)=(hs0[(+ ` c0)](hs1[(+ ` c0)]hs2)))))), ∀(hs0 ∈(Base ` c0), ∀(hs1 ∈(Base ` c0), ∀(hs2 ∈(Base ` c0),((hs0[(+ ` c0)]hs1)[(+ ` c0)]hs2)=(hs0[(+ ` c0)](hs1[(+ ` c0)]hs2))))))\n  simpr(c0 ∈ Mgm, ∀(hs0 ∈(Base ` c0), ∀(hs1 ∈(Base ` c0), ∀(hs2 ∈(Base ` c0),((hs0[(+ ` c0)]hs1)[(+ ` c0)]hs2)=(hs0[(+ ` c0)](hs1[(+ ` c0)]hs2))))))\n  issgrp(hs0, hs1, hs2, c0, (Base ` c0), (+ ` c0))\n  eqid((Base ` c0))\n  eqid((+ ` c0))\n  mp2an(((+ ` c0)[assLaw](Base ` c0)↔ ∀(hs0 ∈(Base ` c0), ∀(hs1 ∈(Base ` c0), ∀(hs2 ∈(Base ` c0),((hs0[(+ ` c0)]hs1)[(+ ` c0)]hs2)=(hs0[(+ ` c0)](hs1[(+ ` c0)]hs2)))))), (+ ` c0)∈ 𝕌, (Base ` c0)∈ 𝕌)\n  fvex(cplusg, c0)\n  fvex(cbs, c0)\n  isasslaw(hs0, hs1, hs2, (+ ` c0), universe, (Base ` c0), universe)\n  diff.hs0.s(hs1)\n  diff.hs0.s(hs2)\n  diff.hs1.s(hs2)\n  diff.hs0.c(c0)\n  diff.hs0.c((Base ` c0))\n  diff.hs0.c((+ ` c0))\n  diff.hs1.c(c0)\n  diff.hs1.c((Base ` c0))\n  diff.hs1.c((+ ` c0))\n  diff.hs2.c(c0)\n  diff.hs2.c((Base ` c0))\n  diff.hs2.c((+ ` c0))\n}","parent":["3imtr4i","simpr","issgrp","eqid","mp2an","fvex","isasslaw","diff.hs0.s","diff.hs1.s","diff.hs0.c","diff.hs1.c","diff.hs2.c"],"children":[]}]}