{"index":59,"title":"Axiom scheme ax-9 (Right Equality for Binary Predicate)","content":"","blocks":[{"name":"ax-9","content":"Axiom of Right Equality for Binary Predicate. One of the equality and substitution axioms for a non-logical predicate in our predicate calculus with equality. It substitutes equal variables into the right-hand side of an arbitrary binary predicate ` e. ` , which we will use for the set membership relation when set theory is introduced. This axiom scheme is a sub-scheme of Axiom Scheme B8 of system S2 of [Tarski], p. 75, whose general form cannot be represented with our notation. Also appears as Axiom scheme C13' in [Megill] p. 448 (p. 16 of the preprint). We prove in ~ ax9 that this axiom can be recovered from its weakened version ~ ax9v where ` x ` and ` y ` are assumed to be disjoint variables. In particular, the only theorem referencing ~ ax-9 should be ~ ax9v . See the comment of ~ ax9v for more details on these matters. (Contributed by NM, 21-Jun-1993.) (Revised by BJ, 7-Dec-2020.) Use ~ ax9 instead. (New usage is discouraged.)","origin":"axiom ax-9(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n}","pretty":"axiom ax-9(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 →(s2 ∈ s0 → s2 ∈ s1))\n}","parent":[],"children":["ax9v"]},{"name":"ax9v","content":"Weakened version of ~ ax-9 , with a disjoint variable condition on ` x , y ` . This should be the only proof referencing ~ ax-9 , and it should be referenced only by its two weakened versions ~ ax9v1 and ~ ax9v2 , from which ~ ax-9 is then rederived as ~ ax9 , which shows that either ~ ax9v or the conjunction of ~ ax9v1 and ~ ax9v2 is sufficient. (Contributed by BJ, 7-Dec-2020.) Use ~ ax9 instead. (New usage is discouraged.)","origin":"thm ax9v(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  -| diffss(s0, s1)\n} = {\n  a1ii(wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)))), diffss(s0, s1))\n  ax-9(s0, s1, s2)\n}","pretty":"thm ax9v(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 →(s2 ∈ s0 → s2 ∈ s1))\n  ⊣ d(s0, s1)\n} = {\n  a1ii((s0 = s1 →(s2 ∈ s0 → s2 ∈ s1)), d(s0, s1))\n  ax-9(s0, s1, s2)\n}","parent":["a1ii","ax-9"],"children":["ax9v1","ax9v2"]},{"name":"ax9v1","content":"First of two weakened versions of ~ ax9v , with an extra disjoint variable condition on ` x , z ` , see comments there. (Contributed by BJ, 7-Dec-2020.)","origin":"thm ax9v1(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n} = {\n  a1ii(wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)))), diffss(s0, s2))\n  ax9v(s0, s1, s2)\n}","pretty":"thm ax9v1(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 →(s2 ∈ s0 → s2 ∈ s1))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n} = {\n  a1ii((s0 = s1 →(s2 ∈ s0 → s2 ∈ s1)), d(s0, s2))\n  ax9v(s0, s1, s2)\n}","parent":["a1ii","ax9v"],"children":["ax9"]},{"name":"ax9v2","content":"Second of two weakened versions of ~ ax9v , with an extra disjoint variable condition on ` y , z ` see comments there. (Contributed by BJ, 7-Dec-2020.)","origin":"thm ax9v2(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n} = {\n  a1ii(wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)))), diffss(s1, s2))\n  ax9v(s0, s1, s2)\n}","pretty":"thm ax9v2(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 →(s2 ∈ s0 → s2 ∈ s1))\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n} = {\n  a1ii((s0 = s1 →(s2 ∈ s0 → s2 ∈ s1)), d(s1, s2))\n  ax9v(s0, s1, s2)\n}","parent":["a1ii","ax9v"],"children":["ax9"]},{"name":"ax9","content":"Proof of ~ ax-9 from ~ ax9v1 and ~ ax9v2 , proving sufficiency of the conjunction of the latter two weakened versions of ~ ax9v , which is itself a weakened version of ~ ax-9 . (Contributed by BJ, 7-Dec-2020.) (Proof shortened by Wolf Lammen, 11-Apr-2021.)","origin":"thm ax9(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n} = {\n  sylbi(wceq(cv(s0), cv(s1)), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))), wex(hs0, wa(wceq(cv(hs0), cv(s0)), wceq(cv(hs0), cv(s1)))))\n  equvinv(s0, s1, hs0)\n  exlimiv(hs0, wa(wceq(cv(hs0), cv(s0)), wceq(cv(hs0), cv(s1))), wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  sylan9(wceq(cv(hs0), cv(s0)), wceq(cv(hs0), cv(s1)), wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)), wcel(cv(s2), cv(hs0)))\n  equcoms(hs0, s0, wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(hs0))))\n  ax9v2(s0, hs0, s2)\n  ax9v1(hs0, s1, s2)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.w(wi(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  diff.hs0.s(s2)\n  diff.hs0.s(s1)\n}","pretty":"thm ax9(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 →(s2 ∈ s0 → s2 ∈ s1))\n} = {\n  sylbi(s0 = s1, (s2 ∈ s0 → s2 ∈ s1), ∃(hs0,(hs0 = s0 ∧ hs0 = s1)))\n  equvinv(s0, s1, hs0)\n  exlimiv(hs0, (hs0 = s0 ∧ hs0 = s1), (s2 ∈ s0 → s2 ∈ s1))\n  sylan9(hs0 = s0, hs0 = s1, s2 ∈ s0, s2 ∈ s1, s2 ∈ hs0)\n  equcoms(hs0, s0, (s2 ∈ s0 → s2 ∈ hs0))\n  ax9v2(s0, hs0, s2)\n  ax9v1(hs0, s1, s2)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.w((s2 ∈ s0 → s2 ∈ s1))\n  diff.hs0.s(s2)\n  diff.hs0.s(s1)\n}","parent":["sylbi","equvinv","exlimiv","sylan9","equcoms","ax9v2","ax9v1","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["elequ2","el","dtru","fv3","elirrv","bj-ax89","bj-el","bj-dtru","axc11next"]},{"name":"elequ2","content":"An identity law for the non-logical predicate. (Contributed by NM, 21-Jun-1993.)","origin":"thm elequ2(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wb(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n} = {\n  impbid(wceq(cv(s0), cv(s1)), wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)))\n  ax9(s0, s1, s2)\n  equcoms(s0, s1, wi(wcel(cv(s2), cv(s1)), wcel(cv(s2), cv(s0))))\n  ax9(s1, s0, s2)\n}","pretty":"thm elequ2(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 →(s2 ∈ s0 ↔ s2 ∈ s1))\n} = {\n  impbid(s0 = s1, s2 ∈ s0, s2 ∈ s1)\n  ax9(s0, s1, s2)\n  equcoms(s0, s1, (s2 ∈ s1 → s2 ∈ s0))\n  ax9(s1, s0, s2)\n}","parent":["impbid","ax9","equcoms"],"children":["ax12wdemo","dveel2","elsb4","axext3","axext3ALT","axext4","axextmo","bm1.1OLD","eleq2w","nfcvf","axrep1","axreplem","axrep4","axsep2","bm1.3ii","nalset","fv3","zfun","tz7.48lem","aceq1","aceq0","aceq2","dfac2a","kmlem4","axdc3lem2","zfac","nd2","nd3","axrepndlem2","axunndlem1","axunnd","axpowndlem2","axpowndlem3","axpowndlem4","axpownd","axregndlem2","axregnd","axinfndlem1","axacndlem5","zfcndrep","zfcndun","zfcndac","axgroth4","nqereu","mdetunilem9","neiptopnei","2ndc1stc","restlly","kqt0lem","regr1lem2","nrmr0reg","hauspwpwf1","dya2iocuni","erdsze","untsucf","untangtr","dfon2lem3","dfon2lem6","dfon2lem7","dfon2lem8","dfon2","axext4dist","distel","axextndbi","fness","fneref","bj-elequ2g","bj-elequ12","bj-axext3","bj-axrep1","bj-axrep2","bj-axrep3","bj-axrep4","bj-axc14nf","bj-axsep2","bj-bm1.3ii","matunitlindflem1","prtlem13","prtlem15","prtlem17","dveel2ALT","ax12el","aomclem8","elintima","axc11next"]}]}