{"index":1360,"title":"INT Inequalities Proof Generator","content":"This section formalizes theorems necessary to reproduce the equality and inequality generator described in \"Neural Theorem Proving on Inequality Problems\" ~ http://aitp-conference.org/2020/abstract/paper_18.pdf . Other theorems required: ~ 0red ~ 1red ~ readdcld ~ remulcld ~ eqcomd .","blocks":[{"name":"int-addcomd","content":"AdditionCommutativity generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-addcomd(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wceq(co(c0, caddc, c1), co(c1, caddc, c2)))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wceq(c2, c0))\n} = {\n  eqtrd(co(c0, caddc, c1), co(c1, caddc, c2), co(c1, caddc, c0), w0)\n  addcomd(c0, c1, w0)\n  recnd(c0, w0)\n  recnd(c1, w0)\n  oveq2d(c1, caddc, c0, c2, w0)\n  eqcomd(c0, c2, w0)\n}","pretty":"thm int-addcomd(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 →(c0[+]c1)=(c1[+]c2))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c2 = c0)\n} = {\n  eqtrd((c0[+]c1), (c1[+]c2), (c1[+]c0), w0)\n  addcomd(c0, c1, w0)\n  recnd(c0, w0)\n  recnd(c1, w0)\n  oveq2d(c1, caddc, c0, c2, w0)\n  eqcomd(c0, c2, w0)\n}","parent":["eqtrd","addcomd","recnd","oveq2d","eqcomd"],"children":[]},{"name":"int-addassocd","content":"AdditionAssociativity generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-addassocd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(co(c0, caddc, co(c1, caddc, c2)), co(co(c3, caddc, c1), caddc, c2)))\n  -| wi(w0, wcel(c3, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wceq(c3, c0))\n} = {\n  eqtr2d(co(c0, caddc, co(c1, caddc, c2)), co(co(c3, caddc, c1), caddc, c2), co(c3, caddc, co(c1, caddc, c2)), w0)\n  addassd(c3, c1, c2, w0)\n  recnd(c3, w0)\n  recnd(c1, w0)\n  recnd(c2, w0)\n  oveq1d(c3, caddc, co(c1, caddc, c2), c0, w0)\n}","pretty":"thm int-addassocd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →(c0[+](c1[+]c2))=((c3[+]c1)[+]c2))\n  ⊣ (w0 → c3 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c3 = c0)\n} = {\n  eqtr2d((c0[+](c1[+]c2)), ((c3[+]c1)[+]c2), (c3[+](c1[+]c2)), w0)\n  addassd(c3, c1, c2, w0)\n  recnd(c3, w0)\n  recnd(c1, w0)\n  recnd(c2, w0)\n  oveq1d(c3, caddc, (c1[+]c2), c0, w0)\n}","parent":["eqtr2d","addassd","recnd","oveq1d"],"children":[]},{"name":"int-addsimpd","content":"AdditionSimplification generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-addsimpd(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(nat0, co(c0, cmin, c1)))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  eqcomd(nat0, co(c0, cmin, c1), w0)\n  subeq0bd(c0, c1, w0)\n  recnd(c0, w0)\n}","pretty":"thm int-addsimpd(class c0, class c1, wff w0) {\n  ⊢ (w0 → 0 =(c0[-]c1))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  eqcomd(nat0, (c0[-]c1), w0)\n  subeq0bd(c0, c1, w0)\n  recnd(c0, w0)\n}","parent":["eqcomd","subeq0bd","recnd"],"children":[]},{"name":"int-mulcomd","content":"MultiplicationCommutativity generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-mulcomd(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wceq(co(c0, cmul, c1), co(c1, cmul, c2)))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wceq(c2, c0))\n} = {\n  eqtrd(co(c0, cmul, c1), co(c1, cmul, c2), co(c1, cmul, c0), w0)\n  mulcomd(c0, c1, w0)\n  recnd(c0, w0)\n  recnd(c1, w0)\n  oveq2d(c1, cmul, c0, c2, w0)\n  eqcomd(c0, c2, w0)\n}","pretty":"thm int-mulcomd(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 →(c0[×]c1)=(c1[×]c2))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c2 = c0)\n} = {\n  eqtrd((c0[×]c1), (c1[×]c2), (c1[×]c0), w0)\n  mulcomd(c0, c1, w0)\n  recnd(c0, w0)\n  recnd(c1, w0)\n  oveq2d(c1, cmul, c0, c2, w0)\n  eqcomd(c0, c2, w0)\n}","parent":["eqtrd","mulcomd","recnd","oveq2d","eqcomd"],"children":[]},{"name":"int-mulassocd","content":"MultiplicationAssociativity generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-mulassocd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(co(c0, cmul, co(c1, cmul, c2)), co(co(c3, cmul, c1), cmul, c2)))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wceq(c3, c0))\n} = {\n  eqtr3d(co(c0, cmul, co(c1, cmul, c2)), co(co(c3, cmul, c1), cmul, c2), co(co(c0, cmul, c1), cmul, c2), w0)\n  mulassd(c0, c1, c2, w0)\n  recnd(c0, w0)\n  recnd(c1, w0)\n  recnd(c2, w0)\n  oveq1d(co(c0, cmul, c1), cmul, c2, co(c3, cmul, c1), w0)\n  oveq1d(c0, cmul, c1, c3, w0)\n  eqcomd(c0, c3, w0)\n}","pretty":"thm int-mulassocd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →(c0[×](c1[×]c2))=((c3[×]c1)[×]c2))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c3 = c0)\n} = {\n  eqtr3d((c0[×](c1[×]c2)), ((c3[×]c1)[×]c2), ((c0[×]c1)[×]c2), w0)\n  mulassd(c0, c1, c2, w0)\n  recnd(c0, w0)\n  recnd(c1, w0)\n  recnd(c2, w0)\n  oveq1d((c0[×]c1), cmul, c2, (c3[×]c1), w0)\n  oveq1d(c0, cmul, c1, c3, w0)\n  eqcomd(c0, c3, w0)\n}","parent":["eqtr3d","mulassd","recnd","oveq1d","eqcomd"],"children":[]},{"name":"int-mulsimpd","content":"MultiplicationSimplification generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-mulsimpd(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(nat1, co(c0, cdiv, c1)))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wceq(c0, c1))\n  -| wi(w0, wne(c1, nat0))\n} = {\n  eqcomd(nat1, co(c0, cdiv, c1), w0)\n  diveq1bd(c0, c1, w0)\n  recnd(c1, w0)\n}","pretty":"thm int-mulsimpd(class c0, class c1, wff w0) {\n  ⊢ (w0 → 1 =(c0[÷]c1))\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n  ⊣ (w0 → c1 ≠ 0)\n} = {\n  eqcomd(nat1, (c0[÷]c1), w0)\n  diveq1bd(c0, c1, w0)\n  recnd(c1, w0)\n}","parent":["eqcomd","diveq1bd","recnd"],"children":[]},{"name":"int-leftdistd","content":"AdditionMultiplicationLeftDistribution generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-leftdistd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(co(co(c0, caddc, c1), cmul, c2), co(co(c0, cmul, c3), caddc, co(c1, cmul, c3))))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wceq(c3, c2))\n} = {\n  3eqtrd(co(co(c0, caddc, c1), cmul, c2), co(co(c0, cmul, c3), caddc, co(c1, cmul, c3)), co(co(c0, cmul, c2), caddc, co(c1, cmul, c2)), co(co(c1, cmul, c2), caddc, co(c0, cmul, c2)), w0)\n  adddird(c0, c1, c2, w0)\n  addcomd(co(c0, cmul, c2), co(c1, cmul, c2), w0)\n  eqtrd(co(co(c1, cmul, c2), caddc, co(c0, cmul, c2)), co(co(c0, cmul, c3), caddc, co(c1, cmul, c3)), co(co(c0, cmul, c2), caddc, co(c1, cmul, c2)), w0)\n  addcomd(co(c1, cmul, c2), co(c0, cmul, c2), w0)\n  mulcld(c1, c2, w0)\n  recnd(c1, w0)\n  mulcld(c0, c2, w0)\n  recnd(c0, w0)\n  recnd(c2, w0)\n  oveq12d(co(c0, cmul, c2), caddc, co(c1, cmul, c2), co(c0, cmul, c3), co(c1, cmul, c3), w0)\n  oveq2d(c0, cmul, c2, c3, w0)\n  oveq2d(c1, cmul, c2, c3, w0)\n  eqcomd(c2, c3, w0)\n}","pretty":"thm int-leftdistd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →((c0[+]c1)[×]c2)=((c0[×]c3)[+](c1[×]c3)))\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c3 = c2)\n} = {\n  3eqtrd(((c0[+]c1)[×]c2), ((c0[×]c3)[+](c1[×]c3)), ((c0[×]c2)[+](c1[×]c2)), ((c1[×]c2)[+](c0[×]c2)), w0)\n  adddird(c0, c1, c2, w0)\n  addcomd((c0[×]c2), (c1[×]c2), w0)\n  eqtrd(((c1[×]c2)[+](c0[×]c2)), ((c0[×]c3)[+](c1[×]c3)), ((c0[×]c2)[+](c1[×]c2)), w0)\n  addcomd((c1[×]c2), (c0[×]c2), w0)\n  mulcld(c1, c2, w0)\n  recnd(c1, w0)\n  mulcld(c0, c2, w0)\n  recnd(c0, w0)\n  recnd(c2, w0)\n  oveq12d((c0[×]c2), caddc, (c1[×]c2), (c0[×]c3), (c1[×]c3), w0)\n  oveq2d(c0, cmul, c2, c3, w0)\n  oveq2d(c1, cmul, c2, c3, w0)\n  eqcomd(c2, c3, w0)\n}","parent":["3eqtrd","adddird","addcomd","eqtrd","mulcld","recnd","oveq12d","oveq2d","eqcomd"],"children":[]},{"name":"int-rightdistd","content":"AdditionMultiplicationRightDistribution generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-rightdistd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(co(c0, cmul, co(c1, caddc, c2)), co(co(c3, cmul, c1), caddc, co(c3, cmul, c2))))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wceq(c3, c0))\n} = {\n  eqtrd(co(c0, cmul, co(c1, caddc, c2)), co(co(c3, cmul, c1), caddc, co(c3, cmul, c2)), co(co(c1, caddc, c2), cmul, c0), w0)\n  mulcomd(c0, co(c1, caddc, c2), w0)\n  addcld(c1, c2, w0)\n  joinlmuladdmuld(c1, c2, c0, co(co(c3, cmul, c1), caddc, co(c3, cmul, c2)), w0)\n  oveq12d(co(c1, cmul, c0), caddc, co(c2, cmul, c0), co(c3, cmul, c1), co(c3, cmul, c2), w0)\n  eqtrd(co(c1, cmul, c0), co(c3, cmul, c1), co(c0, cmul, c1), w0)\n  mulcomd(c1, c0, w0)\n  recnd(c1, w0)\n  oveq1d(c0, cmul, c1, c3, w0)\n  eqtrd(co(c2, cmul, c0), co(c3, cmul, c2), co(c0, cmul, c2), w0)\n  mulcomd(c2, c0, w0)\n  recnd(c2, w0)\n  recnd(c0, w0)\n  oveq1d(c0, cmul, c2, c3, w0)\n  eqcomd(c0, c3, w0)\n}","pretty":"thm int-rightdistd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →(c0[×](c1[+]c2))=((c3[×]c1)[+](c3[×]c2)))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c3 = c0)\n} = {\n  eqtrd((c0[×](c1[+]c2)), ((c3[×]c1)[+](c3[×]c2)), ((c1[+]c2)[×]c0), w0)\n  mulcomd(c0, (c1[+]c2), w0)\n  addcld(c1, c2, w0)\n  joinlmuladdmuld(c1, c2, c0, ((c3[×]c1)[+](c3[×]c2)), w0)\n  oveq12d((c1[×]c0), caddc, (c2[×]c0), (c3[×]c1), (c3[×]c2), w0)\n  eqtrd((c1[×]c0), (c3[×]c1), (c0[×]c1), w0)\n  mulcomd(c1, c0, w0)\n  recnd(c1, w0)\n  oveq1d(c0, cmul, c1, c3, w0)\n  eqtrd((c2[×]c0), (c3[×]c2), (c0[×]c2), w0)\n  mulcomd(c2, c0, w0)\n  recnd(c2, w0)\n  recnd(c0, w0)\n  oveq1d(c0, cmul, c2, c3, w0)\n  eqcomd(c0, c3, w0)\n}","parent":["eqtrd","mulcomd","addcld","joinlmuladdmuld","oveq12d","recnd","oveq1d","eqcomd"],"children":[]},{"name":"int-sqdefd","content":"SquareDefinition generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-sqdefd(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(co(c0, cmul, c1), co(c0, cexp, nat2)))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  eqcomd(co(c0, cmul, c1), co(c0, cexp, nat2), w0)\n  eqtrd(co(c0, cexp, nat2), co(c0, cmul, c1), co(c1, cexp, nat2), w0)\n  oveq1d(c0, cexp, nat2, c1, w0)\n  eqtrd(co(c1, cexp, nat2), co(c0, cmul, c1), co(c1, cmul, c1), w0)\n  sqvald(c1, w0)\n  recnd(c1, w0)\n  oveq1d(c1, cmul, c1, c0, w0)\n  mpbi(wi(w0, wceq(c1, c0)), wi(w0, wceq(c0, c1)))\n  imbi2i(w0, wceq(c0, c1), wceq(c1, c0))\n  eqcom(c0, c1)\n}","pretty":"thm int-sqdefd(class c0, class c1, wff w0) {\n  ⊢ (w0 →(c0[×]c1)=(c0[^]2))\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  eqcomd((c0[×]c1), (c0[^]2), w0)\n  eqtrd((c0[^]2), (c0[×]c1), (c1[^]2), w0)\n  oveq1d(c0, cexp, nat2, c1, w0)\n  eqtrd((c1[^]2), (c0[×]c1), (c1[×]c1), w0)\n  sqvald(c1, w0)\n  recnd(c1, w0)\n  oveq1d(c1, cmul, c1, c0, w0)\n  mpbi((w0 → c1 = c0), (w0 → c0 = c1))\n  imbi2i(w0, c0 = c1, c1 = c0)\n  eqcom(c0, c1)\n}","parent":["eqcomd","eqtrd","oveq1d","sqvald","recnd","mpbi","imbi2i","eqcom"],"children":[]},{"name":"int-mul11d","content":"First MultiplicationOne generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-mul11d(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(co(c0, cmul, nat1), c1))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  eqtrd(co(c0, cmul, nat1), c1, c0, w0)\n  mulid1d(c0, w0)\n  recnd(c0, w0)\n}","pretty":"thm int-mul11d(class c0, class c1, wff w0) {\n  ⊢ (w0 →(c0[×]1)= c1)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  eqtrd((c0[×]1), c1, c0, w0)\n  mulid1d(c0, w0)\n  recnd(c0, w0)\n}","parent":["eqtrd","mulid1d","recnd"],"children":[]},{"name":"int-mul12d","content":"Second MultiplicationOne generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-mul12d(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(co(nat1, cmul, c0), c1))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  eqtrd(co(nat1, cmul, c0), c1, c0, w0)\n  mulid2d(c0, w0)\n  recnd(c0, w0)\n}","pretty":"thm int-mul12d(class c0, class c1, wff w0) {\n  ⊢ (w0 →(1[×]c0)= c1)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  eqtrd((1[×]c0), c1, c0, w0)\n  mulid2d(c0, w0)\n  recnd(c0, w0)\n}","parent":["eqtrd","mulid2d","recnd"],"children":[]},{"name":"int-add01d","content":"First AdditionZero generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-add01d(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(co(c0, caddc, nat0), c1))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  eqtrd(co(c0, caddc, nat0), c1, c0, w0)\n  addid1d(c0, w0)\n  recnd(c0, w0)\n}","pretty":"thm int-add01d(class c0, class c1, wff w0) {\n  ⊢ (w0 →(c0[+]0)= c1)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  eqtrd((c0[+]0), c1, c0, w0)\n  addid1d(c0, w0)\n  recnd(c0, w0)\n}","parent":["eqtrd","addid1d","recnd"],"children":[]},{"name":"int-add02d","content":"Second AdditionZero generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-add02d(class c0, class c1, wff w0) {\n  |- wi(w0, wceq(co(nat0, caddc, c0), c1))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  eqtrd(co(nat0, caddc, c0), c1, c0, w0)\n  addid2d(c0, w0)\n  recnd(c0, w0)\n}","pretty":"thm int-add02d(class c0, class c1, wff w0) {\n  ⊢ (w0 →(0[+]c0)= c1)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  eqtrd((0[+]c0), c1, c0, w0)\n  addid2d(c0, w0)\n  recnd(c0, w0)\n}","parent":["eqtrd","addid2d","recnd"],"children":[]},{"name":"int-sqgeq0d","content":"SquareGEQZero generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-sqgeq0d(class c0, class c1, wff w0) {\n  |- wi(w0, wbr(nat0, cle, co(c0, cmul, c1)))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  breqtrd(nat0, cle, co(c0, cmul, c1), co(c0, cexp, nat2), w0)\n  sqge0d(c0, w0)\n  eqtrd(co(c0, cexp, nat2), co(c0, cmul, c1), co(c1, cexp, nat2), w0)\n  oveq1d(c0, cexp, nat2, c1, w0)\n  eqtrd(co(c1, cexp, nat2), co(c0, cmul, c1), co(c1, cmul, c1), w0)\n  sqvald(c1, w0)\n  recnd(c1, w0)\n  oveq1d(c1, cmul, c1, c0, w0)\n  mpbi(wi(w0, wceq(c1, c0)), wi(w0, wceq(c0, c1)))\n  imbi2i(w0, wceq(c0, c1), wceq(c1, c0))\n  eqcom(c0, c1)\n}","pretty":"thm int-sqgeq0d(class c0, class c1, wff w0) {\n  ⊢ (w0 → 0[≤](c0[×]c1))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c0 = c1)\n} = {\n  breqtrd(nat0, cle, (c0[×]c1), (c0[^]2), w0)\n  sqge0d(c0, w0)\n  eqtrd((c0[^]2), (c0[×]c1), (c1[^]2), w0)\n  oveq1d(c0, cexp, nat2, c1, w0)\n  eqtrd((c1[^]2), (c0[×]c1), (c1[×]c1), w0)\n  sqvald(c1, w0)\n  recnd(c1, w0)\n  oveq1d(c1, cmul, c1, c0, w0)\n  mpbi((w0 → c1 = c0), (w0 → c0 = c1))\n  imbi2i(w0, c0 = c1, c1 = c0)\n  eqcom(c0, c1)\n}","parent":["breqtrd","sqge0d","eqtrd","oveq1d","sqvald","recnd","mpbi","imbi2i","eqcom"],"children":[]},{"name":"int-eqprincd","content":"PrincipleOfEquality generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-eqprincd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(co(c0, caddc, c1), co(c2, caddc, c3)))\n  -| wi(w0, wceq(c0, c2))\n  -| wi(w0, wceq(c1, c3))\n} = {\n  oveq12d(c0, caddc, c1, c2, c3, w0)\n}","pretty":"thm int-eqprincd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →(c0[+]c1)=(c2[+]c3))\n  ⊣ (w0 → c0 = c2)\n  ⊣ (w0 → c1 = c3)\n} = {\n  oveq12d(c0, caddc, c1, c2, c3, w0)\n}","parent":["oveq12d"],"children":[]},{"name":"int-eqtransd","content":"EqualityTransitivity generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-eqtransd(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wceq(c0, c1))\n  -| wi(w0, wceq(c0, c2))\n  -| wi(w0, wceq(c2, c1))\n} = {\n  eqtrd(c0, c1, c2, w0)\n}","pretty":"thm int-eqtransd(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 → c0 = c1)\n  ⊣ (w0 → c0 = c2)\n  ⊣ (w0 → c2 = c1)\n} = {\n  eqtrd(c0, c1, c2, w0)\n}","parent":["eqtrd"],"children":[]},{"name":"int-eqmvtd","content":"EquMoveTerm generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-eqmvtd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(c0, co(c1, cmin, c2)))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wceq(c3, c1))\n  -| wi(w0, wceq(c3, co(c0, caddc, c2)))\n} = {\n  eqcomd(c0, co(c1, cmin, c2), w0)\n  eqtrd(co(c1, cmin, c2), c0, co(co(c0, caddc, c2), cmin, c2), w0)\n  oveq1d(c1, cmin, c2, co(c0, caddc, c2), w0)\n  eqtr3d(c1, co(c0, caddc, c2), c3, w0)\n  pncand(c0, c2, w0)\n  recnd(c0, w0)\n  recnd(c2, w0)\n}","pretty":"thm int-eqmvtd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 → c0 =(c1[-]c2))\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c3 = c1)\n  ⊣ (w0 → c3 =(c0[+]c2))\n} = {\n  eqcomd(c0, (c1[-]c2), w0)\n  eqtrd((c1[-]c2), c0, ((c0[+]c2)[-]c2), w0)\n  oveq1d(c1, cmin, c2, (c0[+]c2), w0)\n  eqtr3d(c1, (c0[+]c2), c3, w0)\n  pncand(c0, c2, w0)\n  recnd(c0, w0)\n  recnd(c2, w0)\n}","parent":["eqcomd","eqtrd","oveq1d","eqtr3d","pncand","recnd"],"children":[]},{"name":"int-eqineqd","content":"EquivalenceImpliesDoubleInequality generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-eqineqd(class c0, class c1, wff w0) {\n  |- wi(w0, wbr(c0, cle, c1))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wceq(c1, c0))\n} = {\n  eqled(c0, c1, w0)\n  eqcomd(c0, c1, w0)\n}","pretty":"thm int-eqineqd(class c0, class c1, wff w0) {\n  ⊢ (w0 → c0[≤]c1)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 = c0)\n} = {\n  eqled(c0, c1, w0)\n  eqcomd(c0, c1, w0)\n}","parent":["eqled","eqcomd"],"children":[]},{"name":"int-ineqmvtd","content":"IneqMoveTerm generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-ineqmvtd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wbr(co(c0, cmin, c1), cle, c2))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wbr(c0, cle, c3))\n  -| wi(w0, wceq(c3, co(c2, caddc, c1)))\n} = {\n  mpbird(w0, wbr(co(c0, cmin, c1), cle, c2), wbr(c0, cle, co(c2, caddc, c1)))\n  breqtrd(c0, cle, co(c2, caddc, c1), c3, w0)\n  lesubaddd(c0, c1, c2, w0)\n}","pretty":"thm int-ineqmvtd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →(c0[-]c1)[≤]c2)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c0[≤]c3)\n  ⊣ (w0 → c3 =(c2[+]c1))\n} = {\n  mpbird(w0, (c0[-]c1)[≤]c2, c0[≤](c2[+]c1))\n  breqtrd(c0, cle, (c2[+]c1), c3, w0)\n  lesubaddd(c0, c1, c2, w0)\n}","parent":["mpbird","breqtrd","lesubaddd"],"children":[]},{"name":"int-ineq1stprincd","content":"FirstPrincipleOfInequality generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-ineq1stprincd(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wbr(co(c0, caddc, c1), cle, co(c2, caddc, c3)))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c3, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wbr(c0, cle, c2))\n  -| wi(w0, wbr(c1, cle, c3))\n} = {\n  le2addd(c0, c1, c2, c3, w0)\n}","pretty":"thm int-ineq1stprincd(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →(c0[+]c1)[≤](c2[+]c3))\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c3 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c0[≤]c2)\n  ⊣ (w0 → c1[≤]c3)\n} = {\n  le2addd(c0, c1, c2, c3, w0)\n}","parent":["le2addd"],"children":[]},{"name":"int-ineq2ndprincd","content":"SecondPrincipleOfInequality generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-ineq2ndprincd(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wbr(co(c0, cmul, c1), cle, co(c2, cmul, c1)))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wbr(c0, cle, c2))\n  -| wi(w0, wbr(nat0, cle, c1))\n} = {\n  lemul1ad(c0, c1, c2, w0)\n}","pretty":"thm int-ineq2ndprincd(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 →(c0[×]c1)[≤](c2[×]c1))\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c0[≤]c2)\n  ⊣ (w0 → 0[≤]c1)\n} = {\n  lemul1ad(c0, c1, c2, w0)\n}","parent":["lemul1ad"],"children":[]},{"name":"int-ineqtransd","content":"InequalityTransitivity generator rule. (Contributed by Stanislas Polu, 7-Apr-2020.)","origin":"thm int-ineqtransd(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wbr(c0, cle, c1))\n  -| wi(w0, wcel(c1, cr))\n  -| wi(w0, wcel(c2, cr))\n  -| wi(w0, wcel(c0, cr))\n  -| wi(w0, wbr(c2, cle, c1))\n  -| wi(w0, wbr(c0, cle, c2))\n} = {\n  letrd(c0, c1, c2, w0)\n}","pretty":"thm int-ineqtransd(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 → c0[≤]c1)\n  ⊣ (w0 → c1 ∈ ℝ)\n  ⊣ (w0 → c2 ∈ ℝ)\n  ⊣ (w0 → c0 ∈ ℝ)\n  ⊣ (w0 → c2[≤]c1)\n  ⊣ (w0 → c0[≤]c2)\n} = {\n  letrd(c0, c1, c2, w0)\n}","parent":["letrd"],"children":[]}]}