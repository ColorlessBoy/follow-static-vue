{"index":704,"title":"Walks, paths and cycles","content":"A \"walk\" in a graph is usually defined for simple graphs, multigraphs or even pseudographs as \"alternating sequence of vertices and edges x0 , e1 , x1 , e2 , ... , e(l) , x(l) where e(i) = x(i-1)x(i), 0<i<=l.\", see definition of [Bollobas] p. 4, or \"A walk (of length k) in a graph is a nonempty alternating sequence v_0 e_0 v_1 e_1 ... e_(k-1) v_k of vertices and edges in G such that e_i = { v_i , v_i+1 } for all i < k.\", see definition of [Diestel] p. 10. Formalizing these definitions (mainly by representing the indexed vertices and edges by functions), a walk is represented by two mappings f from { 1 , ... , n } and p from { 0 , ... , n }, where f enumerates the (indices of the) edges (e is a third function enumerating the edges within the graph, not within the walk), and p enumerates the vertices, see ~ df-wlks . Hence a walk (of length n) is represented by the following sequence: p(0) e(f(1)) p(1) e(f(2)) ... p(n-1) e(f(n)) p(n). Alternatively, one could define a walk as a function ` w : ( 0 ... ( 2 x. n ) ) --> ( ( Edg `` G ) u. ( Vtx `` G ) ) ` such that for all ` 0 <_ k <_ n `, ` ( w `` ( 2 x. k ) ) e. ( Vtx `` G ) ` and for all ` 0 <_ k <_ ( n - 1 ) `, ` ( w `` ( ( 2 x. k ) + 1 ) ) e. ( Edg `` G ) ` and ` { ( w `` ( 2 x. k ) ) , ( w `` ( ( 2 x. k ) + 2 ) ) } ` ` C_ ( w `` ( ( 2 x. k ) + 1 ) ) `. Based on our definition of ` Walks `, the class of all walks, more restrictive constructs are defined: * ` Trails ` ( ~ df-trls ): A \"walk is called a _trail_ if all its edges are distinct.\", see Definition of [Bollobas] p. 5, i.e., f(i) =/= f(j) if i =/= j. * ` Paths ` ( ~ df-pths ): A _path_ is a walk whose vertices except the first and the last vertex are distinct, i.e., p(i) =/= p(j) if i < j, except possibly when i = 0 and j = n. * ` SPaths ` (simple paths, ~ df-spths ): A _simple path_ \"is a walk with distinct vertices.\", see Notation of [Bollobas] p. 5, i.e., p(i) =/= p(j) if i =/= j. * ` ClWalks ` (closed walks, ~ df-clwlks ): A walk whose endvertices coincide is called a _closed walk_, i.e., p(0) = p(n). * ` Circuits ` ( ~ df-crcts ): \"A trail whose endvertices coincide (a closed trail) is called a _circuit_.\" (see Definition of [Bollobas] p. 5), i.e., f(i) =/= f(j) if i =/= j and p(0) = p(n). Equivalently, a circuit is a closed walk with distinct edges. * ` Cycles ` ( ~ df-cycls ): A path whose endvertices coincide (a closed path) is called a _cycle_, i.e., p(i) =/= p(j) if i =/= j, except i = 0 and j = n, and p(0) = p(n). Equivalently, a cycle is a closed walk with distinct vertices. * ` EulerPaths ` (Eulerian paths, ~ df-eupth ): An _Eulerian path_ is \"a trail containing all edges [of the graph]\" (see definition in [Bollobas] p. 16), i.e., f(i) =/= f(j) if i =/= j and for all edges e(x) there is an 1 <= i <= n with e(x) = e(f(i)). Note, however, that an Eulerian path needs not be a path. * Eulerian circuit: An _Eulerian circuit_ (called _Euler tour_ in the definition in [Diestel] p. 22) is \"a circuit in a graph containing all the edges\" (see definition in [Bollobas] p. 16), i.e., f(i) =/= f(j) if i =/= j, p(0) = p(n) and for all edges e(x) there is an 1 <= i <= n with e(x) = e(f(i)). Hierarchy of all kinds of walks (apply ~ ssriv and ~ elopabran to the mentioned theorems to obtain the following subset relationships, as available for ~ clwlkiswlk , see ~ clwlkwlk and ~ clwlkswks ): * Trails are walks ( ~ trliswlk ): ` ( Trails `` G ) C_ ( Walks `` G ) ` * Paths are trails ( ~ pthistrl ): ` ( Paths `` G ) C_ ( Trails `` G ) ` * Simple paths are paths ( ~ spthispth ): ` ( SPaths `` G ) C_ ( Paths `` G ) ` * Closed walks are walks ( ~ clwlkiswlk ): ` ( ClWalks `` G ) C_ ( Walks `` G ) ` * Circuits are closed walks ( ~ crctisclwlk ): ` ( Circuits `` G ) C_ ( ClWalks `` G ) ` * Circuits are trails ( ~ crctistrl ): ` ( Circuits `` G ) C_ ( Trails `` G ) ` * Cycles are paths ( ~ cyclispth ): ` ( Cycles `` G ) C_ ( Paths `` G ) ` * Cycles are circuits ( ~ cycliscrct ): ` ( Cycles `` G ) C_ ( Circuits `` G ) ` * (Non-trivial) cycles are not simple paths ( ~ cyclnspth ): ` ( F =/= (/) -> ( F ( Cycles `` G ) P -> -. F ( SPaths `` G ) P ) ) ` * Eulerian paths are trails ( ~ eupthistrl ): ` ( EulerPaths `` G ) C_ ( Trails `` G ) ` Often, it is sufficient to refer to a walk by the natural sequence of its vertices, i.e., omitting its edges in its representation: p(0) p(1) ... p(n-1) p(n), see the corresponding remark in [Diestel] p. 6. The concept of a ` Word `, see ~ df-word , is the appropriate way to define such a sequence (being finite and starting at index 0) of vertices. Therefore, it is used in definition ~ df-wwlks for ` WWalks `, and the representation of a walk as sequence of its vertices is called \"walk as word\". Only for simple pseudographs, however, the edges can be uniquely reconstructed from such a representation. In this case, the general definitions of walks and the definition of walks as words are equivalent, see ~ wlkiswwlks . In other cases, there could be more than one edge between two adjacent vertices in the walk (in a multigraph), or two adjacent vertices could be connected by two different hyperedges involving additional vertices (in a hypergraph). Based on this definition of ` WWalks `, the class of all walks as word, more restrictive constructs are defined analogously to the general definition of a walk: * ` WWalksN ` (walks of length N as word, ~ df-wwlksn ): n = N * ` WSPathsN ` (simple paths of length N as word, ~ df-wspthsn ): p(i) =/= p(j) if i =/= j and n = N * ` ClWWalks ` (closed walks as word, ~ df-clwwlk ): p(0) = p(n) * ` ClWWalksN ` (closed walks of length N as word, ~ df-clwwlkn ): p(0) = p(n) and n = N Finally, there are a couple of definitions for (special) walks ` <. F , P >. ` having fixed endpoints ` A ` and ` B `: * Walks with particular endpoints ( ~ df-wlkson ): ` F ( A ( WalksOn `` G ) B ) P ` * Trails with particular endpoints ( ~ df-trlson ): ` F ( A ( TrailsOn `` G ) B ) P ` * Paths with particular endpoints ( ~ df-pthson ): ` F ( A ( PathsOn `` G ) B ) P ` * Simple paths with particular endpoints ( ~ df-spthson ): ` F ( A ( SPathsOn `` G ) B ) P ` * Walks of a fixed length ` N ` as words with particular endpoints ( ~ df-wwlksnon ): ` ( A ( N WWalksNOn G ) B ) ` * Simple paths of a fixed length ` N ` as words with particular endpoints ( ~ df-wspthsnon ): ` ( A ( N WSPathsNOn G ) B ) ` * Closed Walks of a fixed length ` N ` as words anchored at a particular vertex ` A ` ( ~ df-wwlksnon ): ` ( A ( ClWWalksNOn `` G ) N ) `","blocks":[]}