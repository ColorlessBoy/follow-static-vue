{"index":1577,"title":"Logarithm laws generalized to an arbitrary base - log_","content":"Define \"log using an arbitrary base\" function and then prove some of its properties. This builds on previous work by Stefan O'Rear. This supports the notational form ` ( ( log_ `` B ) `` X ) ` ; that looks a little more like traditional notation, but is different from other 2-parameter functions. E.g., ` ( ( log_ `` ; 1 0 ) `` ; ; 1 0 0 ) = 2 ` . This form is less convenient to work with inside set.mm as compared to the ` ( B logb X ) ` form defined separately.","blocks":[{"name":"clog-","content":"Extend class notation to include the logarithm generalized to an arbitrary base.","origin":"const class clog- { log_ }","pretty":"","parent":[],"children":[]},{"name":"diff.clog-.s","content":"","origin":"axiom diff.clog-.s(setvar s0) {\n  |- diffsc(s0, clog-)\n}","pretty":"axiom diff.clog-.s(setvar s0) {\n  ⊢ d(s0, log_)\n}","parent":[],"children":[]},{"name":"diff.clog-.c","content":"","origin":"axiom diff.clog-.c(class c0) {\n  |- diffcc(clog-, c0)\n}","pretty":"axiom diff.clog-.c(class c0) {\n  ⊢ d(log_, c0)\n}","parent":[],"children":[]},{"name":"diff.clog-.w","content":"","origin":"axiom diff.clog-.w(wff w0) {\n  |- diffcw(clog-, w0)\n}","pretty":"axiom diff.clog-.w(wff w0) {\n  ⊢ d(log_, w0)\n}","parent":[],"children":[]},{"name":"df-logbALT","content":"Define the ` log_ ` operator. This is the logarithm generalized to an arbitrary base. It can be used as ` ( ( log_ `` B ) `` X ) ` for \"log base B of X\". This formulation suggested by Mario Carneiro. (Contributed by David A. Wheeler, 14-Jul-2017.) (New usage is discouraged.)","origin":"axiom df-logbALT(setvar s0, setvar s1) {\n  |- wceq(clog-, cmpt(s0, cdif(cc, cpr(nat0, nat1)), cmpt(s1, cdif(cc, csn(nat0)), co(cfv(clog, cv(s1)), cdiv, cfv(clog, cv(s0))))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-logbALT(setvar s0, setvar s1) {\n  ⊢ log_ =(s0 ∈(ℂ \\ { 0, 1 })↦(s1 ∈(ℂ \\ { 0 })↦((log ` s1)[÷](log ` s0))))\n  ⊣ d(s0, s1)\n}","parent":[],"children":[""]}]}