{"index":1572,"title":"Hyperbolic trigonometric functions","content":"It is a convention of set.mm to not use sinh and so on directly, and instead of use expansions such as ` ( cos `` ( _i x. x ) ) ` . However, I believe it's important to give formal definitions for these conventional functions as they are typically used, so here they are. A few related identities are also proved.","blocks":[{"name":"csinh","content":"Extend class notation to include the hyperbolic sine function, see ~ df-sinh .","origin":"const class csinh { sinh }","pretty":"","parent":[],"children":[]},{"name":"diff.csinh.s","content":"","origin":"axiom diff.csinh.s(setvar s0) {\n  |- diffsc(s0, csinh)\n}","pretty":"axiom diff.csinh.s(setvar s0) {\n  ⊢ d(s0, sinh)\n}","parent":[],"children":[]},{"name":"diff.csinh.c","content":"","origin":"axiom diff.csinh.c(class c0) {\n  |- diffcc(csinh, c0)\n}","pretty":"axiom diff.csinh.c(class c0) {\n  ⊢ d(sinh, c0)\n}","parent":[],"children":[]},{"name":"diff.csinh.w","content":"","origin":"axiom diff.csinh.w(wff w0) {\n  |- diffcw(csinh, w0)\n}","pretty":"axiom diff.csinh.w(wff w0) {\n  ⊢ d(sinh, w0)\n}","parent":[],"children":[]},{"name":"ccosh","content":"Extend class notation to include the hyperbolic cosine function. see ~ df-cosh .","origin":"const class ccosh { cosh }","pretty":"","parent":[],"children":[]},{"name":"diff.ccosh.s","content":"","origin":"axiom diff.ccosh.s(setvar s0) {\n  |- diffsc(s0, ccosh)\n}","pretty":"axiom diff.ccosh.s(setvar s0) {\n  ⊢ d(s0, cosh)\n}","parent":[],"children":[]},{"name":"diff.ccosh.c","content":"","origin":"axiom diff.ccosh.c(class c0) {\n  |- diffcc(ccosh, c0)\n}","pretty":"axiom diff.ccosh.c(class c0) {\n  ⊢ d(cosh, c0)\n}","parent":[],"children":[]},{"name":"diff.ccosh.w","content":"","origin":"axiom diff.ccosh.w(wff w0) {\n  |- diffcw(ccosh, w0)\n}","pretty":"axiom diff.ccosh.w(wff w0) {\n  ⊢ d(cosh, w0)\n}","parent":[],"children":[]},{"name":"ctanh","content":"Extend class notation to include the hyperbolic tangent function, see ~ df-tanh .","origin":"const class ctanh { tanh }","pretty":"","parent":[],"children":[]},{"name":"diff.ctanh.s","content":"","origin":"axiom diff.ctanh.s(setvar s0) {\n  |- diffsc(s0, ctanh)\n}","pretty":"axiom diff.ctanh.s(setvar s0) {\n  ⊢ d(s0, tanh)\n}","parent":[],"children":[]},{"name":"diff.ctanh.c","content":"","origin":"axiom diff.ctanh.c(class c0) {\n  |- diffcc(ctanh, c0)\n}","pretty":"axiom diff.ctanh.c(class c0) {\n  ⊢ d(tanh, c0)\n}","parent":[],"children":[]},{"name":"diff.ctanh.w","content":"","origin":"axiom diff.ctanh.w(wff w0) {\n  |- diffcw(ctanh, w0)\n}","pretty":"axiom diff.ctanh.w(wff w0) {\n  ⊢ d(tanh, w0)\n}","parent":[],"children":[]},{"name":"df-sinh","content":"Define the hyperbolic sine function (sinh). We define it this way for ~ cmpt , which requires the form ` ( x e. A |-> B ) ` . See ~ sinhval-named for a simple way to evaluate it. We define this function by dividing by ` _i ` , which uses fewer operations than many conventional definitions (and thus is more convenient to use in set.mm). See ~ sinh-conventional for a justification that our definition is the same as the conventional definition of sinh used in other sources. (Contributed by David A. Wheeler, 20-Apr-2015.)","origin":"axiom df-sinh(setvar s0) {\n  |- wceq(csinh, cmpt(s0, cc, co(cfv(csin, co(ci, cmul, cv(s0))), cdiv, ci)))\n}","pretty":"axiom df-sinh(setvar s0) {\n  ⊢ sinh =(s0 ∈ ℂ ↦((sin `(i[×]s0))[÷]i))\n}","parent":[],"children":["sinhval-named"]},{"name":"df-cosh","content":"Define the hyperbolic cosine function (cosh). We define it this way for ~ cmpt , which requires the form ` ( x e. A |-> B ) ` . (Contributed by David A. Wheeler, 10-May-2015.)","origin":"axiom df-cosh(setvar s0) {\n  |- wceq(ccosh, cmpt(s0, cc, cfv(ccos, co(ci, cmul, cv(s0)))))\n}","pretty":"axiom df-cosh(setvar s0) {\n  ⊢ cosh =(s0 ∈ ℂ ↦(cos `(i[×]s0)))\n}","parent":[],"children":["coshval-named"]},{"name":"df-tanh","content":"Define the hyperbolic tangent function (tanh). We define it this way for ~ cmpt , which requires the form ` ( x e. A |-> B ) ` . (Contributed by David A. Wheeler, 10-May-2015.)","origin":"axiom df-tanh(setvar s0) {\n  |- wceq(ctanh, cmpt(s0, cima(ccnv(ccosh), cdif(cc, csn(nat0))), co(cfv(ctan, co(ci, cmul, cv(s0))), cdiv, ci)))\n}","pretty":"axiom df-tanh(setvar s0) {\n  ⊢ tanh =(s0 ∈(`' cosh \"(ℂ \\ { 0 }))↦((tan `(i[×]s0))[÷]i))\n}","parent":[],"children":["tanhval-named"]},{"name":"sinhval-named","content":"Value of the named sinh function. Here we show the simple conversion to the conventional form used in set.mm, using the definition given by ~ df-sinh . See ~ sinhval for a theorem to convert this further. See ~ sinh-conventional for a justification that our definition is the same as the conventional definition of sinh used in other sources. (Contributed by David A. Wheeler, 20-Apr-2015.)","origin":"thm sinhval-named(class c0) {\n  |- wi(wcel(c0, cc), wceq(cfv(csinh, c0), co(cfv(csin, co(ci, cmul, c0)), cdiv, ci)))\n} = {\n  fvmpt(hs0, c0, cc, csinh, co(cfv(csin, co(ci, cmul, c0)), cdiv, ci), co(cfv(csin, co(ci, cmul, cv(hs0))), cdiv, ci))\n  oveq1d(cfv(csin, co(ci, cmul, cv(hs0))), cdiv, ci, cfv(csin, co(ci, cmul, c0)), wceq(cv(hs0), c0))\n  fveq2d(csin, co(ci, cmul, cv(hs0)), co(ci, cmul, c0), wceq(cv(hs0), c0))\n  oveq2(cv(hs0), c0, ci, cmul)\n  df-sinh(hs0)\n  ovex(cfv(csin, co(ci, cmul, c0)), cdiv, ci)\n  diff.hs0.c(c0)\n  diff.hs0.c(cc)\n  diff.hs0.c(co(cfv(csin, co(ci, cmul, c0)), cdiv, ci))\n}","pretty":"thm sinhval-named(class c0) {\n  ⊢ (c0 ∈ ℂ →(sinh ` c0)=((sin `(i[×]c0))[÷]i))\n} = {\n  fvmpt(hs0, c0, cc, csinh, ((sin `(i[×]c0))[÷]i), ((sin `(i[×]hs0))[÷]i))\n  oveq1d((sin `(i[×]hs0)), cdiv, ci, (sin `(i[×]c0)), hs0 = c0)\n  fveq2d(csin, (i[×]hs0), (i[×]c0), hs0 = c0)\n  oveq2(hs0, c0, ci, cmul)\n  df-sinh(hs0)\n  ovex((sin `(i[×]c0)), cdiv, ci)\n  diff.hs0.c(c0)\n  diff.hs0.c(cc)\n  diff.hs0.c(((sin `(i[×]c0))[÷]i))\n}","parent":["fvmpt","oveq1d","fveq2d","oveq2","df-sinh","ovex","diff.hs0.c"],"children":["sinh-conventional","sinhpcosh"]},{"name":"coshval-named","content":"Value of the named cosh function. Here we show the simple conversion to the conventional form used in set.mm, using the definition given by ~ df-cosh . See ~ coshval for a theorem to convert this further. (Contributed by David A. Wheeler, 10-May-2015.)","origin":"thm coshval-named(class c0) {\n  |- wi(wcel(c0, cc), wceq(cfv(ccosh, c0), cfv(ccos, co(ci, cmul, c0))))\n} = {\n  fvmpt(hs0, c0, cc, ccosh, cfv(ccos, co(ci, cmul, c0)), cfv(ccos, co(ci, cmul, cv(hs0))))\n  fveq2d(ccos, co(ci, cmul, cv(hs0)), co(ci, cmul, c0), wceq(cv(hs0), c0))\n  oveq2(cv(hs0), c0, ci, cmul)\n  df-cosh(hs0)\n  fvex(ccos, co(ci, cmul, c0))\n  diff.hs0.c(c0)\n  diff.hs0.c(cc)\n  diff.hs0.c(cfv(ccos, co(ci, cmul, c0)))\n}","pretty":"thm coshval-named(class c0) {\n  ⊢ (c0 ∈ ℂ →(cosh ` c0)=(cos `(i[×]c0)))\n} = {\n  fvmpt(hs0, c0, cc, ccosh, (cos `(i[×]c0)), (cos `(i[×]hs0)))\n  fveq2d(ccos, (i[×]hs0), (i[×]c0), hs0 = c0)\n  oveq2(hs0, c0, ci, cmul)\n  df-cosh(hs0)\n  fvex(ccos, (i[×]c0))\n  diff.hs0.c(c0)\n  diff.hs0.c(cc)\n  diff.hs0.c((cos `(i[×]c0)))\n}","parent":["fvmpt","fveq2d","oveq2","df-cosh","fvex","diff.hs0.c"],"children":["sinhpcosh"]},{"name":"tanhval-named","content":"Value of the named tanh function. Here we show the simple conversion to the conventional form used in set.mm, using the definition given by ~ df-tanh . (Contributed by David A. Wheeler, 10-May-2015.)","origin":"thm tanhval-named(class c0) {\n  |- wi(wcel(c0, cima(ccnv(ccosh), cdif(cc, csn(nat0)))), wceq(cfv(ctanh, c0), co(cfv(ctan, co(ci, cmul, c0)), cdiv, ci)))\n} = {\n  fvmpt(hs0, c0, cima(ccnv(ccosh), cdif(cc, csn(nat0))), ctanh, co(cfv(ctan, co(ci, cmul, c0)), cdiv, ci), co(cfv(ctan, co(ci, cmul, cv(hs0))), cdiv, ci))\n  oveq1d(cfv(ctan, co(ci, cmul, cv(hs0))), cdiv, ci, cfv(ctan, co(ci, cmul, c0)), wceq(cv(hs0), c0))\n  fveq2d(ctan, co(ci, cmul, cv(hs0)), co(ci, cmul, c0), wceq(cv(hs0), c0))\n  oveq2(cv(hs0), c0, ci, cmul)\n  df-tanh(hs0)\n  ovex(cfv(ctan, co(ci, cmul, c0)), cdiv, ci)\n  diff.hs0.c(c0)\n  diff.hs0.c(cima(ccnv(ccosh), cdif(cc, csn(nat0))))\n  diff.hs0.c(co(cfv(ctan, co(ci, cmul, c0)), cdiv, ci))\n}","pretty":"thm tanhval-named(class c0) {\n  ⊢ (c0 ∈(`' cosh \"(ℂ \\ { 0 }))→(tanh ` c0)=((tan `(i[×]c0))[÷]i))\n} = {\n  fvmpt(hs0, c0, (`' cosh \"(ℂ \\ { 0 })), ctanh, ((tan `(i[×]c0))[÷]i), ((tan `(i[×]hs0))[÷]i))\n  oveq1d((tan `(i[×]hs0)), cdiv, ci, (tan `(i[×]c0)), hs0 = c0)\n  fveq2d(ctan, (i[×]hs0), (i[×]c0), hs0 = c0)\n  oveq2(hs0, c0, ci, cmul)\n  df-tanh(hs0)\n  ovex((tan `(i[×]c0)), cdiv, ci)\n  diff.hs0.c(c0)\n  diff.hs0.c((`' cosh \"(ℂ \\ { 0 })))\n  diff.hs0.c(((tan `(i[×]c0))[÷]i))\n}","parent":["fvmpt","oveq1d","fveq2d","oveq2","df-tanh","ovex","diff.hs0.c"],"children":[]},{"name":"sinh-conventional","content":"Conventional definition of sinh. Here we show that the sinh definition we're using has the same meaning as the conventional definition used in some other sources. We choose a slightly different definition of sinh because it has fewer operations, and thus is more convenient to manipulate using set.mm. (Contributed by David A. Wheeler, 10-May-2015.)","origin":"thm sinh-conventional(class c0) {\n  |- wi(wcel(c0, cc), wceq(cfv(csinh, c0), co(cneg(ci), cmul, cfv(csin, co(ci, cmul, c0)))))\n} = {\n  3eqtrd(cfv(csinh, c0), co(cneg(ci), cmul, cfv(csin, co(ci, cmul, c0))), co(cfv(csin, co(ci, cmul, c0)), cdiv, ci), co(co(nat1, cdiv, ci), cmul, cfv(csin, co(ci, cmul, c0))), wcel(c0, cc))\n  sinhval-named(c0)\n  syl(wcel(c0, cc), wceq(co(cfv(csin, co(ci, cmul, c0)), cdiv, ci), co(co(nat1, cdiv, ci), cmul, cfv(csin, co(ci, cmul, c0)))), wcel(cfv(csin, co(ci, cmul, c0)), cc))\n  sincld(co(ci, cmul, c0), wcel(c0, cc))\n  mpan(wcel(c0, cc), wcel(co(ci, cmul, c0), cc), wcel(ci, cc))\n  mulcl(ci, c0)\n  mp3an23(wcel(cfv(csin, co(ci, cmul, c0)), cc), wceq(co(cfv(csin, co(ci, cmul, c0)), cdiv, ci), co(co(nat1, cdiv, ci), cmul, cfv(csin, co(ci, cmul, c0)))), wcel(ci, cc), wne(ci, nat0))\n  ax-icn()\n  ine0()\n  divrec2(cfv(csin, co(ci, cmul, c0)), ci)\n  a1i(wcel(c0, cc), wceq(co(co(nat1, cdiv, ci), cmul, cfv(csin, co(ci, cmul, c0))), co(cneg(ci), cmul, cfv(csin, co(ci, cmul, c0)))))\n  oveq1i(co(nat1, cdiv, ci), cmul, cfv(csin, co(ci, cmul, c0)), cneg(ci))\n  irec()\n}","pretty":"thm sinh-conventional(class c0) {\n  ⊢ (c0 ∈ ℂ →(sinh ` c0)=(-u(i)[×](sin `(i[×]c0))))\n} = {\n  3eqtrd((sinh ` c0), (-u(i)[×](sin `(i[×]c0))), ((sin `(i[×]c0))[÷]i), ((1[÷]i)[×](sin `(i[×]c0))), c0 ∈ ℂ)\n  sinhval-named(c0)\n  syl(c0 ∈ ℂ, ((sin `(i[×]c0))[÷]i)=((1[÷]i)[×](sin `(i[×]c0))), (sin `(i[×]c0))∈ ℂ)\n  sincld((i[×]c0), c0 ∈ ℂ)\n  mpan(c0 ∈ ℂ, (i[×]c0)∈ ℂ, i ∈ ℂ)\n  mulcl(ci, c0)\n  mp3an23((sin `(i[×]c0))∈ ℂ, ((sin `(i[×]c0))[÷]i)=((1[÷]i)[×](sin `(i[×]c0))), i ∈ ℂ, i ≠ 0)\n  ax-icn()\n  ine0()\n  divrec2((sin `(i[×]c0)), ci)\n  a1i(c0 ∈ ℂ, ((1[÷]i)[×](sin `(i[×]c0)))=(-u(i)[×](sin `(i[×]c0))))\n  oveq1i((1[÷]i), cmul, (sin `(i[×]c0)), -u(i))\n  irec()\n}","parent":["3eqtrd","sinhval-named","syl","sincld","mpan","mulcl","mp3an23","ax-icn","ine0","divrec2","a1i","oveq1i","irec"],"children":[]},{"name":"sinhpcosh","content":"Prove that ` ( sinh `` A ) + ( cosh `` A ) = ( exp `` A ) ` using the conventional hyperbolic trigonometric functions. (Contributed by David A. Wheeler, 27-May-2015.)","origin":"thm sinhpcosh(class c0) {\n  |- wi(wcel(c0, cc), wceq(co(cfv(csinh, c0), caddc, cfv(ccosh, c0)), cfv(ce, c0)))\n} = {\n  eqtrd(co(cfv(csinh, c0), caddc, cfv(ccosh, c0)), cfv(ce, c0), co(co(nat2, cmul, cfv(ce, c0)), cdiv, nat2), wcel(c0, cc))\n  3eqtr2d(co(cfv(csinh, c0), caddc, cfv(ccosh, c0)), co(co(nat2, cmul, cfv(ce, c0)), cdiv, nat2), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), caddc, co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2)), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), cdiv, nat2), wcel(c0, cc))\n  oveq12d(cfv(csinh, c0), caddc, cfv(ccosh, c0), co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2), wcel(c0, cc))\n  eqtrd(cfv(csinh, c0), co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), co(cfv(csin, co(ci, cmul, c0)), cdiv, ci), wcel(c0, cc))\n  sinhval-named(c0)\n  sinhval(c0)\n  eqtrd(cfv(ccosh, c0), co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2), cfv(ccos, co(ci, cmul, c0)), wcel(c0, cc))\n  coshval-named(c0)\n  coshval(c0)\n  mpanr12(wcel(c0, cc), wceq(co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), cdiv, nat2), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), caddc, co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2))), wcel(nat2, cc), wne(nat2, nat0))\n  3anidm12(wcel(c0, cc), wa(wcel(nat2, cc), wne(nat2, nat0)), wceq(co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), cdiv, nat2), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), caddc, co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2))))\n  syl3an2(wcel(c0, cc), wcel(c0, cc), wa(wcel(nat2, cc), wne(nat2, nat0)), wceq(co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), cdiv, nat2), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), caddc, co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2))), wcel(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cc))\n  addcld(cfv(ce, c0), cfv(ce, cneg(c0)), wcel(c0, cc))\n  syl3an1(wcel(c0, cc), wcel(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cc), wa(wcel(nat2, cc), wne(nat2, nat0)), wceq(co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), cdiv, nat2), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cdiv, nat2), caddc, co(co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), cdiv, nat2))), wcel(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cc))\n  divdir(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), co(cfv(ce, c0), caddc, cfv(ce, cneg(c0))), nat2)\n  oveq1d(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), cdiv, nat2, co(nat2, cmul, cfv(ce, c0)), wcel(c0, cc))\n  3eqtr2rd(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, co(cfv(ce, c0), caddc, cfv(ce, cneg(c0)))), co(nat2, cmul, cfv(ce, c0)), co(cfv(ce, c0), caddc, cfv(ce, c0)), co(co(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), caddc, cfv(ce, c0)), caddc, cfv(ce, cneg(c0))), wcel(c0, cc))\n  2timesd(cfv(ce, c0), wcel(c0, cc))\n  nppcand(cfv(ce, c0), cfv(ce, cneg(c0)), cfv(ce, c0), wcel(c0, cc))\n  addassd(co(cfv(ce, c0), cmin, cfv(ce, cneg(c0))), cfv(ce, c0), cfv(ce, cneg(c0)), wcel(c0, cc))\n  subcld(cfv(ce, c0), cfv(ce, cneg(c0)), wcel(c0, cc))\n  syl(wcel(c0, cc), wcel(cfv(ce, cneg(c0)), cc), wcel(cneg(c0), cc))\n  negcl(c0)\n  efcl(cneg(c0))\n  divcan3d(nat2, cfv(ce, c0), wcel(c0, cc))\n  efcl(c0)\n  a1i(wcel(c0, cc), wcel(nat2, cc))\n  2cn()\n  a1i(wcel(c0, cc), wne(nat2, nat0))\n  2ne0()\n}","pretty":"thm sinhpcosh(class c0) {\n  ⊢ (c0 ∈ ℂ →((sinh ` c0)[+](cosh ` c0))=(exp ` c0))\n} = {\n  eqtrd(((sinh ` c0)[+](cosh ` c0)), (exp ` c0), ((2[×](exp ` c0))[÷]2), c0 ∈ ℂ)\n  3eqtr2d(((sinh ` c0)[+](cosh ` c0)), ((2[×](exp ` c0))[÷]2), ((((exp ` c0)[-](exp ` -u(c0)))[÷]2)[+](((exp ` c0)[+](exp ` -u(c0)))[÷]2)), ((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0))))[÷]2), c0 ∈ ℂ)\n  oveq12d((sinh ` c0), caddc, (cosh ` c0), (((exp ` c0)[-](exp ` -u(c0)))[÷]2), (((exp ` c0)[+](exp ` -u(c0)))[÷]2), c0 ∈ ℂ)\n  eqtrd((sinh ` c0), (((exp ` c0)[-](exp ` -u(c0)))[÷]2), ((sin `(i[×]c0))[÷]i), c0 ∈ ℂ)\n  sinhval-named(c0)\n  sinhval(c0)\n  eqtrd((cosh ` c0), (((exp ` c0)[+](exp ` -u(c0)))[÷]2), (cos `(i[×]c0)), c0 ∈ ℂ)\n  coshval-named(c0)\n  coshval(c0)\n  mpanr12(c0 ∈ ℂ, ((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0))))[÷]2)=((((exp ` c0)[-](exp ` -u(c0)))[÷]2)[+](((exp ` c0)[+](exp ` -u(c0)))[÷]2)), 2 ∈ ℂ, 2 ≠ 0)\n  3anidm12(c0 ∈ ℂ, (2 ∈ ℂ ∧ 2 ≠ 0), ((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0))))[÷]2)=((((exp ` c0)[-](exp ` -u(c0)))[÷]2)[+](((exp ` c0)[+](exp ` -u(c0)))[÷]2)))\n  syl3an2(c0 ∈ ℂ, c0 ∈ ℂ, (2 ∈ ℂ ∧ 2 ≠ 0), ((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0))))[÷]2)=((((exp ` c0)[-](exp ` -u(c0)))[÷]2)[+](((exp ` c0)[+](exp ` -u(c0)))[÷]2)), ((exp ` c0)[+](exp ` -u(c0)))∈ ℂ)\n  addcld((exp ` c0), (exp ` -u(c0)), c0 ∈ ℂ)\n  syl3an1(c0 ∈ ℂ, ((exp ` c0)[+](exp ` -u(c0)))∈ ℂ, (2 ∈ ℂ ∧ 2 ≠ 0), ((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0))))[÷]2)=((((exp ` c0)[-](exp ` -u(c0)))[÷]2)[+](((exp ` c0)[+](exp ` -u(c0)))[÷]2)), ((exp ` c0)[-](exp ` -u(c0)))∈ ℂ)\n  divdir(((exp ` c0)[-](exp ` -u(c0))), ((exp ` c0)[+](exp ` -u(c0))), nat2)\n  oveq1d((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0)))), cdiv, nat2, (2[×](exp ` c0)), c0 ∈ ℂ)\n  3eqtr2rd((((exp ` c0)[-](exp ` -u(c0)))[+]((exp ` c0)[+](exp ` -u(c0)))), (2[×](exp ` c0)), ((exp ` c0)[+](exp ` c0)), ((((exp ` c0)[-](exp ` -u(c0)))[+](exp ` c0))[+](exp ` -u(c0))), c0 ∈ ℂ)\n  2timesd((exp ` c0), c0 ∈ ℂ)\n  nppcand((exp ` c0), (exp ` -u(c0)), (exp ` c0), c0 ∈ ℂ)\n  addassd(((exp ` c0)[-](exp ` -u(c0))), (exp ` c0), (exp ` -u(c0)), c0 ∈ ℂ)\n  subcld((exp ` c0), (exp ` -u(c0)), c0 ∈ ℂ)\n  syl(c0 ∈ ℂ, (exp ` -u(c0))∈ ℂ, -u(c0)∈ ℂ)\n  negcl(c0)\n  efcl(-u(c0))\n  divcan3d(nat2, (exp ` c0), c0 ∈ ℂ)\n  efcl(c0)\n  a1i(c0 ∈ ℂ, 2 ∈ ℂ)\n  2cn()\n  a1i(c0 ∈ ℂ, 2 ≠ 0)\n  2ne0()\n}","parent":["eqtrd","3eqtr2d","oveq12d","sinhval-named","sinhval","coshval-named","coshval","mpanr12","3anidm12","syl3an2","addcld","syl3an1","divdir","oveq1d","3eqtr2rd","2timesd","nppcand","addassd","subcld","syl","negcl","efcl","divcan3d","a1i","2cn","2ne0"],"children":[]}]}