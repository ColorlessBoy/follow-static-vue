{"index":1217,"title":"Notations","content":"","blocks":[{"name":"cxrn","content":"Extend the definition of a class to include the range Cartesian product class.","origin":"prop class cxrn(class c0, class c1) { (c0 |X. c1) }","pretty":"","parent":[],"children":[]},{"name":"diff.cxrn.s","content":"","origin":"axiom diff.cxrn.s(setvar sBase, class c0, class c1) {\n  |- diffsc(sBase, cxrn(c0, c1))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n}","pretty":"axiom diff.cxrn.s(setvar sBase, class c0, class c1) {\n  ⊢ d(sBase,(c0 |X. c1))\n  ⊣ d(sBase, c0)\n  ⊣ d(sBase, c1)\n}","parent":[],"children":[]},{"name":"diff.cxrn.c","content":"","origin":"axiom diff.cxrn.c(class cBase, class c0, class c1) {\n  |- diffcc(cBase, cxrn(c0, c1))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n}","pretty":"axiom diff.cxrn.c(class cBase, class c0, class c1) {\n  ⊢ d(cBase,(c0 |X. c1))\n  ⊣ d(cBase, c0)\n  ⊣ d(cBase, c1)\n}","parent":[],"children":[]},{"name":"diff.cxrn.w","content":"","origin":"axiom diff.cxrn.w(wff wBase, class c0, class c1) {\n  |- diffcw(cxrn(c0, c1), wBase)\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n}","pretty":"axiom diff.cxrn.w(wff wBase, class c0, class c1) {\n  ⊢ d((c0 |X. c1), wBase)\n  ⊣ d(c0, wBase)\n  ⊣ d(c1, wBase)\n}","parent":[],"children":[]},{"name":"ccoss","content":"Extend the definition of a class to include the class of cosets by a class. (Read: the class of cosets by ` R ` .)","origin":"prop class ccoss(class c0) { , ~(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.ccoss.s","content":"","origin":"axiom diff.ccoss.s(setvar sBase, class c0) {\n  |- diffsc(sBase, ccoss(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.ccoss.s(setvar sBase, class c0) {\n  ⊢ d(sBase,, ~(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.ccoss.c","content":"","origin":"axiom diff.ccoss.c(class cBase, class c0) {\n  |- diffcc(cBase, ccoss(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.ccoss.c(class cBase, class c0) {\n  ⊢ d(cBase,, ~(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.ccoss.w","content":"","origin":"axiom diff.ccoss.w(wff wBase, class c0) {\n  |- diffcw(ccoss(c0), wBase)\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.ccoss.w(wff wBase, class c0) {\n  ⊢ d(, ~(c0), wBase)\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"ccoels","content":"Extend the definition of a class to include the class of coelements on a class. (Read: the class of coelements on ` A ` .)","origin":"prop class ccoels(class c0) { ~(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.ccoels.s","content":"","origin":"axiom diff.ccoels.s(setvar sBase, class c0) {\n  |- diffsc(sBase, ccoels(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.ccoels.s(setvar sBase, class c0) {\n  ⊢ d(sBase, ~(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.ccoels.c","content":"","origin":"axiom diff.ccoels.c(class cBase, class c0) {\n  |- diffcc(cBase, ccoels(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.ccoels.c(class cBase, class c0) {\n  ⊢ d(cBase, ~(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.ccoels.w","content":"","origin":"axiom diff.ccoels.w(wff wBase, class c0) {\n  |- diffcw(ccoels(c0), wBase)\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.ccoels.w(wff wBase, class c0) {\n  ⊢ d(~(c0), wBase)\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"crels","content":"Extend the definition of a class to include the relation class.","origin":"const class crels { Rels }","pretty":"","parent":[],"children":[]},{"name":"diff.crels.s","content":"","origin":"axiom diff.crels.s(setvar s0) {\n  |- diffsc(s0, crels)\n}","pretty":"axiom diff.crels.s(setvar s0) {\n  ⊢ d(s0, Rels)\n}","parent":[],"children":[]},{"name":"diff.crels.c","content":"","origin":"axiom diff.crels.c(class c0) {\n  |- diffcc(crels, c0)\n}","pretty":"axiom diff.crels.c(class c0) {\n  ⊢ d(Rels, c0)\n}","parent":[],"children":[]},{"name":"diff.crels.w","content":"","origin":"axiom diff.crels.w(wff w0) {\n  |- diffcw(crels, w0)\n}","pretty":"axiom diff.crels.w(wff w0) {\n  ⊢ d(Rels, w0)\n}","parent":[],"children":[]},{"name":"cssr","content":"Extend the definition of a class to include the subset class.","origin":"const class cssr { _S }","pretty":"","parent":[],"children":[]},{"name":"diff.cssr.s","content":"","origin":"axiom diff.cssr.s(setvar s0) {\n  |- diffsc(s0, cssr)\n}","pretty":"axiom diff.cssr.s(setvar s0) {\n  ⊢ d(s0, _S)\n}","parent":[],"children":[]},{"name":"diff.cssr.c","content":"","origin":"axiom diff.cssr.c(class c0) {\n  |- diffcc(cssr, c0)\n}","pretty":"axiom diff.cssr.c(class c0) {\n  ⊢ d(_S, c0)\n}","parent":[],"children":[]},{"name":"diff.cssr.w","content":"","origin":"axiom diff.cssr.w(wff w0) {\n  |- diffcw(cssr, w0)\n}","pretty":"axiom diff.cssr.w(wff w0) {\n  ⊢ d(_S, w0)\n}","parent":[],"children":[]},{"name":"crefs","content":"Extend the definition of a class to include the reflexivity class.","origin":"const class crefs { Refs }","pretty":"","parent":[],"children":[]},{"name":"diff.crefs.s","content":"","origin":"axiom diff.crefs.s(setvar s0) {\n  |- diffsc(s0, crefs)\n}","pretty":"axiom diff.crefs.s(setvar s0) {\n  ⊢ d(s0, Refs)\n}","parent":[],"children":[]},{"name":"diff.crefs.c","content":"","origin":"axiom diff.crefs.c(class c0) {\n  |- diffcc(crefs, c0)\n}","pretty":"axiom diff.crefs.c(class c0) {\n  ⊢ d(Refs, c0)\n}","parent":[],"children":[]},{"name":"diff.crefs.w","content":"","origin":"axiom diff.crefs.w(wff w0) {\n  |- diffcw(crefs, w0)\n}","pretty":"axiom diff.crefs.w(wff w0) {\n  ⊢ d(Refs, w0)\n}","parent":[],"children":[]},{"name":"crefrels","content":"Extend the definition of a class to include the reflexive relations class.","origin":"const class crefrels { RefRels }","pretty":"","parent":[],"children":[]},{"name":"diff.crefrels.s","content":"","origin":"axiom diff.crefrels.s(setvar s0) {\n  |- diffsc(s0, crefrels)\n}","pretty":"axiom diff.crefrels.s(setvar s0) {\n  ⊢ d(s0, RefRels)\n}","parent":[],"children":[]},{"name":"diff.crefrels.c","content":"","origin":"axiom diff.crefrels.c(class c0) {\n  |- diffcc(crefrels, c0)\n}","pretty":"axiom diff.crefrels.c(class c0) {\n  ⊢ d(RefRels, c0)\n}","parent":[],"children":[]},{"name":"diff.crefrels.w","content":"","origin":"axiom diff.crefrels.w(wff w0) {\n  |- diffcw(crefrels, w0)\n}","pretty":"axiom diff.crefrels.w(wff w0) {\n  ⊢ d(RefRels, w0)\n}","parent":[],"children":[]},{"name":"wrefrel","content":"Extend the definition of a wff to include the reflexive relation predicate. (Read: ` R ` is a reflexive relation.)","origin":"prop wff wrefrel(class c0) { RefRel(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wrefrel.s","content":"","origin":"axiom diff.wrefrel.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wrefrel(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wrefrel.s(setvar sBase, class c0) {\n  ⊢ d(sBase, RefRel(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wrefrel.c","content":"","origin":"axiom diff.wrefrel.c(class cBase, class c0) {\n  |- diffcw(cBase, wrefrel(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wrefrel.c(class cBase, class c0) {\n  ⊢ d(cBase, RefRel(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wrefrel.w","content":"","origin":"axiom diff.wrefrel.w(wff wBase, class c0) {\n  |- diffww(wBase, wrefrel(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wrefrel.w(wff wBase, class c0) {\n  ⊢ d(wBase, RefRel(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"ccnvrefs","content":"Extend the definition of a class to include the converse reflexivity class.","origin":"const class ccnvrefs { CnvRefs }","pretty":"","parent":[],"children":[]},{"name":"diff.ccnvrefs.s","content":"","origin":"axiom diff.ccnvrefs.s(setvar s0) {\n  |- diffsc(s0, ccnvrefs)\n}","pretty":"axiom diff.ccnvrefs.s(setvar s0) {\n  ⊢ d(s0, CnvRefs)\n}","parent":[],"children":[]},{"name":"diff.ccnvrefs.c","content":"","origin":"axiom diff.ccnvrefs.c(class c0) {\n  |- diffcc(ccnvrefs, c0)\n}","pretty":"axiom diff.ccnvrefs.c(class c0) {\n  ⊢ d(CnvRefs, c0)\n}","parent":[],"children":[]},{"name":"diff.ccnvrefs.w","content":"","origin":"axiom diff.ccnvrefs.w(wff w0) {\n  |- diffcw(ccnvrefs, w0)\n}","pretty":"axiom diff.ccnvrefs.w(wff w0) {\n  ⊢ d(CnvRefs, w0)\n}","parent":[],"children":[]},{"name":"ccnvrefrels","content":"Extend the definition of a class to include the converse reflexive relations class.","origin":"const class ccnvrefrels { CnvRefRels }","pretty":"","parent":[],"children":[]},{"name":"diff.ccnvrefrels.s","content":"","origin":"axiom diff.ccnvrefrels.s(setvar s0) {\n  |- diffsc(s0, ccnvrefrels)\n}","pretty":"axiom diff.ccnvrefrels.s(setvar s0) {\n  ⊢ d(s0, CnvRefRels)\n}","parent":[],"children":[]},{"name":"diff.ccnvrefrels.c","content":"","origin":"axiom diff.ccnvrefrels.c(class c0) {\n  |- diffcc(ccnvrefrels, c0)\n}","pretty":"axiom diff.ccnvrefrels.c(class c0) {\n  ⊢ d(CnvRefRels, c0)\n}","parent":[],"children":[]},{"name":"diff.ccnvrefrels.w","content":"","origin":"axiom diff.ccnvrefrels.w(wff w0) {\n  |- diffcw(ccnvrefrels, w0)\n}","pretty":"axiom diff.ccnvrefrels.w(wff w0) {\n  ⊢ d(CnvRefRels, w0)\n}","parent":[],"children":[]},{"name":"wcnvrefrel","content":"Extend the definition of a wff to include the converse reflexive relation predicate. (Read: ` R ` is a converse reflexive relation.)","origin":"prop wff wcnvrefrel(class c0) { CnvRefRel(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wcnvrefrel.s","content":"","origin":"axiom diff.wcnvrefrel.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wcnvrefrel(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wcnvrefrel.s(setvar sBase, class c0) {\n  ⊢ d(sBase, CnvRefRel(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wcnvrefrel.c","content":"","origin":"axiom diff.wcnvrefrel.c(class cBase, class c0) {\n  |- diffcw(cBase, wcnvrefrel(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wcnvrefrel.c(class cBase, class c0) {\n  ⊢ d(cBase, CnvRefRel(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wcnvrefrel.w","content":"","origin":"axiom diff.wcnvrefrel.w(wff wBase, class c0) {\n  |- diffww(wBase, wcnvrefrel(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wcnvrefrel.w(wff wBase, class c0) {\n  ⊢ d(wBase, CnvRefRel(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"csyms","content":"Extend the definition of a class to include the symmetry class.","origin":"const class csyms { Syms }","pretty":"","parent":[],"children":[]},{"name":"diff.csyms.s","content":"","origin":"axiom diff.csyms.s(setvar s0) {\n  |- diffsc(s0, csyms)\n}","pretty":"axiom diff.csyms.s(setvar s0) {\n  ⊢ d(s0, Syms)\n}","parent":[],"children":[]},{"name":"diff.csyms.c","content":"","origin":"axiom diff.csyms.c(class c0) {\n  |- diffcc(csyms, c0)\n}","pretty":"axiom diff.csyms.c(class c0) {\n  ⊢ d(Syms, c0)\n}","parent":[],"children":[]},{"name":"diff.csyms.w","content":"","origin":"axiom diff.csyms.w(wff w0) {\n  |- diffcw(csyms, w0)\n}","pretty":"axiom diff.csyms.w(wff w0) {\n  ⊢ d(Syms, w0)\n}","parent":[],"children":[]},{"name":"csymrels","content":"Extend the definition of a class to include the symmetry relations class.","origin":"const class csymrels { SymRels }","pretty":"","parent":[],"children":[]},{"name":"diff.csymrels.s","content":"","origin":"axiom diff.csymrels.s(setvar s0) {\n  |- diffsc(s0, csymrels)\n}","pretty":"axiom diff.csymrels.s(setvar s0) {\n  ⊢ d(s0, SymRels)\n}","parent":[],"children":[]},{"name":"diff.csymrels.c","content":"","origin":"axiom diff.csymrels.c(class c0) {\n  |- diffcc(csymrels, c0)\n}","pretty":"axiom diff.csymrels.c(class c0) {\n  ⊢ d(SymRels, c0)\n}","parent":[],"children":[]},{"name":"diff.csymrels.w","content":"","origin":"axiom diff.csymrels.w(wff w0) {\n  |- diffcw(csymrels, w0)\n}","pretty":"axiom diff.csymrels.w(wff w0) {\n  ⊢ d(SymRels, w0)\n}","parent":[],"children":[]},{"name":"wsymrel","content":"Extend the definition of a wff to include the symmetry relation predicate. (Read: ` R ` is a symmetric relation.)","origin":"prop wff wsymrel(class c0) { SymRel(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wsymrel.s","content":"","origin":"axiom diff.wsymrel.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wsymrel(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wsymrel.s(setvar sBase, class c0) {\n  ⊢ d(sBase, SymRel(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wsymrel.c","content":"","origin":"axiom diff.wsymrel.c(class cBase, class c0) {\n  |- diffcw(cBase, wsymrel(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wsymrel.c(class cBase, class c0) {\n  ⊢ d(cBase, SymRel(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wsymrel.w","content":"","origin":"axiom diff.wsymrel.w(wff wBase, class c0) {\n  |- diffww(wBase, wsymrel(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wsymrel.w(wff wBase, class c0) {\n  ⊢ d(wBase, SymRel(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"ctrs","content":"Extend the definition of a class to include the transitivity class (but cf. the transitive class defined in ~ df-tr ).","origin":"const class ctrs { Trs }","pretty":"","parent":[],"children":[]},{"name":"diff.ctrs.s","content":"","origin":"axiom diff.ctrs.s(setvar s0) {\n  |- diffsc(s0, ctrs)\n}","pretty":"axiom diff.ctrs.s(setvar s0) {\n  ⊢ d(s0, Trs)\n}","parent":[],"children":[]},{"name":"diff.ctrs.c","content":"","origin":"axiom diff.ctrs.c(class c0) {\n  |- diffcc(ctrs, c0)\n}","pretty":"axiom diff.ctrs.c(class c0) {\n  ⊢ d(Trs, c0)\n}","parent":[],"children":[]},{"name":"diff.ctrs.w","content":"","origin":"axiom diff.ctrs.w(wff w0) {\n  |- diffcw(ctrs, w0)\n}","pretty":"axiom diff.ctrs.w(wff w0) {\n  ⊢ d(Trs, w0)\n}","parent":[],"children":[]},{"name":"ctrrels","content":"Extend the definition of a class to include the transitive relations class.","origin":"const class ctrrels { TrRels }","pretty":"","parent":[],"children":[]},{"name":"diff.ctrrels.s","content":"","origin":"axiom diff.ctrrels.s(setvar s0) {\n  |- diffsc(s0, ctrrels)\n}","pretty":"axiom diff.ctrrels.s(setvar s0) {\n  ⊢ d(s0, TrRels)\n}","parent":[],"children":[]},{"name":"diff.ctrrels.c","content":"","origin":"axiom diff.ctrrels.c(class c0) {\n  |- diffcc(ctrrels, c0)\n}","pretty":"axiom diff.ctrrels.c(class c0) {\n  ⊢ d(TrRels, c0)\n}","parent":[],"children":[]},{"name":"diff.ctrrels.w","content":"","origin":"axiom diff.ctrrels.w(wff w0) {\n  |- diffcw(ctrrels, w0)\n}","pretty":"axiom diff.ctrrels.w(wff w0) {\n  ⊢ d(TrRels, w0)\n}","parent":[],"children":[]},{"name":"wtrrel","content":"Extend the definition of a wff to include the transitive relation predicate. (Read: ` R ` is a transitive relation.)","origin":"prop wff wtrrel(class c0) { TrRel(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wtrrel.s","content":"","origin":"axiom diff.wtrrel.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wtrrel(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wtrrel.s(setvar sBase, class c0) {\n  ⊢ d(sBase, TrRel(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wtrrel.c","content":"","origin":"axiom diff.wtrrel.c(class cBase, class c0) {\n  |- diffcw(cBase, wtrrel(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wtrrel.c(class cBase, class c0) {\n  ⊢ d(cBase, TrRel(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wtrrel.w","content":"","origin":"axiom diff.wtrrel.w(wff wBase, class c0) {\n  |- diffww(wBase, wtrrel(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wtrrel.w(wff wBase, class c0) {\n  ⊢ d(wBase, TrRel(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"ceqvrels","content":"Extend the definition of a class to include the equivalence relations class.","origin":"const class ceqvrels { EqvRels }","pretty":"","parent":[],"children":[]},{"name":"diff.ceqvrels.s","content":"","origin":"axiom diff.ceqvrels.s(setvar s0) {\n  |- diffsc(s0, ceqvrels)\n}","pretty":"axiom diff.ceqvrels.s(setvar s0) {\n  ⊢ d(s0, EqvRels)\n}","parent":[],"children":[]},{"name":"diff.ceqvrels.c","content":"","origin":"axiom diff.ceqvrels.c(class c0) {\n  |- diffcc(ceqvrels, c0)\n}","pretty":"axiom diff.ceqvrels.c(class c0) {\n  ⊢ d(EqvRels, c0)\n}","parent":[],"children":[]},{"name":"diff.ceqvrels.w","content":"","origin":"axiom diff.ceqvrels.w(wff w0) {\n  |- diffcw(ceqvrels, w0)\n}","pretty":"axiom diff.ceqvrels.w(wff w0) {\n  ⊢ d(EqvRels, w0)\n}","parent":[],"children":[]},{"name":"weqvrel","content":"Extend the definition of a wff to include the equivalence relation predicate. (Read: ` R ` is an equivalence relation.)","origin":"prop wff weqvrel(class c0) { EqvRel(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.weqvrel.s","content":"","origin":"axiom diff.weqvrel.s(setvar sBase, class c0) {\n  |- diffsw(sBase, weqvrel(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.weqvrel.s(setvar sBase, class c0) {\n  ⊢ d(sBase, EqvRel(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.weqvrel.c","content":"","origin":"axiom diff.weqvrel.c(class cBase, class c0) {\n  |- diffcw(cBase, weqvrel(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.weqvrel.c(class cBase, class c0) {\n  ⊢ d(cBase, EqvRel(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.weqvrel.w","content":"","origin":"axiom diff.weqvrel.w(wff wBase, class c0) {\n  |- diffww(wBase, weqvrel(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.weqvrel.w(wff wBase, class c0) {\n  ⊢ d(wBase, EqvRel(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"ccoeleqvrels","content":"Extend the definition of a class to include the coelement equivalence relations class.","origin":"const class ccoeleqvrels { CoElEqvRels }","pretty":"","parent":[],"children":[]},{"name":"diff.ccoeleqvrels.s","content":"","origin":"axiom diff.ccoeleqvrels.s(setvar s0) {\n  |- diffsc(s0, ccoeleqvrels)\n}","pretty":"axiom diff.ccoeleqvrels.s(setvar s0) {\n  ⊢ d(s0, CoElEqvRels)\n}","parent":[],"children":[]},{"name":"diff.ccoeleqvrels.c","content":"","origin":"axiom diff.ccoeleqvrels.c(class c0) {\n  |- diffcc(ccoeleqvrels, c0)\n}","pretty":"axiom diff.ccoeleqvrels.c(class c0) {\n  ⊢ d(CoElEqvRels, c0)\n}","parent":[],"children":[]},{"name":"diff.ccoeleqvrels.w","content":"","origin":"axiom diff.ccoeleqvrels.w(wff w0) {\n  |- diffcw(ccoeleqvrels, w0)\n}","pretty":"axiom diff.ccoeleqvrels.w(wff w0) {\n  ⊢ d(CoElEqvRels, w0)\n}","parent":[],"children":[]},{"name":"wcoeleqvrel","content":"Extend the definition of a wff to include the coelement equivalence relation predicate. (Read: the coelement equivalence relation on ` A ` .)","origin":"prop wff wcoeleqvrel(class c0) { CoElEqvRel(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wcoeleqvrel.s","content":"","origin":"axiom diff.wcoeleqvrel.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wcoeleqvrel(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wcoeleqvrel.s(setvar sBase, class c0) {\n  ⊢ d(sBase, CoElEqvRel(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wcoeleqvrel.c","content":"","origin":"axiom diff.wcoeleqvrel.c(class cBase, class c0) {\n  |- diffcw(cBase, wcoeleqvrel(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wcoeleqvrel.c(class cBase, class c0) {\n  ⊢ d(cBase, CoElEqvRel(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wcoeleqvrel.w","content":"","origin":"axiom diff.wcoeleqvrel.w(wff wBase, class c0) {\n  |- diffww(wBase, wcoeleqvrel(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wcoeleqvrel.w(wff wBase, class c0) {\n  ⊢ d(wBase, CoElEqvRel(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"credunds","content":"Extend the definition of a class to include the redundancy class.","origin":"const class credunds { Redunds }","pretty":"","parent":[],"children":[]},{"name":"diff.credunds.s","content":"","origin":"axiom diff.credunds.s(setvar s0) {\n  |- diffsc(s0, credunds)\n}","pretty":"axiom diff.credunds.s(setvar s0) {\n  ⊢ d(s0, Redunds)\n}","parent":[],"children":[]},{"name":"diff.credunds.c","content":"","origin":"axiom diff.credunds.c(class c0) {\n  |- diffcc(credunds, c0)\n}","pretty":"axiom diff.credunds.c(class c0) {\n  ⊢ d(Redunds, c0)\n}","parent":[],"children":[]},{"name":"diff.credunds.w","content":"","origin":"axiom diff.credunds.w(wff w0) {\n  |- diffcw(credunds, w0)\n}","pretty":"axiom diff.credunds.w(wff w0) {\n  ⊢ d(Redunds, w0)\n}","parent":[],"children":[]},{"name":"wredund","content":"Extend the definition of a wff to include the redundancy predicate. (Read: ` A ` is redundant with respect to ` B ` in ` C ` .)","origin":"prop wff wredund(class c0, class c1, class c2) { Redund(c0, < c1, c2 >) }","pretty":"","parent":[],"children":[]},{"name":"diff.wredund.s","content":"","origin":"axiom diff.wredund.s(setvar sBase, class c0, class c1, class c2) {\n  |- diffsw(sBase, wredund(c0, c1, c2))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n  -| diffsc(sBase, c2)\n}","pretty":"axiom diff.wredund.s(setvar sBase, class c0, class c1, class c2) {\n  ⊢ d(sBase, Redund(c0, < c1, c2 >))\n  ⊣ d(sBase, c0)\n  ⊣ d(sBase, c1)\n  ⊣ d(sBase, c2)\n}","parent":[],"children":[]},{"name":"diff.wredund.c","content":"","origin":"axiom diff.wredund.c(class cBase, class c0, class c1, class c2) {\n  |- diffcw(cBase, wredund(c0, c1, c2))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n  -| diffcc(cBase, c2)\n}","pretty":"axiom diff.wredund.c(class cBase, class c0, class c1, class c2) {\n  ⊢ d(cBase, Redund(c0, < c1, c2 >))\n  ⊣ d(cBase, c0)\n  ⊣ d(cBase, c1)\n  ⊣ d(cBase, c2)\n}","parent":[],"children":[]},{"name":"diff.wredund.w","content":"","origin":"axiom diff.wredund.w(wff wBase, class c0, class c1, class c2) {\n  |- diffww(wBase, wredund(c0, c1, c2))\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n  -| diffcw(c2, wBase)\n}","pretty":"axiom diff.wredund.w(wff wBase, class c0, class c1, class c2) {\n  ⊢ d(wBase, Redund(c0, < c1, c2 >))\n  ⊣ d(c0, wBase)\n  ⊣ d(c1, wBase)\n  ⊣ d(c2, wBase)\n}","parent":[],"children":[]},{"name":"wredundp","content":"Extend wff definition to include the redundancy operator for propositions.","origin":"prop wff wredundp(wff w0, wff w1, wff w2) { redund(w0, w1, w2) }","pretty":"","parent":[],"children":[]},{"name":"diff.wredundp.s","content":"","origin":"axiom diff.wredundp.s(setvar sBase, wff w0, wff w1, wff w2) {\n  |- diffsw(sBase, wredundp(w0, w1, w2))\n  -| diffsw(sBase, w0)\n  -| diffsw(sBase, w1)\n  -| diffsw(sBase, w2)\n}","pretty":"axiom diff.wredundp.s(setvar sBase, wff w0, wff w1, wff w2) {\n  ⊢ d(sBase, redund(w0, w1, w2))\n  ⊣ d(sBase, w0)\n  ⊣ d(sBase, w1)\n  ⊣ d(sBase, w2)\n}","parent":[],"children":[]},{"name":"diff.wredundp.c","content":"","origin":"axiom diff.wredundp.c(class cBase, wff w0, wff w1, wff w2) {\n  |- diffcw(cBase, wredundp(w0, w1, w2))\n  -| diffcw(cBase, w0)\n  -| diffcw(cBase, w1)\n  -| diffcw(cBase, w2)\n}","pretty":"axiom diff.wredundp.c(class cBase, wff w0, wff w1, wff w2) {\n  ⊢ d(cBase, redund(w0, w1, w2))\n  ⊣ d(cBase, w0)\n  ⊣ d(cBase, w1)\n  ⊣ d(cBase, w2)\n}","parent":[],"children":[]},{"name":"diff.wredundp.w","content":"","origin":"axiom diff.wredundp.w(wff wBase, wff w0, wff w1, wff w2) {\n  |- diffww(wBase, wredundp(w0, w1, w2))\n  -| diffww(wBase, w0)\n  -| diffww(wBase, w1)\n  -| diffww(wBase, w2)\n}","pretty":"axiom diff.wredundp.w(wff wBase, wff w0, wff w1, wff w2) {\n  ⊢ d(wBase, redund(w0, w1, w2))\n  ⊣ d(wBase, w0)\n  ⊣ d(wBase, w1)\n  ⊣ d(wBase, w2)\n}","parent":[],"children":[]},{"name":"cdmqss","content":"Extend the definition of a class to include the domain quotients class.","origin":"const class cdmqss { DomainQss }","pretty":"","parent":[],"children":[]},{"name":"diff.cdmqss.s","content":"","origin":"axiom diff.cdmqss.s(setvar s0) {\n  |- diffsc(s0, cdmqss)\n}","pretty":"axiom diff.cdmqss.s(setvar s0) {\n  ⊢ d(s0, DomainQss)\n}","parent":[],"children":[]},{"name":"diff.cdmqss.c","content":"","origin":"axiom diff.cdmqss.c(class c0) {\n  |- diffcc(cdmqss, c0)\n}","pretty":"axiom diff.cdmqss.c(class c0) {\n  ⊢ d(DomainQss, c0)\n}","parent":[],"children":[]},{"name":"diff.cdmqss.w","content":"","origin":"axiom diff.cdmqss.w(wff w0) {\n  |- diffcw(cdmqss, w0)\n}","pretty":"axiom diff.cdmqss.w(wff w0) {\n  ⊢ d(DomainQss, w0)\n}","parent":[],"children":[]},{"name":"wdmqs","content":"Extend the definition of a wff to include the domain quotient predicate. (Read: the domain quotient of ` R ` is ` A ` .)","origin":"prop wff wdmqs(class c0, class c1) { c0[DomainQs]c1 }","pretty":"","parent":[],"children":[]},{"name":"diff.wdmqs.s","content":"","origin":"axiom diff.wdmqs.s(setvar sBase, class c0, class c1) {\n  |- diffsw(sBase, wdmqs(c0, c1))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n}","pretty":"axiom diff.wdmqs.s(setvar sBase, class c0, class c1) {\n  ⊢ d(sBase, c0[DomainQs]c1)\n  ⊣ d(sBase, c0)\n  ⊣ d(sBase, c1)\n}","parent":[],"children":[]},{"name":"diff.wdmqs.c","content":"","origin":"axiom diff.wdmqs.c(class cBase, class c0, class c1) {\n  |- diffcw(cBase, wdmqs(c0, c1))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n}","pretty":"axiom diff.wdmqs.c(class cBase, class c0, class c1) {\n  ⊢ d(cBase, c0[DomainQs]c1)\n  ⊣ d(cBase, c0)\n  ⊣ d(cBase, c1)\n}","parent":[],"children":[]},{"name":"diff.wdmqs.w","content":"","origin":"axiom diff.wdmqs.w(wff wBase, class c0, class c1) {\n  |- diffww(wBase, wdmqs(c0, c1))\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n}","pretty":"axiom diff.wdmqs.w(wff wBase, class c0, class c1) {\n  ⊢ d(wBase, c0[DomainQs]c1)\n  ⊣ d(c0, wBase)\n  ⊣ d(c1, wBase)\n}","parent":[],"children":[]},{"name":"cers","content":"Extend the definition of a class to include the equivalence relations on their domain quotients class.","origin":"const class cers { Ers }","pretty":"","parent":[],"children":[]},{"name":"diff.cers.s","content":"","origin":"axiom diff.cers.s(setvar s0) {\n  |- diffsc(s0, cers)\n}","pretty":"axiom diff.cers.s(setvar s0) {\n  ⊢ d(s0, Ers)\n}","parent":[],"children":[]},{"name":"diff.cers.c","content":"","origin":"axiom diff.cers.c(class c0) {\n  |- diffcc(cers, c0)\n}","pretty":"axiom diff.cers.c(class c0) {\n  ⊢ d(Ers, c0)\n}","parent":[],"children":[]},{"name":"diff.cers.w","content":"","origin":"axiom diff.cers.w(wff w0) {\n  |- diffcw(cers, w0)\n}","pretty":"axiom diff.cers.w(wff w0) {\n  ⊢ d(Ers, w0)\n}","parent":[],"children":[]},{"name":"werALTV","content":"Extend the definition of a wff to include the equivalence relation on its domain quotient predicate. (Read: ` R ` is an equivalence relation on its domain quotient ` A ` .)","origin":"prop wff werALTV(class c0, class c1) { c0[ErALTV]c1 }","pretty":"","parent":[],"children":[]},{"name":"diff.werALTV.s","content":"","origin":"axiom diff.werALTV.s(setvar sBase, class c0, class c1) {\n  |- diffsw(sBase, werALTV(c0, c1))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n}","pretty":"axiom diff.werALTV.s(setvar sBase, class c0, class c1) {\n  ⊢ d(sBase, c0[ErALTV]c1)\n  ⊣ d(sBase, c0)\n  ⊣ d(sBase, c1)\n}","parent":[],"children":[]},{"name":"diff.werALTV.c","content":"","origin":"axiom diff.werALTV.c(class cBase, class c0, class c1) {\n  |- diffcw(cBase, werALTV(c0, c1))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n}","pretty":"axiom diff.werALTV.c(class cBase, class c0, class c1) {\n  ⊢ d(cBase, c0[ErALTV]c1)\n  ⊣ d(cBase, c0)\n  ⊣ d(cBase, c1)\n}","parent":[],"children":[]},{"name":"diff.werALTV.w","content":"","origin":"axiom diff.werALTV.w(wff wBase, class c0, class c1) {\n  |- diffww(wBase, werALTV(c0, c1))\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n}","pretty":"axiom diff.werALTV.w(wff wBase, class c0, class c1) {\n  ⊢ d(wBase, c0[ErALTV]c1)\n  ⊣ d(c0, wBase)\n  ⊣ d(c1, wBase)\n}","parent":[],"children":[]},{"name":"cmembers","content":"Extend the definition of a class to include the membership equivalence relations class.","origin":"const class cmembers { MembErs }","pretty":"","parent":[],"children":[]},{"name":"diff.cmembers.s","content":"","origin":"axiom diff.cmembers.s(setvar s0) {\n  |- diffsc(s0, cmembers)\n}","pretty":"axiom diff.cmembers.s(setvar s0) {\n  ⊢ d(s0, MembErs)\n}","parent":[],"children":[]},{"name":"diff.cmembers.c","content":"","origin":"axiom diff.cmembers.c(class c0) {\n  |- diffcc(cmembers, c0)\n}","pretty":"axiom diff.cmembers.c(class c0) {\n  ⊢ d(MembErs, c0)\n}","parent":[],"children":[]},{"name":"diff.cmembers.w","content":"","origin":"axiom diff.cmembers.w(wff w0) {\n  |- diffcw(cmembers, w0)\n}","pretty":"axiom diff.cmembers.w(wff w0) {\n  ⊢ d(MembErs, w0)\n}","parent":[],"children":[]},{"name":"wmember","content":"Extend the definition of a wff to include the membership equivalence relation predicate. (Read: the membership equivalence relation on ` A ` , or, the restricted elementhood equivalence relation on its domain quotient ` A ` .)","origin":"prop wff wmember(class c0) { MembEr(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wmember.s","content":"","origin":"axiom diff.wmember.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wmember(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wmember.s(setvar sBase, class c0) {\n  ⊢ d(sBase, MembEr(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wmember.c","content":"","origin":"axiom diff.wmember.c(class cBase, class c0) {\n  |- diffcw(cBase, wmember(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wmember.c(class cBase, class c0) {\n  ⊢ d(cBase, MembEr(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wmember.w","content":"","origin":"axiom diff.wmember.w(wff wBase, class c0) {\n  |- diffww(wBase, wmember(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wmember.w(wff wBase, class c0) {\n  ⊢ d(wBase, MembEr(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"cfunss","content":"Extend the definition of a class to include the function set class.","origin":"const class cfunss { Funss }","pretty":"","parent":[],"children":[]},{"name":"diff.cfunss.s","content":"","origin":"axiom diff.cfunss.s(setvar s0) {\n  |- diffsc(s0, cfunss)\n}","pretty":"axiom diff.cfunss.s(setvar s0) {\n  ⊢ d(s0, Funss)\n}","parent":[],"children":[]},{"name":"diff.cfunss.c","content":"","origin":"axiom diff.cfunss.c(class c0) {\n  |- diffcc(cfunss, c0)\n}","pretty":"axiom diff.cfunss.c(class c0) {\n  ⊢ d(Funss, c0)\n}","parent":[],"children":[]},{"name":"diff.cfunss.w","content":"","origin":"axiom diff.cfunss.w(wff w0) {\n  |- diffcw(cfunss, w0)\n}","pretty":"axiom diff.cfunss.w(wff w0) {\n  ⊢ d(Funss, w0)\n}","parent":[],"children":[]},{"name":"cfunsALTV","content":"Extend the definition of a class to include the functions class, i.e., the function relations class.","origin":"const class cfunsALTV { FunsALTV }","pretty":"","parent":[],"children":[]},{"name":"diff.cfunsALTV.s","content":"","origin":"axiom diff.cfunsALTV.s(setvar s0) {\n  |- diffsc(s0, cfunsALTV)\n}","pretty":"axiom diff.cfunsALTV.s(setvar s0) {\n  ⊢ d(s0, FunsALTV)\n}","parent":[],"children":[]},{"name":"diff.cfunsALTV.c","content":"","origin":"axiom diff.cfunsALTV.c(class c0) {\n  |- diffcc(cfunsALTV, c0)\n}","pretty":"axiom diff.cfunsALTV.c(class c0) {\n  ⊢ d(FunsALTV, c0)\n}","parent":[],"children":[]},{"name":"diff.cfunsALTV.w","content":"","origin":"axiom diff.cfunsALTV.w(wff w0) {\n  |- diffcw(cfunsALTV, w0)\n}","pretty":"axiom diff.cfunsALTV.w(wff w0) {\n  ⊢ d(FunsALTV, w0)\n}","parent":[],"children":[]},{"name":"wfunALTV","content":"Extend the definition of a wff to include the function predicate, i.e., the function relation predicate. (Read: ` F ` is a function.)","origin":"prop wff wfunALTV(class c0) { FunALTV(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.wfunALTV.s","content":"","origin":"axiom diff.wfunALTV.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wfunALTV(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wfunALTV.s(setvar sBase, class c0) {\n  ⊢ d(sBase, FunALTV(c0))\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wfunALTV.c","content":"","origin":"axiom diff.wfunALTV.c(class cBase, class c0) {\n  |- diffcw(cBase, wfunALTV(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wfunALTV.c(class cBase, class c0) {\n  ⊢ d(cBase, FunALTV(c0))\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wfunALTV.w","content":"","origin":"axiom diff.wfunALTV.w(wff wBase, class c0) {\n  |- diffww(wBase, wfunALTV(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wfunALTV.w(wff wBase, class c0) {\n  ⊢ d(wBase, FunALTV(c0))\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"cdisjss","content":"Extend the definition of a class to include the disjoint set class.","origin":"const class cdisjss { Disjss }","pretty":"","parent":[],"children":[]},{"name":"diff.cdisjss.s","content":"","origin":"axiom diff.cdisjss.s(setvar s0) {\n  |- diffsc(s0, cdisjss)\n}","pretty":"axiom diff.cdisjss.s(setvar s0) {\n  ⊢ d(s0, Disjss)\n}","parent":[],"children":[]},{"name":"diff.cdisjss.c","content":"","origin":"axiom diff.cdisjss.c(class c0) {\n  |- diffcc(cdisjss, c0)\n}","pretty":"axiom diff.cdisjss.c(class c0) {\n  ⊢ d(Disjss, c0)\n}","parent":[],"children":[]},{"name":"diff.cdisjss.w","content":"","origin":"axiom diff.cdisjss.w(wff w0) {\n  |- diffcw(cdisjss, w0)\n}","pretty":"axiom diff.cdisjss.w(wff w0) {\n  ⊢ d(Disjss, w0)\n}","parent":[],"children":[]},{"name":"cdisjs","content":"Extend the definition of a class to include the disjoints class, i.e., the disjoint relations class.","origin":"const class cdisjs { Disjs }","pretty":"","parent":[],"children":[]},{"name":"diff.cdisjs.s","content":"","origin":"axiom diff.cdisjs.s(setvar s0) {\n  |- diffsc(s0, cdisjs)\n}","pretty":"axiom diff.cdisjs.s(setvar s0) {\n  ⊢ d(s0, Disjs)\n}","parent":[],"children":[]},{"name":"diff.cdisjs.c","content":"","origin":"axiom diff.cdisjs.c(class c0) {\n  |- diffcc(cdisjs, c0)\n}","pretty":"axiom diff.cdisjs.c(class c0) {\n  ⊢ d(Disjs, c0)\n}","parent":[],"children":[]},{"name":"diff.cdisjs.w","content":"","origin":"axiom diff.cdisjs.w(wff w0) {\n  |- diffcw(cdisjs, w0)\n}","pretty":"axiom diff.cdisjs.w(wff w0) {\n  ⊢ d(Disjs, w0)\n}","parent":[],"children":[]},{"name":"wdisjALTV","content":"Extend the definition of a wff to include the disjoint predicate, i.e., the disjoint relation predicate. (Read: ` R ` is a disjoint.)","origin":"prop wff wdisjALTV(class c0) { ⊔ c0 }","pretty":"","parent":[],"children":[]},{"name":"diff.wdisjALTV.s","content":"","origin":"axiom diff.wdisjALTV.s(setvar sBase, class c0) {\n  |- diffsw(sBase, wdisjALTV(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.wdisjALTV.s(setvar sBase, class c0) {\n  ⊢ d(sBase, ⊔ c0)\n  ⊣ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wdisjALTV.c","content":"","origin":"axiom diff.wdisjALTV.c(class cBase, class c0) {\n  |- diffcw(cBase, wdisjALTV(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.wdisjALTV.c(class cBase, class c0) {\n  ⊢ d(cBase, ⊔ c0)\n  ⊣ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.wdisjALTV.w","content":"","origin":"axiom diff.wdisjALTV.w(wff wBase, class c0) {\n  |- diffww(wBase, wdisjALTV(c0))\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.wdisjALTV.w(wff wBase, class c0) {\n  ⊢ d(wBase, ⊔ c0)\n  ⊣ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"celdisjs","content":"Extend the definition of a class to include the disjoint elements class, i.e., the disjoint elementhood relations class.","origin":"const class celdisjs { ElDisjs }","pretty":"","parent":[],"children":[]},{"name":"diff.celdisjs.s","content":"","origin":"axiom diff.celdisjs.s(setvar s0) {\n  |- diffsc(s0, celdisjs)\n}","pretty":"axiom diff.celdisjs.s(setvar s0) {\n  ⊢ d(s0, ElDisjs)\n}","parent":[],"children":[]},{"name":"diff.celdisjs.c","content":"","origin":"axiom diff.celdisjs.c(class c0) {\n  |- diffcc(celdisjs, c0)\n}","pretty":"axiom diff.celdisjs.c(class c0) {\n  ⊢ d(ElDisjs, c0)\n}","parent":[],"children":[]},{"name":"diff.celdisjs.w","content":"","origin":"axiom diff.celdisjs.w(wff w0) {\n  |- diffcw(celdisjs, w0)\n}","pretty":"axiom diff.celdisjs.w(wff w0) {\n  ⊢ d(ElDisjs, w0)\n}","parent":[],"children":[]},{"name":"weldisj","content":"Extend the definition of a wff to include the disjoint elementhood predicate, i.e., the disjoint elementhood relation predicate. (Read: the elements of ` A ` are disjoint.)","origin":"prop wff weldisj(class c0) { ElDisj(c0) }","pretty":"","parent":[],"children":[]}]}