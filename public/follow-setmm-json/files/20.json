{"index":20,"title":"The true constant","content":"","blocks":[{"name":"diff.wceq.s","content":"","origin":"axiom diff.wceq.s(setvar sBase, class c0, class c1) {\n  |- diffsw(sBase, wceq(c0, c1))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n}","pretty":"axiom diff.wceq.s(setvar sBase, class c0, class c1) {\n  ⊢ d(sBase, c0 = c1)\n  ⊣ d(sBase, c0)\n  ⊣ d(sBase, c1)\n}","parent":[],"children":[]},{"name":"diff.wceq.c","content":"","origin":"axiom diff.wceq.c(class cBase, class c0, class c1) {\n  |- diffcw(cBase, wceq(c0, c1))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n}","pretty":"axiom diff.wceq.c(class cBase, class c0, class c1) {\n  ⊢ d(cBase, c0 = c1)\n  ⊣ d(cBase, c0)\n  ⊣ d(cBase, c1)\n}","parent":[],"children":[]},{"name":"diff.wceq.w","content":"","origin":"axiom diff.wceq.w(wff wBase, class c0, class c1) {\n  |- diffww(wBase, wceq(c0, c1))\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n}","pretty":"axiom diff.wceq.w(wff wBase, class c0, class c1) {\n  ⊢ d(wBase, c0 = c1)\n  ⊣ d(c0, wBase)\n  ⊣ d(c1, wBase)\n}","parent":[],"children":[]},{"name":"wtru","content":"The constant ` T. ` is a wff.","origin":"const wff wtru { T }","pretty":"","parent":[],"children":[]},{"name":"absurd.wtru","content":"","origin":"absurd absurd.wtru() { |-| wn(wtru) }","pretty":"absurd absurd.wtru() { ʜ ¬ T}","parent":[],"children":[]},{"name":"diff.wtru.s","content":"","origin":"axiom diff.wtru.s(setvar s0) {\n  |- diffsw(s0, wtru)\n}","pretty":"axiom diff.wtru.s(setvar s0) {\n  ⊢ d(s0, T)\n}","parent":[],"children":[]},{"name":"diff.wtru.c","content":"","origin":"axiom diff.wtru.c(class c0) {\n  |- diffcw(c0, wtru)\n}","pretty":"axiom diff.wtru.c(class c0) {\n  ⊢ d(c0, T)\n}","parent":[],"children":[]},{"name":"diff.wtru.w","content":"","origin":"axiom diff.wtru.w(wff w0) {\n  |- diffww(wtru, w0)\n}","pretty":"axiom diff.wtru.w(wff w0) {\n  ⊢ d(T, w0)\n}","parent":[],"children":[]},{"name":"trujust","content":"Soundness justification theorem for ~ df-tru . Instance of ~ monothetic . (Contributed by Mario Carneiro, 17-Nov-2013.) (Revised by NM, 11-Jul-2019.)","origin":"thm trujust(setvar s0, setvar s1) {\n  |- wb(wi(wal(s0, wceq(cv(s0), cv(s0))), wal(s0, wceq(cv(s0), cv(s0)))), wi(wal(s1, wceq(cv(s1), cv(s1))), wal(s1, wceq(cv(s1), cv(s1)))))\n} = {\n  monothetic(wal(s0, wceq(cv(s0), cv(s0))), wal(s1, wceq(cv(s1), cv(s1))))\n}","pretty":"thm trujust(setvar s0, setvar s1) {\n  ⊢ ((∀(s0, s0 = s0)→ ∀(s0, s0 = s0))↔(∀(s1, s1 = s1)→ ∀(s1, s1 = s1)))\n} = {\n  monothetic(∀(s0, s0 = s0), ∀(s1, s1 = s1))\n}","parent":["monothetic"],"children":[]},{"name":"trujustOLD","content":"Obsolete proof of ~ trujust as of 7-Sep-2022. (Contributed by Mario Carneiro, 17-Nov-2013.) (Revised by NM, 11-Jul-2019.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm trujustOLD(setvar s0, setvar s1) {\n  |- wb(wi(wal(s0, wceq(cv(s0), cv(s0))), wal(s0, wceq(cv(s0), cv(s0)))), wi(wal(s1, wceq(cv(s1), cv(s1))), wal(s1, wceq(cv(s1), cv(s1)))))\n} = {\n  2th(wi(wal(s0, wceq(cv(s0), cv(s0))), wal(s0, wceq(cv(s0), cv(s0)))), wi(wal(s1, wceq(cv(s1), cv(s1))), wal(s1, wceq(cv(s1), cv(s1)))))\n  id(wal(s0, wceq(cv(s0), cv(s0))))\n  id(wal(s1, wceq(cv(s1), cv(s1))))\n}","pretty":"thm trujustOLD(setvar s0, setvar s1) {\n  ⊢ ((∀(s0, s0 = s0)→ ∀(s0, s0 = s0))↔(∀(s1, s1 = s1)→ ∀(s1, s1 = s1)))\n} = {\n  2th((∀(s0, s0 = s0)→ ∀(s0, s0 = s0)), (∀(s1, s1 = s1)→ ∀(s1, s1 = s1)))\n  id(∀(s0, s0 = s0))\n  id(∀(s1, s1 = s1))\n}","parent":["2th","id"],"children":[]},{"name":"df-tru","content":"Definition of the truth value \"true\", or \"verum\", denoted by ` T. ` . In this definition, an instance of ~ id is used as the definiens, although any tautology, such as an axiom, can be used in its place. This particular instance of ~ id was chosen so this definition can be checked by the same algorithm that is used for predicate calculus. This definition should be referenced directly only by ~ tru , and other proofs should use ~ tru instead of this definition, since there are many alternate ways to define ` T. ` . (Contributed by Anthony Hart, 13-Oct-2010.) (Revised by NM, 11-Jul-2019.) Use ~ tru instead. (New usage is discouraged.)","origin":"axiom df-tru(setvar s0) {\n  |- wb(wtru, wi(wal(s0, wceq(cv(s0), cv(s0))), wal(s0, wceq(cv(s0), cv(s0)))))\n}","pretty":"axiom df-tru(setvar s0) {\n  ⊢ (T ↔(∀(s0, s0 = s0)→ ∀(s0, s0 = s0)))\n}","parent":[],"children":["tru"]},{"name":"tru","content":"The truth value ` T. ` is provable. (Contributed by Anthony Hart, 13-Oct-2010.)","origin":"thm tru() {\n  |- wtru\n} = {\n  mpbir(wtru, wi(wal(hs0, wceq(cv(hs0), cv(hs0))), wal(hs0, wceq(cv(hs0), cv(hs0)))))\n  id(wal(hs0, wceq(cv(hs0), cv(hs0))))\n  df-tru(hs0)\n}","pretty":"thm tru() {\n  ⊢ wtru\n} = {\n  mpbir(wtru, (∀(hs0, hs0 = hs0)→ ∀(hs0, hs0 = hs0)))\n  id(∀(hs0, hs0 = hs0))\n  df-tru(hs0)\n}","parent":["mpbir","id","df-tru"],"children":["dftru2","trut","mptru","tbtru","bitru","trud","truan","fal","truorfal","falortru","cadtru","nftru","altru","extru","rabtru","disjprg","reusv2lem5","rabxfr","reuhyp","euotd","elabrex","caovcl","caovass","caovdi","ectocl","fin1a2lem10","riotaneg","zriotaneg","cshwsexa","eflt","efgi0","efgi1","0frgp","iundisj2","pige3","tanord1","tanord","logtayl","iundisj2f","iundisj2fi","ordtconn","tgoldbachgt","nexntru","bj-axd2d","bj-rabtr","bj-rabtrALT","bj-df-v","bj-finsumval0","wl-impchain-mp-x","wl-impchain-com-1.x","wl-impchain-com-n.m","wl-impchain-a1-x","wl-moteq","ftc1anclem5","lhpexle1","mzpcompact2lem","ifpdfor","ifpim1","ifpnot","ifpid2","ifpim2","uun0.1","uunT1","un10","un01","elabrexg","liminfvalxr","ovn02"]},{"name":"dftru2","content":"An alternate definition of \"true\" (see comment of ~ df-tru ). The associated justification theorem is ~ monothetic . (Contributed by Anthony Hart, 13-Oct-2010.) (Revised by BJ, 12-Jul-2019.) Use ~ tru instead. (New usage is discouraged.)","origin":"thm dftru2(wff w0) {\n  |- wb(wtru, wi(w0, w0))\n} = {\n  2th(wtru, wi(w0, w0))\n  tru()\n  id(w0)\n}","pretty":"thm dftru2(wff w0) {\n  ⊢ (T ↔(w0 → w0))\n} = {\n  2th(wtru, (w0 → w0))\n  tru()\n  id(w0)\n}","parent":["2th","tru","id"],"children":[]},{"name":"trut","content":"A proposition is equivalent to it being implied by ` T. ` . Closed form of ~ mptru . Dual of ~ dfnot . It is to ~ tbtru what ~ a1bi is to ~ tbt . (Contributed by BJ, 26-Oct-2019.)","origin":"thm trut(wff w0) {\n  |- wb(w0, wi(wtru, w0))\n} = {\n  a1bi(w0, wtru)\n  tru()\n}","pretty":"thm trut(wff w0) {\n  ⊢ (w0 ↔(T → w0))\n} = {\n  a1bi(w0, wtru)\n  tru()\n}","parent":["a1bi","tru"],"children":["truimfal","euae"]},{"name":"mptru","content":"Eliminate ` T. ` as an antecedent. A proposition implied by ` T. ` is true. This is modus ponens ~ ax-mp when the minor hypothesis is ` T. ` (which holds by ~ tru ). (Contributed by Mario Carneiro, 13-Mar-2014.)","origin":"thm mptru(wff w0) {\n  |- w0\n  -| wi(wtru, w0)\n} = {\n  ax-mp(w0, wtru)\n  tru()\n}","pretty":"thm mptru(wff w0) {\n  ⊢ w0\n  ⊣ (T → w0)\n} = {\n  ax-mp(w0, wtru)\n  tru()\n}","parent":["ax-mp","tru"],"children":["hadbi123i","cadbi123i","nfan","nfbi","spime","nfmo","mo3","nfeu","2mo","abeq2i","abbi2i","abbii","nfceqiOLD","nfeq","nfel","dvelimc","nfral","nfrex","nfreu","nfrmo","nfrab","rabbia2","nfsbc1","nfsbc","sbcbii","nfcsb1","nfcsb","csbeq2i","nfif","nfdisj","nfbr","mpteq12i","reusv1","reusv2lem1","ralxfr","reuxfr2","reuxfr","issoi","nfiota","nfriota","nfov","mpoeq123i","mpt2eq3ia","iseri","nfixp","en2i","en3i","ensymb","entr","djulf1o","djurf1o","r0weon","recmulnq","nrex1","nfneg","negiso","suprzcl2","supxr","xrinf0","fac0","cnrecnv","cau3","cbvsum","sum0","ackbijnn","flo1","trireciplem","trirecip","ege2le3","rpnnen2lem3","ruclem4","bitsf1ocnv","prmreclem6","prmrec","modxai","strfvn","strss","xpssca","xpsvsca","mreacs","2oppccomf","mndprop","grpprop","isgrpi","oppgmndb","oppggrpb","efgrelexlemb","ablprop","ringprop","opprringb","rlmbas","rlmplusg","rlm0","rlmsub","rlmmulr","rlmsca2","rlmvsca","rlmtopn","rlmds","rlmvneg","psrbagsn","evlsval","psr1bas2","psr1bas","psr1plusg","psr1vsca","psr1mulr","ply1plusgfvi","ply1mpl0","ply1mpl1","cncrng","xrsmcmn","cndrng","cnsrng","xrs1mnd","xrs10","absabv","zringcyg","recrng","ordtrestixx","llyidm","nllyidm","toplly","hauslly","hausnlly","lly1stc","kgenf","txswaphmeolem","fmucndlem","nrgtrg","cnfldnm","xrsxmet","divcn","expcn","elcncf1ii","iirevcn","iihalf1cn","iihalf2cn","iimulcn","icopnfcnv","iccpnfcnv","cnrehmeo","tcphsub","tcphphl","iscmet3i","cncmet","rrxprds","vitali","i1f0","itg20","dvid","dveflem","dvef","dvsincos","ply1divalg2","coe0","iaa","sincn","coscn","reefgim","pilem3","resinf1o","circgrp","circsubm","divlogrlim","dvrelog","logcn","dvlog","advlog","cxpcn","cxpcn2","resqrtcn","sqrtcn","atansopn","dvatan","leibpilem2","leibpi","leibpisum","log2cnv","log2ublem2","log2ub","divsqrtsumlem","emcllem4","emcllem6","emcllem7","lgamf","lgam1","basellem6","basellem7","basellem8","basellem9","vmaf","logfacrlim","lgsdir2lem5","chebbnd1","chtppilim","chto1ub","chebbnd2","chto1lb","chpchtlim","chpo1ub","chpo1ubb","vmadivsum","vmadivsumb","mudivsum","mulogsumlem","mulogsum","logdivsum","vmalogdivsum2","vmalogdivsum","selberglem1","selberglem2","selbergb","selberg2lem","selberg2","selberg2b","selberg3lem2","selberg3","selberg4","pntrmax","pntrsumo1","pntrsumbnd","selbergr","selberg3r","selberg4r","selberg34r","pntrlog2bndlem1","pntrlog2bndlem4","pnt2","pnt","istrkg2ld","legval","ttgsub","cchhllem","trlsfval","pthsfval","spthsfval","clwlks","crcts","cycls","2wspdisj","2wspiundisj","eupths","konigsbergiedgw","ipasslem7","normlem6","opsqrlem4","eqri","fpwrelmap","fpwrelmapffs","xrs0","mdetlap1","circtopn","cnre2csqima","cnvordtrestixx","mndpluscn","xrge0iifcnv","zlm0","zlm1","qqhre","rrhre","esumnul","hasheuni","sxbrsigalem2","oddpwdc","eulerpartlemb","eulerpartgbij","eulerpartlemn","fib0","fib1","ballotlemrinv","sgn3da","signsw0g","circlemethnat","subfacval2","sinccvglem","circum","logi","faclim","faclim2","dmscut","cnndvlem1","bj-spimev","bj-dvelimv","bj-inrab2","bj-rabtrAUTO","bj-iomnnom","sucneqoni","wl-cbvalnae","wl-equsal","poimirlem30","dvtan","dvasin","dvacos","dvreasin","dvreacos","efald2","areaquad","clsk1indlem4","clsk1indlem1","lhe4.4ex1a","sbtT","eel0TT","eelTTT","eelT1","eelTT","eelT","eelT0","isosctrlem1ALT","disjsnxp","infxr","nfxneg","limsup0","0cnv","limsup10ex","liminf10ex","liminfvalxr","liminf0","dvsinax","itgsin0pilem1","iblempty","stowei","wallispilem5","wallispi","stirlinglem1","stirlinglem12","stirlinglem13","stirlinglem14","stirlingr","dirkertrigeqlem1","fourierdlem62","fourierdlem73","fourierdlem76","fourierdlem77","fourierdlem103","fourierdlem104","fourierclim","fourier","fouriersw","etransclem41","etransclem46","salexct2","salexct3","salgencntex","salgensscntex","dmvolsal","bor1sal","iocborel","sge00","sge0sn","ovolval5lem3","ioosshoi","vonioolem2","smfmullem4","dfafv2","onsetrec","joinlmuladdmuli"]},{"name":"tbtru","content":"A proposition is equivalent to itself being equivalent to ` T. ` . (Contributed by Anthony Hart, 14-Aug-2011.)","origin":"thm tbtru(wff w0) {\n  |- wb(w0, wb(w0, wtru))\n} = {\n  tbt(w0, wtru)\n  tru()\n}","pretty":"thm tbtru(wff w0) {\n  ⊢ (w0 ↔(w0 ↔ T))\n} = {\n  tbt(w0, wtru)\n  tru()\n}","parent":["tbt","tru"],"children":["falbitru","euaeOLD","tgcgr4","sgn3da","prjspvs","aistia"]},{"name":"bitru","content":"A theorem is equivalent to truth. (Contributed by Mario Carneiro, 9-May-2015.)","origin":"thm bitru(wff w0) {\n  |- wb(w0, wtru)\n  -| w0\n} = {\n  2th(w0, wtru)\n  tru()\n}","pretty":"thm bitru(wff w0) {\n  ⊢ (w0 ↔ T)\n  ⊣ w0\n} = {\n  2th(w0, wtru)\n  tru()\n}","parent":["2th","tru"],"children":["truimtru","falimtru","falimfal","notfal","trubitru","falbifal","truorfal","falortru","exists1","0frgp","tgcgr4","astbstanbst","atnaiana","dandysum2p2e4"]},{"name":"trud","content":"Anything implies ` T. ` . Dual statement of ~ falim . Deduction form of ~ tru . (Contributed by FL, 20-Mar-2011.) (Proof shortened by Anthony Hart, 1-Aug-2011.)","origin":"thm trud(wff w0) {\n  |- wi(w0, wtru)\n} = {\n  a1i(w0, wtru)\n  tru()\n}","pretty":"thm trud(wff w0) {\n  ⊢ (w0 → T)\n} = {\n  a1i(w0, wtru)\n  tru()\n}","parent":["a1i","tru"],"children":["falimtru","disjprg","euotd","mptexgf","elabrex","riota5f","wl-nax6im","wl-nax6al","ac6s6","lhpexle1","prjspvs","cnvtrucl0","rfovcnvf1od","elabrexg"]},{"name":"truan","content":"True can be removed from a conjunction. (Contributed by FL, 20-Mar-2011.) (Proof shortened by Wolf Lammen, 21-Jul-2019.)","origin":"thm truan(wff w0) {\n  |- wb(wa(wtru, w0), w0)\n} = {\n  bicomi(wa(wtru, w0), w0)\n  biantrur(w0, wtru)\n  tru()\n}","pretty":"thm truan(wff w0) {\n  ⊢ ((T ∧ w0)↔ w0)\n} = {\n  bicomi((T ∧ w0), w0)\n  biantrur(w0, wtru)\n  tru()\n}","parent":["bicomi","biantrur","tru"],"children":["truanfal","euelss","tgcgr4","aciunf1","sgn3da","truconj","tradd","ifpdfbi","ifpdfxor","dfid7","eel0TT","eelT00","eelTTT","eelT11","eelT12","eelTT1","eelT01","eel0T1","eelTT","uunT1p1","uunTT1","uunTT1p1","uunTT1p2","uunT11","uunT11p1","uunT11p2","uunT12","uunT12p1","uunT12p2","uunT12p3","uunT12p4","uunT12p5"]}]}