{"index":1242,"title":"Miscellanea","content":"","blocks":[{"name":"cnaddcom","content":"Recover the commutative law of addition for complex numbers from the Abelian group structure. (Contributed by NM, 17-Mar-2013.) (Proof modification is discouraged.)","origin":"thm cnaddcom(class c0, class c1) {\n  |- wi(wa(wcel(c0, cc), wcel(c1, cc)), wceq(co(c0, caddc, c1), co(c1, caddc, c0)))\n} = {\n  mp3an1(wcel(c0, cc), wcel(c1, cc), wceq(co(c0, caddc, c1), co(c1, caddc, c0)), wcel(cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)), cabl))\n  cnaddabl(cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)))\n  ablcom(cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)), c0, cc, c1, caddc)\n  ax-mp(wceq(cc, cfv(cbs, cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)))), wcel(cc, universe))\n  cnex()\n  grpbase(cc, universe, cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)), caddc)\n  ax-mp(wceq(caddc, cfv(cplusg, cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)))), wcel(caddc, universe))\n  addex()\n  grpplusg(caddc, universe, cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)), cc)\n  eqid(cpr(cop(cfv(cbs, cnx), cc), cop(cfv(cplusg, cnx), caddc)))\n}","pretty":"thm cnaddcom(class c0, class c1) {\n  ‚ä¢ ((c0 ‚àà ‚ÑÇ ‚àß c1 ‚àà ‚ÑÇ)‚Üí(c0[+]c1)=(c1[+]c0))\n} = {\n  mp3an1(c0 ‚àà ‚ÑÇ, c1 ‚àà ‚ÑÇ, (c0[+]c1)=(c1[+]c0), { <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > } ‚àà Abel)\n  cnaddabl({ <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > })\n  ablcom({ <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > }, c0, cc, c1, caddc)\n  ax-mp(‚ÑÇ =(Base ` { <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > }), ‚ÑÇ ‚àà ùïå)\n  cnex()\n  grpbase(cc, universe, { <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > }, caddc)\n  ax-mp(+ =(+ ` { <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > }), + ‚àà ùïå)\n  addex()\n  grpplusg(caddc, universe, { <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > }, cc)\n  eqid({ <(Base ` ndx), ‚ÑÇ >, <(+ ` ndx), + > })\n}","parent":["mp3an1","cnaddabl","ablcom","ax-mp","cnex","grpbase","addex","grpplusg","eqid"],"children":[]},{"name":"toycom","content":"Show the commutative law for an operation ` O ` on a toy structure class ` C ` of commuatitive operations on ` CC ` . This illustrates how a structure class can be partially specialized. In practice, we would ordinarily define a new constant such as \"CAbel\" in place of ` C ` . (Contributed by NM, 17-Mar-2013.) (Proof modification is discouraged.)","origin":"thm toycom(setvar s0, class c0, class c1, class c2, class c3, class c4) {\n  |- wi(w3a(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc)), wceq(co(c2, c4, c3), co(c3, c4, c2)))\n  -| wceq(c1, crab(s0, cabl, wceq(cfv(cbs, cv(s0)), cc)))\n  -| wceq(c4, cfv(cplusg, c0))\n  -| diffsc(s0, c0)\n} = {\n  3eqtr4g(co(c2, c4, c3), co(c3, c4, c2), co(c2, cfv(cplusg, c0), c3), co(c3, cfv(cplusg, c0), c2), w3a(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc)))\n  syl3anc(w3a(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc)), wceq(co(c2, cfv(cplusg, c0), c3), co(c3, cfv(cplusg, c0), c2)), wcel(c0, cabl), wcel(c2, cfv(cbs, c0)), wcel(c3, cfv(cbs, c0)))\n  3ad2ant1(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc), wcel(c0, cabl))\n  sseli(c0, c1, cabl)\n  eqsstri(c1, cabl, crab(s0, cabl, wceq(cfv(cbs, cv(s0)), cc)))\n  ssrab2(s0, cabl, wceq(cfv(cbs, cv(s0)), cc))\n  eleqtrrd(c2, cfv(cbs, c0), cc, w3a(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc)))\n  simp2(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc))\n  eleqtrrd(c3, cfv(cbs, c0), cc, w3a(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc)))\n  simp3(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc))\n  3ad2ant1(wcel(c0, c1), wcel(c2, cc), wcel(c3, cc), wceq(cfv(cbs, c0), cc))\n  simprbi(wcel(c0, c1), wceq(cfv(cbs, c0), cc), wcel(c0, cabl))\n  elrab2(s0, c0, c1, cabl, wceq(cfv(cbs, c0), cc), wceq(cfv(cbs, cv(s0)), cc))\n  eqeq1d(cfv(cbs, cv(s0)), cc, cfv(cbs, c0), wceq(cv(s0), c0))\n  fveq2(cv(s0), c0, cbs)\n  ablcom(c0, c2, cfv(cbs, c0), c3, cfv(cplusg, c0))\n  eqid(cfv(cbs, c0))\n  eqid(cfv(cplusg, c0))\n  oveqi(c2, c4, c3, cfv(cplusg, c0))\n  oveqi(c3, c4, c2, cfv(cplusg, c0))\n  diff.cabl.s(s0)\n  diff.wceq.s(s0, cfv(cbs, c0), cc)\n  diff.cfv.s(s0, cbs, c0)\n  diff.cbs.s(s0)\n  diff.cc.s(s0)\n}","pretty":"thm toycom(setvar s0, class c0, class c1, class c2, class c3, class c4) {\n  ‚ä¢ ((c0 ‚àà c1 ‚àß c2 ‚àà ‚ÑÇ ‚àß c3 ‚àà ‚ÑÇ)‚Üí(c2[c4]c3)=(c3[c4]c2))\n  ‚ä£ c1 = { s0 ‚àà Abel |(Base ` s0)= ‚ÑÇ }\n  ‚ä£ c4 =(+ ` c0)\n  ‚ä£ d(s0, c0)\n} = {\n  3eqtr4g((c2[c4]c3), (c3[c4]c2), (c2[(+ ` c0)]c3), (c3[(+ ` c0)]c2), (c0 ‚àà c1 ‚àß c2 ‚àà ‚ÑÇ ‚àß c3 ‚àà ‚ÑÇ))\n  syl3anc((c0 ‚àà c1 ‚àß c2 ‚àà ‚ÑÇ ‚àß c3 ‚àà ‚ÑÇ), (c2[(+ ` c0)]c3)=(c3[(+ ` c0)]c2), c0 ‚àà Abel, c2 ‚àà(Base ` c0), c3 ‚àà(Base ` c0))\n  3ad2ant1(c0 ‚àà c1, c2 ‚àà ‚ÑÇ, c3 ‚àà ‚ÑÇ, c0 ‚àà Abel)\n  sseli(c0, c1, cabl)\n  eqsstri(c1, cabl, { s0 ‚àà Abel |(Base ` s0)= ‚ÑÇ })\n  ssrab2(s0, cabl, (Base ` s0)= ‚ÑÇ)\n  eleqtrrd(c2, (Base ` c0), cc, (c0 ‚àà c1 ‚àß c2 ‚àà ‚ÑÇ ‚àß c3 ‚àà ‚ÑÇ))\n  simp2(c0 ‚àà c1, c2 ‚àà ‚ÑÇ, c3 ‚àà ‚ÑÇ)\n  eleqtrrd(c3, (Base ` c0), cc, (c0 ‚àà c1 ‚àß c2 ‚àà ‚ÑÇ ‚àß c3 ‚àà ‚ÑÇ))\n  simp3(c0 ‚àà c1, c2 ‚àà ‚ÑÇ, c3 ‚àà ‚ÑÇ)\n  3ad2ant1(c0 ‚àà c1, c2 ‚àà ‚ÑÇ, c3 ‚àà ‚ÑÇ, (Base ` c0)= ‚ÑÇ)\n  simprbi(c0 ‚àà c1, (Base ` c0)= ‚ÑÇ, c0 ‚àà Abel)\n  elrab2(s0, c0, c1, cabl, (Base ` c0)= ‚ÑÇ, (Base ` s0)= ‚ÑÇ)\n  eqeq1d((Base ` s0), cc, (Base ` c0), s0 = c0)\n  fveq2(s0, c0, cbs)\n  ablcom(c0, c2, (Base ` c0), c3, (+ ` c0))\n  eqid((Base ` c0))\n  eqid((+ ` c0))\n  oveqi(c2, c4, c3, (+ ` c0))\n  oveqi(c3, c4, c2, (+ ` c0))\n  diff.cabl.s(s0)\n  diff.wceq.s(s0, (Base ` c0), cc)\n  diff.cfv.s(s0, cbs, c0)\n  diff.cbs.s(s0)\n  diff.cc.s(s0)\n}","parent":["3eqtr4g","syl3anc","3ad2ant1","sseli","eqsstri","ssrab2","eleqtrrd","simp2","simp3","simprbi","elrab2","eqeq1d","fveq2","ablcom","eqid","oveqi","diff.cabl.s","diff.wceq.s","diff.cfv.s","diff.cbs.s","diff.cc.s"],"children":[]}]}