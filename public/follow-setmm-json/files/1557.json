{"index":1557,"title":"Algorithms for the multiplication of nonnegative integers","content":"","blocks":[{"name":"nn0mulfsum","content":"Trivial algorithm to calculate the product of two nonnegative integers ` a ` and ` b ` by adding up ` b ` ` a ` times. (Contributed by AV, 17-May-2020.)","origin":"thm nn0mulfsum(setvar s0, class c0, class c1) {\n  |- wi(wa(wcel(c0, cn0), wcel(c1, cn0)), wceq(co(c0, cmul, c1), csu(s0, co(nat1, cfz, c0), c1)))\n  -| diffsc(s0, c0)\n  -| diffsc(s0, c1)\n} = {\n  eqtr2d(co(c0, cmul, c1), csu(s0, co(nat1, cfz, c0), c1), co(cfv(chash, co(nat1, cfz, c0)), cmul, c1), wa(wcel(c0, cn0), wcel(c1, cn0)))\n  syl2an(wcel(c0, cn0), wcel(c1, cn0), wceq(csu(s0, co(nat1, cfz, c0), c1), co(cfv(chash, co(nat1, cfz, c0)), cmul, c1)), wcel(co(nat1, cfz, c0), cfn), wcel(c1, cc))\n  fzfid(nat1, c0, wcel(c0, cn0))\n  nn0cn(c1)\n  fsumconst(s0, co(nat1, cfz, c0), c1)\n  oveq1d(cfv(chash, co(nat1, cfz, c0)), cmul, c1, c0, wa(wcel(c0, cn0), wcel(c1, cn0)))\n  adantr(wcel(c0, cn0), wcel(c1, cn0), wceq(cfv(chash, co(nat1, cfz, c0)), c0))\n  hashfz1(c0)\n  diff.co.s(s0, nat1, cfz, c0)\n  diff.nat1.s(s0)\n  diff.cfz.s(s0)\n}","pretty":"thm nn0mulfsum(setvar s0, class c0, class c1) {\n  ⊢ ((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0)→(c0[×]c1)= sum(s0 ∈(1[...]c0), c1))\n  ⊣ d(s0, c0)\n  ⊣ d(s0, c1)\n} = {\n  eqtr2d((c0[×]c1), sum(s0 ∈(1[...]c0), c1), ((# `(1[...]c0))[×]c1), (c0 ∈ ℕ0 ∧ c1 ∈ ℕ0))\n  syl2an(c0 ∈ ℕ0, c1 ∈ ℕ0, sum(s0 ∈(1[...]c0), c1)=((# `(1[...]c0))[×]c1), (1[...]c0)∈ Fin, c1 ∈ ℂ)\n  fzfid(nat1, c0, c0 ∈ ℕ0)\n  nn0cn(c1)\n  fsumconst(s0, (1[...]c0), c1)\n  oveq1d((# `(1[...]c0)), cmul, c1, c0, (c0 ∈ ℕ0 ∧ c1 ∈ ℕ0))\n  adantr(c0 ∈ ℕ0, c1 ∈ ℕ0, (# `(1[...]c0))= c0)\n  hashfz1(c0)\n  diff.co.s(s0, nat1, cfz, c0)\n  diff.nat1.s(s0)\n  diff.cfz.s(s0)\n}","parent":["eqtr2d","syl2an","fzfid","nn0cn","fsumconst","oveq1d","adantr","hashfz1","diff.co.s","diff.nat1.s","diff.cfz.s"],"children":[]},{"name":"nn0mullong","content":"Standard algorithm (also known as \"long multiplication\" or \"grade-school multiplication\") to calculate the product of two nonnegative integers ` a ` and ` b ` by multiplying the multiplicand ` b ` by each digit of the multiplier ` a ` and then add up all the properly shifted results. Here, the binary representation of the multiplier ` a ` is used, i.e. the above mentioned \"digits\" are 0 or 1. This is a similar result as provided by ~ smumul . (Contributed by AV, 7-Jun-2020.)","origin":"thm nn0mullong(setvar s0, class c0, class c1) {\n  |- wi(wa(wcel(c0, cn0), wcel(c1, cn0)), wceq(co(c0, cmul, c1), csu(s0, co(nat0, cfzo, cfv(cblen, c0)), co(co(co(cv(s0), cfv(cdig, nat2), c0), cmul, co(nat2, cexp, cv(s0))), cmul, c1))))\n  -| diffsc(s0, c0)\n  -| diffsc(s0, c1)\n} = {\n  eqtrd(co(c0, cmul, c1), csu(s0, co(nat0, cfzo, cfv(cblen, c0)), co(co(co(cv(s0), cfv(cdig, nat2), c0), cmul, co(nat2, cexp, cv(s0))), cmul, c1)), co(csu(s0, co(nat0, cfzo, cfv(cblen, c0)), co(co(cv(s0), cfv(cdig, nat2), c0), cmul, co(nat2, cexp, cv(s0)))), cmul, c1), wa(wcel(c0, cn0), wcel(c1, cn0)))\n  oveq1d(c0, cmul, c1, csu(s0, co(nat0, cfzo, cfv(cblen, c0)), co(co(cv(s0), cfv(cdig, nat2), c0), cmul, co(nat2, cexp, cv(s0)))), wa(wcel(c0, cn0), wcel(c1, cn0)))\n  adantr(wcel(c0, cn0), wcel(c1, cn0), wceq(c0, csu(s0, co(nat0, cfzo, cfv(cblen, c0)), co(co(cv(s0), cfv(cdig, nat2), c0), cmul, co(nat2, cexp, cv(s0))))))\n  nn0sumshdig(s0, c0)\n  fsummulc1(s0, co(nat0, cfzo, cfv(cblen, c0)), co(co(cv(s0), cfv(cdig, nat2), c0), cmul, co(nat2, cexp, cv(s0))), c1, wa(wcel(c0, cn0), wcel(c1, cn0)))\n  a1i(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(co(nat0, cfzo, cfv(cblen, c0)), cfn))\n  fzofi(nat0, cfv(cblen, c0))\n  adantl(wcel(c0, cn0), wcel(c1, cn0), wcel(c1, cc))\n  nn0cn(c1)\n  mulcld(co(cv(s0), cfv(cdig, nat2), c0), co(nat2, cexp, cv(s0)), wa(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0)))))\n  nn0cnd(co(cv(s0), cfv(cdig, nat2), c0), wa(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0)))))\n  syl3anc(wa(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0)))), wcel(co(cv(s0), cfv(cdig, nat2), c0), cn0), wcel(nat2, cn), wcel(cv(s0), cz), wcel(c0, co(nat0, cico, cpnf)))\n  a1i(wa(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0)))), wcel(nat2, cn))\n  2nn()\n  adantl(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0))), wcel(cv(s0), cz))\n  elfzoelz(cv(s0), nat0, cfv(cblen, c0))\n  adantr(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0))), wcel(c0, co(nat0, cico, cpnf)))\n  adantr(wcel(c0, cn0), wcel(c1, cn0), wcel(c0, co(nat0, cico, cpnf)))\n  nn0rp0(c0)\n  digvalnn0(nat2, cv(s0), c0)\n  adantl(wa(wcel(c0, cn0), wcel(c1, cn0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0))), wcel(co(nat2, cexp, cv(s0)), cc))\n  nn0cnd(co(nat2, cexp, cv(s0)), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0))))\n  nn0expcld(nat2, cv(s0), wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0))))\n  a1i(wcel(cv(s0), co(nat0, cfzo, cfv(cblen, c0))), wcel(nat2, cn0))\n  2nn0()\n  elfzonn0(cv(s0), cfv(cblen, c0))\n  diff.co.s(s0, nat0, cfzo, cfv(cblen, c0))\n  diff.nat0.s(s0)\n  diff.cfzo.s(s0)\n  diff.cfv.s(s0, cblen, c0)\n  diff.cblen.s(s0)\n  diff.wa.s(s0, wcel(c0, cn0), wcel(c1, cn0))\n  diff.wcel.s(s0, c0, cn0)\n  diff.wcel.s(s0, c1, cn0)\n  diff.cn0.s(s0)\n}","pretty":"thm nn0mullong(setvar s0, class c0, class c1) {\n  ⊢ ((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0)→(c0[×]c1)= sum(s0 ∈(0[..^](#b ` c0)),(((s0[(digit ` 2)]c0)[×](2[^]s0))[×]c1)))\n  ⊣ d(s0, c0)\n  ⊣ d(s0, c1)\n} = {\n  eqtrd((c0[×]c1), sum(s0 ∈(0[..^](#b ` c0)),(((s0[(digit ` 2)]c0)[×](2[^]s0))[×]c1)), (sum(s0 ∈(0[..^](#b ` c0)),((s0[(digit ` 2)]c0)[×](2[^]s0)))[×]c1), (c0 ∈ ℕ0 ∧ c1 ∈ ℕ0))\n  oveq1d(c0, cmul, c1, sum(s0 ∈(0[..^](#b ` c0)),((s0[(digit ` 2)]c0)[×](2[^]s0))), (c0 ∈ ℕ0 ∧ c1 ∈ ℕ0))\n  adantr(c0 ∈ ℕ0, c1 ∈ ℕ0, c0 = sum(s0 ∈(0[..^](#b ` c0)),((s0[(digit ` 2)]c0)[×](2[^]s0))))\n  nn0sumshdig(s0, c0)\n  fsummulc1(s0, (0[..^](#b ` c0)), ((s0[(digit ` 2)]c0)[×](2[^]s0)), c1, (c0 ∈ ℕ0 ∧ c1 ∈ ℕ0))\n  a1i((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0), (0[..^](#b ` c0))∈ Fin)\n  fzofi(nat0, (#b ` c0))\n  adantl(c0 ∈ ℕ0, c1 ∈ ℕ0, c1 ∈ ℂ)\n  nn0cn(c1)\n  mulcld((s0[(digit ` 2)]c0), (2[^]s0), ((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0)∧ s0 ∈(0[..^](#b ` c0))))\n  nn0cnd((s0[(digit ` 2)]c0), ((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0)∧ s0 ∈(0[..^](#b ` c0))))\n  syl3anc(((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0)∧ s0 ∈(0[..^](#b ` c0))), (s0[(digit ` 2)]c0)∈ ℕ0, 2 ∈ ℕ, s0 ∈ ℤ, c0 ∈(0[[,)]+∞))\n  a1i(((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0)∧ s0 ∈(0[..^](#b ` c0))), 2 ∈ ℕ)\n  2nn()\n  adantl((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0), s0 ∈(0[..^](#b ` c0)), s0 ∈ ℤ)\n  elfzoelz(s0, nat0, (#b ` c0))\n  adantr((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0), s0 ∈(0[..^](#b ` c0)), c0 ∈(0[[,)]+∞))\n  adantr(c0 ∈ ℕ0, c1 ∈ ℕ0, c0 ∈(0[[,)]+∞))\n  nn0rp0(c0)\n  digvalnn0(nat2, s0, c0)\n  adantl((c0 ∈ ℕ0 ∧ c1 ∈ ℕ0), s0 ∈(0[..^](#b ` c0)), (2[^]s0)∈ ℂ)\n  nn0cnd((2[^]s0), s0 ∈(0[..^](#b ` c0)))\n  nn0expcld(nat2, s0, s0 ∈(0[..^](#b ` c0)))\n  a1i(s0 ∈(0[..^](#b ` c0)), 2 ∈ ℕ0)\n  2nn0()\n  elfzonn0(s0, (#b ` c0))\n  diff.co.s(s0, nat0, cfzo, (#b ` c0))\n  diff.nat0.s(s0)\n  diff.cfzo.s(s0)\n  diff.cfv.s(s0, cblen, c0)\n  diff.cblen.s(s0)\n  diff.wa.s(s0, c0 ∈ ℕ0, c1 ∈ ℕ0)\n  diff.wcel.s(s0, c0, cn0)\n  diff.wcel.s(s0, c1, cn0)\n  diff.cn0.s(s0)\n}","parent":["eqtrd","oveq1d","adantr","nn0sumshdig","fsummulc1","a1i","fzofi","adantl","nn0cn","mulcld","nn0cnd","syl3anc","2nn","elfzoelz","nn0rp0","digvalnn0","nn0expcld","2nn0","elfzonn0","diff.co.s","diff.nat0.s","diff.cfzo.s","diff.cfv.s","diff.cblen.s","diff.wa.s","diff.wcel.s","diff.cn0.s"],"children":[]}]}