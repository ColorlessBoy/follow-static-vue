{"index":1394,"title":"Theorems with a VD proof in conventional notation derived from a VD proof","content":"","blocks":[{"name":"suctrALT3","content":"The successor of a transitive class is transitive. ~ suctrALT3 is the completed proof in conventional notation of the Virtual Deduction proof ~ http://us.metamath.org/other/completeusersproof/suctralt3vd.html . It was completed manually. The potential for automated derivation from the VD proof exists. See ~ wvd1 for a description of Virtual Deduction. Some sub-theorems of the proof were completed using a unification deduction (e.g., the sub-theorem whose assertion is step 19 used ~ jaoded ). Unification deductions employ Mario Carneiro's metavariable concept. Some sub-theorems were completed using a unification theorem (e.g., the sub-theorem whose assertion is step 24 used ~ dftr2 ) . (Contributed by Alan Sare, 3-Dec-2015.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm suctrALT3(class c0) {\n  |- wi(wtr(c0), wtr(csuc(c0)))\n} = {\n  idiALT(wi(wtr(c0), wtr(csuc(c0))))\n  syl(wtr(c0), wtr(csuc(c0)), wal(hs0, wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))))\n  alrimivv(hs0, hs1, wtr(c0), wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))\n  ex(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)))\n  un2122(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)))\n  jaoded(wa(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0)))), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0)), wcel(cv(hs1), c0), wceq(cv(hs1), c0))\n  3expia(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0), wcel(cv(hs0), csuc(c0)))\n  sseldi(cv(hs0), csuc(c0), c0, w3a(wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0)))\n  trelded(cv(hs0), c0, cv(hs1), wtr(c0), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), c0))\n  id(wtr(c0))\n  id(wcel(cv(hs1), c0))\n  ex(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), csuc(c0)))\n  sseldi(cv(hs0), csuc(c0), c0, wa(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0)))\n  sssucid(c0)\n  syl2an(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wceq(cv(hs1), c0), wcel(cv(hs0), c0), wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0))\n  simpld(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0)))\n  id(wceq(cv(hs1), c0))\n  biimpac(wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0), wcel(cv(hs0), c0))\n  eleq2(cv(hs1), c0, cv(hs0))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wo(wcel(cv(hs1), c0), wceq(cv(hs1), c0)), wcel(cv(hs1), csuc(c0)))\n  simprd(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs1), csuc(c0)), wcel(cv(hs0), cv(hs1)))\n  id(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))))\n  elsuci(cv(hs1), c0)\n  biimpri(wal(hs0, wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csuc(c0))), wcel(cv(hs0), csuc(c0))))), wtr(csuc(c0)))\n  dftr2(hs0, hs1, csuc(c0))\n  diff.hs0.w(wtr(c0))\n  diff.hs1.w(wtr(c0))\n  diff.hs0.s(hs1)\n  diff.hs0.c(csuc(c0))\n  diff.hs1.c(csuc(c0))\n}","pretty":"thm suctrALT3(class c0) {\n  ‚ä¢ (Tr(c0)‚Üí Tr(suc(c0)))\n} = {\n  idiALT((Tr(c0)‚Üí Tr(suc(c0))))\n  syl(Tr(c0), Tr(suc(c0)), ‚àÄ(hs0, ‚àÄ(hs1,((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0))‚Üí hs0 ‚àà suc(c0)))))\n  alrimivv(hs0, hs1, Tr(c0), ((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0))‚Üí hs0 ‚àà suc(c0)))\n  ex(Tr(c0), (hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs0 ‚àà suc(c0))\n  un2122(Tr(c0), (hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs0 ‚àà suc(c0))\n  jaoded((Tr(c0)‚àß(hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0))), (hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), (hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs0 ‚àà suc(c0), hs1 ‚àà c0, hs1 = c0)\n  3expia(Tr(c0), (hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs1 ‚àà c0, hs0 ‚àà suc(c0))\n  sseldi(hs0, suc(c0), c0, (Tr(c0)‚àß(hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0))‚àß hs1 ‚àà c0))\n  trelded(hs0, c0, hs1, Tr(c0), (hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs1 ‚àà c0)\n  id(Tr(c0))\n  id(hs1 ‚àà c0)\n  ex((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs1 = c0, hs0 ‚àà suc(c0))\n  sseldi(hs0, suc(c0), c0, ((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0))‚àß hs1 = c0))\n  sssucid(c0)\n  syl2an((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs1 = c0, hs0 ‚àà c0, hs0 ‚àà hs1, hs1 = c0)\n  simpld((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs0 ‚àà hs1, hs1 ‚àà suc(c0))\n  id(hs1 = c0)\n  biimpac(hs0 ‚àà hs1, hs1 = c0, hs0 ‚àà c0)\n  eleq2(hs1, c0, hs0)\n  syl((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), (hs1 ‚àà c0 ‚à® hs1 = c0), hs1 ‚àà suc(c0))\n  simprd((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)), hs1 ‚àà suc(c0), hs0 ‚àà hs1)\n  id((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0)))\n  elsuci(hs1, c0)\n  biimpri(‚àÄ(hs0, ‚àÄ(hs1,((hs0 ‚àà hs1 ‚àß hs1 ‚àà suc(c0))‚Üí hs0 ‚àà suc(c0)))), Tr(suc(c0)))\n  dftr2(hs0, hs1, suc(c0))\n  diff.hs0.w(Tr(c0))\n  diff.hs1.w(Tr(c0))\n  diff.hs0.s(hs1)\n  diff.hs0.c(suc(c0))\n  diff.hs1.c(suc(c0))\n}","parent":["idiALT","syl","alrimivv","ex","un2122","jaoded","3expia","sseldi","trelded","id","sssucid","syl2an","simpld","biimpac","eleq2","simprd","elsuci","biimpri","dftr2","diff.hs0.w","diff.hs1.w","diff.hs0.s","diff.hs0.c","diff.hs1.c"],"children":[]},{"name":"sspwimpALT","content":"If a class is a subclass of another class, then its power class is a subclass of that other class's power class. Left-to-right implication of Exercise 18 of [TakeutiZaring] p. 18. ~ sspwimpALT is the completed proof in conventional notation of the Virtual Deduction proof ~ http://us.metamath.org/other/completeusersproof/sspwimpaltvd.html . It was completed manually. The potential for automated derivation from the VD proof exists. See ~ wvd1 for a description of Virtual Deduction. Some sub-theorems of the proof were completed using a unification deduction (e.g., the sub-theorem whose assertion is step 9 used ~ elpwgded ). Unification deductions employ Mario Carneiro's metavariable concept. Some sub-theorems were completed using a unification theorem (e.g., the sub-theorem whose assertion is step 5 used ~ elpwi ). (Contributed by Alan Sare, 3-Dec-2015.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm sspwimpALT(class c0, class c1) {\n  |- wi(wss(c0, c1), wss(cpw(c0), cpw(c1)))\n} = {\n  idiALT(wi(wss(c0, c1), wss(cpw(c0), cpw(c1))))\n  syl(wss(c0, c1), wss(cpw(c0), cpw(c1)), wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))))\n  alrimiv(hs0, wss(c0, c1), wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1))))\n  ex(wss(c0, c1), wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))\n  uunT1(wa(wss(c0, c1), wcel(cv(hs0), cpw(c0))), wcel(cv(hs0), cpw(c1)))\n  elpwgded(cv(hs0), c1, wtru, wa(wss(c0, c1), wcel(cv(hs0), cpw(c0))))\n  a1i(wtru, wcel(cv(hs0), universe))\n  vex(hs0)\n  sylan9ssr(cv(hs0), c1, c0, wss(c0, c1), wcel(cv(hs0), cpw(c0)))\n  syl(wcel(cv(hs0), cpw(c0)), wss(cv(hs0), c0), wcel(cv(hs0), cpw(c0)))\n  id(wcel(cv(hs0), cpw(c0)))\n  elpwi(cv(hs0), c0)\n  id(wss(c0, c1))\n  biimpri(wal(hs0, wi(wcel(cv(hs0), cpw(c0)), wcel(cv(hs0), cpw(c1)))), wss(cpw(c0), cpw(c1)))\n  dfss2(hs0, cpw(c0), cpw(c1))\n  diff.hs0.w(wss(c0, c1))\n  diff.hs0.c(cpw(c0))\n  diff.hs0.c(cpw(c1))\n}","pretty":"thm sspwimpALT(class c0, class c1) {\n  ‚ä¢ (c0 ‚äÜ c1 ‚Üí P(c0)‚äÜ P(c1))\n} = {\n  idiALT((c0 ‚äÜ c1 ‚Üí P(c0)‚äÜ P(c1)))\n  syl(c0 ‚äÜ c1, P(c0)‚äÜ P(c1), ‚àÄ(hs0,(hs0 ‚àà P(c0)‚Üí hs0 ‚àà P(c1))))\n  alrimiv(hs0, c0 ‚äÜ c1, (hs0 ‚àà P(c0)‚Üí hs0 ‚àà P(c1)))\n  ex(c0 ‚äÜ c1, hs0 ‚àà P(c0), hs0 ‚àà P(c1))\n  uunT1((c0 ‚äÜ c1 ‚àß hs0 ‚àà P(c0)), hs0 ‚àà P(c1))\n  elpwgded(hs0, c1, wtru, (c0 ‚äÜ c1 ‚àß hs0 ‚àà P(c0)))\n  a1i(wtru, hs0 ‚àà ùïå)\n  vex(hs0)\n  sylan9ssr(hs0, c1, c0, c0 ‚äÜ c1, hs0 ‚àà P(c0))\n  syl(hs0 ‚àà P(c0), hs0 ‚äÜ c0, hs0 ‚àà P(c0))\n  id(hs0 ‚àà P(c0))\n  elpwi(hs0, c0)\n  id(c0 ‚äÜ c1)\n  biimpri(‚àÄ(hs0,(hs0 ‚àà P(c0)‚Üí hs0 ‚àà P(c1))), P(c0)‚äÜ P(c1))\n  dfss2(hs0, P(c0), P(c1))\n  diff.hs0.w(c0 ‚äÜ c1)\n  diff.hs0.c(P(c0))\n  diff.hs0.c(P(c1))\n}","parent":["idiALT","syl","alrimiv","ex","uunT1","elpwgded","a1i","vex","sylan9ssr","id","elpwi","biimpri","dfss2","diff.hs0.w","diff.hs0.c"],"children":[]},{"name":"unisnALT","content":"A set equals the union of its singleton. Theorem 8.2 of [Quine] p. 53. The User manually input on a mmj2 Proof Worksheet, without labels, all steps of ~ unisnALT except 1, 11, 15, 21, and 30. With execution of the mmj2 unification command, mmj2 could find labels for all steps except for 2, 12, 16, 22, and 31 (and the then non-existing steps 1, 11, 15, 21, and 30). mmj2 could not find reference theorems for those five steps because the hypothesis field of each of these steps was empty and none of those steps unifies with a theorem in set.mm. Each of these five steps is a semantic variation of a theorem in set.mm and is 2-step provable. mmj2 does not have the ability to automatically generate the semantic variation in set.mm of a theorem in a mmj2 Proof Worksheet unless the theorem in the Proof Worksheet is labeled with a 1-hypothesis deduction whose hypothesis is a theorem in set.mm which unifies with the theorem in the Proof Worksheet. The stepprover.c program, which invokes mmj2, has this capability. stepprover.c automatically generated steps 1, 11, 15, 21, and 30, labeled all steps, and generated the RPN proof of ~ unisnALT . Roughly speaking, stepprover.c added to the Proof Worksheet a labeled duplicate step of each non-unifying theorem for each label in a text file, labels.txt, containing a list of labels provided by the User. Upon mmj2 unification, stepprover.c identified a label for each of the five theorems which 2-step proves it. For ~ unisnALT , the label list is a list of all 1-hypothesis propositional calculus deductions in set.mm. stepproverp.c is the same as stepprover.c except that it intermittently pauses during execution, allowing the User to observe the changes to a text file caused by the execution of particular statements of the program. (Contributed by Alan Sare, 19-Aug-2016.) (Proof modification is discouraged.) (New usage is discouraged.)","origin":"thm unisnALT(class c0) {\n  |- wceq(cuni(csn(c0)), c0)\n  -| wcel(c0, universe)\n} = {\n  eqssi(cuni(csn(c0)), c0)\n  ax-mp(wss(cuni(csn(c0)), c0), wal(hs0, wi(wcel(cv(hs0), cuni(csn(c0))), wcel(cv(hs0), c0))))\n  ax-gen(hs0, wi(wcel(cv(hs0), cuni(csn(c0))), wcel(cv(hs0), c0)))\n  sylancl(wcel(cv(hs0), cuni(csn(c0))), wcel(cv(hs0), c0), wex(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))), wi(wex(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))), wcel(cv(hs0), c0)))\n  biimpi(wcel(cv(hs0), cuni(csn(c0))), wex(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))))\n  eluni(hs1, cv(hs0), csn(c0))\n  ax-mp(wi(wex(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))), wcel(cv(hs0), c0)), wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs0), c0))))\n  ax-gen(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs0), c0)))\n  syl2anc(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs0), c0), wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs0), cv(hs1)), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))))\n  simpl(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wceq(cv(hs1), c0), wcel(cv(hs1), csn(c0)))\n  syl(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs1), csn(c0)), wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))))\n  id(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))))\n  simpr(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))\n  elsni(cv(hs1), c0)\n  biimpac(wcel(cv(hs0), cv(hs1)), wceq(cv(hs1), c0), wcel(cv(hs0), c0))\n  eleq2(cv(hs1), c0, cv(hs0))\n  biimpi(wal(hs1, wi(wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs0), c0))), wi(wex(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))), wcel(cv(hs0), c0)))\n  19.23v(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0))), wcel(cv(hs0), c0))\n  pm3.35(wex(hs1, wa(wcel(cv(hs0), cv(hs1)), wcel(cv(hs1), csn(c0)))), wcel(cv(hs0), c0))\n  biimpri(wal(hs0, wi(wcel(cv(hs0), cuni(csn(c0))), wcel(cv(hs0), c0))), wss(cuni(csn(c0)), c0))\n  dfss2(hs0, cuni(csn(c0)), c0)\n  ax-mp(wss(c0, cuni(csn(c0))), wal(hs0, wi(wcel(cv(hs0), c0), wcel(cv(hs0), cuni(csn(c0))))))\n  ax-gen(hs0, wi(wcel(cv(hs0), c0), wcel(cv(hs0), cuni(csn(c0)))))\n  sylancl(wcel(cv(hs0), c0), wcel(cv(hs0), cuni(csn(c0))), wcel(cv(hs0), c0), wcel(c0, csn(c0)))\n  id(wcel(cv(hs0), c0))\n  snid(c0)\n  elunii(cv(hs0), c0, csn(c0))\n  biimpri(wal(hs0, wi(wcel(cv(hs0), c0), wcel(cv(hs0), cuni(csn(c0))))), wss(c0, cuni(csn(c0))))\n  dfss2(hs0, c0, cuni(csn(c0)))\n  diff.hs1.c(cv(hs0))\n  diff.hs1.c(csn(c0))\n  diff.hs1.w(wcel(cv(hs0), c0))\n  diff.hs0.c(cuni(csn(c0)))\n  diff.hs0.c(c0)\n}","pretty":"thm unisnALT(class c0) {\n  ‚ä¢ ‚ãÉ { c0 } = c0\n  ‚ä£ c0 ‚àà ùïå\n} = {\n  eqssi(‚ãÉ { c0 }, c0)\n  ax-mp(‚ãÉ { c0 } ‚äÜ c0, ‚àÄ(hs0,(hs0 ‚àà ‚ãÉ { c0 } ‚Üí hs0 ‚àà c0)))\n  ax-gen(hs0, (hs0 ‚àà ‚ãÉ { c0 } ‚Üí hs0 ‚àà c0))\n  sylancl(hs0 ‚àà ‚ãÉ { c0 }, hs0 ‚àà c0, ‚àÉ(hs1,(hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 })), (‚àÉ(hs1,(hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }))‚Üí hs0 ‚àà c0))\n  biimpi(hs0 ‚àà ‚ãÉ { c0 }, ‚àÉ(hs1,(hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 })))\n  eluni(hs1, hs0, { c0 })\n  ax-mp((‚àÉ(hs1,(hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }))‚Üí hs0 ‚àà c0), ‚àÄ(hs1,((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 })‚Üí hs0 ‚àà c0)))\n  ax-gen(hs1, ((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 })‚Üí hs0 ‚àà c0))\n  syl2anc((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }), hs0 ‚àà c0, hs0 ‚àà hs1, hs1 = c0)\n  syl((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }), hs0 ‚àà hs1, (hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }))\n  simpl(hs0 ‚àà hs1, hs1 ‚àà { c0 })\n  syl((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }), hs1 = c0, hs1 ‚àà { c0 })\n  syl((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }), hs1 ‚àà { c0 }, (hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }))\n  id((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }))\n  simpr(hs0 ‚àà hs1, hs1 ‚àà { c0 })\n  elsni(hs1, c0)\n  biimpac(hs0 ‚àà hs1, hs1 = c0, hs0 ‚àà c0)\n  eleq2(hs1, c0, hs0)\n  biimpi(‚àÄ(hs1,((hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 })‚Üí hs0 ‚àà c0)), (‚àÉ(hs1,(hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }))‚Üí hs0 ‚àà c0))\n  19.23v(hs1, (hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 }), hs0 ‚àà c0)\n  pm3.35(‚àÉ(hs1,(hs0 ‚àà hs1 ‚àß hs1 ‚àà { c0 })), hs0 ‚àà c0)\n  biimpri(‚àÄ(hs0,(hs0 ‚àà ‚ãÉ { c0 } ‚Üí hs0 ‚àà c0)), ‚ãÉ { c0 } ‚äÜ c0)\n  dfss2(hs0, ‚ãÉ { c0 }, c0)\n  ax-mp(c0 ‚äÜ ‚ãÉ { c0 }, ‚àÄ(hs0,(hs0 ‚àà c0 ‚Üí hs0 ‚àà ‚ãÉ { c0 })))\n  ax-gen(hs0, (hs0 ‚àà c0 ‚Üí hs0 ‚àà ‚ãÉ { c0 }))\n  sylancl(hs0 ‚àà c0, hs0 ‚àà ‚ãÉ { c0 }, hs0 ‚àà c0, c0 ‚àà { c0 })\n  id(hs0 ‚àà c0)\n  snid(c0)\n  elunii(hs0, c0, { c0 })\n  biimpri(‚àÄ(hs0,(hs0 ‚àà c0 ‚Üí hs0 ‚àà ‚ãÉ { c0 })), c0 ‚äÜ ‚ãÉ { c0 })\n  dfss2(hs0, c0, ‚ãÉ { c0 })\n  diff.hs1.c(hs0)\n  diff.hs1.c({ c0 })\n  diff.hs1.w(hs0 ‚àà c0)\n  diff.hs0.c(‚ãÉ { c0 })\n  diff.hs0.c(c0)\n}","parent":["eqssi","ax-mp","ax-gen","sylancl","biimpi","eluni","syl2anc","syl","simpl","id","simpr","elsni","biimpac","eleq2","19.23v","pm3.35","biimpri","dfss2","snid","elunii","diff.hs1.c","diff.hs1.w","diff.hs0.c"],"children":[]}]}