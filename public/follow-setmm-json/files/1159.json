{"index":1159,"title":"Currying","content":"Currying and uncurrying. See also df-cur and ~ df-unc . Contrary to these, the definitions in this section are parameterized.","blocks":[{"name":"csethom","content":"Syntax for the set of set morphisms.","origin":"const class csethom { -Set-> }","pretty":"","parent":[],"children":[]},{"name":"diff.csethom.s","content":"","origin":"axiom diff.csethom.s(setvar s0) {\n  |- diffsc(s0, csethom)\n}","pretty":"axiom diff.csethom.s(setvar s0) {\n  ‚ä¢ d(s0, -Set->)\n}","parent":[],"children":[]},{"name":"diff.csethom.c","content":"","origin":"axiom diff.csethom.c(class c0) {\n  |- diffcc(csethom, c0)\n}","pretty":"axiom diff.csethom.c(class c0) {\n  ‚ä¢ d(-Set->, c0)\n}","parent":[],"children":[]},{"name":"diff.csethom.w","content":"","origin":"axiom diff.csethom.w(wff w0) {\n  |- diffcw(csethom, w0)\n}","pretty":"axiom diff.csethom.w(wff w0) {\n  ‚ä¢ d(-Set->, w0)\n}","parent":[],"children":[]},{"name":"df-bj-sethom","content":"Define the set of functions (morphisms of sets) between two sets. Same as ~ df-map with arguments swapped. TODO: prove the same staple lemmas as for ` ^m ` . Remark: one may define ` -Set-> = ( x e. dom Struct , y e. dom Struct |-> ` ` { f | f : ( Base `` x ) --> ( Base `` y ) } ) ` so that for morphisms between other structures, one could write ` ... = { f e. ( x -Set-> y ) | ... } ` . (Contributed by BJ, 11-Apr-2020.)","origin":"axiom df-bj-sethom(setvar s0, setvar s1, setvar s2) {\n  |- wceq(csethom, cmpo(s0, s1, universe, universe, cab(s2, wf(cv(s2), cv(s0), cv(s1)))))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffss(s0, s1)\n}","pretty":"axiom df-bj-sethom(setvar s0, setvar s1, setvar s2) {\n  ‚ä¢ -Set-> =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶ { s2 |(s2 : s0 ‚Üí s1)})\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"ctophom","content":"Syntax for the set of topological morphisms.","origin":"const class ctophom { -Top-> }","pretty":"","parent":[],"children":[]},{"name":"diff.ctophom.s","content":"","origin":"axiom diff.ctophom.s(setvar s0) {\n  |- diffsc(s0, ctophom)\n}","pretty":"axiom diff.ctophom.s(setvar s0) {\n  ‚ä¢ d(s0, -Top->)\n}","parent":[],"children":[]},{"name":"diff.ctophom.c","content":"","origin":"axiom diff.ctophom.c(class c0) {\n  |- diffcc(ctophom, c0)\n}","pretty":"axiom diff.ctophom.c(class c0) {\n  ‚ä¢ d(-Top->, c0)\n}","parent":[],"children":[]},{"name":"diff.ctophom.w","content":"","origin":"axiom diff.ctophom.w(wff w0) {\n  |- diffcw(ctophom, w0)\n}","pretty":"axiom diff.ctophom.w(wff w0) {\n  ‚ä¢ d(-Top->, w0)\n}","parent":[],"children":[]},{"name":"df-bj-tophom","content":"Define the set of continuous functions (morphisms of topological spaces) between two topological spaces. Similar to ~ df-cn (which is in terms of topologies instead of topological spaces). (Contributed by BJ, 10-Feb-2022.)","origin":"axiom df-bj-tophom(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wceq(ctophom, cmpo(s0, s1, ctps, ctps, crab(s2, co(cfv(cbs, cv(s0)), csethom, cfv(cbs, cv(s1))), wral(s3, cfv(ctopn, cv(s1)), wcel(cima(ccnv(cv(s2)), cv(s3)), cfv(ctopn, cv(s0)))))))\n  -| diffss(s2, s3)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffss(s0, s3)\n  -| diffss(s1, s3)\n  -| diffss(s0, s1)\n}","pretty":"axiom df-bj-tophom(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ‚ä¢ -Top-> =(s0 ‚àà TopSp, s1 ‚àà TopSp ‚Ü¶ { s2 ‚àà((Base ` s0)[-Set->](Base ` s1))| ‚àÄ(s3 ‚àà(TopOpen ` s1),(`' s2 \" s3)‚àà(TopOpen ` s0))})\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"cmgmhom","content":"Syntax for the set of magma morphisms.","origin":"const class cmgmhom { -Mgm-> }","pretty":"","parent":[],"children":[]},{"name":"diff.cmgmhom.s","content":"","origin":"axiom diff.cmgmhom.s(setvar s0) {\n  |- diffsc(s0, cmgmhom)\n}","pretty":"axiom diff.cmgmhom.s(setvar s0) {\n  ‚ä¢ d(s0, -Mgm->)\n}","parent":[],"children":[]},{"name":"diff.cmgmhom.c","content":"","origin":"axiom diff.cmgmhom.c(class c0) {\n  |- diffcc(cmgmhom, c0)\n}","pretty":"axiom diff.cmgmhom.c(class c0) {\n  ‚ä¢ d(-Mgm->, c0)\n}","parent":[],"children":[]},{"name":"diff.cmgmhom.w","content":"","origin":"axiom diff.cmgmhom.w(wff w0) {\n  |- diffcw(cmgmhom, w0)\n}","pretty":"axiom diff.cmgmhom.w(wff w0) {\n  ‚ä¢ d(-Mgm->, w0)\n}","parent":[],"children":[]},{"name":"df-bj-mgmhom","content":"Define the set of magma morphisms between two magmas. If domain and codomain are semigroups, monoids, or groups, then one obtains the set of morphisms of these structures. (Contributed by BJ, 10-Feb-2022.)","origin":"axiom df-bj-mgmhom(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4) {\n  |- wceq(cmgmhom, cmpo(s0, s1, cmgm, cmgm, crab(s2, co(cfv(cbs, cv(s0)), csethom, cfv(cbs, cv(s1))), wral(s3, cfv(cbs, cv(s0)), wral(s4, cfv(cbs, cv(s0)), wceq(cfv(cv(s2), co(cv(s3), cfv(cplusg, cv(s0)), cv(s4))), co(cfv(cv(s2), cv(s3)), cfv(cplusg, cv(s1)), cfv(cv(s2), cv(s4)))))))))\n  -| diffss(s2, s3)\n  -| diffss(s2, s4)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffss(s3, s4)\n  -| diffss(s0, s3)\n  -| diffss(s1, s3)\n  -| diffss(s0, s4)\n  -| diffss(s1, s4)\n  -| diffss(s0, s1)\n}","pretty":"axiom df-bj-mgmhom(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4) {\n  ‚ä¢ -Mgm-> =(s0 ‚àà Mgm, s1 ‚àà Mgm ‚Ü¶ { s2 ‚àà((Base ` s0)[-Set->](Base ` s1))| ‚àÄ(s3 ‚àà(Base ` s0), ‚àÄ(s4 ‚àà(Base ` s0),(s2 `(s3[(+ ` s0)]s4))=((s2 ` s3)[(+ ` s1)](s2 ` s4))))})\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"ctopmgmhom","content":"Syntax for the set of topological magma morphisms.","origin":"const class ctopmgmhom { -TopMgm-> }","pretty":"","parent":[],"children":[]},{"name":"diff.ctopmgmhom.s","content":"","origin":"axiom diff.ctopmgmhom.s(setvar s0) {\n  |- diffsc(s0, ctopmgmhom)\n}","pretty":"axiom diff.ctopmgmhom.s(setvar s0) {\n  ‚ä¢ d(s0, -TopMgm->)\n}","parent":[],"children":[]},{"name":"diff.ctopmgmhom.c","content":"","origin":"axiom diff.ctopmgmhom.c(class c0) {\n  |- diffcc(ctopmgmhom, c0)\n}","pretty":"axiom diff.ctopmgmhom.c(class c0) {\n  ‚ä¢ d(-TopMgm->, c0)\n}","parent":[],"children":[]},{"name":"diff.ctopmgmhom.w","content":"","origin":"axiom diff.ctopmgmhom.w(wff w0) {\n  |- diffcw(ctopmgmhom, w0)\n}","pretty":"axiom diff.ctopmgmhom.w(wff w0) {\n  ‚ä¢ d(-TopMgm->, w0)\n}","parent":[],"children":[]},{"name":"df-bj-topmgmhom","content":"Define the set of topological magma morphisms (continuous magma morphisms) between two topological magmas. If domain and codomain are topological semigroups, monoids, or groups, then one obtains the set of morphisms of these structures. This definition is currently stated with topological monoid domain and codomain, since topological magmas are currently not defined in set.mm. (Contributed by BJ, 10-Feb-2022.)","origin":"axiom df-bj-topmgmhom(setvar s0, setvar s1) {\n  |- wceq(ctopmgmhom, cmpo(s0, s1, ctmd, ctmd, cin(co(cv(s0), ctophom, cv(s1)), co(cv(s0), cmgmhom, cv(s1)))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-bj-topmgmhom(setvar s0, setvar s1) {\n  ‚ä¢ -TopMgm-> =(s0 ‚àà TopMnd, s1 ‚àà TopMnd ‚Ü¶((s0[-Top->]s1)‚ãÇ(s0[-Mgm->]s1)))\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"ccur-","content":"Syntax for the parameterized currying function.","origin":"const class ccur- { curry_ }","pretty":"","parent":[],"children":[]},{"name":"diff.ccur-.s","content":"","origin":"axiom diff.ccur-.s(setvar s0) {\n  |- diffsc(s0, ccur-)\n}","pretty":"axiom diff.ccur-.s(setvar s0) {\n  ‚ä¢ d(s0, curry_)\n}","parent":[],"children":[]},{"name":"diff.ccur-.c","content":"","origin":"axiom diff.ccur-.c(class c0) {\n  |- diffcc(ccur-, c0)\n}","pretty":"axiom diff.ccur-.c(class c0) {\n  ‚ä¢ d(curry_, c0)\n}","parent":[],"children":[]},{"name":"diff.ccur-.w","content":"","origin":"axiom diff.ccur-.w(wff w0) {\n  |- diffcw(ccur-, w0)\n}","pretty":"axiom diff.ccur-.w(wff w0) {\n  ‚ä¢ d(curry_, w0)\n}","parent":[],"children":[]},{"name":"df-bj-cur","content":"Define currying. See also ~ df-cur . (Contributed by BJ, 11-Apr-2020.)","origin":"axiom df-bj-cur(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  |- wceq(ccur-, cmpt3(s0, s1, s2, universe, universe, universe, cmpt(s3, co(cxp(cv(s0), cv(s1)), csethom, cv(s2)), cmpt(s4, cv(s0), cmpt(s5, cv(s1), cfv(cv(s3), cop(cv(s4), cv(s5))))))))\n  -| diffss(s4, s5)\n  -| diffss(s3, s4)\n  -| diffss(s0, s4)\n  -| diffss(s1, s4)\n  -| diffss(s2, s4)\n  -| diffss(s3, s5)\n  -| diffss(s0, s5)\n  -| diffss(s1, s5)\n  -| diffss(s2, s5)\n  -| diffss(s0, s3)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n}","pretty":"axiom df-bj-cur(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  ‚ä¢ curry_ =(s0 ‚àà ùïå, s1 ‚àà ùïå, s2 ‚àà ùïå ‚Ü¶(s3 ‚àà((s0 √ó s1)[-Set->]s2)‚Ü¶(s4 ‚àà s0 ‚Ü¶(s5 ‚àà s1 ‚Ü¶(s3 ` < s4, s5 >)))))\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n}","parent":[],"children":[""]},{"name":"cunc-","content":"Notation for the parameterized uncurrying function.","origin":"const class cunc- { uncurry_ }","pretty":"","parent":[],"children":[]},{"name":"diff.cunc-.s","content":"","origin":"axiom diff.cunc-.s(setvar s0) {\n  |- diffsc(s0, cunc-)\n}","pretty":"axiom diff.cunc-.s(setvar s0) {\n  ‚ä¢ d(s0, uncurry_)\n}","parent":[],"children":[]},{"name":"diff.cunc-.c","content":"","origin":"axiom diff.cunc-.c(class c0) {\n  |- diffcc(cunc-, c0)\n}","pretty":"axiom diff.cunc-.c(class c0) {\n  ‚ä¢ d(uncurry_, c0)\n}","parent":[],"children":[]},{"name":"diff.cunc-.w","content":"","origin":"axiom diff.cunc-.w(wff w0) {\n  |- diffcw(cunc-, w0)\n}","pretty":"axiom diff.cunc-.w(wff w0) {\n  ‚ä¢ d(uncurry_, w0)\n}","parent":[],"children":[]},{"name":"df-bj-unc","content":"Define uncurrying. See also ~ df-unc . (Contributed by BJ, 11-Apr-2020.)","origin":"axiom df-bj-unc(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  |- wceq(cunc-, cmpt3(s0, s1, s2, universe, universe, universe, cmpt(s3, co(cv(s0), csethom, co(cv(s1), csethom, cv(s2))), cmpo(s4, s5, cv(s0), cv(s1), cfv(cfv(cv(s3), cv(s4)), cv(s5))))))\n  -| diffss(s4, s5)\n  -| diffss(s3, s4)\n  -| diffss(s0, s4)\n  -| diffss(s1, s4)\n  -| diffss(s2, s4)\n  -| diffss(s3, s5)\n  -| diffss(s0, s5)\n  -| diffss(s1, s5)\n  -| diffss(s2, s5)\n  -| diffss(s0, s3)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n}","pretty":"axiom df-bj-unc(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5) {\n  ‚ä¢ uncurry_ =(s0 ‚àà ùïå, s1 ‚àà ùïå, s2 ‚àà ùïå ‚Ü¶(s3 ‚àà(s0[-Set->](s1[-Set->]s2))‚Ü¶(s4 ‚àà s0, s5 ‚àà s1 ‚Ü¶((s3 ` s4)` s5))))\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n}","parent":[],"children":[""]}]}