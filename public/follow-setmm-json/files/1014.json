{"index":1014,"title":"Retracts and sections","content":"","blocks":[{"name":"cretr","content":"Extend class notation with the retract relation.","origin":"const class cretr { Retr }","pretty":"","parent":[],"children":[]},{"name":"diff.cretr.s","content":"","origin":"axiom diff.cretr.s(setvar s0) {\n  |- diffsc(s0, cretr)\n}","pretty":"axiom diff.cretr.s(setvar s0) {\n  ⊢ d(s0, Retr)\n}","parent":[],"children":[]},{"name":"diff.cretr.c","content":"","origin":"axiom diff.cretr.c(class c0) {\n  |- diffcc(cretr, c0)\n}","pretty":"axiom diff.cretr.c(class c0) {\n  ⊢ d(Retr, c0)\n}","parent":[],"children":[]},{"name":"diff.cretr.w","content":"","origin":"axiom diff.cretr.w(wff w0) {\n  |- diffcw(cretr, w0)\n}","pretty":"axiom diff.cretr.w(wff w0) {\n  ⊢ d(Retr, w0)\n}","parent":[],"children":[]},{"name":"df-retr","content":"Define the set of retractions on two topological spaces. We say that ` R ` is a retraction from ` J ` to ` K ` . or ` R e. ( J Retr K ) ` iff there is an ` S ` such that ` R : J --> K , S : K --> J ` are continuous functions called the retraction and section respectively, and their composite ` R o. S ` is homotopic to the identity map. If a retraction exists, we say ` J ` is a retract of ` K ` . (This terminology is borrowed from HoTT and appears to be nonstandard, although it has similaries to the concept of retract in the category of topological spaces and to a deformation retract in general topology.) Two topological spaces that are retracts of each other are called homotopy equivalent. (Contributed by Mario Carneiro, 11-Feb-2015.)","origin":"axiom df-retr(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wceq(cretr, cmpo(s0, s1, ctop, ctop, crab(s2, co(cv(s0), ccn, cv(s1)), wrex(s3, co(cv(s1), ccn, cv(s0)), wne(co(ccom(cv(s2), cv(s3)), co(cv(s0), chtpy, cv(s0)), cres(cid, cuni(cv(s0)))), emptycls)))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n}","pretty":"axiom df-retr(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ Retr =(s0 ∈ Top, s1 ∈ Top ↦ { s2 ∈(s0[Cn]s1)| ∃(s3 ∈(s1[Cn]s0),((s2 ∘ s3)[(s0[Htpy]s0)](= |` ⋃ s0))≠ ∅)})\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s2, s3)\n}","parent":[],"children":[""]}]}