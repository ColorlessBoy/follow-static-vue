{"index":1580,"title":"Algebra helpers","content":"This is an experimental approach to make it clearer (and easier) to do basic algebra in set.mm. These little theorems support basic algebra on equations at a slightly higher conceptual level. Instead of always having to \"build up\" equivalent expressions for one side of an equation, these theorems allow you to directly manipulate an equality. These higher-level steps lead to easier to understand proofs when they can be used, as well as proofs that are slightly shorter (when measured in steps). There are disadvantages. In particular, this approach requires many theorems (for many permutations to provide all of the operations). It can also only handle certain cases; more complex approaches must still be approached by \"building up\" equalities as is done today. However, I expect that we can create enough theorems to make it worth doing. I'm trying this out to see if this is helpful and if the number of permutations is manageable. To commute LHS for addition, use ~ addcomli . We might want to switch to a naming convention like ~ addcomli .","blocks":[{"name":"comraddi","content":"Commute RHS addition. See ~ addcomli to commute addition on LHS. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm comraddi(class c0, class c1, class c2) {\n  |- wceq(c0, co(c1, caddc, c2))\n  -| wcel(c2, cc)\n  -| wcel(c1, cc)\n  -| wceq(c0, co(c2, caddc, c1))\n} = {\n  eqtri(c0, co(c1, caddc, c2), co(c2, caddc, c1))\n  addcomi(c2, c1)\n}","pretty":"thm comraddi(class c0, class c1, class c2) {\n  ⊢ c0 =(c1[+]c2)\n  ⊣ c2 ∈ ℂ\n  ⊣ c1 ∈ ℂ\n  ⊣ c0 =(c2[+]c1)\n} = {\n  eqtri(c0, (c1[+]c2), (c2[+]c1))\n  addcomi(c2, c1)\n}","parent":["eqtri","addcomi"],"children":["mvrladdi"]},{"name":"mvlladdd","content":"Move LHS left addition to RHS. (Contributed by David A. Wheeler, 15-Oct-2018.)","origin":"thm mvlladdd(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wceq(c0, co(c1, cmin, c2)))\n  -| wi(w0, wcel(c2, cc))\n  -| wi(w0, wcel(c0, cc))\n  -| wi(w0, wceq(co(c2, caddc, c0), c1))\n} = {\n  eqtr3d(c0, co(c1, cmin, c2), co(co(c0, caddc, c2), cmin, c2), w0)\n  pncand(c0, c2, w0)\n  oveq1d(co(c0, caddc, c2), cmin, c2, c1, w0)\n  eqtr3d(co(c0, caddc, c2), c1, co(c2, caddc, c0), w0)\n  addcomd(c2, c0, w0)\n}","pretty":"thm mvlladdd(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 → c0 =(c1[-]c2))\n  ⊣ (w0 → c2 ∈ ℂ)\n  ⊣ (w0 → c0 ∈ ℂ)\n  ⊣ (w0 →(c2[+]c0)= c1)\n} = {\n  eqtr3d(c0, (c1[-]c2), ((c0[+]c2)[-]c2), w0)\n  pncand(c0, c2, w0)\n  oveq1d((c0[+]c2), cmin, c2, c1, w0)\n  eqtr3d((c0[+]c2), c1, (c2[+]c0), w0)\n  addcomd(c2, c0, w0)\n}","parent":["eqtr3d","pncand","oveq1d","addcomd"],"children":[]},{"name":"mvlraddi","content":"Move LHS right addition to RHS. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm mvlraddi(class c0, class c1, class c2) {\n  |- wceq(c0, co(c1, cmin, c2))\n  -| wcel(c0, cc)\n  -| wcel(c2, cc)\n  -| wceq(co(c0, caddc, c2), c1)\n} = {\n  eqtr3i(c0, co(c1, cmin, c2), co(co(c0, caddc, c2), cmin, c2))\n  pncan3oi(c0, c2)\n  oveq1i(co(c0, caddc, c2), cmin, c2, c1)\n}","pretty":"thm mvlraddi(class c0, class c1, class c2) {\n  ⊢ c0 =(c1[-]c2)\n  ⊣ c0 ∈ ℂ\n  ⊣ c2 ∈ ℂ\n  ⊣ (c0[+]c2)= c1\n} = {\n  eqtr3i(c0, (c1[-]c2), ((c0[+]c2)[-]c2))\n  pncan3oi(c0, c2)\n  oveq1i((c0[+]c2), cmin, c2, c1)\n}","parent":["eqtr3i","pncan3oi","oveq1i"],"children":["i2linesi"]},{"name":"mvrladdi","content":"Move RHS left addition to LHS. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm mvrladdi(class c0, class c1, class c2) {\n  |- wceq(co(c0, cmin, c1), c2)\n  -| wcel(c1, cc)\n  -| wcel(c2, cc)\n  -| wceq(c0, co(c1, caddc, c2))\n} = {\n  eqtri(co(c0, cmin, c1), c2, co(co(c2, caddc, c1), cmin, c1))\n  oveq1i(c0, cmin, c1, co(c2, caddc, c1))\n  comraddi(c0, c2, c1)\n  pncan3oi(c2, c1)\n}","pretty":"thm mvrladdi(class c0, class c1, class c2) {\n  ⊢ (c0[-]c1)= c2\n  ⊣ c1 ∈ ℂ\n  ⊣ c2 ∈ ℂ\n  ⊣ c0 =(c1[+]c2)\n} = {\n  eqtri((c0[-]c1), c2, ((c2[+]c1)[-]c1))\n  oveq1i(c0, cmin, c1, (c2[+]c1))\n  comraddi(c0, c2, c1)\n  pncan3oi(c2, c1)\n}","parent":["eqtri","oveq1i","comraddi","pncan3oi"],"children":["i2linesi"]},{"name":"assraddsubi","content":"Associate RHS addition-subtraction. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm assraddsubi(class c0, class c1, class c2, class c3) {\n  |- wceq(c0, co(c1, caddc, co(c2, cmin, c3)))\n  -| wcel(c1, cc)\n  -| wcel(c2, cc)\n  -| wcel(c3, cc)\n  -| wceq(c0, co(co(c1, caddc, c2), cmin, c3))\n} = {\n  eqtri(c0, co(c1, caddc, co(c2, cmin, c3)), co(co(c1, caddc, c2), cmin, c3))\n  addsubassi(c1, c2, c3)\n}","pretty":"thm assraddsubi(class c0, class c1, class c2, class c3) {\n  ⊢ c0 =(c1[+](c2[-]c3))\n  ⊣ c1 ∈ ℂ\n  ⊣ c2 ∈ ℂ\n  ⊣ c3 ∈ ℂ\n  ⊣ c0 =((c1[+]c2)[-]c3)\n} = {\n  eqtri(c0, (c1[+](c2[-]c3)), ((c1[+]c2)[-]c3))\n  addsubassi(c1, c2, c3)\n}","parent":["eqtri","addsubassi"],"children":["i2linesi"]},{"name":"joinlmuladdmuli","content":"Join AB+CB into (A+C) on LHS. (Contributed by David A. Wheeler, 26-Oct-2019.)","origin":"thm joinlmuladdmuli(class c0, class c1, class c2, class c3) {\n  |- wceq(co(co(c0, caddc, c1), cmul, c2), c3)\n  -| wcel(c0, cc)\n  -| wcel(c2, cc)\n  -| wcel(c1, cc)\n  -| wceq(co(co(c0, cmul, c2), caddc, co(c1, cmul, c2)), c3)\n} = {\n  mptru(wceq(co(co(c0, caddc, c1), cmul, c2), c3))\n  joinlmuladdmuld(c0, c1, c2, c3, wtru)\n  a1i(wtru, wcel(c0, cc))\n  a1i(wtru, wcel(c2, cc))\n  a1i(wtru, wcel(c1, cc))\n  a1i(wtru, wceq(co(co(c0, cmul, c2), caddc, co(c1, cmul, c2)), c3))\n}","pretty":"thm joinlmuladdmuli(class c0, class c1, class c2, class c3) {\n  ⊢ ((c0[+]c1)[×]c2)= c3\n  ⊣ c0 ∈ ℂ\n  ⊣ c2 ∈ ℂ\n  ⊣ c1 ∈ ℂ\n  ⊣ ((c0[×]c2)[+](c1[×]c2))= c3\n} = {\n  mptru(((c0[+]c1)[×]c2)= c3)\n  joinlmuladdmuld(c0, c1, c2, c3, wtru)\n  a1i(wtru, c0 ∈ ℂ)\n  a1i(wtru, c2 ∈ ℂ)\n  a1i(wtru, c1 ∈ ℂ)\n  a1i(wtru, ((c0[×]c2)[+](c1[×]c2))= c3)\n}","parent":["mptru","joinlmuladdmuld","a1i"],"children":[]},{"name":"joinlmulsubmuld","content":"Join AB-CB into (A-C) on LHS. (Contributed by David A. Wheeler, 15-Oct-2018.)","origin":"thm joinlmulsubmuld(class c0, class c1, class c2, class c3, wff w0) {\n  |- wi(w0, wceq(co(co(c0, cmin, c1), cmul, c2), c3))\n  -| wi(w0, wcel(c0, cc))\n  -| wi(w0, wcel(c2, cc))\n  -| wi(w0, wcel(c1, cc))\n  -| wi(w0, wceq(co(co(c0, cmul, c2), cmin, co(c1, cmul, c2)), c3))\n} = {\n  eqtrd(co(co(c0, cmin, c1), cmul, c2), c3, co(co(c0, cmul, c2), cmin, co(c1, cmul, c2)), w0)\n  subdird(c0, c1, c2, w0)\n}","pretty":"thm joinlmulsubmuld(class c0, class c1, class c2, class c3, wff w0) {\n  ⊢ (w0 →((c0[-]c1)[×]c2)= c3)\n  ⊣ (w0 → c0 ∈ ℂ)\n  ⊣ (w0 → c2 ∈ ℂ)\n  ⊣ (w0 → c1 ∈ ℂ)\n  ⊣ (w0 →((c0[×]c2)[-](c1[×]c2))= c3)\n} = {\n  eqtrd(((c0[-]c1)[×]c2), c3, ((c0[×]c2)[-](c1[×]c2)), w0)\n  subdird(c0, c1, c2, w0)\n}","parent":["eqtrd","subdird"],"children":["i2linesd"]},{"name":"joinlmulsubmuli","content":"Join AB-CB into (A-C) on LHS. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm joinlmulsubmuli(class c0, class c1, class c2, class c3) {\n  |- wceq(co(co(c0, cmin, c1), cmul, c2), c3)\n  -| wcel(c0, cc)\n  -| wcel(c2, cc)\n  -| wcel(c1, cc)\n  -| wceq(co(co(c0, cmul, c2), cmin, co(c1, cmul, c2)), c3)\n} = {\n  eqtri(co(co(c0, cmin, c1), cmul, c2), c3, co(co(c0, cmul, c2), cmin, co(c1, cmul, c2)))\n  subdiri(c0, c1, c2)\n}","pretty":"thm joinlmulsubmuli(class c0, class c1, class c2, class c3) {\n  ⊢ ((c0[-]c1)[×]c2)= c3\n  ⊣ c0 ∈ ℂ\n  ⊣ c2 ∈ ℂ\n  ⊣ c1 ∈ ℂ\n  ⊣ ((c0[×]c2)[-](c1[×]c2))= c3\n} = {\n  eqtri(((c0[-]c1)[×]c2), c3, ((c0[×]c2)[-](c1[×]c2)))\n  subdiri(c0, c1, c2)\n}","parent":["eqtri","subdiri"],"children":["i2linesi"]},{"name":"mvlrmuld","content":"Move LHS right multiplication to RHS. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm mvlrmuld(class c0, class c1, class c2, wff w0) {\n  |- wi(w0, wceq(c0, co(c1, cdiv, c2)))\n  -| wi(w0, wcel(c0, cc))\n  -| wi(w0, wcel(c2, cc))\n  -| wi(w0, wne(c2, nat0))\n  -| wi(w0, wceq(co(c0, cmul, c2), c1))\n} = {\n  eqtr3d(c0, co(c1, cdiv, c2), co(co(c0, cmul, c2), cdiv, c2), w0)\n  divcan4d(c0, c2, w0)\n  oveq1d(co(c0, cmul, c2), cdiv, c2, c1, w0)\n}","pretty":"thm mvlrmuld(class c0, class c1, class c2, wff w0) {\n  ⊢ (w0 → c0 =(c1[÷]c2))\n  ⊣ (w0 → c0 ∈ ℂ)\n  ⊣ (w0 → c2 ∈ ℂ)\n  ⊣ (w0 → c2 ≠ 0)\n  ⊣ (w0 →(c0[×]c2)= c1)\n} = {\n  eqtr3d(c0, (c1[÷]c2), ((c0[×]c2)[÷]c2), w0)\n  divcan4d(c0, c2, w0)\n  oveq1d((c0[×]c2), cdiv, c2, c1, w0)\n}","parent":["eqtr3d","divcan4d","oveq1d"],"children":[]},{"name":"mvlrmuli","content":"Move LHS right multiplication to RHS. (Contributed by David A. Wheeler, 11-Oct-2018.)","origin":"thm mvlrmuli(class c0, class c1, class c2) {\n  |- wceq(c0, co(c1, cdiv, c2))\n  -| wcel(c0, cc)\n  -| wcel(c2, cc)\n  -| wne(c2, nat0)\n  -| wceq(co(c0, cmul, c2), c1)\n} = {\n  eqtr3i(c0, co(c1, cdiv, c2), co(co(c0, cmul, c2), cdiv, c2))\n  divcan4i(c0, c2)\n  oveq1i(co(c0, cmul, c2), cdiv, c2, c1)\n}","pretty":"thm mvlrmuli(class c0, class c1, class c2) {\n  ⊢ c0 =(c1[÷]c2)\n  ⊣ c0 ∈ ℂ\n  ⊣ c2 ∈ ℂ\n  ⊣ c2 ≠ 0\n  ⊣ (c0[×]c2)= c1\n} = {\n  eqtr3i(c0, (c1[÷]c2), ((c0[×]c2)[÷]c2))\n  divcan4i(c0, c2)\n  oveq1i((c0[×]c2), cdiv, c2, c1)\n}","parent":["eqtr3i","divcan4i","oveq1i"],"children":[]}]}