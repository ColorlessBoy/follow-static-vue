{"index":1170,"title":"Monoids","content":"See ~ ccmn and subsequents. The first few statements of this subsection can be put very early after ~ ccmn . Proposal: in the main part, make separate subsections of commutative monoids and abelian groups. Relabel ~ cabl to \"cabl\" or, preferably, other labels containing \"abl\" to \"abel\", for consistency.","blocks":[{"name":"bj-cmnssmnd","content":"Commutative monoids are monoids. (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-cmnssmnd() {\n  |- wss(ccmn, cmnd)\n} = {\n  eqsstri(ccmn, cmnd, crab(hs2, cmnd, wral(hs0, cfv(cbs, cv(hs2)), wral(hs1, cfv(cbs, cv(hs2)), wceq(co(cv(hs0), cfv(cplusg, cv(hs2)), cv(hs1)), co(cv(hs1), cfv(cplusg, cv(hs2)), cv(hs0)))))))\n  df-cmn(hs2, hs0, hs1)\n  ssrab2(hs2, cmnd, wral(hs0, cfv(cbs, cv(hs2)), wral(hs1, cfv(cbs, cv(hs2)), wceq(co(cv(hs0), cfv(cplusg, cv(hs2)), cv(hs1)), co(cv(hs1), cfv(cplusg, cv(hs2)), cv(hs0))))))\n  diff.hs0.s(hs1)\n  diff.hs2.s(hs0)\n  diff.hs2.s(hs1)\n  diff.hs2.c(cmnd)\n}","pretty":"thm bj-cmnssmnd() {\n  ⊢ CMnd ⊆ Mnd\n} = {\n  eqsstri(ccmn, cmnd, { hs2 ∈ Mnd | ∀(hs0 ∈(Base ` hs2), ∀(hs1 ∈(Base ` hs2),(hs0[(+ ` hs2)]hs1)=(hs1[(+ ` hs2)]hs0)))})\n  df-cmn(hs2, hs0, hs1)\n  ssrab2(hs2, cmnd, ∀(hs0 ∈(Base ` hs2), ∀(hs1 ∈(Base ` hs2),(hs0[(+ ` hs2)]hs1)=(hs1[(+ ` hs2)]hs0))))\n  diff.hs0.s(hs1)\n  diff.hs2.s(hs0)\n  diff.hs2.s(hs1)\n  diff.hs2.c(cmnd)\n}","parent":["eqsstri","df-cmn","ssrab2","diff.hs0.s","diff.hs2.s","diff.hs2.c"],"children":["bj-cmnssmndel"]},{"name":"bj-cmnssmndel","content":"Commutative monoids are monoids (elemental version). This is a more direct proof of ~ cmnmnd , which relies on ~ iscmn . (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-cmnssmndel(class c0) {\n  |- wi(wcel(c0, ccmn), wcel(c0, cmnd))\n} = {\n  sseli(c0, ccmn, cmnd)\n  bj-cmnssmnd()\n}","pretty":"thm bj-cmnssmndel(class c0) {\n  ⊢ (c0 ∈ CMnd → c0 ∈ Mnd)\n} = {\n  sseli(c0, ccmn, cmnd)\n  bj-cmnssmnd()\n}","parent":["sseli","bj-cmnssmnd"],"children":[]},{"name":"bj-ablssgrp","content":"Abelian groups are groups. (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-ablssgrp() {\n  |- wss(cabl, cgrp)\n} = {\n  eqsstri(cabl, cgrp, cin(cgrp, ccmn))\n  df-abl()\n  inss1(cgrp, ccmn)\n}","pretty":"thm bj-ablssgrp() {\n  ⊢ Abel ⊆ Grp\n} = {\n  eqsstri(cabl, cgrp, (Grp ⋂ CMnd))\n  df-abl()\n  inss1(cgrp, ccmn)\n}","parent":["eqsstri","df-abl","inss1"],"children":["bj-ablssgrpel"]},{"name":"bj-ablssgrpel","content":"Abelian groups are groups (elemental version). This is a shorter proof of ~ ablgrp . (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-ablssgrpel(class c0) {\n  |- wi(wcel(c0, cabl), wcel(c0, cgrp))\n} = {\n  sseli(c0, cabl, cgrp)\n  bj-ablssgrp()\n}","pretty":"thm bj-ablssgrpel(class c0) {\n  ⊢ (c0 ∈ Abel → c0 ∈ Grp)\n} = {\n  sseli(c0, cabl, cgrp)\n  bj-ablssgrp()\n}","parent":["sseli","bj-ablssgrp"],"children":[]},{"name":"bj-ablsscmn","content":"Abelian groups are commutative monoids. (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-ablsscmn() {\n  |- wss(cabl, ccmn)\n} = {\n  eqsstri(cabl, ccmn, cin(cgrp, ccmn))\n  df-abl()\n  inss2(cgrp, ccmn)\n}","pretty":"thm bj-ablsscmn() {\n  ⊢ Abel ⊆ CMnd\n} = {\n  eqsstri(cabl, ccmn, (Grp ⋂ CMnd))\n  df-abl()\n  inss2(cgrp, ccmn)\n}","parent":["eqsstri","df-abl","inss2"],"children":["bj-ablsscmnel","bj-rrvecsscmn"]},{"name":"bj-ablsscmnel","content":"Abelian groups are commutative monoids (elemental version). This is a shorter proof of ~ ablcmn . (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-ablsscmnel(class c0) {\n  |- wi(wcel(c0, cabl), wcel(c0, ccmn))\n} = {\n  sseli(c0, cabl, ccmn)\n  bj-ablsscmn()\n}","pretty":"thm bj-ablsscmnel(class c0) {\n  ⊢ (c0 ∈ Abel → c0 ∈ CMnd)\n} = {\n  sseli(c0, cabl, ccmn)\n  bj-ablsscmn()\n}","parent":["sseli","bj-ablsscmn"],"children":[]},{"name":"bj-modssabl","content":"(The additive groups of) modules are abelian groups. (The elemental version is ~ lmodabl ; see also ~ lmodgrp and ~ lmodcmn .) (Contributed by BJ, 9-Jun-2019.)","origin":"thm bj-modssabl() {\n  |- wss(clmod, cabl)\n} = {\n  ssriv(hs0, clmod, cabl)\n  lmodabl(cv(hs0))\n  diff.hs0.c(clmod)\n  diff.hs0.c(cabl)\n}","pretty":"thm bj-modssabl() {\n  ⊢ LMod ⊆ Abel\n} = {\n  ssriv(hs0, clmod, cabl)\n  lmodabl(hs0)\n  diff.hs0.c(clmod)\n  diff.hs0.c(cabl)\n}","parent":["ssriv","lmodabl","diff.hs0.c"],"children":["bj-rrvecsscmn"]},{"name":"bj-vecssmod","content":"Vector spaces are modules. (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-vecssmod() {\n  |- wss(clvec, clmod)\n} = {\n  eqsstri(clvec, clmod, crab(hs0, clmod, wcel(cfv(csca, cv(hs0)), cdr)))\n  df-lvec(hs0)\n  ssrab2(hs0, clmod, wcel(cfv(csca, cv(hs0)), cdr))\n  diff.hs0.c(clmod)\n}","pretty":"thm bj-vecssmod() {\n  ⊢ LVec ⊆ LMod\n} = {\n  eqsstri(clvec, clmod, { hs0 ∈ LMod |(Scalar ` hs0)∈ DivRing })\n  df-lvec(hs0)\n  ssrab2(hs0, clmod, (Scalar ` hs0)∈ DivRing)\n  diff.hs0.c(clmod)\n}","parent":["eqsstri","df-lvec","ssrab2","diff.hs0.c"],"children":["bj-vecssmodel","bj-rrvecsscmn"]},{"name":"bj-vecssmodel","content":"Vector spaces are modules (elemental version). This is a shorter proof of ~ lveclmod . (Contributed by BJ, 9-Jun-2019.) (Proof modification is discouraged.)","origin":"thm bj-vecssmodel(class c0) {\n  |- wi(wcel(c0, clvec), wcel(c0, clmod))\n} = {\n  sseli(c0, clvec, clmod)\n  bj-vecssmod()\n}","pretty":"thm bj-vecssmodel(class c0) {\n  ⊢ (c0 ∈ LVec → c0 ∈ LMod)\n} = {\n  sseli(c0, clvec, clmod)\n  bj-vecssmod()\n}","parent":["sseli","bj-vecssmod"],"children":[]}]}