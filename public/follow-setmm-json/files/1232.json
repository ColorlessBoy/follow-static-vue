{"index":1232,"title":"Functions","content":"","blocks":[{"name":"df-funss","content":"Define the class of all function sets (but not necessarily function relations, cf. ~ df-funsALTV ). It is used only by ~ df-funsALTV . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-funss(setvar s0) {\n  |- wceq(cfunss, cab(s0, wcel(ccoss(cv(s0)), ccnvrefrels)))\n}","pretty":"axiom df-funss(setvar s0) {\n  ⊢ Funss = { s0 |, ~(s0)∈ CnvRefRels }\n}","parent":[],"children":["dffunsALTV"]},{"name":"df-funsALTV","content":"Define the function relations class, i.e., the class of functions. Alternate definitions are ~ dffunsALTV , ... , ~ dffunsALTV5 . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-funsALTV() {\n  |- wceq(cfunsALTV, cin(cfunss, crels))\n}","pretty":"axiom df-funsALTV() {\n  ⊢ FunsALTV =(Funss ⋂ Rels)\n}","parent":[],"children":["dffunsALTV"]},{"name":"df-funALTV","content":"Define the function relation predicate, i.e., the function predicate. This definition of the function predicate (based on a more general, converse reflexive, relation) and the original definition of function in set.mm ~ df-fun , are always the same, that is ` ( FunALTV F <-> Fun F ) ` , see ~ funALTVfun . The element of the class of functions and the function predicate are the same, that is ` ( F e. FunsALTV <-> FunALTV F ) ` when ` F ` is a set, see ~ elfunsALTVfunALTV . Alternate definitions are ~ dffunALTV2 , ... , ~ dffunALTV5 . (Contributed by Peter Mazsa, 17-Jul-2021.)","origin":"axiom df-funALTV(class c0) {\n  |- wb(wfunALTV(c0), wa(wcnvrefrel(ccoss(c0)), wrel(c0)))\n}","pretty":"axiom df-funALTV(class c0) {\n  ⊢ (FunALTV(c0)↔(CnvRefRel(, ~(c0))∧ Rel(c0)))\n}","parent":[],"children":["dffunALTV2","elfunsALTVfunALTV","funALTVfun","dfdisjALTV"]},{"name":"dffunsALTV","content":"Alternate definition of the class of functions. (Contributed by Peter Mazsa, 18-Jul-2021.)","origin":"thm dffunsALTV(setvar s0) {\n  |- wceq(cfunsALTV, crab(s0, crels, wcel(ccoss(cv(s0)), ccnvrefrels)))\n} = {\n  abeqin(s0, cfunsALTV, crels, cfunss, wcel(ccoss(cv(s0)), ccnvrefrels))\n  df-funsALTV()\n  df-funss(s0)\n  diff.crels.s(s0)\n}","pretty":"thm dffunsALTV(setvar s0) {\n  ⊢ FunsALTV = { s0 ∈ Rels |, ~(s0)∈ CnvRefRels }\n} = {\n  abeqin(s0, cfunsALTV, crels, cfunss, , ~(s0)∈ CnvRefRels)\n  df-funsALTV()\n  df-funss(s0)\n  diff.crels.s(s0)\n}","parent":["abeqin","df-funsALTV","df-funss","diff.crels.s"],"children":["dffunsALTV2","dffunsALTV3","dffunsALTV4","elfunsALTV"]},{"name":"dffunsALTV2","content":"Alternate definition of the class of functions. (Contributed by Peter Mazsa, 30-Aug-2021.)","origin":"thm dffunsALTV2(setvar s0) {\n  |- wceq(cfunsALTV, crab(s0, crels, wss(ccoss(cv(s0)), cid)))\n} = {\n  rabimbieq(s0, cfunsALTV, crels, wss(ccoss(cv(s0)), cid), wcel(ccoss(cv(s0)), ccnvrefrels))\n  dffunsALTV(s0)\n  syl6rbbr(wcel(cv(s0), crels), wcel(ccoss(cv(s0)), ccnvrefrels), wss(ccoss(cv(s0)), cid), wa(wss(ccoss(cv(s0)), cid), wcel(ccoss(cv(s0)), crels)))\n  biantrud(wcel(cv(s0), crels), wss(ccoss(cv(s0)), cid), wcel(ccoss(cv(s0)), crels))\n  cosselrels(cv(s0), crels)\n  cosselcnvrefrels2(cv(s0))\n}","pretty":"thm dffunsALTV2(setvar s0) {\n  ⊢ FunsALTV = { s0 ∈ Rels |, ~(s0)⊆ = }\n} = {\n  rabimbieq(s0, cfunsALTV, crels, , ~(s0)⊆ =, , ~(s0)∈ CnvRefRels)\n  dffunsALTV(s0)\n  syl6rbbr(s0 ∈ Rels, , ~(s0)∈ CnvRefRels, , ~(s0)⊆ =, (, ~(s0)⊆ = ∧, ~(s0)∈ Rels))\n  biantrud(s0 ∈ Rels, , ~(s0)⊆ =, , ~(s0)∈ Rels)\n  cosselrels(s0, crels)\n  cosselcnvrefrels2(s0)\n}","parent":["rabimbieq","dffunsALTV","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels2"],"children":[]},{"name":"dffunsALTV3","content":"Alternate definition of the class of functions. For the ` X ` axis and the ` Y ` axis you can convert the right side to ` { f e. Rels | A. ` x1 ` A. ` y1 ` A. ` y2 ` ( ( ` x1 ` f ` y1 ` /\\ ` x1 ` f ` y2 ` ) -> ` y1 ` = ` y2 ` ) } ` . (Contributed by Peter Mazsa, 30-Aug-2021.)","origin":"thm dffunsALTV3(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wceq(cfunsALTV, crab(s0, crels, wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s2)), wbr(cv(s1), cv(s0), cv(s3))), wceq(cv(s2), cv(s3))))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s0, s3)\n  -| diffss(s1, s2)\n  -| diffss(s1, s3)\n  -| diffss(s2, s3)\n} = {\n  rabimbieq(s0, cfunsALTV, crels, wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s2)), wbr(cv(s1), cv(s0), cv(s3))), wceq(cv(s2), cv(s3)))))), wcel(ccoss(cv(s0)), ccnvrefrels))\n  dffunsALTV(s0)\n  syl6rbbr(wcel(cv(s0), crels), wcel(ccoss(cv(s0)), ccnvrefrels), wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s2)), wbr(cv(s1), cv(s0), cv(s3))), wceq(cv(s2), cv(s3)))))), wa(wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s2)), wbr(cv(s1), cv(s0), cv(s3))), wceq(cv(s2), cv(s3)))))), wcel(ccoss(cv(s0)), crels)))\n  biantrud(wcel(cv(s0), crels), wal(s1, wal(s2, wal(s3, wi(wa(wbr(cv(s1), cv(s0), cv(s2)), wbr(cv(s1), cv(s0), cv(s3))), wceq(cv(s2), cv(s3)))))), wcel(ccoss(cv(s0)), crels))\n  cosselrels(cv(s0), crels)\n  cosselcnvrefrels3(s1, s2, s3, cv(s0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","pretty":"thm dffunsALTV3(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ FunsALTV = { s0 ∈ Rels | ∀(s1, ∀(s2, ∀(s3,((s1[s0]s2 ∧ s1[s0]s3)→ s2 = s3))))}\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s0, s3)\n  ⊣ d(s1, s2)\n  ⊣ d(s1, s3)\n  ⊣ d(s2, s3)\n} = {\n  rabimbieq(s0, cfunsALTV, crels, ∀(s1, ∀(s2, ∀(s3,((s1[s0]s2 ∧ s1[s0]s3)→ s2 = s3)))), , ~(s0)∈ CnvRefRels)\n  dffunsALTV(s0)\n  syl6rbbr(s0 ∈ Rels, , ~(s0)∈ CnvRefRels, ∀(s1, ∀(s2, ∀(s3,((s1[s0]s2 ∧ s1[s0]s3)→ s2 = s3)))), (∀(s1, ∀(s2, ∀(s3,((s1[s0]s2 ∧ s1[s0]s3)→ s2 = s3))))∧, ~(s0)∈ Rels))\n  biantrud(s0 ∈ Rels, ∀(s1, ∀(s2, ∀(s3,((s1[s0]s2 ∧ s1[s0]s3)→ s2 = s3)))), , ~(s0)∈ Rels)\n  cosselrels(s0, crels)\n  cosselcnvrefrels3(s1, s2, s3, s0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s3, s0)\n  diffss.ex(s3, s0)\n}","parent":["rabimbieq","dffunsALTV","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels3","diff.cv.s","diffss.ex"],"children":[]},{"name":"dffunsALTV4","content":"Alternate definition of the class of functions. For the ` X ` axis and the ` Y ` axis you can convert the right side to ` { f e. Rels | A. x1 E* y1 x1 f y1 } ` . (Contributed by Peter Mazsa, 31-Aug-2021.)","origin":"thm dffunsALTV4(setvar s0, setvar s1, setvar s2) {\n  |- wceq(cfunsALTV, crab(s0, crels, wal(s1, wmo(s2, wbr(cv(s1), cv(s0), cv(s2))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  rabimbieq(s0, cfunsALTV, crels, wal(s1, wmo(s2, wbr(cv(s1), cv(s0), cv(s2)))), wcel(ccoss(cv(s0)), ccnvrefrels))\n  dffunsALTV(s0)\n  syl6rbbr(wcel(cv(s0), crels), wcel(ccoss(cv(s0)), ccnvrefrels), wal(s1, wmo(s2, wbr(cv(s1), cv(s0), cv(s2)))), wa(wal(s1, wmo(s2, wbr(cv(s1), cv(s0), cv(s2)))), wcel(ccoss(cv(s0)), crels)))\n  biantrud(wcel(cv(s0), crels), wal(s1, wmo(s2, wbr(cv(s1), cv(s0), cv(s2)))), wcel(ccoss(cv(s0)), crels))\n  cosselrels(cv(s0), crels)\n  cosselcnvrefrels4(s1, s2, cv(s0))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n}","pretty":"thm dffunsALTV4(setvar s0, setvar s1, setvar s2) {\n  ⊢ FunsALTV = { s0 ∈ Rels | ∀(s1, ∃*(s2, s1[s0]s2))}\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  rabimbieq(s0, cfunsALTV, crels, ∀(s1, ∃*(s2, s1[s0]s2)), , ~(s0)∈ CnvRefRels)\n  dffunsALTV(s0)\n  syl6rbbr(s0 ∈ Rels, , ~(s0)∈ CnvRefRels, ∀(s1, ∃*(s2, s1[s0]s2)), (∀(s1, ∃*(s2, s1[s0]s2))∧, ~(s0)∈ Rels))\n  biantrud(s0 ∈ Rels, ∀(s1, ∃*(s2, s1[s0]s2)), , ~(s0)∈ Rels)\n  cosselrels(s0, crels)\n  cosselcnvrefrels4(s1, s2, s0)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n}","parent":["rabimbieq","dffunsALTV","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels4","diff.cv.s","diffss.ex"],"children":["dffunsALTV5"]},{"name":"dffunsALTV5","content":"Alternate definition of the class of functions. (Contributed by Peter Mazsa, 31-Aug-2021.)","origin":"thm dffunsALTV5(setvar s0, setvar s1, setvar s2) {\n  |- wceq(cfunsALTV, crab(s0, crels, wral(s1, crn(cv(s0)), wral(s2, crn(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), ccnv(cv(s0))), cec(cv(s2), ccnv(cv(s0)))), emptycls))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  eqtr4i(cfunsALTV, crab(s0, crels, wral(s1, crn(cv(s0)), wral(s2, crn(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), ccnv(cv(s0))), cec(cv(s2), ccnv(cv(s0)))), emptycls))))), crab(s0, crels, wal(hs0, wmo(s1, wbr(cv(hs0), cv(s0), cv(s1))))))\n  dffunsALTV4(s0, hs0, s1)\n  rabbii(s0, crels, wral(s1, crn(cv(s0)), wral(s2, crn(cv(s0)), wo(wceq(cv(s1), cv(s2)), wceq(cin(cec(cv(s1), ccnv(cv(s0))), cec(cv(s2), ccnv(cv(s0)))), emptycls)))), wal(hs0, wmo(s1, wbr(cv(hs0), cv(s0), cv(s1)))))\n  ineccnvmo2(s1, s2, hs0, cv(s0))\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.hs0.c(cv(s0))\n}","pretty":"thm dffunsALTV5(setvar s0, setvar s1, setvar s2) {\n  ⊢ FunsALTV = { s0 ∈ Rels | ∀(s1 ∈ ran(s0), ∀(s2 ∈ ran(s0),(s1 = s2 ∨([s1]`' s0 ⋂[s2]`' s0)= ∅)))}\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  eqtr4i(cfunsALTV, { s0 ∈ Rels | ∀(s1 ∈ ran(s0), ∀(s2 ∈ ran(s0),(s1 = s2 ∨([s1]`' s0 ⋂[s2]`' s0)= ∅)))}, { s0 ∈ Rels | ∀(hs0, ∃*(s1, hs0[s0]s1))})\n  dffunsALTV4(s0, hs0, s1)\n  rabbii(s0, crels, ∀(s1 ∈ ran(s0), ∀(s2 ∈ ran(s0),(s1 = s2 ∨([s1]`' s0 ⋂[s2]`' s0)= ∅))), ∀(hs0, ∃*(s1, hs0[s0]s1)))\n  ineccnvmo2(s1, s2, hs0, s0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diffss.ex(s1, hs0)\n  diff.hs0.s(s1)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.hs0.c(s0)\n}","parent":["eqtr4i","dffunsALTV4","rabbii","ineccnvmo2","diffss.ex","diff.hs0.s","diff.cv.s","diff.hs0.c"],"children":[]},{"name":"dffunALTV2","content":"Alternate definition of the function relation predicate, cf. ~ dfdisjALTV2 . (Contributed by Peter Mazsa, 8-Feb-2018.)","origin":"thm dffunALTV2(class c0) {\n  |- wb(wfunALTV(c0), wa(wss(ccoss(c0), cid), wrel(c0)))\n} = {\n  bitri(wfunALTV(c0), wa(wss(ccoss(c0), cid), wrel(c0)), wa(wcnvrefrel(ccoss(c0)), wrel(c0)))\n  df-funALTV(c0)\n  anbi1i(wcnvrefrel(ccoss(c0)), wrel(c0), wss(ccoss(c0), cid))\n  cnvrefrelcoss2(c0)\n}","pretty":"thm dffunALTV2(class c0) {\n  ⊢ (FunALTV(c0)↔(, ~(c0)⊆ = ∧ Rel(c0)))\n} = {\n  bitri(FunALTV(c0), (, ~(c0)⊆ = ∧ Rel(c0)), (CnvRefRel(, ~(c0))∧ Rel(c0)))\n  df-funALTV(c0)\n  anbi1i(CnvRefRel(, ~(c0)), Rel(c0), , ~(c0)⊆ =)\n  cnvrefrelcoss2(c0)\n}","parent":["bitri","df-funALTV","anbi1i","cnvrefrelcoss2"],"children":["dffunALTV3","dffunALTV4","dffunALTV5","funALTVss"]},{"name":"dffunALTV3","content":"Alternate definition of the function relation predicate, cf. ~ dfdisjALTV3 . Reproduction of ~ dffun2 . For the ` X ` axis and the ` Y ` axis you can convert the right side to ` ( A. ` x1 ` A. ` y1 ` A. ` y2 ` ( ( ` x1 ` f ` y1 ` /\\ ` x1 ` f ` y2 ` ) -> ` y1 ` = ` y2 ` ) /\\ Rel F ) ` . (Contributed by NM, 29-Dec-1996.)","origin":"thm dffunALTV3(setvar s0, setvar s1, setvar s2, class c0) {\n  |- wb(wfunALTV(c0), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wrel(c0)))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n  -| diffsc(s2, c0)\n} = {\n  bitri(wfunALTV(c0), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wrel(c0)), wa(wss(ccoss(c0), cid), wrel(c0)))\n  dffunALTV2(c0)\n  anbi1i(wss(ccoss(c0), cid), wrel(c0), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))))\n  cossssid3(s0, s1, s2, c0)\n}","pretty":"thm dffunALTV3(setvar s0, setvar s1, setvar s2, class c0) {\n  ⊢ (FunALTV(c0)↔(∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2))))∧ Rel(c0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n  ⊣ d(s2, c0)\n} = {\n  bitri(FunALTV(c0), (∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2))))∧ Rel(c0)), (, ~(c0)⊆ = ∧ Rel(c0)))\n  dffunALTV2(c0)\n  anbi1i(, ~(c0)⊆ =, Rel(c0), ∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2)))))\n  cossssid3(s0, s1, s2, c0)\n}","parent":["bitri","dffunALTV2","anbi1i","cossssid3"],"children":[]},{"name":"dffunALTV4","content":"Alternate definition of the function relation predicate, cf. ~ dfdisjALTV4 . This is ~ dffun6 . For the ` X ` axis and the ` Y ` axis you can convert the right side to ` ( A. x1 E* y1 x1 F y1 /\\ Rel F ) ` . (Contributed by NM, 9-Mar-1995.)","origin":"thm dffunALTV4(setvar s0, setvar s1, class c0) {\n  |- wb(wfunALTV(c0), wa(wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wrel(c0)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wfunALTV(c0), wa(wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wrel(c0)), wa(wss(ccoss(c0), cid), wrel(c0)))\n  dffunALTV2(c0)\n  anbi1i(wss(ccoss(c0), cid), wrel(c0), wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))))\n  cossssid4(s0, s1, c0)\n}","pretty":"thm dffunALTV4(setvar s0, setvar s1, class c0) {\n  ⊢ (FunALTV(c0)↔(∀(s0, ∃*(s1, s0[c0]s1))∧ Rel(c0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(FunALTV(c0), (∀(s0, ∃*(s1, s0[c0]s1))∧ Rel(c0)), (, ~(c0)⊆ = ∧ Rel(c0)))\n  dffunALTV2(c0)\n  anbi1i(, ~(c0)⊆ =, Rel(c0), ∀(s0, ∃*(s1, s0[c0]s1)))\n  cossssid4(s0, s1, c0)\n}","parent":["bitri","dffunALTV2","anbi1i","cossssid4"],"children":[]},{"name":"dffunALTV5","content":"Alternate definition of the function relation predicate, cf. ~ dfdisjALTV5 . (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm dffunALTV5(setvar s0, setvar s1, class c0) {\n  |- wb(wfunALTV(c0), wa(wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wrel(c0)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wfunALTV(c0), wa(wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wrel(c0)), wa(wss(ccoss(c0), cid), wrel(c0)))\n  dffunALTV2(c0)\n  anbi1i(wss(ccoss(c0), cid), wrel(c0), wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))))\n  cossssid5(s0, s1, c0)\n}","pretty":"thm dffunALTV5(setvar s0, setvar s1, class c0) {\n  ⊢ (FunALTV(c0)↔(∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅)))∧ Rel(c0)))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(FunALTV(c0), (∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅)))∧ Rel(c0)), (, ~(c0)⊆ = ∧ Rel(c0)))\n  dffunALTV2(c0)\n  anbi1i(, ~(c0)⊆ =, Rel(c0), ∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅))))\n  cossssid5(s0, s1, c0)\n}","parent":["bitri","dffunALTV2","anbi1i","cossssid5"],"children":[]},{"name":"elfunsALTV","content":"Elementhood in the class of functions. (Contributed by Peter Mazsa, 24-Jul-2021.)","origin":"thm elfunsALTV(class c0) {\n  |- wb(wcel(c0, cfunsALTV), wa(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels)))\n} = {\n  rabeqel(hs0, c0, cfunsALTV, crels, wcel(ccoss(c0), ccnvrefrels), wcel(ccoss(cv(hs0)), ccnvrefrels))\n  dffunsALTV(hs0)\n  eleq1d(ccoss(cv(hs0)), ccnvrefrels, ccoss(c0), wceq(cv(hs0), c0))\n  cosseq(cv(hs0), c0)\n  diff.hs0.c(c0)\n  diff.hs0.c(crels)\n  diff.hs0.w(wcel(ccoss(c0), ccnvrefrels))\n}","pretty":"thm elfunsALTV(class c0) {\n  ⊢ (c0 ∈ FunsALTV ↔(, ~(c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n} = {\n  rabeqel(hs0, c0, cfunsALTV, crels, , ~(c0)∈ CnvRefRels, , ~(hs0)∈ CnvRefRels)\n  dffunsALTV(hs0)\n  eleq1d(, ~(hs0), ccnvrefrels, , ~(c0), hs0 = c0)\n  cosseq(hs0, c0)\n  diff.hs0.c(c0)\n  diff.hs0.c(crels)\n  diff.hs0.w(, ~(c0)∈ CnvRefRels)\n}","parent":["rabeqel","dffunsALTV","eleq1d","cosseq","diff.hs0.c","diff.hs0.w"],"children":["elfunsALTV2","elfunsALTV3","elfunsALTV4","elfunsALTV5","elfunsALTVfunALTV"]},{"name":"elfunsALTV2","content":"Elementhood in the class of functions. (Contributed by Peter Mazsa, 31-Aug-2021.)","origin":"thm elfunsALTV2(class c0) {\n  |- wb(wcel(c0, cfunsALTV), wa(wss(ccoss(c0), cid), wcel(c0, crels)))\n} = {\n  bitri(wcel(c0, cfunsALTV), wa(wss(ccoss(c0), cid), wcel(c0, crels)), wa(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels)))\n  elfunsALTV(c0)\n  pm5.32ri(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels), wss(ccoss(c0), cid))\n  syl6rbbr(wcel(c0, crels), wcel(ccoss(c0), ccnvrefrels), wss(ccoss(c0), cid), wa(wss(ccoss(c0), cid), wcel(ccoss(c0), crels)))\n  biantrud(wcel(c0, crels), wss(ccoss(c0), cid), wcel(ccoss(c0), crels))\n  cosselrels(c0, crels)\n  cosselcnvrefrels2(c0)\n}","pretty":"thm elfunsALTV2(class c0) {\n  ⊢ (c0 ∈ FunsALTV ↔(, ~(c0)⊆ = ∧ c0 ∈ Rels))\n} = {\n  bitri(c0 ∈ FunsALTV, (, ~(c0)⊆ = ∧ c0 ∈ Rels), (, ~(c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n  elfunsALTV(c0)\n  pm5.32ri(, ~(c0)∈ CnvRefRels, c0 ∈ Rels, , ~(c0)⊆ =)\n  syl6rbbr(c0 ∈ Rels, , ~(c0)∈ CnvRefRels, , ~(c0)⊆ =, (, ~(c0)⊆ = ∧, ~(c0)∈ Rels))\n  biantrud(c0 ∈ Rels, , ~(c0)⊆ =, , ~(c0)∈ Rels)\n  cosselrels(c0, crels)\n  cosselcnvrefrels2(c0)\n}","parent":["bitri","elfunsALTV","pm5.32ri","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels2"],"children":[]},{"name":"elfunsALTV3","content":"Elementhood in the class of functions. (Contributed by Peter Mazsa, 31-Aug-2021.)","origin":"thm elfunsALTV3(setvar s0, setvar s1, setvar s2, class c0) {\n  |- wb(wcel(c0, cfunsALTV), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wcel(c0, crels)))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n  -| diffsc(s2, c0)\n} = {\n  bitri(wcel(c0, cfunsALTV), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wcel(c0, crels)), wa(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels)))\n  elfunsALTV(c0)\n  pm5.32ri(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))))\n  syl6rbbr(wcel(c0, crels), wcel(ccoss(c0), ccnvrefrels), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wa(wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wcel(ccoss(c0), crels)))\n  biantrud(wcel(c0, crels), wal(s0, wal(s1, wal(s2, wi(wa(wbr(cv(s0), c0, cv(s1)), wbr(cv(s0), c0, cv(s2))), wceq(cv(s1), cv(s2)))))), wcel(ccoss(c0), crels))\n  cosselrels(c0, crels)\n  cosselcnvrefrels3(s0, s1, s2, c0)\n}","pretty":"thm elfunsALTV3(setvar s0, setvar s1, setvar s2, class c0) {\n  ⊢ (c0 ∈ FunsALTV ↔(∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2))))∧ c0 ∈ Rels))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n  ⊣ d(s2, c0)\n} = {\n  bitri(c0 ∈ FunsALTV, (∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2))))∧ c0 ∈ Rels), (, ~(c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n  elfunsALTV(c0)\n  pm5.32ri(, ~(c0)∈ CnvRefRels, c0 ∈ Rels, ∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2)))))\n  syl6rbbr(c0 ∈ Rels, , ~(c0)∈ CnvRefRels, ∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2)))), (∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2))))∧, ~(c0)∈ Rels))\n  biantrud(c0 ∈ Rels, ∀(s0, ∀(s1, ∀(s2,((s0[c0]s1 ∧ s0[c0]s2)→ s1 = s2)))), , ~(c0)∈ Rels)\n  cosselrels(c0, crels)\n  cosselcnvrefrels3(s0, s1, s2, c0)\n}","parent":["bitri","elfunsALTV","pm5.32ri","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels3"],"children":[]},{"name":"elfunsALTV4","content":"Elementhood in the class of functions. (Contributed by Peter Mazsa, 31-Aug-2021.)","origin":"thm elfunsALTV4(setvar s0, setvar s1, class c0) {\n  |- wb(wcel(c0, cfunsALTV), wa(wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wcel(c0, crels)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wcel(c0, cfunsALTV), wa(wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wcel(c0, crels)), wa(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels)))\n  elfunsALTV(c0)\n  pm5.32ri(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels), wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))))\n  syl6rbbr(wcel(c0, crels), wcel(ccoss(c0), ccnvrefrels), wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wa(wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wcel(ccoss(c0), crels)))\n  biantrud(wcel(c0, crels), wal(s0, wmo(s1, wbr(cv(s0), c0, cv(s1)))), wcel(ccoss(c0), crels))\n  cosselrels(c0, crels)\n  cosselcnvrefrels4(s0, s1, c0)\n}","pretty":"thm elfunsALTV4(setvar s0, setvar s1, class c0) {\n  ⊢ (c0 ∈ FunsALTV ↔(∀(s0, ∃*(s1, s0[c0]s1))∧ c0 ∈ Rels))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(c0 ∈ FunsALTV, (∀(s0, ∃*(s1, s0[c0]s1))∧ c0 ∈ Rels), (, ~(c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n  elfunsALTV(c0)\n  pm5.32ri(, ~(c0)∈ CnvRefRels, c0 ∈ Rels, ∀(s0, ∃*(s1, s0[c0]s1)))\n  syl6rbbr(c0 ∈ Rels, , ~(c0)∈ CnvRefRels, ∀(s0, ∃*(s1, s0[c0]s1)), (∀(s0, ∃*(s1, s0[c0]s1))∧, ~(c0)∈ Rels))\n  biantrud(c0 ∈ Rels, ∀(s0, ∃*(s1, s0[c0]s1)), , ~(c0)∈ Rels)\n  cosselrels(c0, crels)\n  cosselcnvrefrels4(s0, s1, c0)\n}","parent":["bitri","elfunsALTV","pm5.32ri","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels4"],"children":[]},{"name":"elfunsALTV5","content":"Elementhood in the class of functions. (Contributed by Peter Mazsa, 5-Sep-2021.)","origin":"thm elfunsALTV5(setvar s0, setvar s1, class c0) {\n  |- wb(wcel(c0, cfunsALTV), wa(wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wcel(c0, crels)))\n  -| diffss(s0, s1)\n  -| diffsc(s0, c0)\n  -| diffsc(s1, c0)\n} = {\n  bitri(wcel(c0, cfunsALTV), wa(wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wcel(c0, crels)), wa(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels)))\n  elfunsALTV(c0)\n  pm5.32ri(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels), wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))))\n  syl6rbbr(wcel(c0, crels), wcel(ccoss(c0), ccnvrefrels), wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wa(wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wcel(ccoss(c0), crels)))\n  biantrud(wcel(c0, crels), wral(s0, crn(c0), wral(s1, crn(c0), wo(wceq(cv(s0), cv(s1)), wceq(cin(cec(cv(s0), ccnv(c0)), cec(cv(s1), ccnv(c0))), emptycls)))), wcel(ccoss(c0), crels))\n  cosselrels(c0, crels)\n  cosselcnvrefrels5(s0, s1, c0)\n}","pretty":"thm elfunsALTV5(setvar s0, setvar s1, class c0) {\n  ⊢ (c0 ∈ FunsALTV ↔(∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅)))∧ c0 ∈ Rels))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, c0)\n  ⊣ d(s1, c0)\n} = {\n  bitri(c0 ∈ FunsALTV, (∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅)))∧ c0 ∈ Rels), (, ~(c0)∈ CnvRefRels ∧ c0 ∈ Rels))\n  elfunsALTV(c0)\n  pm5.32ri(, ~(c0)∈ CnvRefRels, c0 ∈ Rels, ∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅))))\n  syl6rbbr(c0 ∈ Rels, , ~(c0)∈ CnvRefRels, ∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅))), (∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅)))∧, ~(c0)∈ Rels))\n  biantrud(c0 ∈ Rels, ∀(s0 ∈ ran(c0), ∀(s1 ∈ ran(c0),(s0 = s1 ∨([s0]`' c0 ⋂[s1]`' c0)= ∅))), , ~(c0)∈ Rels)\n  cosselrels(c0, crels)\n  cosselcnvrefrels5(s0, s1, c0)\n}","parent":["bitri","elfunsALTV","pm5.32ri","syl6rbbr","biantrud","cosselrels","cosselcnvrefrels5"],"children":[]},{"name":"elfunsALTVfunALTV","content":"The element of the class of functions and the function predicate are the same when ` F ` is a set. (Contributed by Peter Mazsa, 26-Jul-2021.)","origin":"thm elfunsALTVfunALTV(class c0, class c1) {\n  |- wi(wcel(c0, c1), wb(wcel(c0, cfunsALTV), wfunALTV(c0)))\n} = {\n  3bitr4g(wcel(c0, c1), wcel(c0, cfunsALTV), wfunALTV(c0), wa(wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels)), wa(wcnvrefrel(ccoss(c0)), wrel(c0)))\n  anbi12d(wcel(c0, c1), wcel(ccoss(c0), ccnvrefrels), wcel(c0, crels), wcnvrefrel(ccoss(c0)), wrel(c0))\n  syl(wcel(c0, c1), wb(wcel(ccoss(c0), ccnvrefrels), wcnvrefrel(ccoss(c0))), wcel(ccoss(c0), universe))\n  cossex(c0, c1)\n  elcnvrefrelsrel(ccoss(c0), universe)\n  elrelsrel(c0, c1)\n  elfunsALTV(c0)\n  df-funALTV(c0)\n}","pretty":"thm elfunsALTVfunALTV(class c0, class c1) {\n  ⊢ (c0 ∈ c1 →(c0 ∈ FunsALTV ↔ FunALTV(c0)))\n} = {\n  3bitr4g(c0 ∈ c1, c0 ∈ FunsALTV, FunALTV(c0), (, ~(c0)∈ CnvRefRels ∧ c0 ∈ Rels), (CnvRefRel(, ~(c0))∧ Rel(c0)))\n  anbi12d(c0 ∈ c1, , ~(c0)∈ CnvRefRels, c0 ∈ Rels, CnvRefRel(, ~(c0)), Rel(c0))\n  syl(c0 ∈ c1, (, ~(c0)∈ CnvRefRels ↔ CnvRefRel(, ~(c0))), , ~(c0)∈ 𝕌)\n  cossex(c0, c1)\n  elcnvrefrelsrel(, ~(c0), universe)\n  elrelsrel(c0, c1)\n  elfunsALTV(c0)\n  df-funALTV(c0)\n}","parent":["3bitr4g","anbi12d","syl","cossex","elcnvrefrelsrel","elrelsrel","elfunsALTV","df-funALTV"],"children":[]},{"name":"funALTVfun","content":"Our definition of the function predicate ~ df-funALTV (based on a more general, converse reflexive, relation) and the original definition of function in set.mm ~ df-fun , are always the same and interchangeable. (Contributed by Peter Mazsa, 27-Jul-2021.)","origin":"thm funALTVfun(class c0) {\n  |- wb(wfunALTV(c0), wfun(c0))\n} = {\n  3bitr4i(wfunALTV(c0), wfun(c0), wa(wcnvrefrel(ccoss(c0)), wrel(c0)), wa(wrel(c0), wss(ccom(c0, ccnv(c0)), cid)))\n  anbi2ci(wcnvrefrel(ccoss(c0)), wrel(c0), wss(ccom(c0, ccnv(c0)), cid))\n  bitri(wcnvrefrel(ccoss(c0)), wss(ccom(c0, ccnv(c0)), cid), wss(ccoss(c0), cid))\n  cnvrefrelcoss2(c0)\n  sseq1i(ccoss(c0), cid, ccom(c0, ccnv(c0)))\n  dfcoss3(c0)\n  df-funALTV(c0)\n  df-fun(c0)\n}","pretty":"thm funALTVfun(class c0) {\n  ⊢ (FunALTV(c0)↔ Fun(c0))\n} = {\n  3bitr4i(FunALTV(c0), Fun(c0), (CnvRefRel(, ~(c0))∧ Rel(c0)), (Rel(c0)∧(c0 ∘ `' c0)⊆ =))\n  anbi2ci(CnvRefRel(, ~(c0)), Rel(c0), (c0 ∘ `' c0)⊆ =)\n  bitri(CnvRefRel(, ~(c0)), (c0 ∘ `' c0)⊆ =, , ~(c0)⊆ =)\n  cnvrefrelcoss2(c0)\n  sseq1i(, ~(c0), cid, (c0 ∘ `' c0))\n  dfcoss3(c0)\n  df-funALTV(c0)\n  df-fun(c0)\n}","parent":["3bitr4i","anbi2ci","bitri","cnvrefrelcoss2","sseq1i","dfcoss3","df-funALTV","df-fun"],"children":[]},{"name":"funALTVss","content":"Subclass theorem for function. (Contributed by NM, 16-Aug-1994.) (Proof shortened by Mario Carneiro, 24-Jun-2014.) (Revised by Peter Mazsa, 22-Sep-2021.)","origin":"thm funALTVss(class c0, class c1) {\n  |- wi(wss(c0, c1), wi(wfunALTV(c1), wfunALTV(c0)))\n} = {\n  3imtr4g(wss(c0, c1), wfunALTV(c1), wfunALTV(c0), wa(wss(ccoss(c1), cid), wrel(c1)), wa(wss(ccoss(c0), cid), wrel(c0)))\n  anim12d(wss(c0, c1), wss(ccoss(c1), cid), wrel(c1), wss(ccoss(c0), cid), wrel(c0))\n  syl(wss(c0, c1), wi(wss(ccoss(c1), cid), wss(ccoss(c0), cid)), wss(ccoss(c0), ccoss(c1)))\n  cossss(c0, c1)\n  sstr2(ccoss(c0), ccoss(c1), cid)\n  relss(c0, c1)\n  dffunALTV2(c1)\n  dffunALTV2(c0)\n}","pretty":"thm funALTVss(class c0, class c1) {\n  ⊢ (c0 ⊆ c1 →(FunALTV(c1)→ FunALTV(c0)))\n} = {\n  3imtr4g(c0 ⊆ c1, FunALTV(c1), FunALTV(c0), (, ~(c1)⊆ = ∧ Rel(c1)), (, ~(c0)⊆ = ∧ Rel(c0)))\n  anim12d(c0 ⊆ c1, , ~(c1)⊆ =, Rel(c1), , ~(c0)⊆ =, Rel(c0))\n  syl(c0 ⊆ c1, (, ~(c1)⊆ = →, ~(c0)⊆ =), , ~(c0)⊆, ~(c1))\n  cossss(c0, c1)\n  sstr2(, ~(c0), , ~(c1), cid)\n  relss(c0, c1)\n  dffunALTV2(c1)\n  dffunALTV2(c0)\n}","parent":["3imtr4g","anim12d","syl","cossss","sstr2","relss","dffunALTV2"],"children":["funALTVeq","disjss"]},{"name":"funALTVeq","content":"Equality theorem for function predicate. (Contributed by NM, 16-Aug-1994.)","origin":"thm funALTVeq(class c0, class c1) {\n  |- wi(wceq(c0, c1), wb(wfunALTV(c0), wfunALTV(c1)))\n} = {\n  impbid(wceq(c0, c1), wfunALTV(c0), wfunALTV(c1))\n  syl(wceq(c0, c1), wi(wfunALTV(c0), wfunALTV(c1)), wss(c1, c0))\n  eqimss2(c0, c1)\n  funALTVss(c1, c0)\n  syl(wceq(c0, c1), wi(wfunALTV(c1), wfunALTV(c0)), wss(c0, c1))\n  eqimss(c0, c1)\n  funALTVss(c0, c1)\n}","pretty":"thm funALTVeq(class c0, class c1) {\n  ⊢ (c0 = c1 →(FunALTV(c0)↔ FunALTV(c1)))\n} = {\n  impbid(c0 = c1, FunALTV(c0), FunALTV(c1))\n  syl(c0 = c1, (FunALTV(c0)→ FunALTV(c1)), c1 ⊆ c0)\n  eqimss2(c0, c1)\n  funALTVss(c1, c0)\n  syl(c0 = c1, (FunALTV(c1)→ FunALTV(c0)), c0 ⊆ c1)\n  eqimss(c0, c1)\n  funALTVss(c0, c1)\n}","parent":["impbid","syl","eqimss2","funALTVss","eqimss"],"children":["funALTVeqi","funALTVeqd"]},{"name":"funALTVeqi","content":"Equality inference for the function predicate. (Contributed by Jonathan Ben-Naim, 3-Jun-2011.)","origin":"thm funALTVeqi(class c0, class c1) {\n  |- wb(wfunALTV(c0), wfunALTV(c1))\n  -| wceq(c0, c1)\n} = {\n  ax-mp(wb(wfunALTV(c0), wfunALTV(c1)), wceq(c0, c1))\n  funALTVeq(c0, c1)\n}","pretty":"thm funALTVeqi(class c0, class c1) {\n  ⊢ (FunALTV(c0)↔ FunALTV(c1))\n  ⊣ c0 = c1\n} = {\n  ax-mp((FunALTV(c0)↔ FunALTV(c1)), c0 = c1)\n  funALTVeq(c0, c1)\n}","parent":["ax-mp","funALTVeq"],"children":[]},{"name":"funALTVeqd","content":"Equality deduction for the function predicate. (Contributed by NM, 23-Feb-2013.)","origin":"thm funALTVeqd(class c0, class c1, wff w0) {\n  |- wi(w0, wb(wfunALTV(c0), wfunALTV(c1)))\n  -| wi(w0, wceq(c0, c1))\n} = {\n  syl(w0, wb(wfunALTV(c0), wfunALTV(c1)), wceq(c0, c1))\n  funALTVeq(c0, c1)\n}","pretty":"thm funALTVeqd(class c0, class c1, wff w0) {\n  ⊢ (w0 →(FunALTV(c0)↔ FunALTV(c1)))\n  ⊣ (w0 → c0 = c1)\n} = {\n  syl(w0, (FunALTV(c0)↔ FunALTV(c1)), c0 = c1)\n  funALTVeq(c0, c1)\n}","parent":["syl","funALTVeq"],"children":[]}]}