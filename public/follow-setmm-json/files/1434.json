{"index":1434,"title":"Alternative for Russell's definition of a description binder","content":"","blocks":[{"name":"caiota","content":"Extend class notation with an alternative for Russell's definition of a description binder (inverted iota).","origin":"prop class caiota(setvar s0, wff w0) { iota'(s0, w0) }","pretty":"","parent":[],"children":[]},{"name":"diff.caiota.s","content":"","origin":"axiom diff.caiota.s(setvar sBase, setvar s0, wff w0) {\n  |- diffsc(sBase, caiota(s0, w0))\n  -| diffss(sBase, s0)\n  -| diffsw(sBase, w0)\n}","pretty":"axiom diff.caiota.s(setvar sBase, setvar s0, wff w0) {\n  ⊢ d(sBase, iota'(s0, w0))\n  ⊣ d(sBase, s0)\n  ⊣ d(sBase, w0)\n}","parent":[],"children":[]},{"name":"diff.caiota.c","content":"","origin":"axiom diff.caiota.c(class cBase, setvar s0, wff w0) {\n  |- diffcc(cBase, caiota(s0, w0))\n  -| diffsc(s0, cBase)\n  -| diffcw(cBase, w0)\n}","pretty":"axiom diff.caiota.c(class cBase, setvar s0, wff w0) {\n  ⊢ d(cBase, iota'(s0, w0))\n  ⊣ d(s0, cBase)\n  ⊣ d(cBase, w0)\n}","parent":[],"children":[]},{"name":"diff.caiota.w","content":"","origin":"axiom diff.caiota.w(wff wBase, setvar s0, wff w0) {\n  |- diffcw(caiota(s0, w0), wBase)\n  -| diffsw(s0, wBase)\n  -| diffww(wBase, w0)\n}","pretty":"axiom diff.caiota.w(wff wBase, setvar s0, wff w0) {\n  ⊢ d(iota'(s0, w0), wBase)\n  ⊣ d(s0, wBase)\n  ⊣ d(wBase, w0)\n}","parent":[],"children":[]},{"name":"aiotajust","content":"Soundness justification theorem for ~ df-aiota . (Contributed by AV, 24-Aug-2022.)","origin":"thm aiotajust(setvar s0, setvar s1, setvar s2, wff w0) {\n  |- wceq(cint(cab(s0, wceq(cab(s1, w0), csn(cv(s0))))), cint(cab(s2, wceq(cab(s1, w0), csn(cv(s2))))))\n  -| diffss(s0, s1)\n  -| diffss(s1, s2)\n  -| diffsw(s0, w0)\n  -| diffsw(s2, w0)\n} = {\n  inteqi(cab(s0, wceq(cab(s1, w0), csn(cv(s0)))), cab(s2, wceq(cab(s1, w0), csn(cv(s2)))))\n  eqtri(cab(s0, wceq(cab(s1, w0), csn(cv(s0)))), cab(s2, wceq(cab(s1, w0), csn(cv(s2)))), cab(hs0, wceq(cab(s1, w0), csn(cv(hs0)))))\n  cbvabv(s0, hs0, wceq(cab(s1, w0), csn(cv(s0))), wceq(cab(s1, w0), csn(cv(hs0))))\n  eqeq2d(cab(s1, w0), csn(cv(s0)), csn(cv(hs0)), wceq(cv(s0), cv(hs0)))\n  sneq(cv(s0), cv(hs0))\n  cbvabv(hs0, s2, wceq(cab(s1, w0), csn(cv(hs0))), wceq(cab(s1, w0), csn(cv(s2))))\n  eqeq2d(cab(s1, w0), csn(cv(hs0)), csn(cv(s2)), wceq(cv(hs0), cv(s2)))\n  sneq(cv(hs0), cv(s2))\n  diff.wceq.s(s0, cab(s1, w0), csn(cv(hs0)))\n  diff.cab.s(s0, s1, w0)\n  diff.csn.s(s0, cv(hs0))\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(wceq(cab(s1, w0), csn(cv(s0))))\n  diff.hs0.w(wceq(cab(s1, w0), csn(cv(s2))))\n  diff.wceq.s(s2, cab(s1, w0), csn(cv(hs0)))\n  diff.cab.s(s2, s1, w0)\n  diffss.ex(s2, s1)\n  diff.csn.s(s2, cv(hs0))\n  diff.cv.s(s2, hs0)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n}","pretty":"thm aiotajust(setvar s0, setvar s1, setvar s2, wff w0) {\n  ⊢ ⋂ { s0 | { s1 | w0 } = { s0 } } = ⋂ { s2 | { s1 | w0 } = { s2 } }\n  ⊣ d(s0, s1)\n  ⊣ d(s1, s2)\n  ⊣ d(s0, w0)\n  ⊣ d(s2, w0)\n} = {\n  inteqi({ s0 | { s1 | w0 } = { s0 } }, { s2 | { s1 | w0 } = { s2 } })\n  eqtri({ s0 | { s1 | w0 } = { s0 } }, { s2 | { s1 | w0 } = { s2 } }, { hs0 | { s1 | w0 } = { hs0 } })\n  cbvabv(s0, hs0, { s1 | w0 } = { s0 }, { s1 | w0 } = { hs0 })\n  eqeq2d({ s1 | w0 }, { s0 }, { hs0 }, s0 = hs0)\n  sneq(s0, hs0)\n  cbvabv(hs0, s2, { s1 | w0 } = { hs0 }, { s1 | w0 } = { s2 })\n  eqeq2d({ s1 | w0 }, { hs0 }, { s2 }, hs0 = s2)\n  sneq(hs0, s2)\n  diff.wceq.s(s0, { s1 | w0 }, { hs0 })\n  diff.cab.s(s0, s1, w0)\n  diff.csn.s(s0, hs0)\n  diff.cv.s(s0, hs0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w({ s1 | w0 } = { s0 })\n  diff.hs0.w({ s1 | w0 } = { s2 })\n  diff.wceq.s(s2, { s1 | w0 }, { hs0 })\n  diff.cab.s(s2, s1, w0)\n  diffss.ex(s2, s1)\n  diff.csn.s(s2, hs0)\n  diff.cv.s(s2, hs0)\n  diffss.ex(s2, hs0)\n  diff.hs0.s(s2)\n}","parent":["inteqi","eqtri","cbvabv","eqeq2d","sneq","diff.wceq.s","diff.cab.s","diff.csn.s","diff.cv.s","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":[]},{"name":"df-aiota","content":"Alternate version of Russell's definition of a description binder, which can be read as \"the unique ` x ` such that ` ph ` \", where ` ph ` ordinarily contains ` x ` as a free variable. Our definition is meaningful only when there is exactly one ` x ` such that ` ph ` is true (see ~ aiotaval ); otherwise, it is not a set (see ~ aiotaexb ), or even more concrete, it is the universe ` _V ` (see ~ aiotavb ). Since this is an alternative for ~ df-iota , we call this symbol ` iota' ` _alternate iota_ in the following. The advantage of this definition is the clear distinguishability of the defined and undefined cases: the alternate iota over a wff is defined iff it is a set (see ~ aiotaexb ). With the original definition, there is no corresponding theorem ` ( E! x ph <-> ( iota x ph ) =/= (/) ) ` , because ` (/) ` can be a valid unique set satisfying a wff (see, for example, ~ iota0def ). Only the right to left implication would hold, see (negated) ~ iotanul . For defined cases, however, both definitions ~ df-iota and ~ df-aiota are equivalent, see ~ reuaiotaiota . (Proposed by BJ, 13-Aug-2022.) (Contributed by AV, 24-Aug-2022.)","origin":"axiom df-aiota(setvar s0, setvar s1, wff w0) {\n  |- wceq(caiota(s0, w0), cint(cab(s1, wceq(cab(s0, w0), csn(cv(s1))))))\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n}","pretty":"axiom df-aiota(setvar s0, setvar s1, wff w0) {\n  ⊢ iota'(s0, w0)= ⋂ { s1 | { s0 | w0 } = { s1 } }\n  ⊣ d(s0, s1)\n  ⊣ d(s1, w0)\n}","parent":[],"children":["dfaiota2","reuabaiotaiota","aiotaexb","aiotavb"]},{"name":"dfaiota2","content":"Alternate definition of the alternate version of Russell's definition of a description binder. Definition 8.18 in [Quine] p. 56. (Contributed by AV, 24-Aug-2022.)","origin":"thm dfaiota2(setvar s0, setvar s1, wff w0) {\n  |- wceq(caiota(s0, w0), cint(cab(s1, wal(s0, wb(w0, wceq(cv(s0), cv(s1)))))))\n  -| diffss(s0, s1)\n  -| diffsw(s1, w0)\n} = {\n  eqtri(caiota(s0, w0), cint(cab(s1, wal(s0, wb(w0, wceq(cv(s0), cv(s1)))))), cint(cab(s1, wceq(cab(s0, w0), csn(cv(s1))))))\n  df-aiota(s0, s1, w0)\n  inteqi(cab(s1, wceq(cab(s0, w0), csn(cv(s1)))), cab(s1, wal(s0, wb(w0, wceq(cv(s0), cv(s1))))))\n  abbii(s1, wceq(cab(s0, w0), csn(cv(s1))), wal(s0, wb(w0, wceq(cv(s0), cv(s1)))))\n  absn(s0, cv(s1), w0)\n  diff.cv.s(s0, s1)\n}","pretty":"thm dfaiota2(setvar s0, setvar s1, wff w0) {\n  ⊢ iota'(s0, w0)= ⋂ { s1 | ∀(s0,(w0 ↔ s0 = s1))}\n  ⊣ d(s0, s1)\n  ⊣ d(s1, w0)\n} = {\n  eqtri(iota'(s0, w0), ⋂ { s1 | ∀(s0,(w0 ↔ s0 = s1))}, ⋂ { s1 | { s0 | w0 } = { s1 } })\n  df-aiota(s0, s1, w0)\n  inteqi({ s1 | { s0 | w0 } = { s1 } }, { s1 | ∀(s0,(w0 ↔ s0 = s1))})\n  abbii(s1, { s0 | w0 } = { s1 }, ∀(s0,(w0 ↔ s0 = s1)))\n  absn(s0, s1, w0)\n  diff.cv.s(s0, s1)\n}","parent":["eqtri","df-aiota","inteqi","abbii","absn","diff.cv.s"],"children":[]},{"name":"reuabaiotaiota","content":"The iota and the alternate iota over a wff ` ph ` are equal iff there is a unique satisfying value of ` { x | ph } = { y } ` . (Contributed by AV, 25-Aug-2022.)","origin":"thm reuabaiotaiota(setvar s0, setvar s1, wff w0) {\n  |- wb(weu(s0, wceq(cab(s1, w0), csn(cv(s0)))), wceq(cio(s1, w0), caiota(s1, w0)))\n  -| diffss(s0, s1)\n  -| diffsw(s0, w0)\n} = {\n  bitr4i(weu(s0, wceq(cab(s1, w0), csn(cv(s0)))), wceq(cio(s1, w0), caiota(s1, w0)), wceq(cuni(cab(s0, wceq(cab(s1, w0), csn(cv(s0))))), cint(cab(s0, wceq(cab(s1, w0), csn(cv(s0)))))))\n  uniintab(s0, wceq(cab(s1, w0), csn(cv(s0))))\n  eqeq12i(cio(s1, w0), caiota(s1, w0), cuni(cab(s0, wceq(cab(s1, w0), csn(cv(s0))))), cint(cab(s0, wceq(cab(s1, w0), csn(cv(s0))))))\n  df-iota(s1, s0, w0)\n  df-aiota(s1, s0, w0)\n  diffss.ex(s1, s0)\n}","pretty":"thm reuabaiotaiota(setvar s0, setvar s1, wff w0) {\n  ⊢ (∃!(s0, { s1 | w0 } = { s0 })↔ iota(s1, w0)= iota'(s1, w0))\n  ⊣ d(s0, s1)\n  ⊣ d(s0, w0)\n} = {\n  bitr4i(∃!(s0, { s1 | w0 } = { s0 }), iota(s1, w0)= iota'(s1, w0), ⋃ { s0 | { s1 | w0 } = { s0 } } = ⋂ { s0 | { s1 | w0 } = { s0 } })\n  uniintab(s0, { s1 | w0 } = { s0 })\n  eqeq12i(iota(s1, w0), iota'(s1, w0), ⋃ { s0 | { s1 | w0 } = { s0 } }, ⋂ { s0 | { s1 | w0 } = { s0 } })\n  df-iota(s1, s0, w0)\n  df-aiota(s1, s0, w0)\n  diffss.ex(s1, s0)\n}","parent":["bitr4i","uniintab","eqeq12i","df-iota","df-aiota","diffss.ex"],"children":["reuaiotaiota","aiotaval"]},{"name":"reuaiotaiota","content":"The iota and the alternate iota over a wff ` ph ` are equal iff there is a unique value ` x ` satisfying ` ph ` . (Contributed by AV, 25-Aug-2022.)","origin":"thm reuaiotaiota(setvar s0, wff w0) {\n  |- wb(weu(s0, w0), wceq(cio(s0, w0), caiota(s0, w0)))\n} = {\n  bitri(weu(s0, w0), wceq(cio(s0, w0), caiota(s0, w0)), weu(hs0, wceq(cab(s0, w0), csn(cv(hs0)))))\n  euabsneu(s0, hs0, w0)\n  reuabaiotaiota(hs0, s0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.w(w0)\n  diff.hs0.s(s0)\n}","pretty":"thm reuaiotaiota(setvar s0, wff w0) {\n  ⊢ (∃!(s0, w0)↔ iota(s0, w0)= iota'(s0, w0))\n} = {\n  bitri(∃!(s0, w0), iota(s0, w0)= iota'(s0, w0), ∃!(hs0, { s0 | w0 } = { hs0 }))\n  euabsneu(s0, hs0, w0)\n  reuabaiotaiota(hs0, s0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.w(w0)\n  diff.hs0.s(s0)\n}","parent":["bitri","euabsneu","reuabaiotaiota","diffss.ex","diff.hs0.w","diff.hs0.s"],"children":["aiotaexaiotaiota","dfafv2"]},{"name":"aiotaexb","content":"The alternate iota over a wff ` ph ` is a set iff there is a unique value ` x ` satisfying ` ph ` . (Contributed by AV, 25-Aug-2022.)","origin":"thm aiotaexb(setvar s0, wff w0) {\n  |- wb(weu(s0, w0), wcel(caiota(s0, w0), universe))\n} = {\n  3bitr4i(weu(s0, w0), wcel(caiota(s0, w0), universe), wex(hs0, wceq(cab(s0, w0), csn(cv(hs0)))), wcel(cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))), universe))\n  intexab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))\n  euabsn2(s0, hs0, w0)\n  eleq1i(caiota(s0, w0), universe, cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))))\n  df-aiota(s0, hs0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm aiotaexb(setvar s0, wff w0) {\n  ⊢ (∃!(s0, w0)↔ iota'(s0, w0)∈ 𝕌)\n} = {\n  3bitr4i(∃!(s0, w0), iota'(s0, w0)∈ 𝕌, ∃(hs0, { s0 | w0 } = { hs0 }), ⋂ { hs0 | { s0 | w0 } = { hs0 } } ∈ 𝕌)\n  intexab(hs0, { s0 | w0 } = { hs0 })\n  euabsn2(s0, hs0, w0)\n  eleq1i(iota'(s0, w0), universe, ⋂ { hs0 | { s0 | w0 } = { hs0 } })\n  df-aiota(s0, hs0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["3bitr4i","intexab","euabsn2","eleq1i","df-aiota","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["aiotavb","iotan0aiotaex","aiotaexaiotaiota","aiota0ndef"]},{"name":"aiotavb","content":"The alternate iota over a wff ` ph ` is the universe iff there is no unique value ` x ` satisfying ` ph ` . (Contributed by AV, 25-Aug-2022.)","origin":"thm aiotavb(setvar s0, wff w0) {\n  |- wb(wn(weu(s0, w0)), wceq(caiota(s0, w0), universe))\n} = {\n  xchnxbir(weu(s0, w0), wceq(caiota(s0, w0), universe), wcel(caiota(s0, w0), universe))\n  3bitr4i(wn(wcel(caiota(s0, w0), universe)), wceq(caiota(s0, w0), universe), wn(wcel(cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))), universe)), wceq(cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))), universe))\n  intnex(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0)))))\n  notbii(wcel(caiota(s0, w0), universe), wcel(cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))), universe))\n  eleq1i(caiota(s0, w0), universe, cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))))\n  eqeq1i(caiota(s0, w0), universe, cint(cab(hs0, wceq(cab(s0, w0), csn(cv(hs0))))))\n  df-aiota(s0, hs0, w0)\n  aiotaexb(s0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm aiotavb(setvar s0, wff w0) {\n  ⊢ (¬ ∃!(s0, w0)↔ iota'(s0, w0)= 𝕌)\n} = {\n  xchnxbir(∃!(s0, w0), iota'(s0, w0)= 𝕌, iota'(s0, w0)∈ 𝕌)\n  3bitr4i(¬ iota'(s0, w0)∈ 𝕌, iota'(s0, w0)= 𝕌, ¬ ⋂ { hs0 | { s0 | w0 } = { hs0 } } ∈ 𝕌, ⋂ { hs0 | { s0 | w0 } = { hs0 } } = 𝕌)\n  intnex({ hs0 | { s0 | w0 } = { hs0 } })\n  notbii(iota'(s0, w0)∈ 𝕌, ⋂ { hs0 | { s0 | w0 } = { hs0 } } ∈ 𝕌)\n  eleq1i(iota'(s0, w0), universe, ⋂ { hs0 | { s0 | w0 } = { hs0 } })\n  eqeq1i(iota'(s0, w0), universe, ⋂ { hs0 | { s0 | w0 } = { hs0 } })\n  df-aiota(s0, hs0, w0)\n  aiotaexb(s0, w0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["xchnxbir","3bitr4i","intnex","notbii","eleq1i","eqeq1i","df-aiota","aiotaexb","diffss.ex","diff.hs0.s","diff.hs0.w"],"children":["dfafv2"]},{"name":"iotan0aiotaex","content":"If the iota over a wff ` ph ` is not empty, the alternate iota over ` ph ` is a set. (Contributed by AV, 25-Aug-2022.)","origin":"thm iotan0aiotaex(setvar s0, wff w0) {\n  |- wi(wne(cio(s0, w0), emptycls), wcel(caiota(s0, w0), universe))\n} = {\n  sylib(wne(cio(s0, w0), emptycls), wcel(caiota(s0, w0), universe), weu(s0, w0))\n  necon1ai(cio(s0, w0), emptycls, weu(s0, w0))\n  iotanul(s0, w0)\n  aiotaexb(s0, w0)\n}","pretty":"thm iotan0aiotaex(setvar s0, wff w0) {\n  ⊢ (iota(s0, w0)≠ ∅ → iota'(s0, w0)∈ 𝕌)\n} = {\n  sylib(iota(s0, w0)≠ ∅, iota'(s0, w0)∈ 𝕌, ∃!(s0, w0))\n  necon1ai(iota(s0, w0), emptycls, ∃!(s0, w0))\n  iotanul(s0, w0)\n  aiotaexb(s0, w0)\n}","parent":["sylib","necon1ai","iotanul","aiotaexb"],"children":[]},{"name":"aiotaexaiotaiota","content":"The alternate iota over a wff ` ph ` is a set iff the iota and the alternate iota over ` ph ` are equal. (Contributed by AV, 25-Aug-2022.)","origin":"thm aiotaexaiotaiota(setvar s0, wff w0) {\n  |- wb(wcel(caiota(s0, w0), universe), wceq(cio(s0, w0), caiota(s0, w0)))\n} = {\n  bitr3i(wcel(caiota(s0, w0), universe), wceq(cio(s0, w0), caiota(s0, w0)), weu(s0, w0))\n  aiotaexb(s0, w0)\n  reuaiotaiota(s0, w0)\n}","pretty":"thm aiotaexaiotaiota(setvar s0, wff w0) {\n  ⊢ (iota'(s0, w0)∈ 𝕌 ↔ iota(s0, w0)= iota'(s0, w0))\n} = {\n  bitr3i(iota'(s0, w0)∈ 𝕌, iota(s0, w0)= iota'(s0, w0), ∃!(s0, w0))\n  aiotaexb(s0, w0)\n  reuaiotaiota(s0, w0)\n}","parent":["bitr3i","aiotaexb","reuaiotaiota"],"children":[]},{"name":"aiotaval","content":"Theorem 8.19 in [Quine] p. 57. This theorem is the fundamental property of (alternate) iota. (Contributed by AV, 24-Aug-2022.)","origin":"thm aiotaval(setvar s0, setvar s1, wff w0) {\n  |- wi(wal(s0, wb(w0, wceq(cv(s0), cv(s1)))), wceq(caiota(s0, w0), cv(s1)))\n  -| diffss(s0, s1)\n} = {\n  eqtrd(caiota(s0, w0), cv(s1), cio(s0, w0), wal(s0, wb(w0, wceq(cv(s0), cv(s1)))))\n  3imtr3i(wal(s0, wb(w0, wceq(cv(s0), cv(s1)))), wceq(caiota(s0, w0), cio(s0, w0)), wceq(cab(s0, w0), csn(cv(s1))), weu(hs0, wceq(cab(s0, w0), csn(cv(hs0)))))\n  mpbiri(wceq(cab(s0, w0), csn(cv(s1))), weu(hs0, wceq(cab(s0, w0), csn(cv(hs0)))), weu(hs0, wceq(csn(cv(s1)), csn(cv(hs0)))))\n  mpbir(weu(hs0, wceq(csn(cv(s1)), csn(cv(hs0)))), weu(hs0, wceq(csn(cv(hs0)), csn(cv(s1)))))\n  eusnsn(hs0, s1)\n  eubii(hs0, wceq(csn(cv(s1)), csn(cv(hs0))), wceq(csn(cv(hs0)), csn(cv(s1))))\n  eqcom(csn(cv(s1)), csn(cv(hs0)))\n  eubidv(hs0, wceq(cab(s0, w0), csn(cv(s1))), wceq(cab(s0, w0), csn(cv(hs0))), wceq(csn(cv(s1)), csn(cv(hs0))))\n  eqeq1(cab(s0, w0), csn(cv(s1)), csn(cv(hs0)))\n  absn(s0, cv(s1), w0)\n  bitri(weu(hs0, wceq(cab(s0, w0), csn(cv(hs0)))), wceq(caiota(s0, w0), cio(s0, w0)), wceq(cio(s0, w0), caiota(s0, w0)))\n  reuabaiotaiota(hs0, s0, w0)\n  eqcom(cio(s0, w0), caiota(s0, w0))\n  iotaval(s0, s1, w0)\n  diff.hs0.s(s1)\n  diff.hs0.w(wceq(cab(s0, w0), csn(cv(s1))))\n  diff.cv.s(s0, s1)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","pretty":"thm aiotaval(setvar s0, setvar s1, wff w0) {\n  ⊢ (∀(s0,(w0 ↔ s0 = s1))→ iota'(s0, w0)= s1)\n  ⊣ d(s0, s1)\n} = {\n  eqtrd(iota'(s0, w0), s1, iota(s0, w0), ∀(s0,(w0 ↔ s0 = s1)))\n  3imtr3i(∀(s0,(w0 ↔ s0 = s1)), iota'(s0, w0)= iota(s0, w0), { s0 | w0 } = { s1 }, ∃!(hs0, { s0 | w0 } = { hs0 }))\n  mpbiri({ s0 | w0 } = { s1 }, ∃!(hs0, { s0 | w0 } = { hs0 }), ∃!(hs0, { s1 } = { hs0 }))\n  mpbir(∃!(hs0, { s1 } = { hs0 }), ∃!(hs0, { hs0 } = { s1 }))\n  eusnsn(hs0, s1)\n  eubii(hs0, { s1 } = { hs0 }, { hs0 } = { s1 })\n  eqcom({ s1 }, { hs0 })\n  eubidv(hs0, { s0 | w0 } = { s1 }, { s0 | w0 } = { hs0 }, { s1 } = { hs0 })\n  eqeq1({ s0 | w0 }, { s1 }, { hs0 })\n  absn(s0, s1, w0)\n  bitri(∃!(hs0, { s0 | w0 } = { hs0 }), iota'(s0, w0)= iota(s0, w0), iota(s0, w0)= iota'(s0, w0))\n  reuabaiotaiota(hs0, s0, w0)\n  eqcom(iota(s0, w0), iota'(s0, w0))\n  iotaval(s0, s1, w0)\n  diff.hs0.s(s1)\n  diff.hs0.w({ s0 | w0 } = { s1 })\n  diff.cv.s(s0, s1)\n  diff.hs0.s(s0)\n  diff.hs0.w(w0)\n}","parent":["eqtrd","3imtr3i","mpbiri","mpbir","eusnsn","eubii","eqcom","eubidv","eqeq1","absn","bitri","reuabaiotaiota","iotaval","diff.hs0.s","diff.hs0.w","diff.cv.s"],"children":["aiota0def"]},{"name":"aiota0def","content":"Example for a defined alternate iota being the empty set, i.e., ` A. y x C_ y ` is a wff satisfied by a unique value ` x ` , namely ` x = (/) ` (the empty set is the one and only set which is a subset of every set). This corresponds to ~ iota0def . (Contributed by AV, 25-Aug-2022.)","origin":"thm aiota0def(setvar s0, setvar s1) {\n  |- wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), emptycls)\n  -| diffss(s0, s1)\n} = {\n  mp2(wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), emptycls), wcel(emptycls, universe), wal(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), emptycls))))\n  0ex()\n  ax-gen(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), emptycls)))\n  al0ssb(s1, cv(s0))\n  vtoclg(hs0, emptycls, universe, wi(wal(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), emptycls))), wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), emptycls)), wi(wal(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), cv(hs0)))), wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), cv(hs0))))\n  imbi12d(wceq(cv(hs0), emptycls), wal(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), cv(hs0)))), wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), cv(hs0)), wal(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), emptycls))), wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), emptycls))\n  albidv(s0, wceq(cv(hs0), emptycls), wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), cv(hs0))), wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), emptycls)))\n  bibi2d(wceq(cv(hs0), emptycls), wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), cv(hs0)), wceq(cv(s0), emptycls))\n  eqeq2(cv(hs0), emptycls, cv(s0))\n  eqeq2(cv(hs0), emptycls, caiota(s0, wal(s1, wss(cv(s0), cv(s1)))))\n  aiotaval(s0, hs0, wal(s1, wss(cv(s0), cv(s1))))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.hs0.c(emptycls)\n  diff.hs0.w(wi(wal(s0, wb(wal(s1, wss(cv(s0), cv(s1))), wceq(cv(s0), emptycls))), wceq(caiota(s0, wal(s1, wss(cv(s0), cv(s1)))), emptycls)))\n  diff.wceq.s(s0, cv(hs0), emptycls)\n  diff.cv.s(s0, hs0)\n  diff.emptycls.s(s0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","pretty":"thm aiota0def(setvar s0, setvar s1) {\n  ⊢ iota'(s0, ∀(s1, s0 ⊆ s1))= ∅\n  ⊣ d(s0, s1)\n} = {\n  mp2(iota'(s0, ∀(s1, s0 ⊆ s1))= ∅, ∅ ∈ 𝕌, ∀(s0,(∀(s1, s0 ⊆ s1)↔ s0 = ∅)))\n  0ex()\n  ax-gen(s0, (∀(s1, s0 ⊆ s1)↔ s0 = ∅))\n  al0ssb(s1, s0)\n  vtoclg(hs0, emptycls, universe, (∀(s0,(∀(s1, s0 ⊆ s1)↔ s0 = ∅))→ iota'(s0, ∀(s1, s0 ⊆ s1))= ∅), (∀(s0,(∀(s1, s0 ⊆ s1)↔ s0 = hs0))→ iota'(s0, ∀(s1, s0 ⊆ s1))= hs0))\n  imbi12d(hs0 = ∅, ∀(s0,(∀(s1, s0 ⊆ s1)↔ s0 = hs0)), iota'(s0, ∀(s1, s0 ⊆ s1))= hs0, ∀(s0,(∀(s1, s0 ⊆ s1)↔ s0 = ∅)), iota'(s0, ∀(s1, s0 ⊆ s1))= ∅)\n  albidv(s0, hs0 = ∅, (∀(s1, s0 ⊆ s1)↔ s0 = hs0), (∀(s1, s0 ⊆ s1)↔ s0 = ∅))\n  bibi2d(hs0 = ∅, ∀(s1, s0 ⊆ s1), s0 = hs0, s0 = ∅)\n  eqeq2(hs0, emptycls, s0)\n  eqeq2(hs0, emptycls, iota'(s0, ∀(s1, s0 ⊆ s1)))\n  aiotaval(s0, hs0, ∀(s1, s0 ⊆ s1))\n  diff.cv.s(s1, s0)\n  diffss.ex(s1, s0)\n  diff.hs0.c(emptycls)\n  diff.hs0.w((∀(s0,(∀(s1, s0 ⊆ s1)↔ s0 = ∅))→ iota'(s0, ∀(s1, s0 ⊆ s1))= ∅))\n  diff.wceq.s(s0, hs0, emptycls)\n  diff.cv.s(s0, hs0)\n  diff.emptycls.s(s0)\n  diffss.ex(s0, hs0)\n  diff.hs0.s(s0)\n}","parent":["mp2","0ex","ax-gen","al0ssb","vtoclg","imbi12d","albidv","bibi2d","eqeq2","aiotaval","diff.cv.s","diffss.ex","diff.hs0.c","diff.hs0.w","diff.wceq.s","diff.emptycls.s","diff.hs0.s"],"children":[]},{"name":"aiota0ndef","content":"Example for an undefined alternate iota being no set, i.e., ` A. y y e. x ` is a wff not satisfied by a (unique) value ` x ` (there is no set, and therefore certainly no unique set, which contains every set). This is different from ~ iota0ndef , where the iota still is a set (the empty set). (Contributed by AV, 25-Aug-2022.)","origin":"thm aiota0ndef(setvar s0, setvar s1) {\n  |- wnel(caiota(s0, wal(s1, wcel(cv(s1), cv(s0)))), universe)\n  -| diffss(s0, s1)\n} = {\n  mpbir(wnel(caiota(s0, wal(s1, wcel(cv(s1), cv(s0)))), universe), wn(weu(s0, wal(s1, wcel(cv(s1), cv(s0))))))\n  mtbir(weu(s0, wal(s1, wcel(cv(s1), cv(s0)))), wa(wex(s0, wal(s1, wcel(cv(s1), cv(s0)))), wmo(s0, wal(s1, wcel(cv(s1), cv(s0))))))\n  intnanr(wex(s0, wal(s1, wcel(cv(s1), cv(s0)))), wmo(s0, wal(s1, wcel(cv(s1), cv(s0)))))\n  nalset(s0, s1)\n  df-eu(s0, wal(s1, wcel(cv(s1), cv(s0))))\n  xchbinxr(wnel(caiota(s0, wal(s1, wcel(cv(s1), cv(s0)))), universe), weu(s0, wal(s1, wcel(cv(s1), cv(s0)))), wcel(caiota(s0, wal(s1, wcel(cv(s1), cv(s0)))), universe))\n  df-nel(caiota(s0, wal(s1, wcel(cv(s1), cv(s0)))), universe)\n  aiotaexb(s0, wal(s1, wcel(cv(s1), cv(s0))))\n}","pretty":"thm aiota0ndef(setvar s0, setvar s1) {\n  ⊢ iota'(s0, ∀(s1, s1 ∈ s0))∉ 𝕌\n  ⊣ d(s0, s1)\n} = {\n  mpbir(iota'(s0, ∀(s1, s1 ∈ s0))∉ 𝕌, ¬ ∃!(s0, ∀(s1, s1 ∈ s0)))\n  mtbir(∃!(s0, ∀(s1, s1 ∈ s0)), (∃(s0, ∀(s1, s1 ∈ s0))∧ ∃*(s0, ∀(s1, s1 ∈ s0))))\n  intnanr(∃(s0, ∀(s1, s1 ∈ s0)), ∃*(s0, ∀(s1, s1 ∈ s0)))\n  nalset(s0, s1)\n  df-eu(s0, ∀(s1, s1 ∈ s0))\n  xchbinxr(iota'(s0, ∀(s1, s1 ∈ s0))∉ 𝕌, ∃!(s0, ∀(s1, s1 ∈ s0)), iota'(s0, ∀(s1, s1 ∈ s0))∈ 𝕌)\n  df-nel(iota'(s0, ∀(s1, s1 ∈ s0)), universe)\n  aiotaexb(s0, ∀(s1, s1 ∈ s0))\n}","parent":["mpbir","mtbir","intnanr","nalset","df-eu","xchbinxr","df-nel","aiotaexb"],"children":[]}]}