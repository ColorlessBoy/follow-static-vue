{"index":1160,"title":"Setting components of extensible structures","content":"Groundwork for changing the definition, syntax and token for component-setting in extensible structures. See https://github.com/metamath/set.mm/issues/2401","blocks":[{"name":"cstrset","content":"Syntax for component-setting in extensible structures.","origin":"prop class cstrset(class c0, class c1, class c2) { [c0 / c1]c2 }","pretty":"","parent":[],"children":[]},{"name":"diff.cstrset.s","content":"","origin":"axiom diff.cstrset.s(setvar sBase, class c0, class c1, class c2) {\n  |- diffsc(sBase, cstrset(c0, c1, c2))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n  -| diffsc(sBase, c2)\n}","pretty":"axiom diff.cstrset.s(setvar sBase, class c0, class c1, class c2) {\n  ‚ä¢ d(sBase,[c0 / c1]c2)\n  ‚ä£ d(sBase, c0)\n  ‚ä£ d(sBase, c1)\n  ‚ä£ d(sBase, c2)\n}","parent":[],"children":[]},{"name":"diff.cstrset.c","content":"","origin":"axiom diff.cstrset.c(class cBase, class c0, class c1, class c2) {\n  |- diffcc(cBase, cstrset(c0, c1, c2))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n  -| diffcc(cBase, c2)\n}","pretty":"axiom diff.cstrset.c(class cBase, class c0, class c1, class c2) {\n  ‚ä¢ d(cBase,[c0 / c1]c2)\n  ‚ä£ d(cBase, c0)\n  ‚ä£ d(cBase, c1)\n  ‚ä£ d(cBase, c2)\n}","parent":[],"children":[]},{"name":"diff.cstrset.w","content":"","origin":"axiom diff.cstrset.w(wff wBase, class c0, class c1, class c2) {\n  |- diffcw(cstrset(c0, c1, c2), wBase)\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n  -| diffcw(c2, wBase)\n}","pretty":"axiom diff.cstrset.w(wff wBase, class c0, class c1, class c2) {\n  ‚ä¢ d([c0 / c1]c2, wBase)\n  ‚ä£ d(c0, wBase)\n  ‚ä£ d(c1, wBase)\n  ‚ä£ d(c2, wBase)\n}","parent":[],"children":[]},{"name":"df-strset","content":"Component-setting in extensible structures. Define the extensible structure ` [s B / A ]s S ` , which is like the extensible structure ` S ` except that the value ` B ` has been put in the slot ` A ` (replacing the current value if there was already one). In such expressions, ` A ` is generally substituted for slot mnemonics like ` Base ` or ` +g ` or ` dist ` . (Contributed by BJ, 13-Feb-2022.)","origin":"axiom df-strset(class c0, class c1, class c2) {\n  |- wceq(cstrset(c0, c1, c2), cun(cres(c2, cdif(universe, csn(cfv(c1, cnx)))), csn(cop(cfv(c1, cnx), c0))))\n}","pretty":"axiom df-strset(class c0, class c1, class c2) {\n  ‚ä¢ [c0 / c1]c2 =((c2 |`(ùïå \\ {(c1 ` ndx)}))‚ãÉ { <(c1 ` ndx), c0 > })\n}","parent":[],"children":["setsstrset"]},{"name":"setsstrset","content":"Relation between ~ df-sets and ~ df-strset . Temporary theorem kept during the transition from the former to the latter. (Contributed by BJ, 13-Feb-2022.)","origin":"thm setsstrset(class c0, class c1, class c2, class c3, class c4) {\n  |- wi(wa(wcel(c0, c1), wcel(c2, c3)), wceq(cstrset(c2, c4, c0), co(c0, csts, cop(cfv(c4, cnx), c2))))\n} = {\n  syl6reqr(cstrset(c2, c4, c0), co(c0, csts, cop(cfv(c4, cnx), c2)), cun(cres(c0, cdif(universe, csn(cfv(c4, cnx)))), csn(cop(cfv(c4, cnx), c2))), wa(wcel(c0, c1), wcel(c2, c3)))\n  setsval(c0, c1, c2, c3, cfv(c4, cnx))\n  df-strset(c2, c4, c0)\n}","pretty":"thm setsstrset(class c0, class c1, class c2, class c3, class c4) {\n  ‚ä¢ ((c0 ‚àà c1 ‚àß c2 ‚àà c3)‚Üí[c2 / c4]c0 =(c0[sSet]<(c4 ` ndx), c2 >))\n} = {\n  syl6reqr([c2 / c4]c0, (c0[sSet]<(c4 ` ndx), c2 >), ((c0 |`(ùïå \\ {(c4 ` ndx)}))‚ãÉ { <(c4 ` ndx), c2 > }), (c0 ‚àà c1 ‚àß c2 ‚àà c3))\n  setsval(c0, c1, c2, c3, (c4 ` ndx))\n  df-strset(c2, c4, c0)\n}","parent":["syl6reqr","setsval","df-strset"],"children":[]}]}