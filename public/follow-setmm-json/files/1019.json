{"index":1019,"title":"Godel-sets of formulas","content":"","blocks":[{"name":"cgoe","content":"The Godel-set of membership.","origin":"const class cgoe { e.g }","pretty":"","parent":[],"children":[]},{"name":"diff.cgoe.s","content":"","origin":"axiom diff.cgoe.s(setvar s0) {\n  |- diffsc(s0, cgoe)\n}","pretty":"axiom diff.cgoe.s(setvar s0) {\n  ‚ä¢ d(s0, e.g)\n}","parent":[],"children":[]},{"name":"diff.cgoe.c","content":"","origin":"axiom diff.cgoe.c(class c0) {\n  |- diffcc(cgoe, c0)\n}","pretty":"axiom diff.cgoe.c(class c0) {\n  ‚ä¢ d(e.g, c0)\n}","parent":[],"children":[]},{"name":"diff.cgoe.w","content":"","origin":"axiom diff.cgoe.w(wff w0) {\n  |- diffcw(cgoe, w0)\n}","pretty":"axiom diff.cgoe.w(wff w0) {\n  ‚ä¢ d(e.g, w0)\n}","parent":[],"children":[]},{"name":"cgna","content":"The Godel-set for the Sheffer stroke.","origin":"const class cgna { |g }","pretty":"","parent":[],"children":[]},{"name":"diff.cgna.s","content":"","origin":"axiom diff.cgna.s(setvar s0) {\n  |- diffsc(s0, cgna)\n}","pretty":"axiom diff.cgna.s(setvar s0) {\n  ‚ä¢ d(s0, |g)\n}","parent":[],"children":[]},{"name":"diff.cgna.c","content":"","origin":"axiom diff.cgna.c(class c0) {\n  |- diffcc(cgna, c0)\n}","pretty":"axiom diff.cgna.c(class c0) {\n  ‚ä¢ d(|g, c0)\n}","parent":[],"children":[]},{"name":"diff.cgna.w","content":"","origin":"axiom diff.cgna.w(wff w0) {\n  |- diffcw(cgna, w0)\n}","pretty":"axiom diff.cgna.w(wff w0) {\n  ‚ä¢ d(|g, w0)\n}","parent":[],"children":[]},{"name":"cgol","content":"The Godel-set of universal quantification. (Note that this is not a wff.)","origin":"prop class cgol(class c0, class c1) { ‚àÄ(c0, c1) }","pretty":"","parent":[],"children":[]},{"name":"diff.cgol.s","content":"","origin":"axiom diff.cgol.s(setvar sBase, class c0, class c1) {\n  |- diffsc(sBase, cgol(c0, c1))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n}","pretty":"axiom diff.cgol.s(setvar sBase, class c0, class c1) {\n  ‚ä¢ d(sBase, ‚àÄ(c0, c1))\n  ‚ä£ d(sBase, c0)\n  ‚ä£ d(sBase, c1)\n}","parent":[],"children":[]},{"name":"diff.cgol.c","content":"","origin":"axiom diff.cgol.c(class cBase, class c0, class c1) {\n  |- diffcc(cBase, cgol(c0, c1))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n}","pretty":"axiom diff.cgol.c(class cBase, class c0, class c1) {\n  ‚ä¢ d(cBase, ‚àÄ(c0, c1))\n  ‚ä£ d(cBase, c0)\n  ‚ä£ d(cBase, c1)\n}","parent":[],"children":[]},{"name":"diff.cgol.w","content":"","origin":"axiom diff.cgol.w(wff wBase, class c0, class c1) {\n  |- diffcw(cgol(c0, c1), wBase)\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n}","pretty":"axiom diff.cgol.w(wff wBase, class c0, class c1) {\n  ‚ä¢ d(‚àÄ(c0, c1), wBase)\n  ‚ä£ d(c0, wBase)\n  ‚ä£ d(c1, wBase)\n}","parent":[],"children":[]},{"name":"csat","content":"The satisfaction function.","origin":"const class csat { Sat }","pretty":"","parent":[],"children":[]},{"name":"diff.csat.s","content":"","origin":"axiom diff.csat.s(setvar s0) {\n  |- diffsc(s0, csat)\n}","pretty":"axiom diff.csat.s(setvar s0) {\n  ‚ä¢ d(s0, Sat)\n}","parent":[],"children":[]},{"name":"diff.csat.c","content":"","origin":"axiom diff.csat.c(class c0) {\n  |- diffcc(csat, c0)\n}","pretty":"axiom diff.csat.c(class c0) {\n  ‚ä¢ d(Sat, c0)\n}","parent":[],"children":[]},{"name":"diff.csat.w","content":"","origin":"axiom diff.csat.w(wff w0) {\n  |- diffcw(csat, w0)\n}","pretty":"axiom diff.csat.w(wff w0) {\n  ‚ä¢ d(Sat, w0)\n}","parent":[],"children":[]},{"name":"cfmla","content":"The formula set predicate.","origin":"const class cfmla { Fmla }","pretty":"","parent":[],"children":[]},{"name":"diff.cfmla.s","content":"","origin":"axiom diff.cfmla.s(setvar s0) {\n  |- diffsc(s0, cfmla)\n}","pretty":"axiom diff.cfmla.s(setvar s0) {\n  ‚ä¢ d(s0, Fmla)\n}","parent":[],"children":[]},{"name":"diff.cfmla.c","content":"","origin":"axiom diff.cfmla.c(class c0) {\n  |- diffcc(cfmla, c0)\n}","pretty":"axiom diff.cfmla.c(class c0) {\n  ‚ä¢ d(Fmla, c0)\n}","parent":[],"children":[]},{"name":"diff.cfmla.w","content":"","origin":"axiom diff.cfmla.w(wff w0) {\n  |- diffcw(cfmla, w0)\n}","pretty":"axiom diff.cfmla.w(wff w0) {\n  ‚ä¢ d(Fmla, w0)\n}","parent":[],"children":[]},{"name":"csate","content":"The ` e. ` -satisfaction function.","origin":"const class csate { SatE }","pretty":"","parent":[],"children":[]},{"name":"diff.csate.s","content":"","origin":"axiom diff.csate.s(setvar s0) {\n  |- diffsc(s0, csate)\n}","pretty":"axiom diff.csate.s(setvar s0) {\n  ‚ä¢ d(s0, SatE)\n}","parent":[],"children":[]},{"name":"diff.csate.c","content":"","origin":"axiom diff.csate.c(class c0) {\n  |- diffcc(csate, c0)\n}","pretty":"axiom diff.csate.c(class c0) {\n  ‚ä¢ d(SatE, c0)\n}","parent":[],"children":[]},{"name":"diff.csate.w","content":"","origin":"axiom diff.csate.w(wff w0) {\n  |- diffcw(csate, w0)\n}","pretty":"axiom diff.csate.w(wff w0) {\n  ‚ä¢ d(SatE, w0)\n}","parent":[],"children":[]},{"name":"cprv","content":"The \"proves\" relation.","origin":"const class cprv { ‚ä® }","pretty":"","parent":[],"children":[]},{"name":"diff.cprv.s","content":"","origin":"axiom diff.cprv.s(setvar s0) {\n  |- diffsc(s0, cprv)\n}","pretty":"axiom diff.cprv.s(setvar s0) {\n  ‚ä¢ d(s0, ‚ä®)\n}","parent":[],"children":[]},{"name":"diff.cprv.c","content":"","origin":"axiom diff.cprv.c(class c0) {\n  |- diffcc(cprv, c0)\n}","pretty":"axiom diff.cprv.c(class c0) {\n  ‚ä¢ d(‚ä®, c0)\n}","parent":[],"children":[]},{"name":"diff.cprv.w","content":"","origin":"axiom diff.cprv.w(wff w0) {\n  |- diffcw(cprv, w0)\n}","pretty":"axiom diff.cprv.w(wff w0) {\n  ‚ä¢ d(‚ä®, w0)\n}","parent":[],"children":[]},{"name":"df-goel","content":"Define the Godel-set of membership. Here the arguments ` x = <. N , P >. ` correspond to v_N and v_P , so ` ( (/) e.g 1o ) ` actually means v_0 ` e. ` v_1 , not ` 0 e. 1 ` . (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goel(setvar s0) {\n  |- wceq(cgoe, cmpt(s0, cxp(com, com), cop(emptycls, cv(s0))))\n}","pretty":"axiom df-goel(setvar s0) {\n  ‚ä¢ e.g =(s0 ‚àà(_om √ó _om)‚Ü¶ < ‚àÖ, s0 >)\n}","parent":[],"children":[""]},{"name":"df-gona","content":"Define the Godel-set for the Sheffer stroke NAND. Here the arguments ` x = <. U , V >. ` are also Godel-sets corresponding to smaller formulas. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-gona(setvar s0) {\n  |- wceq(cgna, cmpt(s0, cxp(universe, universe), cop(c1o, cv(s0))))\n}","pretty":"axiom df-gona(setvar s0) {\n  ‚ä¢ |g =(s0 ‚àà(ùïå √ó ùïå)‚Ü¶ < 1o, s0 >)\n}","parent":[],"children":[""]},{"name":"df-goal","content":"Define the Godel-set of universal quantification. Here ` N e. _om ` corresponds to v_N , and ` U ` represents another formula, and this expression is ` [ A. x ph ] = A.g N U ` where ` x ` is the ` N ` -th variable, ` U = [ ph ] ` is the code for ` ph ` . Note that this is a _class_ expression, not a wff. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goal(class c0, class c1) {\n  |- wceq(cgol(c0, c1), cop(c2o, cop(c0, c1)))\n}","pretty":"axiom df-goal(class c0, class c1) {\n  ‚ä¢ ‚àÄ(c0, c1)= < 2o, < c0, c1 > >\n}","parent":[],"children":[""]},{"name":"df-sat","content":"Define the satisfaction predicate. This recursive construction builds up a function over wff codes and simultaneously defines the set of assignments to all variables from ` M ` that makes the coded wff true in the model ` M ` , where ` e. ` is interpreted as the binary relation ` E ` on ` M ` . The interpretation of the statement ` S e. ( ( ( M Sat E ) `` n ) `` U ) ` is that for the model ` <. M , E >. ` , ` S : _om --> M ` is a valuation of the variables (v_0 ` = ( S `` (/) ) ` , v_1 ` = ( S `` 1o ) ` , etc.) and ` U ` is a code for a wff using ` e. , -/\\ , A. ` that is true under the assignment ` S ` . The function is defined by finite recursion; ` ( ( M Sat E ) `` n ) ` only operates on wffs of depth at most ` n e. _om ` , and ` ( ( M Sat E ) `` _om ) = U_ n e. _om ( ( M Sat E ) `` n ) ` operates on all wffs. The coding scheme for the wffs is defined so that <HTML><ul> <li>v<sub>i</sub> ` e. ` v<sub>j</sub> is coded as ` <. (/) , <. i , j >. >. ` ,</li> <li> ` ( ph -/\\ ps ) ` is coded as ` <. 1o , <. ph , ps >. >. ` , and</li> <li> ` A. ` v<sub>i</sub> ` ph ` is coded as ` <. 2o , <. i , ph >. >. ` .</li></ul></HTML> (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-sat(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9, setvar s10) {\n  |- wceq(csat, cmpo(s0, s1, universe, universe, cres(crdg(cmpt(s2, universe, cun(cv(s2), copab(s3, s4, wrex(s5, cv(s2), wo(wrex(s6, cv(s2), wa(wceq(cv(s3), co(cfv(c1st, cv(s5)), cgna, cfv(c1st, cv(s6)))), wceq(cv(s4), cdif(co(cv(s0), cmap, com), cin(cfv(c2nd, cv(s5)), cfv(c2nd, cv(s6))))))), wrex(s7, com, wa(wceq(cv(s3), cgol(cv(s7), cfv(c1st, cv(s5)))), wceq(cv(s4), crab(s8, co(cv(s0), cmap, com), wral(s9, cv(s0), wcel(cun(csn(cop(cv(s7), cv(s9))), cres(cv(s8), cdif(com, csn(cv(s7))))), cfv(c2nd, cv(s5))))))))))))), copab(s3, s4, wrex(s7, com, wrex(s10, com, wa(wceq(cv(s3), co(cv(s7), cgoe, cv(s10))), wceq(cv(s4), crab(s8, co(cv(s0), cmap, com), wbr(cfv(cv(s8), cv(s7)), cv(s1), cfv(cv(s8), cv(s10)))))))))), csuc(com))))\n  -| diffss(s1, s8)\n  -| diffss(s2, s8)\n  -| diffss(s7, s8)\n  -| diffss(s10, s8)\n  -| diffss(s0, s8)\n  -| diffss(s5, s8)\n  -| diffss(s6, s8)\n  -| diffss(s3, s8)\n  -| diffss(s4, s8)\n  -| diffss(s8, s9)\n  -| diffss(s1, s2)\n  -| diffss(s1, s7)\n  -| diffss(s1, s10)\n  -| diffss(s0, s1)\n  -| diffss(s1, s5)\n  -| diffss(s1, s6)\n  -| diffss(s1, s3)\n  -| diffss(s1, s4)\n  -| diffss(s1, s9)\n  -| diffss(s2, s7)\n  -| diffss(s10, s2)\n  -| diffss(s0, s2)\n  -| diffss(s2, s5)\n  -| diffss(s2, s6)\n  -| diffss(s2, s3)\n  -| diffss(s2, s4)\n  -| diffss(s2, s9)\n  -| diffss(s10, s7)\n  -| diffss(s0, s7)\n  -| diffss(s5, s7)\n  -| diffss(s6, s7)\n  -| diffss(s3, s7)\n  -| diffss(s4, s7)\n  -| diffss(s7, s9)\n  -| diffss(s0, s10)\n  -| diffss(s10, s5)\n  -| diffss(s10, s6)\n  -| diffss(s10, s3)\n  -| diffss(s10, s4)\n  -| diffss(s10, s9)\n  -| diffss(s0, s5)\n  -| diffss(s0, s6)\n  -| diffss(s0, s3)\n  -| diffss(s0, s4)\n  -| diffss(s0, s9)\n  -| diffss(s5, s6)\n  -| diffss(s3, s5)\n  -| diffss(s4, s5)\n  -| diffss(s5, s9)\n  -| diffss(s3, s6)\n  -| diffss(s4, s6)\n  -| diffss(s6, s9)\n  -| diffss(s3, s4)\n  -| diffss(s3, s9)\n  -| diffss(s4, s9)\n}","pretty":"axiom df-sat(setvar s0, setvar s1, setvar s2, setvar s3, setvar s4, setvar s5, setvar s6, setvar s7, setvar s8, setvar s9, setvar s10) {\n  ‚ä¢ Sat =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(rec((s2 ‚àà ùïå ‚Ü¶(s2 ‚ãÉ { < s3, s4 > | ‚àÉ(s5 ‚àà s2,(‚àÉ(s6 ‚àà s2,(s3 =((1st ` s5)[|g](1st ` s6))‚àß s4 =((s0[‚Ü¶]_om)\\((2nd ` s5)‚ãÇ(2nd ` s6)))))‚à® ‚àÉ(s7 ‚àà _om,(s3 = ‚àÄ(s7,(1st ` s5))‚àß s4 = { s8 ‚àà(s0[‚Ü¶]_om)| ‚àÄ(s9 ‚àà s0,({ < s7, s9 > } ‚ãÉ(s8 |`(_om \\ { s7 })))‚àà(2nd ` s5))}))))})), { < s3, s4 > | ‚àÉ(s7 ‚àà _om, ‚àÉ(s10 ‚àà _om,(s3 =(s7[e.g]s10)‚àß s4 = { s8 ‚àà(s0[‚Ü¶]_om)|(s8 ` s7)[s1](s8 ` s10)})))})|` suc(_om)))\n  ‚ä£ d(s1, s8)\n  ‚ä£ d(s2, s8)\n  ‚ä£ d(s7, s8)\n  ‚ä£ d(s10, s8)\n  ‚ä£ d(s0, s8)\n  ‚ä£ d(s5, s8)\n  ‚ä£ d(s6, s8)\n  ‚ä£ d(s3, s8)\n  ‚ä£ d(s4, s8)\n  ‚ä£ d(s8, s9)\n  ‚ä£ d(s1, s2)\n  ‚ä£ d(s1, s7)\n  ‚ä£ d(s1, s10)\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s1, s5)\n  ‚ä£ d(s1, s6)\n  ‚ä£ d(s1, s3)\n  ‚ä£ d(s1, s4)\n  ‚ä£ d(s1, s9)\n  ‚ä£ d(s2, s7)\n  ‚ä£ d(s10, s2)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s2, s5)\n  ‚ä£ d(s2, s6)\n  ‚ä£ d(s2, s3)\n  ‚ä£ d(s2, s4)\n  ‚ä£ d(s2, s9)\n  ‚ä£ d(s10, s7)\n  ‚ä£ d(s0, s7)\n  ‚ä£ d(s5, s7)\n  ‚ä£ d(s6, s7)\n  ‚ä£ d(s3, s7)\n  ‚ä£ d(s4, s7)\n  ‚ä£ d(s7, s9)\n  ‚ä£ d(s0, s10)\n  ‚ä£ d(s10, s5)\n  ‚ä£ d(s10, s6)\n  ‚ä£ d(s10, s3)\n  ‚ä£ d(s10, s4)\n  ‚ä£ d(s10, s9)\n  ‚ä£ d(s0, s5)\n  ‚ä£ d(s0, s6)\n  ‚ä£ d(s0, s3)\n  ‚ä£ d(s0, s4)\n  ‚ä£ d(s0, s9)\n  ‚ä£ d(s5, s6)\n  ‚ä£ d(s3, s5)\n  ‚ä£ d(s4, s5)\n  ‚ä£ d(s5, s9)\n  ‚ä£ d(s3, s6)\n  ‚ä£ d(s4, s6)\n  ‚ä£ d(s6, s9)\n  ‚ä£ d(s3, s4)\n  ‚ä£ d(s3, s9)\n  ‚ä£ d(s4, s9)\n}","parent":[],"children":[""]},{"name":"df-sate","content":"A simplified version of the satisfaction predicate, using the standard membership relation and eliminating the extra variable ` n ` . (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-sate(setvar s0, setvar s1) {\n  |- wceq(csate, cmpo(s0, s1, universe, universe, cfv(cfv(co(cv(s0), csat, cin(cep, cxp(cv(s0), cv(s0)))), com), cv(s1))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-sate(setvar s0, setvar s1) {\n  ‚ä¢ SatE =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(((s0[Sat](‚àà ‚ãÇ(s0 √ó s0)))` _om)` s1))\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"df-fmla","content":"Define the predicate which defines the set of valid Godel formulas. The parameter ` n ` defines the maximum height of the formulas: the set ` ( Fmla `` (/) ) ` is all formulas of the form ` x = y ` or ` x e. y ` (which in our coding scheme is the set ` ( { (/) , 1o } X. ( _om X. _om ) ) ` ; see ~ df-sat for the full coding scheme), and each extra level adds to the complexity of the formulas in ` ( Fmla `` n ) ` . ` ( Fmla `` _om ) = U_ n e. _om ( Fmla `` n ) ` is the set of all valid formulas. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-fmla(setvar s0) {\n  |- wceq(cfmla, cmpt(s0, csuc(com), cdm(cfv(co(emptycls, csat, emptycls), cv(s0)))))\n}","pretty":"axiom df-fmla(setvar s0) {\n  ‚ä¢ Fmla =(s0 ‚àà suc(_om)‚Ü¶ dom(((‚àÖ[Sat]‚àÖ)` s0)))\n}","parent":[],"children":[""]},{"name":"cgon","content":"The Godel-set of negation. (Note that this is not a wff.)","origin":"prop class cgon(class c0) { ¬¨(c0) }","pretty":"","parent":[],"children":[]},{"name":"diff.cgon.s","content":"","origin":"axiom diff.cgon.s(setvar sBase, class c0) {\n  |- diffsc(sBase, cgon(c0))\n  -| diffsc(sBase, c0)\n}","pretty":"axiom diff.cgon.s(setvar sBase, class c0) {\n  ‚ä¢ d(sBase, ¬¨(c0))\n  ‚ä£ d(sBase, c0)\n}","parent":[],"children":[]},{"name":"diff.cgon.c","content":"","origin":"axiom diff.cgon.c(class cBase, class c0) {\n  |- diffcc(cBase, cgon(c0))\n  -| diffcc(cBase, c0)\n}","pretty":"axiom diff.cgon.c(class cBase, class c0) {\n  ‚ä¢ d(cBase, ¬¨(c0))\n  ‚ä£ d(cBase, c0)\n}","parent":[],"children":[]},{"name":"diff.cgon.w","content":"","origin":"axiom diff.cgon.w(wff wBase, class c0) {\n  |- diffcw(cgon(c0), wBase)\n  -| diffcw(c0, wBase)\n}","pretty":"axiom diff.cgon.w(wff wBase, class c0) {\n  ‚ä¢ d(¬¨(c0), wBase)\n  ‚ä£ d(c0, wBase)\n}","parent":[],"children":[]},{"name":"cgoa","content":"The Godel-set of conjunction.","origin":"const class cgoa { ‚àßg }","pretty":"","parent":[],"children":[]},{"name":"diff.cgoa.s","content":"","origin":"axiom diff.cgoa.s(setvar s0) {\n  |- diffsc(s0, cgoa)\n}","pretty":"axiom diff.cgoa.s(setvar s0) {\n  ‚ä¢ d(s0, ‚àßg)\n}","parent":[],"children":[]},{"name":"diff.cgoa.c","content":"","origin":"axiom diff.cgoa.c(class c0) {\n  |- diffcc(cgoa, c0)\n}","pretty":"axiom diff.cgoa.c(class c0) {\n  ‚ä¢ d(‚àßg, c0)\n}","parent":[],"children":[]},{"name":"diff.cgoa.w","content":"","origin":"axiom diff.cgoa.w(wff w0) {\n  |- diffcw(cgoa, w0)\n}","pretty":"axiom diff.cgoa.w(wff w0) {\n  ‚ä¢ d(‚àßg, w0)\n}","parent":[],"children":[]},{"name":"cgoi","content":"The Godel-set of implication.","origin":"const class cgoi { ‚Üíg }","pretty":"","parent":[],"children":[]},{"name":"diff.cgoi.s","content":"","origin":"axiom diff.cgoi.s(setvar s0) {\n  |- diffsc(s0, cgoi)\n}","pretty":"axiom diff.cgoi.s(setvar s0) {\n  ‚ä¢ d(s0, ‚Üíg)\n}","parent":[],"children":[]},{"name":"diff.cgoi.c","content":"","origin":"axiom diff.cgoi.c(class c0) {\n  |- diffcc(cgoi, c0)\n}","pretty":"axiom diff.cgoi.c(class c0) {\n  ‚ä¢ d(‚Üíg, c0)\n}","parent":[],"children":[]},{"name":"diff.cgoi.w","content":"","origin":"axiom diff.cgoi.w(wff w0) {\n  |- diffcw(cgoi, w0)\n}","pretty":"axiom diff.cgoi.w(wff w0) {\n  ‚ä¢ d(‚Üíg, w0)\n}","parent":[],"children":[]},{"name":"cgoo","content":"The Godel-set of disjunction.","origin":"const class cgoo { ‚à®g }","pretty":"","parent":[],"children":[]},{"name":"diff.cgoo.s","content":"","origin":"axiom diff.cgoo.s(setvar s0) {\n  |- diffsc(s0, cgoo)\n}","pretty":"axiom diff.cgoo.s(setvar s0) {\n  ‚ä¢ d(s0, ‚à®g)\n}","parent":[],"children":[]},{"name":"diff.cgoo.c","content":"","origin":"axiom diff.cgoo.c(class c0) {\n  |- diffcc(cgoo, c0)\n}","pretty":"axiom diff.cgoo.c(class c0) {\n  ‚ä¢ d(‚à®g, c0)\n}","parent":[],"children":[]},{"name":"diff.cgoo.w","content":"","origin":"axiom diff.cgoo.w(wff w0) {\n  |- diffcw(cgoo, w0)\n}","pretty":"axiom diff.cgoo.w(wff w0) {\n  ‚ä¢ d(‚à®g, w0)\n}","parent":[],"children":[]},{"name":"cgob","content":"The Godel-set of equivalence.","origin":"const class cgob { ‚Üîg }","pretty":"","parent":[],"children":[]},{"name":"diff.cgob.s","content":"","origin":"axiom diff.cgob.s(setvar s0) {\n  |- diffsc(s0, cgob)\n}","pretty":"axiom diff.cgob.s(setvar s0) {\n  ‚ä¢ d(s0, ‚Üîg)\n}","parent":[],"children":[]},{"name":"diff.cgob.c","content":"","origin":"axiom diff.cgob.c(class c0) {\n  |- diffcc(cgob, c0)\n}","pretty":"axiom diff.cgob.c(class c0) {\n  ‚ä¢ d(‚Üîg, c0)\n}","parent":[],"children":[]},{"name":"diff.cgob.w","content":"","origin":"axiom diff.cgob.w(wff w0) {\n  |- diffcw(cgob, w0)\n}","pretty":"axiom diff.cgob.w(wff w0) {\n  ‚ä¢ d(‚Üîg, w0)\n}","parent":[],"children":[]},{"name":"cgoq","content":"The Godel-set of equality.","origin":"const class cgoq { =g }","pretty":"","parent":[],"children":[]},{"name":"diff.cgoq.s","content":"","origin":"axiom diff.cgoq.s(setvar s0) {\n  |- diffsc(s0, cgoq)\n}","pretty":"axiom diff.cgoq.s(setvar s0) {\n  ‚ä¢ d(s0, =g)\n}","parent":[],"children":[]},{"name":"diff.cgoq.c","content":"","origin":"axiom diff.cgoq.c(class c0) {\n  |- diffcc(cgoq, c0)\n}","pretty":"axiom diff.cgoq.c(class c0) {\n  ‚ä¢ d(=g, c0)\n}","parent":[],"children":[]},{"name":"diff.cgoq.w","content":"","origin":"axiom diff.cgoq.w(wff w0) {\n  |- diffcw(cgoq, w0)\n}","pretty":"axiom diff.cgoq.w(wff w0) {\n  ‚ä¢ d(=g, w0)\n}","parent":[],"children":[]},{"name":"cgox","content":"The Godel-set of existential quantification. (Note that this is not a wff.)","origin":"prop class cgox(class c0, class c1) { ‚àÉ(c0, c1) }","pretty":"","parent":[],"children":[]},{"name":"diff.cgox.s","content":"","origin":"axiom diff.cgox.s(setvar sBase, class c0, class c1) {\n  |- diffsc(sBase, cgox(c0, c1))\n  -| diffsc(sBase, c0)\n  -| diffsc(sBase, c1)\n}","pretty":"axiom diff.cgox.s(setvar sBase, class c0, class c1) {\n  ‚ä¢ d(sBase, ‚àÉ(c0, c1))\n  ‚ä£ d(sBase, c0)\n  ‚ä£ d(sBase, c1)\n}","parent":[],"children":[]},{"name":"diff.cgox.c","content":"","origin":"axiom diff.cgox.c(class cBase, class c0, class c1) {\n  |- diffcc(cBase, cgox(c0, c1))\n  -| diffcc(cBase, c0)\n  -| diffcc(cBase, c1)\n}","pretty":"axiom diff.cgox.c(class cBase, class c0, class c1) {\n  ‚ä¢ d(cBase, ‚àÉ(c0, c1))\n  ‚ä£ d(cBase, c0)\n  ‚ä£ d(cBase, c1)\n}","parent":[],"children":[]},{"name":"diff.cgox.w","content":"","origin":"axiom diff.cgox.w(wff wBase, class c0, class c1) {\n  |- diffcw(cgox(c0, c1), wBase)\n  -| diffcw(c0, wBase)\n  -| diffcw(c1, wBase)\n}","pretty":"axiom diff.cgox.w(wff wBase, class c0, class c1) {\n  ‚ä¢ d(‚àÉ(c0, c1), wBase)\n  ‚ä£ d(c0, wBase)\n  ‚ä£ d(c1, wBase)\n}","parent":[],"children":[]},{"name":"df-gonot","content":"Define the Godel-set of negation. Here the argument ` U ` is also a Godel-set corresponding to smaller formulas. Note that this is a _class_ expression, not a wff. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-gonot(class c0) {\n  |- wceq(cgon(c0), co(c0, cgna, c0))\n}","pretty":"axiom df-gonot(class c0) {\n  ‚ä¢ ¬¨(c0)=(c0[|g]c0)\n}","parent":[],"children":[""]},{"name":"df-goan","content":"Define the Godel-set of conjunction. Here the arguments ` U ` and ` V ` are also Godel-sets corresponding to smaller formulas. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goan(setvar s0, setvar s1) {\n  |- wceq(cgoa, cmpo(s0, s1, universe, universe, cgon(co(cv(s0), cgna, cv(s1)))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-goan(setvar s0, setvar s1) {\n  ‚ä¢ ‚àßg =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶ ¬¨((s0[|g]s1)))\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"df-goim","content":"Define the Godel-set of implication. Here the arguments ` U ` and ` V ` are also Godel-sets corresponding to smaller formulas. Note that this is a _class_ expression, not a wff. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goim(setvar s0, setvar s1) {\n  |- wceq(cgoi, cmpo(s0, s1, universe, universe, co(cv(s0), cgna, cgon(cv(s1)))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-goim(setvar s0, setvar s1) {\n  ‚ä¢ ‚Üíg =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(s0[|g]¬¨(s1)))\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"df-goor","content":"Define the Godel-set of disjunction. Here the arguments ` U ` and ` V ` are also Godel-sets corresponding to smaller formulas. Note that this is a _class_ expression, not a wff. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goor(setvar s0, setvar s1) {\n  |- wceq(cgoo, cmpo(s0, s1, universe, universe, co(cgon(cv(s0)), cgoi, cv(s1))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-goor(setvar s0, setvar s1) {\n  ‚ä¢ ‚à®g =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶(¬¨(s0)[‚Üíg]s1))\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"df-gobi","content":"Define the Godel-set of equivalence. Here the arguments ` U ` and ` V ` are also Godel-sets corresponding to smaller formulas. Note that this is a _class_ expression, not a wff. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-gobi(setvar s0, setvar s1) {\n  |- wceq(cgob, cmpo(s0, s1, universe, universe, co(co(cv(s0), cgoi, cv(s1)), cgoa, co(cv(s1), cgoi, cv(s0)))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-gobi(setvar s0, setvar s1) {\n  ‚ä¢ ‚Üîg =(s0 ‚àà ùïå, s1 ‚àà ùïå ‚Ü¶((s0[‚Üíg]s1)[‚àßg](s1[‚Üíg]s0)))\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]},{"name":"df-goeq","content":"Define the Godel-set of equality. Here the arguments ` x = <. N , P >. ` correspond to v_N and v_P , so ` ( (/) =g 1o ) ` actually means v_0 ` = ` v_1 , not ` 0 = 1 ` . Here we use the trick mentioned in ~ ax-ext to introduce equality as a defined notion in terms of ` e.g ` . The expression ` suc ( u u. v ) = ` max ` ( u , v ) + 1 ` here is a convenient way of getting a dummy variable distinct from ` u ` and ` v ` . (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goeq(setvar s0, setvar s1, setvar s2) {\n  |- wceq(cgoq, cmpo(s0, s1, com, com, csb(s2, csuc(cun(cv(s0), cv(s1))), cgol(cv(s2), co(co(cv(s2), cgoe, cv(s0)), cgob, co(cv(s2), cgoe, cv(s1)))))))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n}","pretty":"axiom df-goeq(setvar s0, setvar s1, setvar s2) {\n  ‚ä¢ =g =(s0 ‚àà _om, s1 ‚àà _om ‚Ü¶[suc((s0 ‚ãÉ s1))/ s2]‚àÄ(s2,((s2[e.g]s0)[‚Üîg](s2[e.g]s1))))\n  ‚ä£ d(s0, s1)\n  ‚ä£ d(s0, s2)\n  ‚ä£ d(s1, s2)\n}","parent":[],"children":[""]},{"name":"df-goex","content":"Define the Godel-set of existential quantification. Here ` N e. _om ` corresponds to v_N , and ` U ` represents another formula, and this expression is ` [ E. x ph ] = E.g N U ` where ` x ` is the ` N ` -th variable, ` U = [ ph ] ` is the code for ` ph ` . Note that this is a _class_ expression, not a wff. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-goex(class c0, class c1) {\n  |- wceq(cgox(c0, c1), cgon(cgol(c0, cgon(c1))))\n}","pretty":"axiom df-goex(class c0, class c1) {\n  ‚ä¢ ‚àÉ(c0, c1)= ¬¨(‚àÄ(c0, ¬¨(c1)))\n}","parent":[],"children":[""]},{"name":"df-prv","content":"Define the \"proves\" relation on a set. A wff is true in a model ` M ` if for every valuation ` s e. ( M ^m _om ) ` , the interpretation of the wff using the membership relation on ` M ` is true. (Contributed by Mario Carneiro, 14-Jul-2013.)","origin":"axiom df-prv(setvar s0, setvar s1) {\n  |- wceq(cprv, copab(s0, s1, wceq(co(cv(s0), csate, cv(s1)), co(cv(s0), cmap, com))))\n  -| diffss(s0, s1)\n}","pretty":"axiom df-prv(setvar s0, setvar s1) {\n  ‚ä¢ ‚ä® = { < s0, s1 > |(s0[SatE]s1)=(s0[‚Ü¶]_om)}\n  ‚ä£ d(s0, s1)\n}","parent":[],"children":[""]}]}