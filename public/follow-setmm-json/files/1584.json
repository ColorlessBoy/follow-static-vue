{"index":1584,"title":"Miscellaneous","content":"Miscellaneous proofs.","blocks":[{"name":"5m4e1","content":"Prove that 5 - 4 = 1. (Contributed by David A. Wheeler, 31-Jan-2017.)","origin":"thm 5m4e1() {\n  |- wceq(co(nat5, cmin, nat4), nat1)\n} = {\n  subaddrii(nat5, nat4, nat1)\n  5cn()\n  4cn()\n  ax-1cn()\n  4p1e5()\n}","pretty":"thm 5m4e1() {\n  ⊢ (5[-]4)= 1\n} = {\n  subaddrii(nat5, nat4, nat1)\n  5cn()\n  4cn()\n  ax-1cn()\n  4p1e5()\n}","parent":["subaddrii","5cn","4cn","ax-1cn","4p1e5"],"children":[]},{"name":"2p2ne5","content":"Prove that ` 2 + 2 =/= 5 ` . In George Orwell's \"1984\", Part One, Chapter Seven, the protagonist Winston notes that, \"In the end the Party would announce that two and two made five, and you would have to believe it.\" ~ http://www.sparknotes.com/lit/1984/section4.rhtml . More generally, the phrase ` 2 + 2 = 5 ` has come to represent an obviously false dogma one may be required to believe. See the Wikipedia article for more about this: ~ https://en.wikipedia.org/wiki/2_%2B_2_%3D_5 . Unsurprisingly, we can easily prove that this claim is false. (Contributed by David A. Wheeler, 31-Jan-2017.)","origin":"thm 2p2ne5() {\n  |- wne(co(nat2, caddc, nat2), nat5)\n} = {\n  eqnetri(co(nat2, caddc, nat2), nat5, nat4)\n  2p2e4()\n  ltneii(nat4, nat5)\n  4re()\n  4lt5()\n}","pretty":"thm 2p2ne5() {\n  ⊢ (2[+]2)≠ 5\n} = {\n  eqnetri((2[+]2), nat5, nat4)\n  2p2e4()\n  ltneii(nat4, nat5)\n  4re()\n  4lt5()\n}","parent":["eqnetri","2p2e4","ltneii","4re","4lt5"],"children":[]},{"name":"resolution","content":"Resolution rule. This is the primary inference rule in some automated theorem provers such as prover9. The resolution rule can be traced back to Davis and Putnam (1960). (Contributed by David A. Wheeler, 9-Feb-2017.)","origin":"thm resolution(wff w0, wff w1, wff w2) {\n  |- wi(wo(wa(w0, w1), wa(wn(w0), w2)), wo(w1, w2))\n} = {\n  orim12i(wa(w0, w1), wa(wn(w0), w2), w1, w2)\n  simpr(w0, w1)\n  simpr(wn(w0), w2)\n}","pretty":"thm resolution(wff w0, wff w1, wff w2) {\n  ⊢ (((w0 ∧ w1)∨(¬ w0 ∧ w2))→(w1 ∨ w2))\n} = {\n  orim12i((w0 ∧ w1), (¬ w0 ∧ w2), w1, w2)\n  simpr(w0, w1)\n  simpr(¬ w0, w2)\n}","parent":["orim12i","simpr"],"children":[]},{"name":"testable","content":"In classical logic all wffs are testable, that is, it is always true that ` ( -. ph \\/ -. -. ph ) ` . This is not necessarily true in intuitionistic logic. In intuitionistic logic, if this statement is true for some ` ph ` , then ` ph ` is _testable_. The proof is trivial because it's simply a special case of the law of the excluded middle, which is true in classical logic but not necessarily true in intuitionisic logic. (Contributed by David A. Wheeler, 5-Dec-2018.)","origin":"thm testable(wff w0) {\n  |- wo(wn(w0), wn(wn(w0)))\n} = {\n  exmid(wn(w0))\n}","pretty":"thm testable(wff w0) {\n  ⊢ (¬ w0 ∨ ¬ ¬ w0)\n} = {\n  exmid(¬ w0)\n}","parent":["exmid"],"children":[]}]}