{"index":1121,"title":"Membership predicate, ax-8 and ax-9","content":"","blocks":[{"name":"bj-elequ2g","content":"A form of ~ elequ2 with a universal quantifier. Its converse is ~ ax-ext . (TODO: move to main part, minimize ~ axext4 --- as of 4-Nov-2020, minimizes only ~ axext4 , by 13 bytes; and link to it in the comment of ~ ax-ext .) (Contributed by BJ, 3-Oct-2019.)","origin":"thm bj-elequ2g(setvar s0, setvar s1, setvar s2) {\n  |- wi(wceq(cv(s0), cv(s1)), wal(s2, wb(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1)))))\n  -| diffss(s0, s2)\n  -| diffss(s1, s2)\n} = {\n  alrimiv(s2, wceq(cv(s0), cv(s1)), wb(wcel(cv(s2), cv(s0)), wcel(cv(s2), cv(s1))))\n  elequ2(s0, s1, s2)\n  diff.wceq.s(s2, cv(s0), cv(s1))\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n}","pretty":"thm bj-elequ2g(setvar s0, setvar s1, setvar s2) {\n  ⊢ (s0 = s1 → ∀(s2,(s2 ∈ s0 ↔ s2 ∈ s1)))\n  ⊣ d(s0, s2)\n  ⊣ d(s1, s2)\n} = {\n  alrimiv(s2, s0 = s1, (s2 ∈ s0 ↔ s2 ∈ s1))\n  elequ2(s0, s1, s2)\n  diff.wceq.s(s2, s0, s1)\n  diff.cv.s(s2, s0)\n  diffss.ex(s2, s0)\n  diff.cv.s(s2, s1)\n  diffss.ex(s2, s1)\n}","parent":["alrimiv","elequ2","diff.wceq.s","diff.cv.s","diffss.ex"],"children":["bj-axext4","bj-cleqhyp"]},{"name":"bj-ax89","content":"A theorem which could be used as sole axiom for the non-logical predicate instead of ~ ax-8 and ~ ax-9 . Indeed, it is implied over propositional calculus by the conjunction of ~ ax-8 and ~ ax-9 , as proved here. In the other direction, one can prove ~ ax-8 (respectively ~ ax-9 ) from ~ bj-ax89 by using ~ mpan2 ( respectively ~ mpan ) and ~ equid . (TODO: move to main part.) (Contributed by BJ, 3-Oct-2019.)","origin":"thm bj-ax89(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wi(wa(wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s3))), wi(wcel(cv(s0), cv(s2)), wcel(cv(s1), cv(s3))))\n} = {\n  sylan9(wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s3)), wcel(cv(s0), cv(s2)), wcel(cv(s1), cv(s3)), wcel(cv(s1), cv(s2)))\n  ax8(s0, s1, s2)\n  ax9(s2, s3, s1)\n}","pretty":"thm bj-ax89(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ ((s0 = s1 ∧ s2 = s3)→(s0 ∈ s2 → s1 ∈ s3))\n} = {\n  sylan9(s0 = s1, s2 = s3, s0 ∈ s2, s1 ∈ s3, s1 ∈ s2)\n  ax8(s0, s1, s2)\n  ax9(s2, s3, s1)\n}","parent":["sylan9","ax8","ax9"],"children":[]},{"name":"bj-elequ12","content":"An identity law for the non-logical predicate, which combines ~ elequ1 and ~ elequ2 . For the analogous theorems for class terms, see ~ eleq1 , ~ eleq2 and ~ eleq12 . (TODO: move to main part.) (Contributed by BJ, 29-Sep-2019.)","origin":"thm bj-elequ12(setvar s0, setvar s1, setvar s2, setvar s3) {\n  |- wi(wa(wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s3))), wb(wcel(cv(s0), cv(s2)), wcel(cv(s1), cv(s3))))\n} = {\n  sylan9bb(wceq(cv(s0), cv(s1)), wceq(cv(s2), cv(s3)), wcel(cv(s0), cv(s2)), wcel(cv(s1), cv(s3)), wcel(cv(s1), cv(s2)))\n  elequ1(s0, s1, s2)\n  elequ2(s2, s3, s1)\n}","pretty":"thm bj-elequ12(setvar s0, setvar s1, setvar s2, setvar s3) {\n  ⊢ ((s0 = s1 ∧ s2 = s3)→(s0 ∈ s2 ↔ s1 ∈ s3))\n} = {\n  sylan9bb(s0 = s1, s2 = s3, s0 ∈ s2, s1 ∈ s3, s1 ∈ s2)\n  elequ1(s0, s1, s2)\n  elequ2(s2, s3, s1)\n}","parent":["sylan9bb","elequ1","elequ2"],"children":["bj-ru0"]},{"name":"bj-cleljusti","content":"One direction of ~ cleljust , requiring only ~ ax-1 -- ~ ax-5 and ~ ax8v1 . (Contributed by BJ, 31-Dec-2020.) (Proof modification is discouraged.)","origin":"thm bj-cleljusti(setvar s0, setvar s1, setvar s2) {\n  |- wi(wex(s0, wa(wceq(cv(s0), cv(s1)), wcel(cv(s0), cv(s2)))), wcel(cv(s1), cv(s2)))\n  -| diffss(s0, s1)\n  -| diffss(s0, s2)\n} = {\n  exlimiv(s0, wa(wceq(cv(s0), cv(s1)), wcel(cv(s0), cv(s2))), wcel(cv(s1), cv(s2)))\n  imp(wceq(cv(s0), cv(s1)), wcel(cv(s0), cv(s2)), wcel(cv(s1), cv(s2)))\n  ax8v1(s0, s1, s2)\n  diff.wcel.s(s0, cv(s1), cv(s2))\n  diff.cv.s(s0, s1)\n  diff.cv.s(s0, s2)\n}","pretty":"thm bj-cleljusti(setvar s0, setvar s1, setvar s2) {\n  ⊢ (∃(s0,(s0 = s1 ∧ s0 ∈ s2))→ s1 ∈ s2)\n  ⊣ d(s0, s1)\n  ⊣ d(s0, s2)\n} = {\n  exlimiv(s0, (s0 = s1 ∧ s0 ∈ s2), s1 ∈ s2)\n  imp(s0 = s1, s0 ∈ s2, s1 ∈ s2)\n  ax8v1(s0, s1, s2)\n  diff.wcel.s(s0, s1, s2)\n  diff.cv.s(s0, s1)\n  diff.cv.s(s0, s2)\n}","parent":["exlimiv","imp","ax8v1","diff.wcel.s","diff.cv.s"],"children":[]}]}