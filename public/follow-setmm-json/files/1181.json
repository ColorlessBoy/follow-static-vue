{"index":1181,"title":"Mathbox for Wolf Lammen","content":"","blocks":[{"name":"wl-section-prop","content":"Intuitionistic logic is now developed separately, so we need not first focus on intuitionally valid axioms ~ ax-1 and ~ ax-2 any longer. Alternatively, I start from Jan Lukasiewicz's axiom system here, i.e. ~ ax-mp , ~ ax-luk1 , ~ ax-luk2 and ~ ax-luk3 . I rather copy this system than use ~ luk-1 to ~ luk-3 , since the latter are theorems, while we need axioms here. (Contributed by Wolf Lammen, 23-Feb-2018.) (New usage is discouraged.) (Proof modification is discouraged.)","origin":"thm wl-section-prop(wff w0) {\n  |- w0\n  -| w0\n} = {\n  idi(w0)\n}","pretty":"thm wl-section-prop(wff w0) {\n  ⊢ w0\n  ⊣ w0\n} = {\n  idi(w0)\n}","parent":["idi"],"children":[]},{"name":"ax-luk1","content":"1 of 3 axioms for propositional calculus due to Lukasiewicz. Copy of ~ luk-1 and ~ imim1 , but introduced as an axiom. It focuses on a basic property of a valid implication, namely that the consequent has to be true whenever the antecedent is. So if ` ph ` and ` ps ` are somehow parametrized expressions, then ` ph -> ps ` states that ` ph ` strengthen ` ps ` , in that ` ph ` holds only for a (often proper) subset of those parameters making ` ps ` true. We easily accept, that when ` ps ` is stronger than ` ch ` and, at the same time ` ph ` is stronger than ` ps ` , then ` ph ` must be stronger than ` ch ` . This transitivity is expressed in this axiom. A particular result of this strengthening property comes into play if the antecedent holds unconditionally. Then the consequent must hold unconditionally as well. This specialization is the foundational idea behind logical conclusion. Such conclusion is best expressed in so-called immediate versions of this axiom like ~ imim1i or ~ syl . Note that these forms are weaker replacements (i.e. just frequent specialization) of the closed form presented here, hence a mere convenience. We can identify in this axiom up to three antecedents, followed by a consequent. The number of antecedents is not really fixed; the fewer we are willing to \"see\", the more complex the consequent grows. On the other side, since ` ch ` is a variable capable of assuming an implication itself, we might find even more antecedents after some substitution of ` ch ` . This shows that the ideas of antecedent and consequent in expressions like this depends on, and can adapt to, our current interpretation of the whole expression. In this axiom, up to two antecedents happen to be of complex nature themselves, i.e. are an embedded implication. Logically, this axiom is a compact notion of simpler expressions, which I will later coin implication chains. Herein all antecedents and the consequent appear as simple variables, or their negation. Any propositional expression is equivalent to a set of such chains. This axiom, for example, is dissected into following chains, from which it can be recovered losslessly: ` ( ps -> ( ch -> ( ph -> ch ) ) ) ` ; ` ( -. ph -> ( ch -> ( ph -> ch ) ) ) ` ; ` ( ps -> ( -. ps -> ( ph -> ch ) ) ) ` ; ` ( -. ph -> ( -. ps -> ( ph -> ch ) ) ) ` . (Contributed by Wolf Lammen, 17-Dec-2018.) (New usage is discouraged.)","origin":"axiom ax-luk1(wff w0, wff w1, wff w2) {\n  |- wi(wi(w0, w1), wi(wi(w1, w2), wi(w0, w2)))\n}","pretty":"axiom ax-luk1(wff w0, wff w1, wff w2) {\n  ⊢ ((w0 → w1)→((w1 → w2)→(w0 → w2)))\n}","parent":[],"children":["wl-luk-imim1i","wl-luk-imim2i","wl-luk-ax3","wl-luk-pm2.27","wl-luk-imim2"]},{"name":"ax-luk2","content":"2 of 3 axioms for propositional calculus due to Lukasiewicz. Copy of ~ luk-2 or ~ pm2.18 , but introduced as an axiom. The core idea behind this axiom is, that if something can be implied from both an antecedent, and separately from its negation, then the antecedent is irrelevant to the consequent, and can safely be dropped. This is perhaps better seen from the following slightly extended version (related to ~ pm2.65 ): ` ( ( ph -> ph ) -> ( ( -. ph -> ph ) -> ph ) ) ` . (Contributed by Wolf Lammen, 17-Dec-2018.) (New usage is discouraged.)","origin":"axiom ax-luk2(wff w0) {\n  |- wi(wi(wn(w0), w0), w0)\n}","pretty":"axiom ax-luk2(wff w0) {\n  ⊢ ((¬ w0 → w0)→ w0)\n}","parent":[],"children":["wl-luk-pm2.18d","wl-luk-ax3","wl-luk-pm2.27","wl-luk-id"]},{"name":"ax-luk3","content":"3 of 3 axioms for propositional calculus due to Lukasiewicz. Copy of ~ luk-3 and ~ pm2.24 , but introduced as an axiom. One might think that the similar ~ pm2.21 ` ( -. ph -> ( ph -> ps ) ) ` is a valid replacement for this axiom. But this is not true, ~ ax-3 is not derivable from this modification. This can be shown by designing carefully operators ` -. ` and ` -> ` on a finite set of primitive statements. In propositional logic such statements are ` T. ` and ` F. ` , but we can assume more and other primitives in our universe of statements. So we denote our primitive statements as phi0 , phi1 and phi2. The actual meaning of the statements are not important in this context, it rather counts how they behave under our operations ` -. ` and ` -> ` , and which of them we assume to hold unconditionally (phi1, phi2). For our disproving model, I give that information in tabular form below. The interested reader may check per hand, that all possible interpretations of ~ ax-mp , ~ ax-luk1 , ~ ax-luk2 and ~ pm2.21 result in phi1 or phi2, meaning they always hold. But for ~ wl-luk-ax3 we can find a counter example resulting in phi0, not a statement always true. The verification of a particular set of axioms in a given model is tedious and error prone, so I wrote a computer program, first checking this for me, and second, hunting for a counter example. Here is the result, after 9165 fruitlessly computer generated models: <HTML> <br><br> ax-3 fails for phi2, phi2<br> number of statements: 3<br> always true phi1 phi2 <br><br> Negation is defined as<br> ---------------------------------------------------------------------- <table border=\"1\"> <tr><td>-. phi0</td><td>-. phi1</td><td>-. phi2</td></tr> <tr><td>phi1</td><td>phi0</td><td>phi1</td></tr></table> <br> Implication is defined as<br> ---------------------------------------------------------------------- <table border=1> <tr><td>p->q</td><td>q: phi0</td><td>q: phi1</td><td>q: phi2</td></tr> <tr><td>p: phi0</td><td>phi1</td><td>phi1</td><td>phi1</td></tr> <tr><td>p: phi1</td><td>phi0</td><td>phi1</td><td>phi1</td></tr> <tr><td>p: phi2</td><td>phi0</td><td>phi0</td><td>phi0</td></tr> </table><br></HTML> (Contributed by Wolf Lammen, 17-Dec-2018.) (New usage is discouraged.)","origin":"axiom ax-luk3(wff w0, wff w1) {\n  |- wi(w0, wi(wn(w0), w1))\n}","pretty":"axiom ax-luk3(wff w0, wff w1) {\n  ⊢ (w0 →(¬ w0 → w1))\n}","parent":[],"children":["wl-luk-con4i","wl-luk-pm2.24i","wl-luk-ax3","wl-luk-ax1","wl-luk-pm2.21","wl-luk-id"]}]}