{"index":682,"title":"Vertices and indexed edges","content":"The key concepts in graph theory are _vertices_ and _edges_. In general, a graph \"consists\" (at least) of two sets: the set of vertices and the set of edges. The edges \"connect\" vertices. The meaning of \"connect\" is different for different kinds of graphs (directed/undirected graphs, hyper-/pseudo-/ multi-/simple graphs, etc.). The simplest way to represent a graph (of any kind) is to define a graph as \"an ordered pair of disjoint sets (V, E)\" (see section I.1 in [Bollobas] p. 1), or in the notation of Metamath: ` <. V , E >. `. Another way is to regard a graph as a mathematical structure, which consistes at least of a set (of vertices) and a relation between the vertices (edge function), but which can be enhanced by additional features (see Wikipedia \"Mathematical structure\", 24-Sep-2020, ~ https://en.wikipedia.org/wiki/Mathematical_structure ): \"In mathematics, a _structure_ is a set endowed with some additional features on the set (e.g., operation, relation, metric, topology). Often, the additional features are attached or related to the set, so as to provide it with some additional meaning or significance.\". Such structures are provided as \"extensible structures\" in Metamath, see ~ df-struct . To allow for expressing and proving most of the theorems for graphs independently from their representation, the functions ` Vtx ` and ` iEdg ` are defined (see ~ df-vtx and ~ df-iedg ), which provide the vertices resp. (indexed) edges of an arbitrary class ` G ` which represents a graph: ` ( Vtx `` G ) ` resp. ` ( iEdg `` G ) `. In literature, these functions are often denoted also by \"V\" and \"E\", see section I.1 in [Bollobas] p. 1 (\"If G is a graph, then V = V(G) is the vertex set of G, and E = E(G) is the edge set.\") or section 1.1 in [Diestel] p. 2 (\"The vertex set of graph G is referred to as V(G), its edge set as E(G).\"). Instead of providing edges themselves, ` iEdg ` is intended to provide a function as mapping of \"indices\" (the domain of the function) to the edges (therefore called \"set of indexed edges\"), which allows for hyper-/pseudo-/multigraphs with more than one edge between two (or more) vertices. For example, e_1 = e(1) = { a, b } and e_2 = e(2) = { a, b } are two _different_ edges connecting the same two vertices a and b (in a pseudograph). In section 1.10 of [Diestel] p. 28, the edge function is defined differently: as \"map E -> V u. [[V]^2 assigning to every edge either one or two vertices, its _end_.\". Here, the domain is the set of abstract edges: for two different edges e_1 and e_2 connecting the same two vertices a and b, we would have e(e_1) = e(e_2) = { a, b }. Since the set of abstract edges can be chosen as index set, these definitions are equivalent. The result of these functions are as expected: for a graph represented as ordered pair ( ` G e. ( _V X. _V ) ` ), the set of vertices is ` ( Vtx `` G ) = ( 1st `` G ) ` (see ~ opvtxval ) and the set of (indexed) edges is ` ( iEdg `` G ) = ( 2nd `` G ) ` (see ~ opiedgval ), or if ` G ` is given as ordered pair ` G = <. V , E >. `, the set of vertices is ` ( Vtx `` G ) = V ` (see ~ opvtxfv ) and the set of (indexed) edges is ` ( iEdg `` G ) = E ` (see ~ opiedgfv ). And for a graph represented as extensible structure (` G Struct <. ( Base `` ndx ) , ( .ef `` ndx ) >. `), the set of vertices is ` ( Vtx `` G ) = ( Base `` G ) ` (see ~ funvtxval ) and the set of (indexed) edges is ` ( iEdg `` G ) = ( .ef `` G ) ` (see ~ funiedgval ), or if ` G ` is given in its simplest form as extensible structure with two slots (` G = { <. ( Base `` ndx ) , V >. , <. ( .ef `` ndx ) , E >. } `), the set of vertices is ` ( Vtx `` G ) = V ` (see ~ struct2grvtx ) and the set of (indexed) edges is ` ( iEdg `` G ) = E ` (see ~ struct2griedg ). These two representations are convertible, see ~ graop and ~ grastruct : If ` G ` is a graph (for example ` G = <. V , E >. `), then ` H = { <. ( Base `` ndx ) , ( Vtx `` G ) >. , ` ` <. ( .ef `` ndx ) , ( iEdg `` G ) >. } ` represents essentially the same graph, and if ` G ` is a graph (for example ` G = { <. ( Base `` ndx ) , V >. , <. ( .ef `` ndx ) , E >. } `), then ` H = <. ( Vtx `` G ) , ( iEdg `` G ) >. ` represents essentially the same graph. In both cases, ` ( Vtx `` G ) = ( Vtx `` H ) ` and ` ( iEdg `` G ) = ( iEdg `` H ) ` hold. Theorems ~ gropd and ~ gropeld show that if any representation of a graph with vertices ` V ` and edges ` E ` has a certain property, then the ordered pair ` <. V , E >. ` of the set of vertices and the set of edges (which is such a representation of a graph with vertices ` V ` and edges ` E `) has this property. Analogously, theorems ~ grstructd and ~ grstructeld show that if any representation of a graph with vertices ` V ` and edges ` E ` has a certain property, then any extensible structure with base set ` V ` and value ` E ` in the slot for edge functions (which is also such a representation of a graph with vertices ` V ` and edges ` E `) has this property. Besides the usual way to represent graphs without edges (consisting of unconnected vertices only), which would be ` G = <. V , (/) >. ` or ` G = { <. ( Base `` ndx ) , V >. , <. ( .ef `` ndx ) , (/) >. } `, a structure without a slot for edges can be used: ` G = { <. ( Base `` ndx ) , V >. } `, see ~ snstrvtxval and ~ snstriedgval . Analogously, the empty set ` (/) ` can be used to represent the null graph, see ~ vtxval0 and ~ iedgval0 , which can also be represented by ` G = <. (/) , (/) >. ` or ` G = { <. ( Base `` ndx ) , (/) >. , <. ( .ef `` ndx ) , (/) >. } `. Even proper classes can be used to represent the null graph, see ~ vtxvalprc and ~ iedgvalprc . Other classes should not be used to represent graphs, because there could be a degenerate behavior of the vertex set and (indexed) edge functions, see ~ vtxvalsnop resp. ~ iedgvalsnop , and ~ vtxval3sn resp. ~ iedgval3sn . Avoid directly depending on this detail so that theorems will not depend on the Kuratowski construction of ordered pairs, see also the comment for ~ df-op .","blocks":[]}